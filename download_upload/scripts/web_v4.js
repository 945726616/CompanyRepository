(function(window, document){
    var s_div                   = "div",
        s_setAttribute          = "setAttribute",
        s_datepicker            = "datepicker",
        s_datetimepicker        = "datetimepicker",
        s_mCustomScrollbar      = "mCustomScrollbar",
        s_tzSelect              = "tzSelect",
        s_jNice                 = "jNice",
        s_style                 = "style",
        s_cssText               = "cssText",
        s_innerHTML             = "innerHTML",
        s_width                 = "width",
        s_height                = "height",
        s_right                 = "right",
        s_offsetWidth           = "offsetWidth",
        s_offsetHeight          = "offsetHeight",
        s_removeChild           = "removeChild",

        g_web                     = null,
        g_page                    = null,
        g_j_page                  = null,

        g_avc_conf = { filter: "original", filterHorLuma: "optimized", filterVerLumaEdge: "optimized", getBoundaryStrengthsA: "optimized" },
        g_avc=null,

        mmd5 = window.mmd5,
        mcloud_agent		= window.mcloud_agent;
        /* ----------------mining.lang.strings.begin-----do-not-change-this-line------------------- */
    /* 
    Localizable.strings
    Created by mining code-gen base Mining Frameworks.
    More about : http://www.shenzhenmining.com
    */
    var 
        mcs_name,
        CFBundleDisplayName,
        mcs_nick,
        mcs_old_nick,
        mcs_linked,
        mcs_sign_in,
        mcs_back,
        mcs_add,
        mcs_add_device,
        mcs_device_existed,
        mcs_cancel,
        mcs_exit,
        mcs_remember_password,
        mcs_password_remembered,
        mcs_sign_ining,
        mcs_cloud_server,
        mcs_input_device_id,
        mcs_input_username,
        mcs_input_email_addr,
        mcs_email_address,
        mcs_email,
        mcs_binding,
        mcs_binding_email,
        mcs_binding_send_prompt,
        mcs_binding_email_prompt,
        mcs_input_password,
        mcs_access_server_failed,
        mcs_device_offline,
        mcs_invalid_password,
        mcs_invalid_dev,
        mcs_login_faided,
        mcs_invalid_qrcode,
        mcs_please_input_username,
        mcs_please_input_password,
        mcs_qrcode_scan_hint,
        mcs_device_list_empty,
        mcs_record_list_is_empty,
        mcs_password_expired,
        mcs_set_video_size,
        mcs_hd_1280x720,
        mcs_auto,
        mcs_normal_640x360,
        mcs_half_320x180,
        mcs_small_160x90,
        mcs_play,
        mcs_settings,
        mcs_messages,
        mcs_alarm,
        mcs_delete,
        mcs_delete_camera,
        mcs_apply,
        mcs_speed,
        mcs_others,
        mcs_audio,
        mcs_speaker,
        mcs_mic,
        mcs_power_frequency,
        mcs_online_upgrade,
        mcs_restore_the_factory_settings,
        mcs_restore,
        mcs_restore_camera,
        mcs_start_upgrade,
        mcs_system,
        mcs_system_settings,
        mcs_online,
        mcs_offline,
        mcs_query,
        mcs_begin_time,
        mcs_end_time,
        mcs_mode,
        mcs_opened,
        mcs_high,
        mcs_middle,
        mcs_low,
        mcs_io_alert_input,
        mcs_io_alert_output,
        mcs_normally_open,
        mcs_normally_close,
        mcs_motion_detection_sensitivity,
        mcs_daytime,
        mcs_night,
        mcs_sdcord,
        mcs_storage_device,
        mcs_set_mask,
        mcs_status,
        mcs_capacity,
        mcs_usage,
        mcs_format,
        mcs_repair,
        mcs_formating,
        mcs_repairing,
        mcs_mounted,
        mcs_unmounted,
        mcs_mount,
        mcs_unmount,
        mcs_ethernet,
        mcs_wifi,
        mcs_enabled,
        mcs_mac_address,
        mcs_network_status,
        mcs_wifi_mode,
        mcs_client,
        mcs_ap,
        mcs_start_address,
        mcs_end_address,
        mcs_gateway,
        mcs_select_network,
        mcs_dhcp_ip,
        mcs_dhcp_dns,
        mcs_ip_address,
        mcs_network_mask,
        mcs_input_secondary_dns,
        mcs_secondary_dns,
        mcs_input_dns,
        mcs_input_alternate_dns,
        mcs_input_ip,
        mcs_input_gateway,
        mcs_input_network_mask,
        mcs_wifi_list,
        mcs_display_date,
        mcs_date_format,
        mcs_display_time,
        mcs_time_format,
        mcs_24_hour,
        mcs_12_hour,
        mcs_display_weeks,
        mcs_date_time,
        mcs_set_time,
        mcs_set_week,
        mcs_stream,
        mcs_encode,
        mcs_resolution,
        mcs_frame_fate,
        mcs_maximum_bitrate,
        mcs_minimum_bitrate,
        mcs_i_frame_interval,
        mcs_video,
        mcs_sampling_rate,
        mcs_nickname,
        mcs_old_password,
        mcs_confirm_password,
        mcs_modify_password,
        mcs_password,
        mcs_admin_password,
        mcs_guest_password,
        mcs_product_info,
        mcs_software_version,
        mcs_device_id,
        mcs_operation,
        mcs_record,
        mcs_record_2,
        mcs_upgrade_now,
        mcs_upgrading,
        mcs_already_latest_version,
        mcs_sensitivty,
        mcs_user_defined,
        mcs_time,
        mcs_date,
        mcs_finish,
        mcs_fail,
        mcs_motion,
        mcs_start,
        mcs_talk,
        mcs_password_input_inconsistent,
        mcs_input_6_to_20_litters,
        mcs_user_letter_range_hint,
        mcs_password_range_hint,
        mcs_begin_with_the_letters,
        mcs_sign_up,
        mcs_sign_up_failed,
        mcs_successful_sign_up,
        mcs_are_you_sure_delete,
        mcs_failed_to_set_the,
        mcs_set_successfully,
        mcs_downloading,
        mcs_wrote,
        mcs_visit_again_later,
        mcs_restart_failed,
        mcs_upgrade_failed,
        mcs_connnected,
        mcs_connnected_to,
        mcs_not_select,
        mcs_message_list,
        mcs_saved_password,
        mcs_alert,
        mcs_no_record,
        mcs_new_about,
        mcs_device,
        mcs_config,
        mcs_change_password_failed,
        mcs_do_you_want_restart,
        mcs_do_you_want_restore,
        mcs_do_you_want_upgrade,
        mcs_load_end,
        mcs_loading,
        mcs_down_refresh,
        mcs_release_refresh,
        mcs_refreshing,
        mcs_release_then_loading_data_hint,
        mcs_pull_refresh_hint,
        mcs_restarting,
        mcs_upgraded_time,
        mcs_done,
        mcs_playback,
        mcs_i_o_alarm,
        mcs_alarm_action,
        mcs_alarm_sources,
        mcs_io_output,
        mcs_snapshots,
        mcs_snapshot,
        mcs_snapshot_interval,
        mcs_pre_record_length,
        mcs_nick_range_hint,
        mcs_save,
        mcs_close,
        mcs_snapshoting,
        mcs_snapshot_failed,
        mcs_record_failed,
        mcs_saved_successfully,
        mcs_save_failed,
        mcs_restart_to_take_effect,
        mcs_please_allow_access_album,
        mcs_ios_privacy_setting_for_photo_prompt,
        mcs_please_allow_access_camera,
        mcs_ios_privacy_setting_for_camera_prompt,
        mcs_busy_when_write,
        mcs_unknown_error,
        mcs_i_know,
        mcs_segment,
        mcs_please_relogin,
        mcs_change_password_succeed,
        mcs_upgrade_to_ver,
        mcs_restore_failed,
        mcs_please_restart,
        mcs_keep_network_settings,
        mcs_not_connected,
        mcs_sdcard_not_ready,
        mcs_device_not_exist,
        mcs_disable,
        mcs_to_determine_the,
        mcs_alert_on,
        mcs_alert_off,
        mcs_alert_onoff,
        mcs_monday,
        mcs_tuesday,
        mcs_wednesday,
        mcs_thursday,
        mcs_friday,
        mcs_saturday,
        mcs_sunday,
        mcs_mon,
        mcs_tue,
        mcs_wed,
        mcs_thu,
        mcs_fri,
        mcs_sat,
        mcs_sun,
        mcs_scheduled_recording,
        mcs_schedule,
        mcs_scheduled_recording_status,
        mcs_folding,
        mcs_unfolding,
        mcs_end_time_should_lt_begin,
        mcs_recording,
        mcs_prerecord_interval_range_hint,
        mcs_snapshot_interval_range_hint,
        mcs_not_ready,
        mcs_availablesize,
        mcs_reboot,
        mcs_alerter,
        mcs_pir,
        mcs_isp,
        mcs_encoder,
        mcs_ok,
        mcs_fault,
        mcs_sensor_status,
        mcs_about,
        mcs_reset_now,
        mcs_reset_later,
        mcs_prompt,
        mcs_select,
        mcs_available_netword,
        mcs_request_send,
        mcs_blank_device_id,
        mcs_blank_username,
        mcs_blank_password,
        mcs_exist_user,
        mcs_invalid_user,
        mcs_invalid_email_addr,
        mcs_system_err,
        mcs_exceed_device,
        mcs_continue,
        mcs_prompt_exit,
        mcs_device_list,
        mcs_no_sdcard,
        mcs_no_hard_disk,
        mcs_show_more,
        mcs_shotsnop_exists,
        mcs_input_nick,
        mcs_nick_not_empty,
        mcs_input_new_pass,
        mcs_input_new_pass_again,
        mcs_new_password,
        mcs_modify_network_prompt,
        mcs_wifi_disable_prompt,
        mcs_eth_disable_prompt,
        mcs_ip,
        mcs_auto_obtain,
        mcs_manually_set,
        mcs_dns,
        mcs_dns_prim,
        mcs_client_mode,
        mcs_adhoc_mode,
        mcs_connect_fail,
        mcs_dhcp_server,
        mcs_display_text,
        mcs_repair_prompt,
        mcs_format_prompt,
        mcs_mount_prompt,
        mcs_umount_prompt,
        mcs_sdcard_reset,
        mcs_sdcard_repairing,
        mcs_sdcard_formating,
        mcs_sdcard_umount,
        mcs_valid,
        mcs_io,
        mcs_input,
        mcs_outinput,
        mcs_prompt_alert_on,
        mcs_auto_sync_date_time,
        mcs_alarm_record,
        mcs_username,
        mcs_re_enter_the_password,
        mcs_remember_me,
        mcs_home,
        mcs_install_the_plug,
        mcs_install_the_video_plug,
        mcs_install_now,
        mcs_temporarily_installed_use_ordinary_video,
        mcs_brightness,
        mcs_contrast,
        mcs_color_saturation,
        mcs_sharpness,
        mcs_duration,
        mcs_index,
        mcs_remark,
        mcs_media_stream,
        mcs_server,
        mcs_media_transfer,
        mcs_osd,
        mcs_manufacturer,
        mcs_model,
        mcs_plugin_version,
        mcs_network_interface,
        mcs_transfer_protocol,
        mcs_year,
        mcs_month,
        mcs_day,
        mcs_hour,
        mcs_minute,
        mcs_second,
        mcs_millisec,
        mcs_ntp,
        mcs_upload_upgrade,
        mcs_stop,
        mcs_info_rewind,
        mcs_fast_forward,
        mcs_previous_frame,
        mcs_next_frame,
        mcs_record_audio,
        mcs_week,
        mcs_all,
        mcs_id,
        mcs_select_all,
        mcs_call,
        mcs_activation,
        mcs_caption,
        mcs_alarm_device,
        mcs_not_installed,
        mcs_join_us_now,
        mcs_reconnect_please_wait,
        mcs_erasing,
        mcs_writing,
        mcs_dhcp,
        mcs_new_version,
        mcs_equipment_flip,
        mcs_device_status,
        mcs_audio_setting,
        mcs_nick_modify,
        mcs_ready,
        mcs_full,
        mcs_connecting,
        mcs_message_buffering,
        mcs_upgrade_finish,
        mcs_image,
        mcs_bar,
        mcs_init,
        mcs_confirm_new_password,
        mcs_continue_switch_wireless_network,
        mcs_restore_factory_settings_prompt,
        mcs_username_does_not_exis,
        mcs_username_already_exists,
        mcs_successful_whether_login,
        mcs_username_demand,
        mcs_the_password_is_empty,
        mcs_password_demand,
        mcs_password_empty,
        mcs_two_password_input_inconsistent,
        mcs_the_user_name_is_empty,
        mcs_upgrade_to_the_latest_version,
        mcs_subnet_mask_wrong_format,
        mcs_upgrade_successful_restart_to_take_effect,
        mcs_need_to_restart_the_camera_to_take_effect,
        mcs_not_allowed_close_two_network_cards,
        mcs_modified_successfully,
        mcs_connection_successfully,
        mcs_connection_is_interrupted,
        mcs_devices_in_the_account_overrun,
        mcs_format_error,
        mcs_change,
        mcs_refresh,
        mcs_connect,
        mcs_upgrade,
        mcs_activate,
        mcs_filter,
        mcs_reset,
        mcs_prompt_alert_off,
        mcs_invalid_server,
        mcs_upgrade_prompt,
        mcs_restart_prompt,
        mcs_repeat,
        mcs_scheduled_one,
        mcs_scheduled_two,
        mcs_scheduled_three,
        mcs_scheduled_four,
        mcs_more,
        mcs_leave,
        mcs_qrcode_scan,
        mcs_inserted,
        mcs_removed,
        mcs_upgrade_init,
        mcs_upgrade_download,
        mcs_check,
        mcs_audio_encoder_config,
        mcs_video_codec,
        mcs_download,
        mcs_client_download,
        mcs_for_more_clarity_smooth_video_experience,
        mcs_network,
        mcs_mobile_client_download,
        mcs_readonly,
        mcs_please_exit_and_relogin,
        mcs_add_device_failed,
        mcs_set_password,
        mcs_7x24_hours,
        mcs_motion_alert,
        mcs_mtalt,
        mcs_io_alert,
        mcs_ioalt,
        mcs_time_zone,
        mcs_select_time,
        mcs_now,
        mcs_mipc_have_alert_notification,
        mcs_notification_center,
        mcs_sound,
        mcs_vibration,
        mcs_clear_cache,
        mcs_clear_cache_hint,
        mcs_successfully_cleared_cache,
        mcs_app_except_exit_hint,
        mcs_rate_us,
        mcs_password_too_simple_hint,
        mcs_check_for_new_version,
        mcs_contact_us,
        mcs_buffer_time,
        mcs_default,
        mcs_alarmed_devices,
        mcs_aec,
        mcs_permission_denied,
        mcs_full_screen,
        mcs_forgot_your_password,
        mcs_your_email,
        mcs_sign_up_confirmation,
        mcs_recovery_prompt,
        mcs_password_reset_confirmation,
        mcs_recovery_fail_no_mail,
        mcs_recovery_fail_invalid_link,
        mcs_recovery_ok_login,
        mcs_active_ok_login,
        mcs_active_fail_invalid_link,
        mcs_login_fail_inactive,
        mcs_sign_up_again,
        mcs_press_start_talk,
        mcs_release_stop_talk,
        mcs_delete_device,
        mcs_success_removed_equipment,
        mcs_remove_equipment_failure,
        mcs_device_busy,
        mcs_keep_testing,
        mcs_notify_tone,
        mcs_float_video,
        mcs_float_position,
        mcs_video_resolution,
        mcs_float_resolution,
        mcs_top_left,
        mcs_top_right,
        mcs_bottom_left,
        mcs_bottom_right,
        mcs_action_next,
        mcs_action_cancel,
        mcs_action_retry,
        mcs_action_add,
        mcs_action_apply,
        mcs_action_config,
        mcs_action_skip,
        mcs_action_ok,
        mcs_action_add_device,
        mcs_action_modify_password,
        mcs_action_config_wifi,
        mcs_state_connect_device,
        mcs_state_connect_device_fail,
        mcs_state_wait_device_online,
        mcs_state_device_online,
        mcs_state_success,
        mcs_state_add_device_success,
        mcs_state_add_device_fail,
        mcs_state_modify_pass_success,
        mcs_state_modify_pass_fail,
        mcs_state_config_wifi_success,
        mcs_state_config_wifi_fail,
        mcs_state_connecting_to,
        mcs_network_connect_type,
        mcs_prompt_modify_passwd,
        mcs_prompt_config_wifi,
        mcs_step1_check_connect,
        mcs_first_step_ethernet_connect,
        mcs_step2_check_connect,
        mcs_second_step_ethernet_connect,
        mcs_hint_check_network,
        mcs_the_end,
        mcs_hint_password_expired,
        mcs_hint_remove_ethernet,
        mcs_ip_format_incorrect,
        mcs_login_sucess,
        mcs_donot_remind,
        mcs_clear_cache_signout_hint,
        mcs_devlist_adddev_hint,
        mcs_devlist_menu_hint,
        mcs_update_failed,
        mcs_new_small_160x90,
        mcs_new_half_320x180,
        mcs_new_normal_640x360,
        mcs_new_hd_1280x720,
        mcs_local,
        mcs_set_npapi,
        mcs_set_win32k,
        mcs_restart_browser,
        mcs_download_location,
        mcs_Networking_mode,
        mcs_wifi_intelligent_configuration,
        mcs_ethernet_configuration,
        mcs_wifi_connect,
        mcs_hard_disk,
        mcs_wifi_is_connection,
        mcs_wifi_intelligent_configuration_setup_ailure,
        mcs_box_list,
        mcs_repair_disk_prompt,
        mcs_format_disk_prompt,
        mcs_scheduled_alerting,
        mcs_scheduled_alerting_one,
        mcs_scheduled_alerting_two,
        mcs_scheduled_alerting_three,
        mcs_scheduled_alerting_four,
        mcs_wifi_config_cancle,
        mcs_wifi_config_prepare,
        mcs_wifi_config_first,
        mcs_wifi_config_second,
        mcs_wifi_config_third,
        mcs_wifi_config_success,
        mcs_wifi_config_failure,
        mcs_failure_prompt,
        mcs_display_password,
        mcs_action_smart_config_wifi,
        mcs_wifi_invalid,
        mcs_phone_not_connect_wifi,
        mcs_prompt_check_connection,
        mcs_wifi_cfg_ready,
        mcs_reset_complete,
        mcs_how_to_restore_factory_settings,
        mcs_forgetpass_action_wizard,
        mcs_prompt_check_device_connection,
        mcs_input_wifi_name,
        mcs_action_previous,
        mcs_io_alert_range_hint,
        mcs_io_alert_time,
        mcs_smart,
        mcs_plan,
        mcs_mute,
        mcs_wind_speed,
        mcs_one,
        mcs_two,
        mcs_three,
        mcs_purify_mode,
        mcs_video_list,
        mcs_wifi_cfg_restore_factory_settings,
        mcs_mask_settings,
        mcs_notification_settings,
        mcs_alarm_settings,
        mcs_motion_detection,
        mcs_io_alarm,
        mcs_connect_status,
        mcs_motion_notification,
        mcs_device_connected,
        mcs_start_spray,
        mcs_available_network,
        mcs_select_wifi_wizard,
        mcs_input_wifi_password,
        mcs_device_admin_password,
        mcs_device_guest_password,
        mcs_user_admin_password,
        mcs_user_guest_password,
        mcs_save_network_set,
        mcs_nickname_not_set,
        mcs_current_wifi,
        mcs_current_password_strength,
        mcs_new_password_strength,
        mcs_needs_to_open_the_DHCP,
        mcs_picture,
        mcs_quality,
        mcs_size,
        mcs_guest_login,
        mcs_audio_and_video,
        mcs_volume,
        mcs_smooth,
        mcs_clear,
        mcs_handsfree,
        mcs_headphone,
        mcs_my,
        mcs_customer_service,
        mcs_firefox_flash_uninstall,
        mcs_plug,
        mcs_plug_load,
        mcs_plug_load_refuse,
        mcs_plug_load_auto,
        mcs_option,
        mcs_option_ok,
        mcs_voice_call_fails,
        mcs_umounted_prompt,
        mcs_signup_prompt,
        mcs_wifi_connect_sucess_prompt,
        mcs_manual_input_prompt,
        mcs_qrscan_prompt,
        mcs_select_network_style,
        mcs_push,
        mcs_connect_power_prompt,
        mcs_fail_microphone,
        mcs_microphone_prompt,
        mcs_super_clear,
        mcs_high_clear,
        mcs_standard_clear,
        mcs_fluent_clear,
        mcs_deleting,
        mcs_event,
        mcs_one_hour,
        mcs_half_hour,
        mcs_five_min,
        mcs_category,
        mcs_time_length,
        mcs_new,
        mcs_week_setting_prompt,
        mcs_time_setting_prompt,
        mcs_today,
        mcs_wifi_config_prepare,
        mcs_wifi_password,
        mcs_register_prompt,
        mcs_click_login,
        mcs_not_login_prompt,
        mcs_product_presentation,
        mcs_help_feedback,
        mcs_help_information,
        mcs_feedback,
        mcs_connect_wifi_prompt,
        mcs_cloud,
        mcs_demo,
        mcs_shortest,
        mcs_no_history,
        mcs_download_pc_client,
        mcs_accounts_bind_email_exist,
        mcs_accounts_bind_email_busy;
    function mcs_init_langs(lang)
    {
        if(lang == "en")
        {
            mcs_name                    = "Name";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Name";
            mcs_old_nick                = "Nick";
            mcs_linked                  = "Linked";
            mcs_sign_in                 = "Sign in";
            mcs_back                    = "Back";
            mcs_add                     = "Add";
            mcs_add_device              = "Add device";
            mcs_device_existed          = "Device already exists.";
            mcs_cancel                  = "Cancel";
            mcs_exit                    = "Exit";
            mcs_remember_password       = "Remember password";
            mcs_password_remembered     = "Password remembered";
            mcs_sign_ining              = "Sign in ...";
            mcs_cloud_server            = "Cloud server";
            mcs_input_device_id         = "Input device ID";
            mcs_input_username          = "Input username";
            mcs_input_email_addr        = "Enter e-mail address";
            mcs_email_address           = "Email address";
            mcs_email                   = "email";
            mcs_binding                 = "Binding";
            mcs_binding_email           = "Binding email";
            mcs_binding_send_prompt     = "Verification message has been sent, please sign-mail authentication as soon as possible";
            mcs_binding_email_prompt    = "You forget your password, you can reset by the mailbox.";
            mcs_input_password          = "Input password";
            mcs_access_server_failed    = "Access server failed.";
            mcs_device_offline          = "Device offline.";
            mcs_invalid_password        = "Invalid password.";
            mcs_invalid_dev             = "Invalid dev";
            mcs_login_faided            = "Login failed.";
            mcs_invalid_qrcode          = "Invalid QR-code.";
            mcs_please_input_username   = "Please input username.";
            mcs_please_input_password   = "Please input password.";
            mcs_qrcode_scan_hint        = "Scan QR code";
            mcs_device_list_empty       = "Device list is empty.";
            mcs_record_list_is_empty    = "The record list is empty.";
            mcs_password_expired        = "Password expired.";
            mcs_set_video_size          = "Resolution ";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Auto";
            mcs_normal_640x360          = "Normal [640x360]";
            mcs_half_320x180            = "Half [320x180]";
            mcs_small_160x90            = "Small [160x90]";
            mcs_play                    = "Live";
            mcs_settings                = "Settings";
            mcs_messages                = "Records";
            mcs_alarm                   = "Alarm";
            mcs_delete                  = "Delete";
            mcs_delete_camera           = "Delete device ";
            mcs_apply                   = "Apply";
            mcs_speed                   = "Speed";
            mcs_others                  = "Others";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Speaker";
            mcs_mic                     = "Mic";
            mcs_power_frequency         = "Power frequency";
            mcs_online_upgrade          = "Online upgrade";
            mcs_restore_the_factory_settings = "Restore to factory settings";
            mcs_restore                 = "Restore";
            mcs_restore_camera          = "Restart device";
            mcs_start_upgrade           = "Start upgrade";
            mcs_system                  = "System";
            mcs_system_settings         = "System settings";
            mcs_online                  = "Online";
            mcs_offline                 = "Offline";
            mcs_query                   = "Query";
            mcs_begin_time              = "Begin time";
            mcs_end_time                = "End time";
            mcs_mode                    = "Mode";
            mcs_opened                  = "Opened";
            mcs_high                    = "High";
            mcs_middle                  = "Medium";
            mcs_low                     = "Low";
            mcs_io_alert_input          = "I/O input";
            mcs_io_alert_output         = "I/O output";
            mcs_normally_open           = "Normally open";
            mcs_normally_close          = "Normally close";
            mcs_motion_detection_sensitivity = "Motion detection sensitivity";
            mcs_daytime                 = "Day";
            mcs_night                   = "Night";
            mcs_sdcord                  = "SD card";
            mcs_storage_device          = "Storage Device";
            mcs_set_mask                = "Set Mask";
            mcs_status                  = "Status";
            mcs_capacity                = "Capacity";
            mcs_usage                   = "Usage";
            mcs_format                  = "Format";
            mcs_repair                  = "Fix";
            mcs_formating               = "Formating";
            mcs_repairing               = "Repairing";
            mcs_mounted                 = "Mounted";
            mcs_unmounted               = "Unmounted";
            mcs_mount                   = "Mount";
            mcs_unmount                 = "Unmount";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Enabled";
            mcs_mac_address             = "MAC address";
            mcs_network_status          = "Network status";
            mcs_wifi_mode               = "Wi-Fi mode";
            mcs_client                  = "Client";
            mcs_ap                      = "AP";
            mcs_start_address           = "Start address";
            mcs_end_address             = "End address";
            mcs_gateway                 = "Gateway";
            mcs_select_network          = "Select network";
            mcs_dhcp_ip                 = "IP : Use DHCP";
            mcs_dhcp_dns                = "DNS : Use DHCP";
            mcs_ip_address              = "IP address";
            mcs_network_mask            = "Network mask";
            mcs_input_secondary_dns     = "Input secondary DNS";
            mcs_secondary_dns           = "Secondary DNS";
            mcs_input_dns               = "Input DNS";
            mcs_input_alternate_dns     = "Input alternate DNS";
            mcs_input_ip                = "Input IP";
            mcs_input_gateway           = "Input gateway";
            mcs_input_network_mask      = "Input network mask";
            mcs_wifi_list               = "Wi-Fi list";
            mcs_display_date            = "Display date";
            mcs_date_format             = "Date format";
            mcs_display_time            = "Display time";
            mcs_time_format             = "Time format";
            mcs_24_hour                 = "24-hour";
            mcs_12_hour                 = "12-hour";
            mcs_display_weeks           = "Display day";
            mcs_date_time               = "Day/Time";
            mcs_set_time                = "Set time";
            mcs_set_week                = "Set week";
            mcs_stream                  = "Stream";
            mcs_encode                  = "Encode";
            mcs_resolution              = "Resolution";
            mcs_frame_fate              = "Frame rate(FPS)";
            mcs_maximum_bitrate         = "Maximum bitrate";
            mcs_minimum_bitrate         = "Minimum bitrate";
            mcs_i_frame_interval        = "I-Frame interval";
            mcs_video                   = "Video";
            mcs_sampling_rate           = "Sampling rate(kHz)";
            mcs_nickname                = "Nickname";
            mcs_old_password            = "Old password";
            mcs_confirm_password        = "Confirm password";
            mcs_modify_password         = "Modify password";
            mcs_password                = "Password";
            mcs_admin_password          = "Admin password";
            mcs_guest_password          = "Guest password";
            mcs_product_info            = "Product info";
            mcs_software_version        = "Software version";
            mcs_device_id               = "Device ID";
            mcs_operation               = "Operation";
            mcs_record                  = "Record";
            mcs_record_2                = "Playback";
            mcs_upgrade_now             = "Upgrade now";
            mcs_upgrading               = "Upgrading";
            mcs_already_latest_version  = "No update available";
            mcs_sensitivty              = "Sensitivity";
            mcs_user_defined            = "User-defined";
            mcs_time                    = "Time";
            mcs_date                    = "Day";
            mcs_finish                  = "Finish";
            mcs_fail                    = "Failed";
            mcs_motion                  = "Motion";
            mcs_start                   = "Start";
            mcs_talk                    = "Talk";
            mcs_password_input_inconsistent = "Password input inconsistent.";
            mcs_input_6_to_20_litters   = "Input 6-20 letters(a-z、A-Z) or numbers(0-9)";
            mcs_user_letter_range_hint  = "Username is 6-20 letters(a-z、A-Z) or numbers(0-9) and begin with a letter";
            mcs_password_range_hint     = "Password is 6-20 characters - letters/numbers.";
            mcs_begin_with_the_letters  = "Begin with the letters.";
            mcs_sign_up                 = "Sign up";
            mcs_sign_up_failed          = "Sign up failed.";
            mcs_successful_sign_up      = "Sign up successfully.";
            mcs_are_you_sure_delete     = "Confirm delete?";
            mcs_failed_to_set_the       = "Set failed.";
            mcs_set_successfully        = "Set successfully";
            mcs_downloading             = "Downloading";
            mcs_wrote                   = "Wrote";
            mcs_visit_again_later       = "Please visit again later";
            mcs_restart_failed          = "Restart failed";
            mcs_upgrade_failed          = "Upgrade failed";
            mcs_connnected              = "Connected";
            mcs_connnected_to           = "Connected to";
            mcs_not_select              = "not selected";
            mcs_message_list            = "Message list";
            mcs_saved_password          = "Saved password";
            mcs_alert                   = "Alert";
            mcs_no_record               = "No record";
            mcs_new_about               = "New : about";
            mcs_device                  = "Device";
            mcs_config                  = "Config";
            mcs_change_password_failed  = "Change password failed";
            mcs_do_you_want_restart     = "Do you want to restart?";
            mcs_do_you_want_restore     = "Confirm restore?";
            mcs_do_you_want_upgrade     = "Do you want to upgrade?";
            mcs_load_end                = "End of videos";
            mcs_loading                 = "Loading...";
            mcs_down_refresh            = "Pull down to refresh";
            mcs_release_refresh         = "Refresh release";
            mcs_refreshing              = "Refreshing";
            mcs_release_then_loading_data_hint = "Release to load";
            mcs_pull_refresh_hint       = "Pull to refresh";
            mcs_restarting              = "Restarting";
            mcs_upgraded_time           = "Upgraded time : ";
            mcs_done                    = "Done";
            mcs_playback                = "Playback";
            mcs_i_o_alarm               = "I/O alarm";
            mcs_alarm_action            = "Motion detection";
            mcs_alarm_sources           = "Alarm sources";
            mcs_io_output               = "Relay output";
            mcs_snapshots               = "Snapshots";
            mcs_snapshot                = "Snapshot";
            mcs_snapshot_interval       = "Snapshot interval(s)";
            mcs_pre_record_length       = "Pre-record length(s)";
            mcs_nick_range_hint         = "Camera name must contain less than 20 characters.";
            mcs_save                    = "Save";
            mcs_close                   = "Close";
            mcs_snapshoting             = "Snapshoting";
            mcs_snapshot_failed         = "Snapshot failed";
            mcs_record_failed           = "Record failed";
            mcs_saved_successfully      = "Saved successfully";
            mcs_save_failed             = "Save failed";
            mcs_restart_to_take_effect  = "Restart to take effect.";
            mcs_please_allow_access_album = "Please allow MIPC to access your photo album.";
            mcs_ios_privacy_setting_for_photo_prompt = "Can be changed in iPhone \"Settings->Privacy->Photos\", find the application \"MIPC\" change.";
            mcs_please_allow_access_camera = "Please allow MIPC to access your camera.";
            mcs_ios_privacy_setting_for_camera_prompt = "You can change settings in the iPhone \"Settings->Privacy->Camera\", find the application \"MIPC\" change.";
            mcs_busy_when_write         = "Busy writing";
            mcs_unknown_error           = "Unknown error";
            mcs_i_know                  = "I know!";
            mcs_segment                 = "Segment";
            mcs_please_relogin          = "Please relogin";
            mcs_change_password_succeed = "Password changed successfully";
            mcs_upgrade_to_ver          = "Upgrade to ver";
            mcs_restore_failed          = "Restore failed";
            mcs_please_restart          = "Please restart";
            mcs_keep_network_settings   = "Keep network settings and password";
            mcs_not_connected           = "Not connected";
            mcs_sdcard_not_ready        = "SD card not ready.";
            mcs_device_not_exist        = "Device doesn\'t exist.";
            mcs_disable                 = "Disable";
            mcs_to_determine_the        = "To determine the";
            mcs_alert_on                = "Turn alert on";
            mcs_alert_off               = "Turn alert off";
            mcs_alert_onoff             = "Alert on/off";
            mcs_monday                  = "Monday";
            mcs_tuesday                 = "Tuesday";
            mcs_wednesday               = "Wednesday";
            mcs_thursday                = "Thursday";
            mcs_friday                  = "Friday";
            mcs_saturday                = "Saturday";
            mcs_sunday                  = "Sunday";
            mcs_mon                     = "Mon";
            mcs_tue                     = "Tue";
            mcs_wed                     = "Wed";
            mcs_thu                     = "Thu";
            mcs_fri                     = "Fri";
            mcs_sat                     = "Sat";
            mcs_sun                     = "Sun";
            mcs_scheduled_recording     = "Schedule recording";
            mcs_schedule                = "Schedule";
            mcs_scheduled_recording_status = "Scheduled recording status";
            mcs_folding                 = "Folding";
            mcs_unfolding               = "Unfolding";
            mcs_end_time_should_lt_begin = "End time must be greater than the start time.";
            mcs_recording               = "Recording";
            mcs_prerecord_interval_range_hint = "Pre-record interval should be less than 6 seconds.";
            mcs_snapshot_interval_range_hint = "Snapshot interval should be 0 or greater than 60.";
            mcs_not_ready               = "Not ready";
            mcs_availablesize           = "Available size";
            mcs_reboot                  = "Restart";
            mcs_alerter                 = "Alert";
            mcs_pir                     = "PIR";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Encoder";
            mcs_ok                      = "OK";
            mcs_fault                   = "Fault";
            mcs_sensor_status           = "Sensor status";
            mcs_about                   = "About";
            mcs_reset_now               = "Reset now";
            mcs_reset_later             = "Reset later";
            mcs_prompt                  = "Prompt";
            mcs_select                  = "Select";
            mcs_available_netword       = "Network is not available, config it?";
            mcs_request_send            = "Sending request...";
            mcs_blank_device_id         = "Device ID can not be empty.";
            mcs_blank_username          = "Username can not be empty.";
            mcs_blank_password          = "Password can not be empty.";
            mcs_exist_user              = "User already exists.";
            mcs_invalid_user            = "Invalid user";
            mcs_invalid_email_addr      = "Invalid e-mail address.";
            mcs_system_err              = "System error";
            mcs_exceed_device           = "Users of the device overrun.";
            mcs_continue                = "Continue";
            mcs_prompt_exit             = "Would you like to exit?";
            mcs_device_list             = "Device list";
            mcs_no_sdcard               = "No SD card";
            mcs_no_hard_disk            = "No Hard Disk ";
            mcs_show_more               = "More...";
            mcs_shotsnop_exists         = "Photo already exists";
            mcs_input_nick              = "Input device name";
            mcs_nick_not_empty          = "Device name cannot be empty.";
            mcs_input_new_pass          = "Input new password";
            mcs_input_new_pass_again    = "Input new password again";
            mcs_new_password            = "New password";
            mcs_modify_network_prompt   = "Network modifications may cause network failure, proceed anyway?";
            mcs_wifi_disable_prompt     = "Disable Wi-Fi，Continue?";
            mcs_eth_disable_prompt      = "Disable ethernet. Continue?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Use DHCP";
            mcs_manually_set            = "Use static";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "Primary DNS";
            mcs_client_mode             = "Client";
            mcs_adhoc_mode              = "Adhoc";
            mcs_connect_fail            = "Connect failed";
            mcs_dhcp_server             = "DHCP server";
            mcs_display_text            = "Display text";
            mcs_repair_prompt           = "Repair may cause some data loss. Continue?";
            mcs_format_prompt           = "Format will erase all data on SD card. Continue?";
            mcs_mount_prompt            = "Mount SD card. Continue?";
            mcs_umount_prompt           = "Video and photo cannot be saved after SD card is unmounted. Continue?";
            mcs_sdcard_reset            = "Success. Restart to activate. Continue?";
            mcs_sdcard_repairing        = "Repairing, wait to restart.";
            mcs_sdcard_formating        = "Formatting, wait to restart.";
            mcs_sdcard_umount           = "Unmount";
            mcs_valid                   = "Valid";
            mcs_io                      = "IO alarm";
            mcs_input                   = "Input";
            mcs_outinput                = "Output";
            mcs_prompt_alert_on         = "Alert on，Continue?";
            mcs_auto_sync_date_time     = "Auto sync";
            mcs_alarm_record            = "Alarm record";
            mcs_username                = "User name";
            mcs_re_enter_the_password   = "Input the password again";
            mcs_remember_me             = "Stay signed in";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Install plug-in";
            mcs_install_the_video_plug  = "Install video plug-in";
            mcs_install_now             = "Install now";
            mcs_temporarily_installed_use_ordinary_video = "No, install later";
            mcs_brightness              = "Brightness";
            mcs_contrast                = "Contrast";
            mcs_color_saturation        = "Saturation";
            mcs_sharpness               = "Sharpness";
            mcs_duration                = "Duration";
            mcs_index                   = "Index";
            mcs_remark                  = "Remark";
            mcs_media_stream            = "Media";
            mcs_server                  = "Server";
            mcs_media_transfer          = "Transfer media";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Manufacturer";
            mcs_model                   = "Model";
            mcs_plugin_version          = "Plug-in version";
            mcs_network_interface       = "Network interface";
            mcs_transfer_protocol       = "Transfer protocol";
            mcs_year                    = "Year";
            mcs_month                   = "Month";
            mcs_day                     = "Day";
            mcs_hour                    = "Hour";
            mcs_minute                  = "Minute";
            mcs_second                  = "Second";
            mcs_millisec                = "Millisec";
            mcs_ntp                     = "Time server";
            mcs_upload_upgrade          = "Upload upgrade";
            mcs_stop                    = "Stop";
            mcs_info_rewind             = "Rewind";
            mcs_fast_forward            = "Fast forward";
            mcs_previous_frame          = "Previous frame";
            mcs_next_frame              = "Next frame";
            mcs_record_audio            = "Record audio";
            mcs_week                    = "Week";
            mcs_all                     = "All";
            mcs_id                      = "ID";
            mcs_select_all              = "Select all";
            mcs_call                    = "Call";
            mcs_activation              = "Activation";
            mcs_caption                 = "Upload file";
            mcs_alarm_device            = "Motion sensitivity";
            mcs_not_installed           = "Not installed";
            mcs_join_us_now             = "Join us now";
            mcs_reconnect_please_wait   = "Reconnect, please wait";
            mcs_erasing                 = "Erasing";
            mcs_writing                 = "Writing";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Have new version";
            mcs_equipment_flip          = "Flip";
            mcs_device_status           = "Device status";
            mcs_audio_setting           = "Audio setting";
            mcs_nick_modify             = "Modify camera name";
            mcs_ready                   = "Ready";
            mcs_full                    = "Full";
            mcs_connecting              = "Connecting";
            mcs_message_buffering       = "Message buffering";
            mcs_upgrade_finish          = "Upgrade finish";
            mcs_image                   = "Image";
            mcs_bar                     = "Records";
            mcs_init                    = "Init";
            mcs_confirm_new_password    = "Confirm new password";
            mcs_continue_switch_wireless_network = "Switch network maybe cause network failure. Continue?";
            mcs_restore_factory_settings_prompt = "Device will restart after restore. Restore to factory settings?";
            mcs_username_does_not_exis  = "Username does not exist.";
            mcs_username_already_exists = "Username already exists.";
            mcs_successful_whether_login = "Sign up successfully, sign in now?";
            mcs_username_demand         = "6-20 letters or numbers begin with letters.";
            mcs_the_password_is_empty   = "The password is empty";
            mcs_password_demand         = "6-20 letters or numbers begin with the letters.";
            mcs_password_empty          = "Retype password";
            mcs_two_password_input_inconsistent = "Passwords do not match.";
            mcs_the_user_name_is_empty  = "The user name is empty.";
            mcs_upgrade_to_the_latest_version = "Upgrade to the latest version";
            mcs_subnet_mask_wrong_format = "Network mask invalid format.";
            mcs_upgrade_successful_restart_to_take_effect = "Upgrade successful, restart the device.";
            mcs_need_to_restart_the_camera_to_take_effect = "Need to restart the device to take effect.";
            mcs_not_allowed_close_two_network_cards = "Ethernet and Wi-Fi can not be disabled simultaneously.";
            mcs_modified_successfully   = "Modified successfully";
            mcs_connection_successfully = "Connected";
            mcs_connection_is_interrupted = "Lost connection";
            mcs_devices_in_the_account_overrun = "Devices in the account overrun.";
            mcs_format_error            = "Format error";
            mcs_change                  = "Change";
            mcs_refresh                 = "Refresh";
            mcs_connect                 = "Connect";
            mcs_upgrade                 = "Upgrade";
            mcs_activate                = "Activate";
            mcs_filter                  = "Filter";
            mcs_reset                   = "Reset";
            mcs_prompt_alert_off        = "Alert off，Continue?";
            mcs_invalid_server          = "Invalid time server.";
            mcs_upgrade_prompt          = "Upgrade device software. Continue?";
            mcs_restart_prompt          = "Restart device,continue?";
            mcs_repeat                  = "Repeat";
            mcs_scheduled_one           = "Schedule 1";
            mcs_scheduled_two           = "Schedule 2";
            mcs_scheduled_three         = "Schedule 3";
            mcs_scheduled_four          = "Schedule 4";
            mcs_more                    = "More";
            mcs_leave                   = "Release to load more";
            mcs_qrcode_scan             = "QR Code Scan";
            mcs_inserted                = "Inserted";
            mcs_removed                 = "Removed";
            mcs_upgrade_init            = "Start upgrade";
            mcs_upgrade_download        = "Download upgrade";
            mcs_check                   = "Check";
            mcs_audio_encoder_config    = "Audio codec";
            mcs_video_codec             = "Video codec";
            mcs_download                = "Download";
            mcs_client_download         = "Client download";
            mcs_for_more_clarity_smooth_video_experience = "For more clarity, smooth video experience.";
            mcs_network                 = "Network";
            mcs_mobile_client_download  = "Mobile client download";
            mcs_readonly                = "Read only";
            mcs_please_exit_and_relogin = "Please exit and relogin.";
            mcs_add_device_failed       = "Add device failed";
            mcs_set_password            = "Set password";
            mcs_7x24_hours              = "24/7";
            mcs_motion_alert            = "Motion alert";
            mcs_mtalt                   = "%@ : Motion alert";
            mcs_io_alert                = "I/O alert";
            mcs_ioalt                   = "%@ : I/O alert";
            mcs_time_zone               = "Time zone";
            mcs_select_time             = "Select time";
            mcs_now                     = "Now";
            mcs_mipc_have_alert_notification = "MIPC alert notification";
            mcs_notification_center     = "Notification center";
            mcs_sound                   = "Sound";
            mcs_vibration               = "Vibration";
            mcs_clear_cache             = "Clear cache";
            mcs_clear_cache_hint        = "Are you sure you want to clear the cache?";
            mcs_successfully_cleared_cache = "Cleared the cache successfully.";
            mcs_app_except_exit_hint    = "Sorry, the application has encountered an exception and will exit.";
            mcs_rate_us                 = "Rate us";
            mcs_password_too_simple_hint = "Password is too simple, change it to improve security.";
            mcs_check_for_new_version   = "Check for new version";
            mcs_contact_us              = "Contact us";
            mcs_buffer_time             = "Buffer time";
            mcs_default                 = "Default";
            mcs_alarmed_devices         = "Alarmed devices";
            mcs_aec                     = "Echo cancellation";
            mcs_permission_denied       = "No authorization ";
            mcs_full_screen             = "Full screen";
            mcs_forgot_your_password    = "Forgot password";
            mcs_your_email              = "Your email";
            mcs_sign_up_confirmation    = "A confirmation email is being sent to verify your email address. Click the link to activate your account.";
            mcs_recovery_prompt         = "Enter your email address (user name) below, we will send you an email with instructions on how to reset your password.";
            mcs_password_reset_confirmation = "Follow the directions in the email being sent to the submitted email address to reset password.";
            mcs_recovery_fail_no_mail   = "Password recovery fail, no email connected with this account.";
            mcs_recovery_fail_invalid_link = "Password recovery fail, please follow instructions in recovery email.";
            mcs_recovery_ok_login       = "Password recovery success. Sign in now.";
            mcs_active_ok_login         = "Account activation successfully. Sign in now.";
            mcs_active_fail_invalid_link = "Account activation fail. Try again.";
            mcs_login_fail_inactive     = "Inactive account. Please follow the instructions of active email to activate new account.";
            mcs_sign_up_again           = "Sign up again";
            mcs_press_start_talk        = "Press to speak";
            mcs_release_stop_talk       = "Release to stop";
            mcs_delete_device           = "Delete";
            mcs_success_removed_equipment = "Delete device successfully";
            mcs_remove_equipment_failure = "Remove equipment failure";
            mcs_device_busy             = "Device is busy now";
            mcs_keep_testing            = "Continue test";
            mcs_notify_tone             = "Notification ringtone";
            mcs_float_video             = "Enable floating video";
            mcs_float_position          = "Floating video position";
            mcs_video_resolution        = "Video resolution";
            mcs_float_resolution        = "Floating video resolution";
            mcs_top_left                = "Top left";
            mcs_top_right               = "Top right";
            mcs_bottom_left             = "Bottom left";
            mcs_bottom_right            = "Bottom right";
            mcs_action_next             = "Next";
            mcs_action_cancel           = "Cancel";
            mcs_action_retry            = "Retry ";
            mcs_action_add              = "Add";
            mcs_action_apply            = "Apply";
            mcs_action_config           = "Config";
            mcs_action_skip             = "Skip";
            mcs_action_ok               = "Ok";
            mcs_action_add_device       = "Add device";
            mcs_action_modify_password  = "Modify password";
            mcs_action_config_wifi      = "Config Wi-Fi";
            mcs_state_connect_device    = "Connecting device";
            mcs_state_connect_device_fail = "Fail to connect the device.";
            mcs_state_wait_device_online = "Waiting for device to be online.";
            mcs_state_device_online     = "Online";
            mcs_state_success           = "Success";
            mcs_state_add_device_success = "Add device successfully.";
            mcs_state_add_device_fail   = "Fail to add device.";
            mcs_state_modify_pass_success = "Modify password successfully";
            mcs_state_modify_pass_fail  = "Fail to modify password.";
            mcs_state_config_wifi_success = "Set Wi-Fi successfully.";
            mcs_state_config_wifi_fail  = "Connect fail";
            mcs_state_connecting_to     = "Connecting to";
            mcs_network_connect_type    = "Your device is offline, please make sure your device is powered on, then choose network connection type:";
            mcs_prompt_modify_passwd    = "Your password of device is too simple, please modify password. New password shall not be less than six characters.";
            mcs_prompt_config_wifi      = "Your device is still not connected to your WiFi, please configure your Wi-Fi.";
            mcs_step1_check_connect     = "Step 1 : Connect the camera to your router using wire.";
            mcs_first_step_ethernet_connect = "Step 1 : Connect one end of a network cable to connect to your router and the other end of the access device network port.";
            mcs_step2_check_connect     = "Step 2 : Power on your camera.";
            mcs_second_step_ethernet_connect = "Step 2 : Power on your device.";
            mcs_hint_check_network      = "Note : the camera takes about 50 seconds to start. LED will flash green 3 times every 3 seconds after start up, which means that the camera has been online. The wizard will automatically go to the next step after this.";
            mcs_the_end                 = "The end";
            mcs_hint_password_expired   = "Password has expired, please re-add the device.";
            mcs_hint_remove_ethernet    = "Note : Wi-Fi working properly, you can disconnect the wire now.";
            mcs_ip_format_incorrect     = "IP address format is incorrect";
            mcs_login_sucess            = "Successful login";
            mcs_donot_remind            = "Don\'t remind";
            mcs_clear_cache_signout_hint = "You should log in again after clear the cache. Continue?";
            mcs_devlist_adddev_hint     = "Click here to add device.";
            mcs_devlist_menu_hint       = "Click here to set the resolution.";
            mcs_update_failed           = "Upgrade failed";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Local";
            mcs_set_npapi               = "If the plugin has been installed, please visit \'chrome://flags/#enable-npapi\', enable NPAPI,";
            mcs_set_win32k              = "visit \'chrome://flags/#enable-win32k-renderer-lockdown\', disabled win32k renderer lockdown,";
            mcs_restart_browser         = "restart the browser";
            mcs_download_location       = "Download location";
            mcs_Networking_mode         = "Networking mode";
            mcs_wifi_intelligent_configuration = "WIFI connection";
            mcs_ethernet_configuration  = "Ethernet connection";
            mcs_wifi_connect            = "Connection";
            mcs_hard_disk               = "Hard disk";
            mcs_wifi_is_connection      = "Connecting, please wait...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi configuration failure ";
            mcs_box_list                = "lista box";
            mcs_repair_disk_prompt      = "Repair disk may lost some data,continue?";
            mcs_format_disk_prompt      = "Format disk will delete all data,continue?";
            mcs_scheduled_alerting      = "Schedule alerting";
            mcs_scheduled_alerting_one  = "Schedule 1";
            mcs_scheduled_alerting_two  = "Schedule 2";
            mcs_scheduled_alerting_three = "Schedule 3";
            mcs_scheduled_alerting_four = "Schedule 4";
            mcs_wifi_config_cancle      = "wifi config cancle";
            mcs_wifi_config_prepare     = "wifi Prerequisites";
            mcs_wifi_config_first       = "The devices and mobile phones and routers kept in the range of 1 m";
            mcs_wifi_config_second      = "When configuring wifi, the device can not plug the network cable";
            mcs_wifi_config_third       = "Press the RESET reset hole one second and then release";
            mcs_wifi_config_success     = "Configuration success";
            mcs_wifi_config_failure     = "Configuration failed";
            mcs_failure_prompt          = "Please try again or return to check WIFI password is entered correctly";
            mcs_display_password        = "Show password";
            mcs_action_smart_config_wifi = "Configuration Wizard";
            mcs_wifi_invalid            = "Please connect to wifi for your cellphone firstly!";
            mcs_phone_not_connect_wifi  = "wifi network is not connected";
            mcs_prompt_check_connection = "Your camera is not online, please check the camera\'s line connection.";
            mcs_wifi_cfg_ready          = "Ready";
            mcs_reset_complete          = "Reset is complete";
            mcs_how_to_restore_factory_settings = "How to restore factory settings: use the RESET pin pressing the RESET hole at the bottom of camera for more than 10 seconds";
            mcs_forgetpass_action_wizard = "If device has configured WiFi,press the RESET hole for one second then release,the device will restore to factory settings and restart automatically,please add device again.";
            mcs_prompt_check_device_connection = "Your device is not online, please check the device\'s line connection.";
            mcs_input_wifi_name         = "Please input wifi name";
            mcs_action_previous         = "Previous";
            mcs_io_alert_range_hint     = "IO alert time should be less than 60 seconds";
            mcs_io_alert_time           = "IO alert time(s)";
            mcs_smart                   = "smart";
            mcs_plan                    = "plan";
            mcs_mute                    = "mute";
            mcs_wind_speed              = "wind speed";
            mcs_one                     = "One gear";
            mcs_two                     = "Two gear";
            mcs_three                   = "Three gear";
            mcs_purify_mode             = "purify mode";
            mcs_video_list              = "Video list";
            mcs_wifi_cfg_restore_factory_settings = "Hold the cellphone close to device, if device has configured WiFi, press the RESET hole for one second then release, the device will restore to factory settings and restart automatically.";
            mcs_mask_settings           = "Mask settings";
            mcs_notification_settings   = "Notification settings";
            mcs_alarm_settings          = "Alarm settings";
            mcs_motion_detection        = "Motion Detection";
            mcs_io_alarm                = "I/O Alarm";
            mcs_connect_status          = "Connection Status";
            mcs_motion_notification     = "Motion and Notification";
            mcs_device_connected        = "Device is connected";
            mcs_start_spray             = "Start spraying?";
            mcs_available_network       = "Network is not available";
            mcs_select_wifi_wizard      = "Please select WiFi network firstly";
            mcs_input_wifi_password     = "Input WiFi password";
            mcs_device_admin_password   = "Device admin password";
            mcs_device_guest_password   = "Device guest password";
            mcs_user_admin_password     = "User admin password";
            mcs_user_guest_password     = "User guest password";
            mcs_save_network_set        = "Save network set and password";
            mcs_nickname_not_set        = "Camera nickname is not set";
            mcs_current_wifi            = "Current Wi-Fi";
            mcs_current_password_strength = "The current password strength";
            mcs_new_password_strength   = "New password strength";
            mcs_needs_to_open_the_DHCP  = "Your router needs to open the DHCP (automatically obtain IP) function, if the attempt is unsuccessful, please contact the administrator.";
            mcs_picture                 = "Picture";
            mcs_quality                 = "Quality";
            mcs_size                    = "Size";
            mcs_guest_login             = "Guest Login";
            mcs_audio_and_video         = "Audio / Video";
            mcs_volume                  = "Volume";
            mcs_smooth                  = "Smooth";
            mcs_clear                   = "Clear";
            mcs_handsfree               = "HF";
            mcs_headphone               = "Headset";
            mcs_my                      = "My";
            mcs_customer_service        = "Customer Service";
            mcs_firefox_flash_uninstall = "Your flash plugin is not available, the solution please refer to the https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Plugins";
            mcs_plug_load               = "Load plugins";
            mcs_plug_load_refuse        = "Do not load plugins";
            mcs_plug_load_auto          = "Automatic";
            mcs_option                  = "Options";
            mcs_option_ok               = "Determine";
            mcs_voice_call_fails        = "Voice call fails, check the network";
            mcs_umounted_prompt         = "Whether to unmount?";
            mcs_signup_prompt           = "New here?";
            mcs_wifi_connect_sucess_prompt = "Note: WIFI normal work, you can disconnect the network now";
            mcs_manual_input_prompt     = "Manual input device ID";
            mcs_qrscan_prompt           = "You have not yet allowed this application to access your camera, and you can find the application of the name \'Vimtag\' in the iPhone \'s  \' setting\' - \'privacy\' - \'camera\' feature.";
            mcs_select_network_style    = "Select network connection mode:";
            mcs_push                    = "Announcement";
            mcs_connect_power_prompt    = "Note: the device is not online, please ensure that the power is connected";
            mcs_fail_microphone         = "Unable to access the microphone";
            mcs_microphone_prompt       = "You are not to allow this application to access your microphone, in the \'set\' iPhone - the \'privacy\' - \'microphone\' feature, find the name of \'Vimtag\' application to be modified";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Deleting...";
            mcs_event                   = "Event";
            mcs_one_hour                = "1 hour";
            mcs_half_hour               = "30 min";
            mcs_five_min                = "5 min";
            mcs_category                = "Category";
            mcs_time_length             = "Duration";
            mcs_new                     = "New";
            mcs_week_setting_prompt     = "Week setting can not be empty";
            mcs_time_setting_prompt     = "Time settings can not be empty";
            mcs_today                   = "Today";
            mcs_wifi_config_prepare     = "wifi Prerequisites";
            mcs_wifi_password           = "wifi password";
            mcs_register_prompt         = "Please register your account first!";
            mcs_click_login             = "Click here to login";
            mcs_not_login_prompt        = "You have not logged in, please click here to login!";
            mcs_product_presentation    = "Home";
            mcs_help_feedback           = "FAQ";
            mcs_help_information        = "FAQ";
            mcs_feedback                = "Feedback";
            mcs_connect_wifi_prompt     = "Connect WiFi";
            mcs_cloud                   = "Cloud";
            mcs_demo                    = "Demo";
            mcs_shortest                = "Shortest";
            mcs_no_history              = "No history";
            mcs_download_pc_client      = "Click to download the PC client";
            mcs_accounts_bind_email_exist = "The account has been bound to the mailbox";
            mcs_accounts_bind_email_busy = "The mailbox has been bound to account";
        }/* en */
        else if(lang == "zh")
        {
            mcs_name                    = "名称";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "名称";
            mcs_old_nick                = "昵称";
            mcs_linked                  = "已直连";
            mcs_sign_in                 = "登录";
            mcs_back                    = "返回";
            mcs_add                     = "添加";
            mcs_add_device              = "添加设备";
            mcs_device_existed          = "设备已存在";
            mcs_cancel                  = "取消";
            mcs_exit                    = "退出";
            mcs_remember_password       = "记住密码";
            mcs_password_remembered     = "已记住密码";
            mcs_sign_ining              = "正在登录...";
            mcs_cloud_server            = "云服务器";
            mcs_input_device_id         = "输入设备ID";
            mcs_input_username          = "输入用户名";
            mcs_input_email_addr        = "输入邮箱地址";
            mcs_email_address           = "邮箱地址";
            mcs_email                   = "邮箱";
            mcs_binding                 = "绑定";
            mcs_binding_email           = "绑定邮箱";
            mcs_binding_send_prompt     = "验证邮件已发送，请尽快登录邮箱验证";
            mcs_binding_email_prompt    = "忘记密码时，可以通过该邮箱重新设置。";
            mcs_input_password          = "输入密码";
            mcs_access_server_failed    = "访问服务器失败";
            mcs_device_offline          = "设备不在线";
            mcs_invalid_password        = "密码错误";
            mcs_invalid_dev             = "设备不存在";
            mcs_login_faided            = "登录失败";
            mcs_invalid_qrcode          = "无效二维码";
            mcs_please_input_username   = "请输入用户名";
            mcs_please_input_password   = "请输入密码!";
            mcs_qrcode_scan_hint        = "请将方框对准设备底部的二维码";
            mcs_device_list_empty       = "设备列表为空";
            mcs_record_list_is_empty    = "录像列表为空";
            mcs_password_expired        = "密码已失效";
            mcs_set_video_size          = "设置视频大小";
            mcs_hd_1280x720             = "高清 [1280x720]";
            mcs_auto                    = "自动";
            mcs_normal_640x360          = "标清 [640x360]";
            mcs_half_320x180            = "较小 [320x180]";
            mcs_small_160x90            = "最小 [160x90]";
            mcs_play                    = "预览";
            mcs_settings                = "设置";
            mcs_messages                = "历史";
            mcs_alarm                   = "报警";
            mcs_delete                  = "删除";
            mcs_delete_camera           = "删除";
            mcs_apply                   = "应用";
            mcs_speed                   = "速度";
            mcs_others                  = "其他";
            mcs_audio                   = "音频";
            mcs_speaker                 = "扬声器";
            mcs_mic                     = "麦克风";
            mcs_power_frequency         = "电源频率";
            mcs_online_upgrade          = "在线升级";
            mcs_restore_the_factory_settings = "恢复出厂设置";
            mcs_restore                 = "恢复";
            mcs_restore_camera          = "设备重启";
            mcs_start_upgrade           = "有新的版本可以更新";
            mcs_system                  = "系统";
            mcs_system_settings         = "系统设置";
            mcs_online                  = "设备上线";
            mcs_offline                 = "设备离线";
            mcs_query                   = "查询";
            mcs_begin_time              = "开始时间";
            mcs_end_time                = "结束时间";
            mcs_mode                    = "模式";
            mcs_opened                  = "是否开启";
            mcs_high                    = "高";
            mcs_middle                  = "中";
            mcs_low                     = "低";
            mcs_io_alert_input          = "I/O报警输入";
            mcs_io_alert_output         = "I/O报警输出";
            mcs_normally_open           = "常开";
            mcs_normally_close          = "常闭";
            mcs_motion_detection_sensitivity = "移动侦测灵敏度";
            mcs_daytime                 = "白天";
            mcs_night                   = "夜间";
            mcs_sdcord                  = "SD卡";
            mcs_storage_device          = "存储设备";
            mcs_set_mask                = "设置遮罩";
            mcs_status                  = "状态";
            mcs_capacity                = "容量";
            mcs_usage                   = "已使用";
            mcs_format                  = "格式化";
            mcs_repair                  = "修复";
            mcs_formating               = "格式化中";
            mcs_repairing               = "修复中";
            mcs_mounted                 = "已加载";
            mcs_unmounted               = "已卸载";
            mcs_mount                   = "加载";
            mcs_unmount                 = "卸载";
            mcs_ethernet                = "以太网";
            mcs_wifi                    = "WiFi";
            mcs_enabled                 = "启用状态";
            mcs_mac_address             = "MAC地址";
            mcs_network_status          = "连接状态";
            mcs_wifi_mode               = "无线模式";
            mcs_client                  = "终端";
            mcs_ap                      = "热点";
            mcs_start_address           = "开始地址";
            mcs_end_address             = "结束地址";
            mcs_gateway                 = "网关";
            mcs_select_network          = "选择网络";
            mcs_dhcp_ip                 = "自动获得IP";
            mcs_dhcp_dns                = "自动获得DNS";
            mcs_ip_address              = "IP地址";
            mcs_network_mask            = "子网掩码";
            mcs_input_secondary_dns     = "输入备用DNS";
            mcs_secondary_dns           = "备用DNS";
            mcs_input_dns               = "请输入DNS";
            mcs_input_alternate_dns     = "请输入备用DNS";
            mcs_input_ip                = "请输入IP地址";
            mcs_input_gateway           = "请输入网关";
            mcs_input_network_mask      = "请输入子网掩码";
            mcs_wifi_list               = "Wi-Fi列表";
            mcs_display_date            = "显示日期";
            mcs_date_format             = "日期格式";
            mcs_display_time            = "显示时间";
            mcs_time_format             = "时间格式";
            mcs_24_hour                 = "24小时制";
            mcs_12_hour                 = "12小时制";
            mcs_display_weeks           = "显示星期";
            mcs_date_time               = "日期/时间";
            mcs_set_time                = "时间设置";
            mcs_set_week                = "星期设置";
            mcs_stream                  = "码流";
            mcs_encode                  = "编码类型";
            mcs_resolution              = "分辨率";
            mcs_frame_fate              = "帧率";
            mcs_maximum_bitrate         = "最大码率";
            mcs_minimum_bitrate         = "最小码率";
            mcs_i_frame_interval        = "I帧间隔";
            mcs_video                   = "视频";
            mcs_sampling_rate           = "采样率(kHz)";
            mcs_nickname                = "设备昵称";
            mcs_old_password            = "当前密码";
            mcs_confirm_password        = "确认密码";
            mcs_modify_password         = "修改密码";
            mcs_password                = "密码";
            mcs_admin_password          = "管理密码";
            mcs_guest_password          = "访客密码";
            mcs_product_info            = "产品信息";
            mcs_software_version        = "软件版本";
            mcs_device_id               = "设备ID";
            mcs_operation               = "操作";
            mcs_record                  = "录像";
            mcs_record_2                = "录像";
            mcs_upgrade_now             = "立即升级";
            mcs_upgrading               = "正在升级";
            mcs_already_latest_version  = "已是最新版本";
            mcs_sensitivty              = "灵敏度";
            mcs_user_defined            = "自定义";
            mcs_time                    = "时间";
            mcs_date                    = "日期";
            mcs_finish                  = "完成";
            mcs_fail                    = "失败";
            mcs_motion                  = "移动侦测";
            mcs_start                   = "开始";
            mcs_talk                    = "对讲";
            mcs_password_input_inconsistent = "密码不一致";
            mcs_input_6_to_20_litters   = "输入6-20位数字(0-9)或字母(a-z、A-Z)";
            mcs_user_letter_range_hint  = "账号为6-20位数字(0-9)或字母(a-z、A-Z)，需以字母开头";
            mcs_password_range_hint     = "密码为6-20位数字和字母";
            mcs_begin_with_the_letters  = "以字母开始，只能包含数字字母";
            mcs_sign_up                 = "注册";
            mcs_sign_up_failed          = "注册失败";
            mcs_successful_sign_up      = "注册成功";
            mcs_are_you_sure_delete     = "是否删除?";
            mcs_failed_to_set_the       = "设置失败";
            mcs_set_successfully        = "设置成功";
            mcs_downloading             = "升级中，正在下载";
            mcs_wrote                   = "已写入";
            mcs_visit_again_later       = "请稍后再登录";
            mcs_restart_failed          = "重启失败";
            mcs_upgrade_failed          = "更新失败";
            mcs_connnected              = "已连接";
            mcs_connnected_to           = "已连接到";
            mcs_not_select              = "未选择";
            mcs_message_list            = "信息列表";
            mcs_saved_password          = "已存密码";
            mcs_alert                   = "告警";
            mcs_no_record               = "暂无录像";
            mcs_new_about               = "新 : 约";
            mcs_device                  = "设备";
            mcs_config                  = "配置";
            mcs_change_password_failed  = "修改密码失败";
            mcs_do_you_want_restart     = "是否重启?";
            mcs_do_you_want_restore     = "是否恢复出厂设置?";
            mcs_do_you_want_upgrade     = "是否升级?";
            mcs_load_end                = "已加载全部数据";
            mcs_loading                 = "正在加载...";
            mcs_down_refresh            = "下拉可以刷新";
            mcs_release_refresh         = "释放刷新";
            mcs_refreshing              = "正在刷新";
            mcs_release_then_loading_data_hint = "释放加载数据";
            mcs_pull_refresh_hint       = "上拉可以加载";
            mcs_restarting              = "重启中";
            mcs_upgraded_time           = "更新于 : ";
            mcs_done                    = "完成";
            mcs_playback                = "回放";
            mcs_i_o_alarm               = "I/O报警";
            mcs_alarm_action            = "报警联动";
            mcs_alarm_sources           = "报警源";
            mcs_io_output               = "I/O 输出";
            mcs_snapshots               = "快照";
            mcs_snapshot                = "快照";
            mcs_snapshot_interval       = "拍照间隔(秒)";
            mcs_pre_record_length       = "预录时间(秒)";
            mcs_nick_range_hint         = "昵称为最多20位的数字和字母";
            mcs_save                    = "保存";
            mcs_close                   = "关闭";
            mcs_snapshoting             = "拍照中";
            mcs_snapshot_failed         = "拍照失败";
            mcs_record_failed           = "操作录像失败";
            mcs_saved_successfully      = "成功保存到相册";
            mcs_save_failed             = "保存失败";
            mcs_restart_to_take_effect  = "重启后生效";
            mcs_please_allow_access_album = "请允许MIPC求访问您的相册";
            mcs_ios_privacy_setting_for_photo_prompt = "您可以在iPhone的\"设置->隐私->照片\"中,找到应用程序\"MIPC\"进行更改";
            mcs_please_allow_access_camera = "请允许MIPC求访问您的相机";
            mcs_ios_privacy_setting_for_camera_prompt = "您可以在iPhone的\"设置->隐私->相机\"中,找到应用程序\"MIPC\"进行更改";
            mcs_busy_when_write         = "写入忙";
            mcs_unknown_error           = "未知错误";
            mcs_i_know                  = "我知道了!";
            mcs_segment                 = "片段";
            mcs_please_relogin          = "请从新登录";
            mcs_change_password_succeed = "修改密码成功";
            mcs_upgrade_to_ver          = "升级到新版本";
            mcs_restore_failed          = "恢复失败";
            mcs_please_restart          = "请重启";
            mcs_keep_network_settings   = "保留网络设置和密码";
            mcs_not_connected           = "未连接";
            mcs_sdcard_not_ready        = "SD卡未准备好！";
            mcs_device_not_exist        = "设备不存在";
            mcs_disable                 = "禁用";
            mcs_to_determine_the        = "是否确定";
            mcs_alert_on                = "布防";
            mcs_alert_off               = "撤防";
            mcs_alert_onoff             = "布防/撤防";
            mcs_monday                  = "星期一";
            mcs_tuesday                 = "星期二";
            mcs_wednesday               = "星期三";
            mcs_thursday                = "星期四";
            mcs_friday                  = "星期五";
            mcs_saturday                = "星期六";
            mcs_sunday                  = "星期日";
            mcs_mon                     = "一";
            mcs_tue                     = "二";
            mcs_wed                     = "三";
            mcs_thu                     = "四";
            mcs_fri                     = "五";
            mcs_sat                     = "六";
            mcs_sun                     = "日";
            mcs_scheduled_recording     = "计划录像";
            mcs_schedule                = "计划";
            mcs_scheduled_recording_status = "计划录像状态";
            mcs_folding                 = "收起";
            mcs_unfolding               = "展开";
            mcs_end_time_should_lt_begin = "结束时间必须大于开始时间";
            mcs_recording               = "录像中";
            mcs_prerecord_interval_range_hint = "预录时间需小于6秒";
            mcs_snapshot_interval_range_hint = "拍照间隔需为0或大于60";
            mcs_not_ready               = "未就绪";
            mcs_availablesize           = "可用容量";
            mcs_reboot                  = "重启";
            mcs_alerter                 = "布防";
            mcs_pir                     = "人体感应";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "编码器";
            mcs_ok                      = "确定";
            mcs_fault                   = "故障";
            mcs_sensor_status           = "Sensor状态";
            mcs_about                   = "关于";
            mcs_reset_now               = "现在重启";
            mcs_reset_later             = "以后再说";
            mcs_prompt                  = "提示";
            mcs_select                  = "请选择";
            mcs_available_netword       = "网络不可用,进行设置网络?";
            mcs_request_send            = "正在发送请求...";
            mcs_blank_device_id         = "设备ID不能为空";
            mcs_blank_username          = "用户名不能为空";
            mcs_blank_password          = "密码不能为空";
            mcs_exist_user              = "用户已存在";
            mcs_invalid_user            = "用户名无效";
            mcs_invalid_email_addr      = "邮箱地址无效";
            mcs_system_err              = "系统错误";
            mcs_exceed_device           = "设备的用户数超限";
            mcs_continue                = "继续";
            mcs_prompt_exit             = "是否退出?";
            mcs_device_list             = "设备列表";
            mcs_no_sdcard               = "没有SD卡";
            mcs_no_hard_disk            = "没有硬盘";
            mcs_show_more               = "显示更多...";
            mcs_shotsnop_exists         = "图片已存在";
            mcs_input_nick              = "输入昵称";
            mcs_nick_not_empty          = "昵称不能为空";
            mcs_input_new_pass          = "输入新密码";
            mcs_input_new_pass_again    = "再次输入新密码";
            mcs_new_password            = "新密码";
            mcs_modify_network_prompt   = "网络参数修改可能造成网络中断,确认修改?";
            mcs_wifi_disable_prompt     = "禁用Wi-Fi，继续?";
            mcs_eth_disable_prompt      = "禁用以太网卡，继续?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "自动获取";
            mcs_manually_set            = "手动设置";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "首选DNS";
            mcs_client_mode             = "终端模式";
            mcs_adhoc_mode              = "热点模式";
            mcs_connect_fail            = "连接失败";
            mcs_dhcp_server             = "DHCP服务器";
            mcs_display_text            = "显示名称";
            mcs_repair_prompt           = "修复SD卡可能导致部分数据丢失，继续？";
            mcs_format_prompt           = "格式化将删除SD卡上所有数据，继续？";
            mcs_mount_prompt            = "加载SD卡，继续？";
            mcs_umount_prompt           = "卸载SD卡将导致录像和图片等数据无法保存，继续？";
            mcs_sdcard_reset            = "设置成功，需要重启摄像机才能生效,继续？";
            mcs_sdcard_repairing        = "修复待重启";
            mcs_sdcard_formating        = "格式化待重启";
            mcs_sdcard_umount           = "未加载";
            mcs_valid                   = "可使用";
            mcs_io                      = "IO报警";
            mcs_input                   = "输入";
            mcs_outinput                = "输出";
            mcs_prompt_alert_on         = "打开布防，继续？";
            mcs_auto_sync_date_time     = "自动同步";
            mcs_alarm_record            = "报警录像";
            mcs_username                = "用户名";
            mcs_re_enter_the_password   = "重新输入密码";
            mcs_remember_me             = "保持登录";
            mcs_home                    = "首页";
            mcs_install_the_plug        = "安装插件";
            mcs_install_the_video_plug  = "安装视频插件";
            mcs_install_now             = "立即安装";
            mcs_temporarily_installed_use_ordinary_video = "暂不安装，使用普通视";
            mcs_brightness              = "亮度";
            mcs_contrast                = "对比度";
            mcs_color_saturation        = "饱和度";
            mcs_sharpness               = "锐度";
            mcs_duration                = "持续时长";
            mcs_index                   = "索引";
            mcs_remark                  = "备注";
            mcs_media_stream            = "媒体流";
            mcs_server                  = "服务器";
            mcs_media_transfer          = "媒体传输";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "厂商";
            mcs_model                   = "型号";
            mcs_plugin_version          = "插件版本";
            mcs_network_interface       = "网卡";
            mcs_transfer_protocol       = "传输协议";
            mcs_year                    = "年";
            mcs_month                   = "月";
            mcs_day                     = "日";
            mcs_hour                    = "小时";
            mcs_minute                  = "分";
            mcs_second                  = "秒";
            mcs_millisec                = "毫秒";
            mcs_ntp                     = "时间服务器地址";
            mcs_upload_upgrade          = "上传升级";
            mcs_stop                    = "停止";
            mcs_info_rewind             = "快退";
            mcs_fast_forward            = "快进";
            mcs_previous_frame          = "上一帧";
            mcs_next_frame              = "下一帧";
            mcs_record_audio            = "录制音频";
            mcs_week                    = "星期";
            mcs_all                     = "全选";
            mcs_id                      = "序号";
            mcs_select_all              = "选择所有";
            mcs_call                    = "呼叫";
            mcs_activation              = "激活码";
            mcs_caption                 = "上传文件";
            mcs_alarm_device            = "报警设备";
            mcs_not_installed           = "未安装";
            mcs_join_us_now             = "现在就加入我们";
            mcs_reconnect_please_wait   = "重新连接中,请稍候";
            mcs_erasing                 = "正在擦除";
            mcs_writing                 = "正在写入";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "有新版本";
            mcs_equipment_flip          = "设备翻转";
            mcs_device_status           = "设备状态";
            mcs_audio_setting           = "音频设置";
            mcs_nick_modify             = "修改昵称";
            mcs_ready                   = "就绪";
            mcs_full                    = "写满";
            mcs_connecting              = "连接中";
            mcs_message_buffering       = "消息缓存";
            mcs_upgrade_finish          = "升级完成";
            mcs_image                   = "图片";
            mcs_bar                     = "条";
            mcs_init                    = "初始化";
            mcs_confirm_new_password    = "新密码确认";
            mcs_continue_switch_wireless_network = "切换网络可能导致网络中断,继续？";
            mcs_restore_factory_settings_prompt = "恢复出厂设置，系统将重新启动，继续？";
            mcs_username_does_not_exis  = "用户名不存在";
            mcs_username_already_exists = "用户名已存在";
            mcs_successful_whether_login = "注册成功,现在登录?";
            mcs_username_demand         = "由字母开头的6-20位字母或数字";
            mcs_the_password_is_empty   = "密码为空";
            mcs_password_demand         = "6-20位的字母或数字";
            mcs_password_empty          = "确认密码为空";
            mcs_two_password_input_inconsistent = "两次密码输入不一致";
            mcs_the_user_name_is_empty  = "用户名为空";
            mcs_upgrade_to_the_latest_version = "升级到最新版本";
            mcs_subnet_mask_wrong_format = "子网掩码格式错误";
            mcs_upgrade_successful_restart_to_take_effect = "升级成功，需要重启设备才能生效";
            mcs_need_to_restart_the_camera_to_take_effect = "需要重启设备才能生效";
            mcs_not_allowed_close_two_network_cards = "不能同时禁用以太网卡和Wi-Fi";
            mcs_modified_successfully   = "修改成功";
            mcs_connection_successfully = "连接成功";
            mcs_connection_is_interrupted = "连接中断";
            mcs_devices_in_the_account_overrun = "用户设备数超限";
            mcs_format_error            = "格式错误";
            mcs_change                  = "修改";
            mcs_refresh                 = "刷新";
            mcs_connect                 = "连接";
            mcs_upgrade                 = "升级";
            mcs_activate                = "激活";
            mcs_filter                  = "过滤";
            mcs_reset                   = "重置";
            mcs_prompt_alert_off        = "撤销布防，继续？";
            mcs_invalid_server          = "时间服务器地址无效";
            mcs_upgrade_prompt          = "升级设备程序，继续？";
            mcs_restart_prompt          = "重启设备，继续？";
            mcs_repeat                  = "重复";
            mcs_scheduled_one           = "计划录像一";
            mcs_scheduled_two           = "计划录像二";
            mcs_scheduled_three         = "计划录像三";
            mcs_scheduled_four          = "计划录像四";
            mcs_more                    = "查看更多";
            mcs_leave                   = "松开载入更多";
            mcs_qrcode_scan             = "二维码扫描";
            mcs_inserted                = "已插入";
            mcs_removed                 = "已移除";
            mcs_upgrade_init            = "开始升级";
            mcs_upgrade_download        = "升级下载";
            mcs_check                   = "升级检查";
            mcs_audio_encoder_config    = "音频编码设置";
            mcs_video_codec             = "视频编码";
            mcs_download                = "下载";
            mcs_client_download         = "客户端下载";
            mcs_for_more_clarity_smooth_video_experience = "获取更清晰、流畅的视频体验";
            mcs_network                 = "网络";
            mcs_mobile_client_download  = "手机客户端下载";
            mcs_readonly                = "只读";
            mcs_please_exit_and_relogin = "请退出重新登录";
            mcs_add_device_failed       = "添加设备失败";
            mcs_set_password            = "修改密码";
            mcs_7x24_hours              = "7x24(小时)";
            mcs_motion_alert            = "移动侦测警报";
            mcs_mtalt                   = "%@ : 移动侦测警报";
            mcs_io_alert                = "I/O 警報";
            mcs_ioalt                   = "%@ : I/O 警報";
            mcs_time_zone               = "时区";
            mcs_select_time             = "选择时间";
            mcs_now                     = "现在";
            mcs_mipc_have_alert_notification = "MIPC告警通知";
            mcs_notification_center     = "通知中心";
            mcs_sound                   = "声音";
            mcs_vibration               = "振动";
            mcs_clear_cache             = "清除缓存";
            mcs_clear_cache_hint        = "你确定要清除缓存？";
            mcs_successfully_cleared_cache = "缓存成功清除";
            mcs_app_except_exit_hint    = "很抱歉，该应用程序遇到异常，将退出";
            mcs_rate_us                 = "给我们打分";
            mcs_password_too_simple_hint = "密码太简单，修改以提高安全性";
            mcs_check_for_new_version   = "检查是否有新版本";
            mcs_contact_us              = "联系我们";
            mcs_buffer_time             = "缓冲时间";
            mcs_default                 = "默认";
            mcs_alarmed_devices         = "报警设备数";
            mcs_aec                     = "回声消除";
            mcs_permission_denied       = "操作无权限";
            mcs_full_screen             = "全屏";
            mcs_forgot_your_password    = "忘记密码";
            mcs_your_email              = "您的电子邮件";
            mcs_sign_up_confirmation    = "注册成功，已发送激活邮件到你提交的邮件地址，请参考邮件内容激活帐号";
            mcs_recovery_prompt         = "请输入您的邮箱（用户名），我们将发送邮件告诉您如何重置密码";
            mcs_password_reset_confirmation = "提交成功，已发送重置邮件到你提交的邮件地址，请参考邮件内容重置密码";
            mcs_recovery_fail_no_mail   = "密码重置失败，本账号未绑定邮件地址";
            mcs_recovery_fail_invalid_link = "密码重置失败, 请确认重置链接内容或者重新重置";
            mcs_recovery_ok_login       = "密码重置成功，马上登录";
            mcs_active_ok_login         = "帐号激活成功,马上登录";
            mcs_active_fail_invalid_link = "帐号激活失败，请确认激活链接内容或者重新注册帐号";
            mcs_login_fail_inactive     = "帐号未激活,请查收激活邮件进行激活";
            mcs_sign_up_again           = "重新注册";
            mcs_press_start_talk        = "按住 说话";
            mcs_release_stop_talk       = "松开 结束";
            mcs_delete_device           = "删除设备";
            mcs_success_removed_equipment = "成功删除设备";
            mcs_remove_equipment_failure = "失败删除设备";
            mcs_device_busy             = "设备现在正忙";
            mcs_keep_testing            = "持续测试";
            mcs_notify_tone             = "通知铃声";
            mcs_float_video             = "启用悬浮视频";
            mcs_float_position          = "悬浮视频位置";
            mcs_video_resolution        = "视频分辨率";
            mcs_float_resolution        = "悬浮视频分辨率";
            mcs_top_left                = "左上角";
            mcs_top_right               = "右上角";
            mcs_bottom_left             = "左下角";
            mcs_bottom_right            = "右下角";
            mcs_action_next             = "下一步";
            mcs_action_cancel           = "取消";
            mcs_action_retry            = "重试";
            mcs_action_add              = "添加";
            mcs_action_apply            = "应用";
            mcs_action_config           = "配置";
            mcs_action_skip             = "跳过";
            mcs_action_ok               = "确定";
            mcs_action_add_device       = "添加设备";
            mcs_action_modify_password  = "修改密码";
            mcs_action_config_wifi      = "设置Wi-Fi";
            mcs_state_connect_device    = "正在连接设备";
            mcs_state_connect_device_fail = "连接设备失败";
            mcs_state_wait_device_online = "等待设备上线";
            mcs_state_device_online     = "在线";
            mcs_state_success           = "成功";
            mcs_state_add_device_success = "添加设备成功";
            mcs_state_add_device_fail   = "添加设备失败";
            mcs_state_modify_pass_success = "密码修改成功";
            mcs_state_modify_pass_fail  = "密码修改失败";
            mcs_state_config_wifi_success = "设置Wi-Fi成功";
            mcs_state_config_wifi_fail  = "连接失败";
            mcs_state_connecting_to     = "正在连接到";
            mcs_network_connect_type    = "设备不在线，请你确保设备已连接电源，然后选择网络连接方式:";
            mcs_prompt_modify_passwd    = "您的设备密码太简单，请修改密码，新密码不得少于六个字符";
            mcs_prompt_config_wifi      = "您的设备没有连接上Wi-Fi，请配置Wi-Fi.";
            mcs_step1_check_connect     = "第一步 : 将网线的一端接入您的路由器，另一端接入摄像机的网口。";
            mcs_first_step_ethernet_connect = "第一步 : 将网线的一端接入您的路由器，另一端接入设备的网口。";
            mcs_step2_check_connect     = "第二步 : 将您的摄像机上电，启动摄像机。";
            mcs_second_step_ethernet_connect = "第二步 : 将您的设备上电，启动设备。";
            mcs_hint_check_network      = "备注 : 摄像机启动大约需要50秒, 启动完成后，LED信号灯每隔3秒绿灯闪烁3次,表示摄像机已经在线，向导将自动进入下一步。";
            mcs_the_end                 = "结束";
            mcs_hint_password_expired   = "密码已失效,请重新添加设备";
            mcs_hint_remove_ethernet    = "备注 : Wi-Fi工作正常，您现在可以断开网线。";
            mcs_ip_format_incorrect     = "IP地址格式不正确";
            mcs_login_sucess            = "登录成功";
            mcs_donot_remind            = "不再提醒";
            mcs_clear_cache_signout_hint = "清除缓存将退出重新登录,继续？";
            mcs_devlist_adddev_hint     = "点击此处添加设备";
            mcs_devlist_menu_hint       = "点击此处设置分辨率";
            mcs_update_failed           = "升级失败";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "本地";
            mcs_set_npapi               = "如果插件已安装，请访问 \'chrome://flags/#enable-npapi\'，启用NPAPI，";
            mcs_set_win32k              = "访问 \'chrome://flags/#enable-win32k-renderer-lockdown\'，停用 win32k 渲染程序锁定功能，";
            mcs_restart_browser         = "重启浏览器";
            mcs_download_location       = "下载内容保存位置";
            mcs_Networking_mode         = "联网方式";
            mcs_wifi_intelligent_configuration = "WIFI连接";
            mcs_ethernet_configuration  = "以太网连接";
            mcs_wifi_connect            = "连接";
            mcs_hard_disk               = "硬盘";
            mcs_wifi_is_connection      = "正在连接中，请稍候...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi智能配置建立失败";
            mcs_box_list                = "盒子列表";
            mcs_repair_disk_prompt      = "修复硬盘可能导致部分数据丢失，继续？";
            mcs_format_disk_prompt      = "格式化将删除硬盘上所有数据，继续？";
            mcs_scheduled_alerting      = "计划布防";
            mcs_scheduled_alerting_one  = "计划布防一";
            mcs_scheduled_alerting_two  = "计划布防二";
            mcs_scheduled_alerting_three = "计划布防三";
            mcs_scheduled_alerting_four = "计划布防四";
            mcs_wifi_config_cancle      = "wifi配置取消";
            mcs_wifi_config_prepare     = "wifi配置准备";
            mcs_wifi_config_first       = "将设备和手机与路由器保持在1米范围内";
            mcs_wifi_config_second      = "在配置wifi时，设备不能插网线";
            mcs_wifi_config_third       = "按RESET复位孔1秒后再松开";
            mcs_wifi_config_success     = "配置成功";
            mcs_wifi_config_failure     = "配置失败";
            mcs_failure_prompt          = "请重试或返回检查WIFI密码是否输入正确";
            mcs_display_password        = "显示密码";
            mcs_action_smart_config_wifi = "配置向导";
            mcs_wifi_invalid            = "请先将手机连接上WiFi网络!";
            mcs_phone_not_connect_wifi  = "手机未连接上WiFi网络";
            mcs_prompt_check_connection = "您的摄像机不在线，请检查摄像机的线路连接";
            mcs_wifi_cfg_ready          = "准备好了";
            mcs_reset_complete          = "复位好了";
            mcs_how_to_restore_factory_settings = "怎样恢复出厂设置：使用重置针长按摄像机底部的RESET重置孔10s以上";
            mcs_forgetpass_action_wizard = "按RESET复位孔1秒后松开，设备将恢复出厂设置，并自动重启，请你重新添加设备";
            mcs_prompt_check_device_connection = "您的设备不在线，请检查设备的线路连接";
            mcs_input_wifi_name         = "请输入WiFi名称";
            mcs_action_previous         = "上一步";
            mcs_io_alert_range_hint     = "IO报警时间应小于60秒";
            mcs_io_alert_time           = "IO报警时长(秒)";
            mcs_smart                   = "移动智能";
            mcs_plan                    = "定点净化";
            mcs_mute                    = "静音";
            mcs_wind_speed              = "风速";
            mcs_one                     = "一档";
            mcs_two                     = "二档";
            mcs_three                   = "三档";
            mcs_purify_mode             = "净化模式";
            mcs_video_list              = "视频列表";
            mcs_wifi_cfg_restore_factory_settings = "请将手机靠近设备，如果设备已配置过WiFi，请按RESET复位键1秒后松开，设备将恢复出厂设置并自动重启";
            mcs_mask_settings           = "遮罩设置";
            mcs_notification_settings   = "通知设置";
            mcs_alarm_settings          = "报警设置";
            mcs_motion_detection        = "移动侦测";
            mcs_io_alarm                = "I/O报警";
            mcs_connect_status          = "连接状态";
            mcs_motion_notification     = "报警和通知";
            mcs_device_connected        = "设备已连接";
            mcs_start_spray             = "开始喷雾?";
            mcs_available_network       = "网络不可用";
            mcs_select_wifi_wizard      = "请你先选择WiFi网络";
            mcs_input_wifi_password     = "输入WiFi密码";
            mcs_device_admin_password   = "设备管理密码";
            mcs_device_guest_password   = "设备访客密码";
            mcs_user_admin_password     = "用户管理密码";
            mcs_user_guest_password     = "用户访客密码";
            mcs_save_network_set        = "保存网络设置和密码";
            mcs_nickname_not_set        = "摄像机昵称未设置";
            mcs_current_wifi            = "当前Wi-Fi";
            mcs_current_password_strength = "当前密码强度";
            mcs_new_password_strength   = "新密码强度";
            mcs_needs_to_open_the_DHCP  = "你的路由器需要开启DHCP（自动获取IP）的功能，如果尝试不成功请联系管理员。";
            mcs_picture                 = "图像";
            mcs_quality                 = "质量";
            mcs_size                    = "尺寸";
            mcs_guest_login             = "访客登录";
            mcs_audio_and_video         = "音频/视频";
            mcs_volume                  = "音量";
            mcs_smooth                  = "流畅";
            mcs_clear                   = "清晰";
            mcs_handsfree               = "免提";
            mcs_headphone               = "耳机";
            mcs_my                      = "我";
            mcs_customer_service        = "客服";
            mcs_firefox_flash_uninstall = "您的flash插件不可用，解决方法请参考https://support.mozilla.org/zh-CN/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "插件";
            mcs_plug_load               = "加载插件";
            mcs_plug_load_refuse        = "不加载插件";
            mcs_plug_load_auto          = "自动";
            mcs_option                  = "选项";
            mcs_option_ok               = "确定";
            mcs_voice_call_fails        = "语音通话失败，请检查网络";
            mcs_umounted_prompt         = "是否卸载？";
            mcs_signup_prompt           = "新的？";
            mcs_wifi_connect_sucess_prompt = "备注：WIFI正常工作，您现在可以断开网络";
            mcs_manual_input_prompt     = "手动输入设备ID";
            mcs_qrscan_prompt           = "您尚未允许此应用程序访问您的相机，请在iPhone的 ’设置’－’隐私’－’相机’功能中，找到名字为’Vimtag‘的应用程序进行修改。";
            mcs_select_network_style    = "选择网络连接方式：";
            mcs_push                    = "公告栏";
            mcs_connect_power_prompt    = "备注：设备不在线，请先确保已连接电源";
            mcs_fail_microphone         = "无法访问麦克风";
            mcs_microphone_prompt       = "您尚未允许此应用程序访问您的麦克风，请在iPhone的 ’设置’－’隐私’－’麦克风’功能中，找到名字为’Vimtag‘的应用程序进行修改";
            mcs_super_clear             = "超清";
            mcs_high_clear              = "高清";
            mcs_standard_clear          = "标清";
            mcs_fluent_clear            = "流畅";
            mcs_deleting                = "正在删除...";
            mcs_event                   = "事件";
            mcs_one_hour                = "一小时";
            mcs_half_hour               = "半小时";
            mcs_five_min                = "五分钟";
            mcs_category                = "类 别 :";
            mcs_time_length             = "时 长 :";
            mcs_new                     = "新";
            mcs_week_setting_prompt     = "星期不能为空";
            mcs_time_setting_prompt     = "时间设置不能为空";
            mcs_today                   = "今天";
            mcs_wifi_config_prepare     = "wifi配置准备";
            mcs_wifi_password           = "wifi 密码";
            mcs_register_prompt         = "请您先注册账号!";
            mcs_click_login             = "点击登录";
            mcs_not_login_prompt        = "您还没登录，请点击登录！";
            mcs_product_presentation    = "首页";
            mcs_help_feedback           = "帮助";
            mcs_help_information        = "帮助";
            mcs_feedback                = "反馈";
            mcs_connect_wifi_prompt     = "连接WiFi";
            mcs_cloud                   = "云端";
            mcs_demo                    = "体验";
            mcs_shortest                = "最短";
            mcs_no_history              = "无历史记录";
            mcs_download_pc_client      = "点击下载PC客户端";
            mcs_accounts_bind_email_exist = "该账号已经绑定过邮箱";
            mcs_accounts_bind_email_busy = "该邮箱已经绑定过账号";
        }/* zh */
        else if(lang == "tw")
        {
            mcs_name                    = "名稱";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "名稱";
            mcs_old_nick                = "昵稱";
            mcs_linked                  = "已直連";
            mcs_sign_in                 = "登錄";
            mcs_back                    = "返回";
            mcs_add                     = "添加";
            mcs_add_device              = "添加設備";
            mcs_device_existed          = "設備已存在";
            mcs_cancel                  = "取消";
            mcs_exit                    = "退出";
            mcs_remember_password       = "記住密碼";
            mcs_password_remembered     = "已記住密碼";
            mcs_sign_ining              = "正在登錄...";
            mcs_cloud_server            = "雲伺服器";
            mcs_input_device_id         = "輸入設備ID";
            mcs_input_username          = "輸入用戶名";
            mcs_input_email_addr        = "輸入email地址";
            mcs_email_address           = "email地址";
            mcs_email                   = "email";
            mcs_binding                 = "綁定";
            mcs_binding_email           = "綁定郵箱";
            mcs_binding_send_prompt     = "驗證郵件已發送，請盡快登錄郵箱驗證";
            mcs_binding_email_prompt    = "忘記密碼時，可以通過該郵箱重新設置。";
            mcs_input_password          = "輸入密碼";
            mcs_access_server_failed    = "連接伺服器失敗";
            mcs_device_offline          = "設備不在線";
            mcs_invalid_password        = "密碼錯誤";
            mcs_invalid_dev             = "設備不存在";
            mcs_login_faided            = "登錄失敗";
            mcs_invalid_qrcode          = "無效二維碼";
            mcs_please_input_username   = "請輸入用戶名";
            mcs_please_input_password   = "請輸入密碼!";
            mcs_qrcode_scan_hint        = "請將方框對准設備底部的二維碼";
            mcs_device_list_empty       = "設備列表為空";
            mcs_record_list_is_empty    = "錄影列表為空";
            mcs_password_expired        = "密碼已失效";
            mcs_set_video_size          = "設置影像大小";
            mcs_hd_1280x720             = "高清 [1280x720]";
            mcs_auto                    = "自動";
            mcs_normal_640x360          = "標清 [640x360]";
            mcs_half_320x180            = "較小 [320x180]";
            mcs_small_160x90            = "最小 [160x90]";
            mcs_play                    = "觀看";
            mcs_settings                = "設置";
            mcs_messages                = "紀錄";
            mcs_alarm                   = "警報";
            mcs_delete                  = "刪除";
            mcs_delete_camera           = "刪除";
            mcs_apply                   = "應用";
            mcs_speed                   = "速度";
            mcs_others                  = "其他";
            mcs_audio                   = "聲音";
            mcs_speaker                 = "揚聲器";
            mcs_mic                     = "麥克風";
            mcs_power_frequency         = "電源頻率";
            mcs_online_upgrade          = "線上升級";
            mcs_restore_the_factory_settings = "恢復出廠設置";
            mcs_restore                 = "恢復";
            mcs_restore_camera          = "設備重啟";
            mcs_start_upgrade           = "開始升級";
            mcs_system                  = "系統";
            mcs_system_settings         = "系統設置";
            mcs_online                  = "設備上線";
            mcs_offline                 = "設備離線";
            mcs_query                   = "查詢";
            mcs_begin_time              = "開始時間";
            mcs_end_time                = "結束時間";
            mcs_mode                    = "模式";
            mcs_opened                  = "是否開啟";
            mcs_high                    = "高";
            mcs_middle                  = "中";
            mcs_low                     = "低";
            mcs_io_alert_input          = "I/O警報輸入";
            mcs_io_alert_output         = "I/O警報輸出";
            mcs_normally_open           = "常開";
            mcs_normally_close          = "常閉";
            mcs_motion_detection_sensitivity = "移動偵测靈敏度";
            mcs_daytime                 = "白天";
            mcs_night                   = "夜間";
            mcs_sdcord                  = "SD卡";
            mcs_storage_device          = "存儲設備";
            mcs_set_mask                = "設置遮罩";
            mcs_status                  = "狀態";
            mcs_capacity                = "容量";
            mcs_usage                   = "已使用";
            mcs_format                  = "格式化";
            mcs_repair                  = "修復";
            mcs_formating               = "格式化中";
            mcs_repairing               = "修復中";
            mcs_mounted                 = "已加載";
            mcs_unmounted               = "已卸載";
            mcs_mount                   = "加載";
            mcs_unmount                 = "卸載";
            mcs_ethernet                = "以太網";
            mcs_wifi                    = "WiFi";
            mcs_enabled                 = "啟用狀態";
            mcs_mac_address             = "MAC地址";
            mcs_network_status          = "網路狀態";
            mcs_wifi_mode               = "WiFi模式";
            mcs_client                  = "終端";
            mcs_ap                      = "熱點";
            mcs_start_address           = "開始地址";
            mcs_end_address             = "結束地址";
            mcs_gateway                 = "網關";
            mcs_select_network          = "選擇網路";
            mcs_dhcp_ip                 = "自動獲得IP";
            mcs_dhcp_dns                = "自動獲得DNS";
            mcs_ip_address              = "IP地址";
            mcs_network_mask            = "子網掩碼";
            mcs_input_secondary_dns     = "輸入備用DNS";
            mcs_secondary_dns           = "備用DNS";
            mcs_input_dns               = "請輸入DNS";
            mcs_input_alternate_dns     = "請輸入備用DNS";
            mcs_input_ip                = "請輸入IP地址";
            mcs_input_gateway           = "請輸入網關";
            mcs_input_network_mask      = "請輸入子網掩碼";
            mcs_wifi_list               = "Wi-Fi列表";
            mcs_display_date            = "顯示日期";
            mcs_date_format             = "日期格式";
            mcs_display_time            = "顯示時間";
            mcs_time_format             = "時間格式";
            mcs_24_hour                 = "24小時制";
            mcs_12_hour                 = "12小時制";
            mcs_display_weeks           = "顯示星期";
            mcs_date_time               = "日期/時間";
            mcs_set_time                = "時間設置";
            mcs_set_week                = "星期設置";
            mcs_stream                  = "碼流";
            mcs_encode                  = "編碼類型";
            mcs_resolution              = "解析度";
            mcs_frame_fate              = "幀率";
            mcs_maximum_bitrate         = "最大碼率";
            mcs_minimum_bitrate         = "最小碼率";
            mcs_i_frame_interval        = "I幀間隔";
            mcs_video                   = "影像";
            mcs_sampling_rate           = "採樣率(kHz)";
            mcs_nickname                = "設備昵稱";
            mcs_old_password            = "當前密碼";
            mcs_confirm_password        = "確認密碼";
            mcs_modify_password         = "修改密碼";
            mcs_password                = "密碼";
            mcs_admin_password          = "管理密碼";
            mcs_guest_password          = "訪客密碼";
            mcs_product_info            = "產品訊息";
            mcs_software_version        = "軟體版本";
            mcs_device_id               = "設備ID";
            mcs_operation               = "操作";
            mcs_record                  = "錄影";
            mcs_record_2                = "錄影";
            mcs_upgrade_now             = "立即升級";
            mcs_upgrading               = "正在升級";
            mcs_already_latest_version  = "已是最新版本";
            mcs_sensitivty              = "靈敏度";
            mcs_user_defined            = "自定義";
            mcs_time                    = "時間";
            mcs_date                    = "日期";
            mcs_finish                  = "完成";
            mcs_fail                    = "失敗";
            mcs_motion                  = "移動偵測";
            mcs_start                   = "開始";
            mcs_talk                    = "對講";
            mcs_password_input_inconsistent = "密碼不一致";
            mcs_input_6_to_20_litters   = "輸入6-20位數字(0-9)或字母(a-z、A-Z)";
            mcs_user_letter_range_hint  = "帳號為6-20比特數位（0-9）或字母（a-z、A-Z），需以字母開頭";
            mcs_password_range_hint     = "密碼為6-20位數字和字母";
            mcs_begin_with_the_letters  = "以字母開始，只能包含數字字母";
            mcs_sign_up                 = "註冊";
            mcs_sign_up_failed          = "註冊失敗";
            mcs_successful_sign_up      = "註冊成功";
            mcs_are_you_sure_delete     = "是否刪除?";
            mcs_failed_to_set_the       = "設置失敗";
            mcs_set_successfully        = "設置成功";
            mcs_downloading             = "升級中，正在下載";
            mcs_wrote                   = "已寫入";
            mcs_visit_again_later       = "請稍後再登錄";
            mcs_restart_failed          = "重啟失敗";
            mcs_upgrade_failed          = "更新失敗";
            mcs_connnected              = "已連接";
            mcs_connnected_to           = "已連接到";
            mcs_not_select              = "未選擇";
            mcs_message_list            = "信息列表";
            mcs_saved_password          = "已存密碼";
            mcs_alert                   = "警報";
            mcs_no_record               = "暫無錄影";
            mcs_new_about               = "新 : 約";
            mcs_device                  = "設備";
            mcs_config                  = "配置";
            mcs_change_password_failed  = "修改密碼失敗";
            mcs_do_you_want_restart     = "是否重啟?";
            mcs_do_you_want_restore     = "是否恢復出廠設置?";
            mcs_do_you_want_upgrade     = "是否升級?";
            mcs_load_end                = "已加載全部數據";
            mcs_loading                 = "正在加載...";
            mcs_down_refresh            = "下拉可以刷新";
            mcs_release_refresh         = "釋放刷新";
            mcs_refreshing              = "正在刷新";
            mcs_release_then_loading_data_hint = "釋放加載數據";
            mcs_pull_refresh_hint       = "上拉可以加載";
            mcs_restarting              = "重啟中";
            mcs_upgraded_time           = "更新於 : ";
            mcs_done                    = "完成";
            mcs_playback                = "回放";
            mcs_i_o_alarm               = "I/O警報";
            mcs_alarm_action            = "警報聯動";
            mcs_alarm_sources           = "警報源";
            mcs_io_output               = "I/O 輸出";
            mcs_snapshots               = "快照";
            mcs_snapshot                = "快照";
            mcs_snapshot_interval       = "拍照間隔(秒)";
            mcs_pre_record_length       = "預錄時間(秒)";
            mcs_nick_range_hint         = "昵稱為最多20位的數字和字母";
            mcs_save                    = "儲存";
            mcs_close                   = "關閉";
            mcs_snapshoting             = "拍照中";
            mcs_snapshot_failed         = "拍照失敗";
            mcs_record_failed           = "操作錄影失敗";
            mcs_saved_successfully      = "成功儲存到相簿";
            mcs_save_failed             = "儲存失敗";
            mcs_restart_to_take_effect  = "重啟後生效";
            mcs_please_allow_access_album = "請允許MIPC使用您的相簿";
            mcs_ios_privacy_setting_for_photo_prompt = "您可以在iPhone的\"設置->隱私->照片\"中,找到應用程式\"MIPC\"進行更改";
            mcs_please_allow_access_camera = "請允許MIPC使用您的相機";
            mcs_ios_privacy_setting_for_camera_prompt = "您可以在iPhone的\"設置->隱私->相機\"中,找到應用程式\"MIPC\"進行更改";
            mcs_busy_when_write         = "寫入忙";
            mcs_unknown_error           = "未知錯誤";
            mcs_i_know                  = "我知道了!";
            mcs_segment                 = "片段";
            mcs_please_relogin          = "請重新登錄";
            mcs_change_password_succeed = "修改密碼成功";
            mcs_upgrade_to_ver          = "升級到新版本";
            mcs_restore_failed          = "復原失敗";
            mcs_please_restart          = "請重啟";
            mcs_keep_network_settings   = "保留網絡設置和密碼";
            mcs_not_connected           = "未連接";
            mcs_sdcard_not_ready        = "SD卡未準備好！";
            mcs_device_not_exist        = "設備不存在";
            mcs_disable                 = "停用";
            mcs_to_determine_the        = "是否確定";
            mcs_alert_on                = "佈防";
            mcs_alert_off               = "撤防";
            mcs_alert_onoff             = "佈防/撤防";
            mcs_monday                  = "星期一";
            mcs_tuesday                 = "星期二";
            mcs_wednesday               = "星期三";
            mcs_thursday                = "星期四";
            mcs_friday                  = "星期五";
            mcs_saturday                = "星期六";
            mcs_sunday                  = "星期日";
            mcs_mon                     = "一";
            mcs_tue                     = "二";
            mcs_wed                     = "三";
            mcs_thu                     = "四";
            mcs_fri                     = "五";
            mcs_sat                     = "六";
            mcs_sun                     = "日";
            mcs_scheduled_recording     = "預約錄影";
            mcs_schedule                = "預約";
            mcs_scheduled_recording_status = "預約錄影狀態";
            mcs_folding                 = "收起";
            mcs_unfolding               = "展開";
            mcs_end_time_should_lt_begin = "結束時間必須大於開始時間";
            mcs_recording               = "錄影中";
            mcs_prerecord_interval_range_hint = "預錄時間需小於6秒";
            mcs_snapshot_interval_range_hint = "拍照間隔需為0或大於60";
            mcs_not_ready               = "未就緒";
            mcs_availablesize           = "可用容量";
            mcs_reboot                  = "重啟";
            mcs_alerter                 = "佈防";
            mcs_pir                     = "人體感應";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "編碼器";
            mcs_ok                      = "確定";
            mcs_fault                   = "錯誤";
            mcs_sensor_status           = "Sensor狀態";
            mcs_about                   = "關於";
            mcs_reset_now               = "現在重啟";
            mcs_reset_later             = "以後再說";
            mcs_prompt                  = "提示";
            mcs_select                  = "請選擇";
            mcs_available_netword       = "網路不可用,進行設置網路?";
            mcs_request_send            = "正在發送請求...";
            mcs_blank_device_id         = "設備ID不能為空";
            mcs_blank_username          = "用戶名不能為空";
            mcs_blank_password          = "密碼不能為空";
            mcs_exist_user              = "用戶已存在";
            mcs_invalid_user            = "用戶名無效";
            mcs_invalid_email_addr      = "email地址無效";
            mcs_system_err              = "系統錯誤";
            mcs_exceed_device           = "設備的用戶數超限";
            mcs_continue                = "繼續";
            mcs_prompt_exit             = "是否退出?";
            mcs_device_list             = "設備列表";
            mcs_no_sdcard               = "沒有SD卡";
            mcs_no_hard_disk            = "沒有硬盤";
            mcs_show_more               = "顯示更多...";
            mcs_shotsnop_exists         = "圖片已存在";
            mcs_input_nick              = "輸入昵稱";
            mcs_nick_not_empty          = "昵稱不能為空";
            mcs_input_new_pass          = "輸入新密碼";
            mcs_input_new_pass_again    = "再次輸入新密碼";
            mcs_new_password            = "新密碼";
            mcs_modify_network_prompt   = "網路參數修改可能造成網路中斷,確認修改?";
            mcs_wifi_disable_prompt     = "停用WiFi，繼續?";
            mcs_eth_disable_prompt      = "停用以太網卡，繼續?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "自動獲取";
            mcs_manually_set            = "手動設置";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "首選DNS";
            mcs_client_mode             = "終端模式";
            mcs_adhoc_mode              = "熱點模式";
            mcs_connect_fail            = "連接失敗";
            mcs_dhcp_server             = "DHCP伺服器";
            mcs_display_text            = "顯示名稱";
            mcs_repair_prompt           = "修復SD卡可能導致部分數據丟失，繼續？";
            mcs_format_prompt           = "格式化將刪除SD卡上所有數據，繼續？";
            mcs_mount_prompt            = "加載SD卡，繼續？";
            mcs_umount_prompt           = "卸載SD卡將導致錄影和圖片等數據無法保存，繼續？";
            mcs_sdcard_reset            = "設置成功，需要重啟攝影機才能生效,繼續？";
            mcs_sdcard_repairing        = "修復待重啟";
            mcs_sdcard_formating        = "格式化待重啟";
            mcs_sdcard_umount           = "未加載";
            mcs_valid                   = "可使用";
            mcs_io                      = "IO警報";
            mcs_input                   = "輸入";
            mcs_outinput                = "輸出";
            mcs_prompt_alert_on         = "打開佈防，繼續？";
            mcs_auto_sync_date_time     = "自動同步";
            mcs_alarm_record            = "警報錄影";
            mcs_username                = "用戶名";
            mcs_re_enter_the_password   = "重新輸入密碼";
            mcs_remember_me             = "保持登錄";
            mcs_home                    = "首頁";
            mcs_install_the_plug        = "安裝插件";
            mcs_install_the_video_plug  = "安裝影像插件";
            mcs_install_now             = "立即安裝";
            mcs_temporarily_installed_use_ordinary_video = "暫不安裝，使用普通視";
            mcs_brightness              = "亮度";
            mcs_contrast                = "對比度";
            mcs_color_saturation        = "飽和度";
            mcs_sharpness               = "銳度";
            mcs_duration                = "持續時間";
            mcs_index                   = "索引";
            mcs_remark                  = "備註";
            mcs_media_stream            = "媒體流";
            mcs_server                  = "伺服器";
            mcs_media_transfer          = "媒體傳輸";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "廠商";
            mcs_model                   = "型號";
            mcs_plugin_version          = "插件版本";
            mcs_network_interface       = "網卡";
            mcs_transfer_protocol       = "傳輸協議";
            mcs_year                    = "年";
            mcs_month                   = "月";
            mcs_day                     = "日";
            mcs_hour                    = "小時";
            mcs_minute                  = "分";
            mcs_second                  = "秒";
            mcs_millisec                = "毫秒";
            mcs_ntp                     = "時間伺服器地址";
            mcs_upload_upgrade          = "上傳升級";
            mcs_stop                    = "停止";
            mcs_info_rewind             = "快退";
            mcs_fast_forward            = "快進";
            mcs_previous_frame          = "上一幀";
            mcs_next_frame              = "下一幀";
            mcs_record_audio            = "錄音";
            mcs_week                    = "星期";
            mcs_all                     = "全選";
            mcs_id                      = "序號";
            mcs_select_all              = "全選";
            mcs_call                    = "呼叫";
            mcs_activation              = "啟動碼";
            mcs_caption                 = "上傳檔案";
            mcs_alarm_device            = "警報設備";
            mcs_not_installed           = "未安裝";
            mcs_join_us_now             = "現在就加入我們";
            mcs_reconnect_please_wait   = "重新連接中,請稍候";
            mcs_erasing                 = "正在刪除";
            mcs_writing                 = "正在寫入";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "有新版本";
            mcs_equipment_flip          = "設備翻轉";
            mcs_device_status           = "設備狀態";
            mcs_audio_setting           = "聲音設置";
            mcs_nick_modify             = "修改昵稱";
            mcs_ready                   = "就緒";
            mcs_full                    = "寫滿";
            mcs_connecting              = "連接中";
            mcs_message_buffering       = "信息緩存";
            mcs_upgrade_finish          = "升級完成";
            mcs_image                   = "圖片";
            mcs_bar                     = "條";
            mcs_init                    = "初始化";
            mcs_confirm_new_password    = "新密碼確認";
            mcs_continue_switch_wireless_network = "切換網路可能導致網路中斷,繼續？";
            mcs_restore_factory_settings_prompt = "恢復出廠設置，系統將重新啟動，繼續？";
            mcs_username_does_not_exis  = "用戶名不存在";
            mcs_username_already_exists = "用戶名已存在";
            mcs_successful_whether_login = "註冊成功,現在登錄?";
            mcs_username_demand         = "6-20位的字母或數字";
            mcs_the_password_is_empty   = "密碼為空";
            mcs_password_demand         = "6-20位的字母或數字";
            mcs_password_empty          = "確認密碼為空";
            mcs_two_password_input_inconsistent = "兩次密碼輸入不一致";
            mcs_the_user_name_is_empty  = "用戶名為空";
            mcs_upgrade_to_the_latest_version = "升級到最新版本";
            mcs_subnet_mask_wrong_format = "子網掩碼格式錯誤";
            mcs_upgrade_successful_restart_to_take_effect = "升級成功，需要重啟設備才能生效";
            mcs_need_to_restart_the_camera_to_take_effect = "需要重啟設備才能生效";
            mcs_not_allowed_close_two_network_cards = "不能同時停用以太網卡和WiFi";
            mcs_modified_successfully   = "修改成功";
            mcs_connection_successfully = "連接成功";
            mcs_connection_is_interrupted = "連接中斷";
            mcs_devices_in_the_account_overrun = "用戶設備數超限";
            mcs_format_error            = "格式錯誤";
            mcs_change                  = "修改";
            mcs_refresh                 = "刷新";
            mcs_connect                 = "連接";
            mcs_upgrade                 = "升級";
            mcs_activate                = "啟動";
            mcs_filter                  = "篩選";
            mcs_reset                   = "重置";
            mcs_prompt_alert_off        = "撤銷佈防，繼續？";
            mcs_invalid_server          = "時間伺服器地址無效";
            mcs_upgrade_prompt          = "升級設備程式，繼續？";
            mcs_restart_prompt          = "重啟設備，繼續？";
            mcs_repeat                  = "重複";
            mcs_scheduled_one           = "預約錄影一";
            mcs_scheduled_two           = "預約錄影二";
            mcs_scheduled_three         = "預約錄影三";
            mcs_scheduled_four          = "預約錄影四";
            mcs_more                    = "查看更多";
            mcs_leave                   = "鬆開載入更多";
            mcs_qrcode_scan             = "二維碼掃描";
            mcs_inserted                = "已插入";
            mcs_removed                 = "已移除";
            mcs_upgrade_init            = "開始升級";
            mcs_upgrade_download        = "升級下載";
            mcs_check                   = "升級檢查";
            mcs_audio_encoder_config    = "聲音編碼設置";
            mcs_video_codec             = "影像編碼";
            mcs_download                = "下載";
            mcs_client_download         = "客戶端下載";
            mcs_for_more_clarity_smooth_video_experience = "獲取更清晰、流暢的影像體驗";
            mcs_network                 = "網路";
            mcs_mobile_client_download  = "手機客戶端下載";
            mcs_readonly                = "唯讀";
            mcs_please_exit_and_relogin = "請退出重新登錄";
            mcs_add_device_failed       = "添加設備失敗";
            mcs_set_password            = "修改密碼";
            mcs_7x24_hours              = "7x24(小時)";
            mcs_motion_alert            = "移動偵測警報";
            mcs_mtalt                   = "%@ : 移動偵測警報";
            mcs_io_alert                = "I/O 警報";
            mcs_ioalt                   = "%@ : I/O 警報";
            mcs_time_zone               = "時區";
            mcs_select_time             = "選擇時間";
            mcs_now                     = "現在";
            mcs_mipc_have_alert_notification = "MIPC警報通知";
            mcs_notification_center     = "通知中心";
            mcs_sound                   = "聲音";
            mcs_vibration               = "振動";
            mcs_clear_cache             = "清除緩存";
            mcs_clear_cache_hint        = "你確定要清除緩存？";
            mcs_successfully_cleared_cache = "緩存成功清除";
            mcs_app_except_exit_hint    = "很抱歉，該應用程式遇到異常，將退出";
            mcs_rate_us                 = "給我們評分";
            mcs_password_too_simple_hint = "密碼太簡單，修改以提高安全性";
            mcs_check_for_new_version   = "檢查是否有新版本";
            mcs_contact_us              = "聯繫我們";
            mcs_buffer_time             = "緩衝時間";
            mcs_default                 = "出廠值";
            mcs_alarmed_devices         = "警報設備數";
            mcs_aec                     = "迴音消除";
            mcs_permission_denied       = "操作無權限";
            mcs_full_screen             = "全屏";
            mcs_forgot_your_password    = "忘記密碼";
            mcs_your_email              = "您的電子郵件";
            mcs_sign_up_confirmation    = "註冊成功，已發送啟動郵件到你提交的郵件地址，請參考郵件內容啟動帳號";
            mcs_recovery_prompt         = "請輸入您的郵箱（用戶名），我們將發送郵件告訴您如何重置密碼";
            mcs_password_reset_confirmation = "提交成功，已發送重置郵件到你提交的郵件地址，請參考郵件內容重置密碼";
            mcs_recovery_fail_no_mail   = "密碼重置失敗，本帳號未綁定郵件地址";
            mcs_recovery_fail_invalid_link = "密碼重置失敗, 請確認重置鏈接內容或者重新重置";
            mcs_recovery_ok_login       = "密碼重置成功，馬上登錄";
            mcs_active_ok_login         = "帳號啟動成功,馬上登錄";
            mcs_active_fail_invalid_link = "帳號啟動失敗，請確認啟動鏈接內容或者重新註冊帳號";
            mcs_login_fail_inactive     = "帳號未啟動,請查收啟動郵件進行啟動";
            mcs_sign_up_again           = "重新註冊";
            mcs_press_start_talk        = "按住 說話";
            mcs_release_stop_talk       = "鬆開 結束";
            mcs_delete_device           = "刪除設備";
            mcs_success_removed_equipment = "成功刪除設備";
            mcs_remove_equipment_failure = "失敗刪除設備";
            mcs_device_busy             = "設備現在正忙";
            mcs_keep_testing            = "持續測試";
            mcs_notify_tone             = "通知鈴聲";
            mcs_float_video             = "啟用懸浮影像";
            mcs_float_position          = "懸浮影像位置";
            mcs_video_resolution        = "影像解析度";
            mcs_float_resolution        = "懸浮影像解析度";
            mcs_top_left                = "左上角";
            mcs_top_right               = "右上角";
            mcs_bottom_left             = "左下角";
            mcs_bottom_right            = "右下角";
            mcs_action_next             = "下一步";
            mcs_action_cancel           = "取消";
            mcs_action_retry            = "重試";
            mcs_action_add              = "添加";
            mcs_action_apply            = "應用";
            mcs_action_config           = "配置";
            mcs_action_skip             = "跳過";
            mcs_action_ok               = "確定";
            mcs_action_add_device       = "添加設備";
            mcs_action_modify_password  = "修改密碼";
            mcs_action_config_wifi      = "設置WiFi";
            mcs_state_connect_device    = "正在連接設備";
            mcs_state_connect_device_fail = "連接設備失敗";
            mcs_state_wait_device_online = "等待設備上線";
            mcs_state_device_online     = "上線";
            mcs_state_success           = "成功";
            mcs_state_add_device_success = "添加設備成功";
            mcs_state_add_device_fail   = "添加設備失敗";
            mcs_state_modify_pass_success = "密碼修改成功";
            mcs_state_modify_pass_fail  = "密碼修改失敗";
            mcs_state_config_wifi_success = "設置WiFi成功";
            mcs_state_config_wifi_fail  = "連接失敗";
            mcs_state_connecting_to     = "正在連接到";
            mcs_network_connect_type    = "設備不在線，請你確保設備已連接電源，然後選擇網絡連接方式:";
            mcs_prompt_modify_passwd    = "您的設備密碼太簡單，請修改密碼，新密碼不得少於六個字符";
            mcs_prompt_config_wifi      = "您的設備沒有連接上無線網絡，請配置Wi-Fi.";
            mcs_step1_check_connect     = "第一步 : 將網線的一端接入您的路由器，另一端接入攝影機的網口。";
            mcs_first_step_ethernet_connect = "第一步: 將網線的一端接入您的路由器，另一端接入設備的網口。";
            mcs_step2_check_connect     = "第二步 : 將您的攝影機上電，啟動攝影機。";
            mcs_second_step_ethernet_connect = "第二步 : 將您的設備上電，啟動設備。";
            mcs_hint_check_network      = "備註 : 攝影機啟動大約需要50秒, 啟動完成後，LED信號燈每隔3秒綠燈閃爍3次,表示攝影機已經在線，嚮導將自動進入下一步。";
            mcs_the_end                 = "結束";
            mcs_hint_password_expired   = "密碼已失效,請重新添加設備";
            mcs_hint_remove_ethernet    = "備註 : WiFi工作正常，您現在可以斷開網線。";
            mcs_ip_format_incorrect     = "IP地址格式不正確";
            mcs_login_sucess            = "登錄成功";
            mcs_donot_remind            = "不再提醒";
            mcs_clear_cache_signout_hint = "清除緩存將退出重新登錄,繼續？";
            mcs_devlist_adddev_hint     = "點擊此處添加設備";
            mcs_devlist_menu_hint       = "點擊此處設置解析度";
            mcs_update_failed           = "升級失敗";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "本地";
            mcs_set_npapi               = "如果插件已安裝，請訪問 \'chrome://flags/#enable-npapi\'，啟用NPAPI，";
            mcs_set_win32k              = "訪問 \'chrome://flags/#enable-win32k-renderer-lockdown\'，停用 win32k 渲染程序鎖定功能，";
            mcs_restart_browser         = "重啟瀏覽器";
            mcs_download_location       = "檔案下載儲存位置";
            mcs_Networking_mode         = "聯網方式";
            mcs_wifi_intelligent_configuration = "WIFI連接";
            mcs_ethernet_configuration  = "以太網連接";
            mcs_wifi_connect            = "連接";
            mcs_hard_disk               = "硬盤";
            mcs_wifi_is_connection      = "正在連接中，請稍後...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi智能配置建立失敗";
            mcs_box_list                = "盒子列表";
            mcs_repair_disk_prompt      = "修復硬盤可能導致部分數據丟失，繼續？";
            mcs_format_disk_prompt      = "格式化將刪除硬盤上所有數據，繼續？";
            mcs_scheduled_alerting      = "計劃佈防";
            mcs_scheduled_alerting_one  = "計劃佈防一";
            mcs_scheduled_alerting_two  = "計劃佈防二";
            mcs_scheduled_alerting_three = "計劃佈防三";
            mcs_scheduled_alerting_four = "計劃佈防四";
            mcs_wifi_config_cancle      = "wifi配置取消";
            mcs_wifi_config_prepare     = "wifi配置準備";
            mcs_wifi_config_first       = "將設備和手機與路由器放在一米內";
            mcs_wifi_config_second      = "在配置wifi時，設備不能插網線";
            mcs_wifi_config_third       = "按RESET復位孔1秒後再鬆開";
            mcs_wifi_config_success     = "配置成功";
            mcs_wifi_config_failure     = "配置失敗";
            mcs_failure_prompt          = "請重試或返回檢查WIFI密碼是否輸入正確";
            mcs_display_password        = "顯示密碼";
            mcs_action_smart_config_wifi = "配置嚮導";
            mcs_wifi_invalid            = "您的網絡不是WiFi，請先連接WiFi!";
            mcs_phone_not_connect_wifi  = "手機未連接上WiFi網絡";
            mcs_prompt_check_connection = "您的攝影機不在線，請檢查攝影機的線路連接";
            mcs_wifi_cfg_ready          = "準備好了";
            mcs_reset_complete          = "復位好了";
            mcs_how_to_restore_factory_settings = "怎樣恢復出廠設置：使用重置針長按攝像機底部的RESET重置孔10s以上";
            mcs_forgetpass_action_wizard = "按RESET复位孔1秒后松开，设备将恢复出厂设置，并自动重启，请你重新添加设备";
            mcs_prompt_check_device_connection = "您的設備不在線，請檢查設備的線路連接";
            mcs_input_wifi_name         = "請輸入WiFi名稱";
            mcs_action_previous         = "上一步";
            mcs_io_alert_range_hint     = "IO報警時間應小於60秒";
            mcs_io_alert_time           = "IO報警時長(秒)";
            mcs_smart                   = "移動智能";
            mcs_plan                    = "定點淨化";
            mcs_mute                    = "靜音";
            mcs_wind_speed              = "風速";
            mcs_one                     = "一檔";
            mcs_two                     = "二檔";
            mcs_three                   = "三檔";
            mcs_purify_mode             = "淨化模式";
            mcs_video_list              = "視頻列表";
            mcs_wifi_cfg_restore_factory_settings = "请将手机靠近设备，如果设备已配置过WiFi，请按RESET复位键1秒后松开，设备将恢复出厂设置并自动重启";
            mcs_mask_settings           = "遮罩設置";
            mcs_notification_settings   = "通知設置";
            mcs_alarm_settings          = "報警設置";
            mcs_motion_detection        = "移動偵測";
            mcs_io_alarm                = "I/O報警";
            mcs_connect_status          = "連接狀態";
            mcs_motion_notification     = "報警和通知";
            mcs_device_connected        = "設備已連接";
            mcs_start_spray             = "開始噴霧？";
            mcs_available_network       = "網路不可用";
            mcs_select_wifi_wizard      = "請你先選擇無線網絡";
            mcs_input_wifi_password     = "輸入WiFi密碼";
            mcs_device_admin_password   = "設備管理密碼";
            mcs_device_guest_password   = "設備訪客密碼";
            mcs_user_admin_password     = "用戶管理密碼";
            mcs_user_guest_password     = "用戶訪客密碼";
            mcs_save_network_set        = "保存網絡設置和密碼";
            mcs_nickname_not_set        = "攝像機暱稱未設置";
            mcs_current_wifi            = "當前的Wi-Fi";
            mcs_current_password_strength = "當前密碼強度";
            mcs_new_password_strength   = "新密碼強度";
            mcs_needs_to_open_the_DHCP  = "你的路由器需要开启DHCP（自动获取IP）的功能，如果尝试不成功请联系管理员。";
            mcs_picture                 = "圖像";
            mcs_quality                 = "質量";
            mcs_size                    = "尺寸";
            mcs_guest_login             = "訪客登錄";
            mcs_audio_and_video         = "音頻/視頻";
            mcs_volume                  = "音量";
            mcs_smooth                  = "流暢";
            mcs_clear                   = "清晰";
            mcs_handsfree               = "免提";
            mcs_headphone               = "耳機";
            mcs_my                      = "我";
            mcs_customer_service        = "客服";
            mcs_firefox_flash_uninstall = "您的flash插件不可用，解決方法請參考https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "插件";
            mcs_plug_load               = "加載插件";
            mcs_plug_load_refuse        = "不加載插件";
            mcs_plug_load_auto          = "自動";
            mcs_option                  = "選項";
            mcs_option_ok               = "確定";
            mcs_voice_call_fails        = "語音通話失敗，請檢查網絡";
            mcs_umounted_prompt         = "是否卸載？";
            mcs_signup_prompt           = "新的？";
            mcs_wifi_connect_sucess_prompt = "備註：WIFI正常工作，您現在可以斷開網絡";
            mcs_manual_input_prompt     = "手動輸入裝置ID";
            mcs_qrscan_prompt           = "您尚未允許此應用程序訪問您的相機，請在iPhone的’設定’－’隱私’－’相機’功能中，找到名字為’Vimtag\\’的應用程序進行修改。";
            mcs_select_network_style    = "選擇網絡連接管道：";
            mcs_push                    = "公告欄";
            mcs_connect_power_prompt    = "備註：設備不線上，請先確保已連接電源";
            mcs_fail_microphone         = "無法訪問麥克風";
            mcs_microphone_prompt       = "您尚未允許此應用程序訪問您的麥克風，請在iPhone的’設定’－’隱私’－’麥克風’功能中，找到名字為’Vimtag‘的應用程序進行修改";
            mcs_super_clear             = "超清";
            mcs_high_clear              = "高清";
            mcs_standard_clear          = "標清";
            mcs_fluent_clear            = "流暢";
            mcs_deleting                = "正在删除...";
            mcs_event                   = "事件";
            mcs_one_hour                = "一小時";
            mcs_half_hour               = "半小時";
            mcs_five_min                = "五分鐘";
            mcs_category                = "類 別 :";
            mcs_time_length             = "時 長 :";
            mcs_new                     = "新";
            mcs_week_setting_prompt     = "星期不能為空";
            mcs_time_setting_prompt     = "時間設定不能為空";
            mcs_today                   = "今天";
            mcs_wifi_config_prepare     = "wifi配置準備";
            mcs_wifi_password           = "wifi 密碼";
            mcs_register_prompt         = "請您先註冊帳號！";
            mcs_click_login             = "點擊登入";
            mcs_not_login_prompt        = "您還沒登入，請點擊登入！";
            mcs_product_presentation    = "首頁";
            mcs_help_feedback           = "幫助";
            mcs_help_information        = "幫助";
            mcs_feedback                = "迴響";
            mcs_connect_wifi_prompt     = "連接WiFi";
            mcs_cloud                   = "雲端";
            mcs_demo                    = "體驗";
            mcs_shortest                = "最短";
            mcs_no_history              = "無歷史記錄";
            mcs_download_pc_client      = "點擊下載PC客戶端";
            mcs_accounts_bind_email_exist = "該帳號已經綁定過郵箱";
            mcs_accounts_bind_email_busy = "該郵箱已經綁定過帳號";
        }/* tw */
        else if(lang == "ja")
        {
            mcs_name                    = "名前";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "名前";
            mcs_old_nick                = "ニックネーム";
            mcs_linked                  = "リンクされました";
            mcs_sign_in                 = "ログイン";
            mcs_back                    = "戻る";
            mcs_add                     = "追加";
            mcs_add_device              = "設備を追加します";
            mcs_device_existed          = "デバイスがすでに存在しています";
            mcs_cancel                  = "キャンセル";
            mcs_exit                    = "ログアウト";
            mcs_remember_password       = "パスワードを記憶します";
            mcs_password_remembered     = "パスワードを記憶しました";
            mcs_sign_ining              = "ログイン...";
            mcs_cloud_server            = "クラウドサーバ";
            mcs_input_device_id         = "設備のIDを入力してください";
            mcs_input_username          = "ユーザ名を入力してください";
            mcs_input_email_addr        = "Eメールアドレスを入力してください";
            mcs_email_address           = "電子メールアドレス";
            mcs_email                   = "ポスト";
            mcs_binding                 = "バインディング";
            mcs_binding_email           = "バインディングポスト";
            mcs_binding_send_prompt     = "バインディングポスト";
            mcs_binding_email_prompt    = "あなたがメールボックスでリセットすることができ、あなたのパスワードを忘れてしまいました。";
            mcs_input_password          = "パスワードを入力してください";
            mcs_access_server_failed    = "サーバーへの接続は失敗しました。";
            mcs_device_offline          = "設備はオフラインです。";
            mcs_invalid_password        = "パスワードが間違っています。";
            mcs_invalid_dev             = "デバイスが存在しません。";
            mcs_login_faided            = "ログインに失敗しました。";
            mcs_invalid_qrcode          = "無効なQR-コードです。";
            mcs_please_input_username   = "ユーザ名を入力してください";
            mcs_please_input_password   = "パスワードを入力してください！";
            mcs_qrcode_scan_hint        = "装置の下部にあるボックスを保ち、二次元コードを整列さ";
            mcs_device_list_empty       = "デバイスリストは空です";
            mcs_record_list_is_empty    = "レコードリストは空の状態になっています。";
            mcs_password_expired        = "パスワードの有効期限が切れています";
            mcs_set_video_size          = "ビデオサイズを設定します";
            mcs_hd_1280x720             = "高画質 [1280x720]";
            mcs_auto                    = "オート";
            mcs_normal_640x360          = "ノーマル画質";
            mcs_half_320x180            = "低画質 [320x180]";
            mcs_small_160x90            = "スモール [160x90]";
            mcs_play                    = "プレビュー";
            mcs_settings                = "設定";
            mcs_messages                = "歴史";
            mcs_alarm                   = "アラーム";
            mcs_delete                  = "削除";
            mcs_delete_camera           = "削除";
            mcs_apply                   = "アプリケーション";
            mcs_speed                   = "スピード";
            mcs_others                  = "其他";
            mcs_audio                   = "オーディオ";
            mcs_speaker                 = "スピーカー";
            mcs_mic                     = "マイク";
            mcs_power_frequency         = "電源周波数";
            mcs_online_upgrade          = "オンラインアップグレード";
            mcs_restore_the_factory_settings = "工場出荷時の初期設定に戻します";
            mcs_restore                 = "戻す";
            mcs_restore_camera          = "再起動デバイス";
            mcs_start_upgrade           = "アップグレードを始めます";
            mcs_system                  = "システム";
            mcs_system_settings         = "システム設定";
            mcs_online                  = "設備はオンラインです";
            mcs_offline                 = "設備はオフラインです";
            mcs_query                   = "検索";
            mcs_begin_time              = "開始時間";
            mcs_end_time                = "エンドタイム";
            mcs_mode                    = "モード";
            mcs_opened                  = "オンしますか";
            mcs_high                    = "高";
            mcs_middle                  = "中";
            mcs_low                     = "ロー";
            mcs_io_alert_input          = "I/Oインプット";
            mcs_io_alert_output         = "I/Oアウトプット";
            mcs_normally_open           = "ノーマルオープン";
            mcs_normally_close          = "ノーマルクローズ";
            mcs_motion_detection_sensitivity = "移動検出感度";
            mcs_daytime                 = "昼間";
            mcs_night                   = "夜間";
            mcs_sdcord                  = "SDカード";
            mcs_storage_device          = "ストレージデバイス";
            mcs_set_mask                = "設定されたマスク";
            mcs_status                  = "ステータス";
            mcs_capacity                = "容量";
            mcs_usage                   = "使いました";
            mcs_format                  = "フォーマット";
            mcs_repair                  = "修復";
            mcs_formating               = "フォーマット中";
            mcs_repairing               = "修復中";
            mcs_mounted                 = "ロードしました";
            mcs_unmounted               = "アンロードしました";
            mcs_mount                   = "ロード";
            mcs_unmount                 = "アンロード";
            mcs_ethernet                = "イーサネット";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "起動状態";
            mcs_mac_address             = "MACアドレス";
            mcs_network_status          = "ネットワーク状態";
            mcs_wifi_mode               = "無線モデル";
            mcs_client                  = "ターミナル";
            mcs_ap                      = "ホットスポット";
            mcs_start_address           = "スタートアドレス";
            mcs_end_address             = "エンドアドレス";
            mcs_gateway                 = "ゲートウエイ";
            mcs_select_network          = "ネットワークを選択します";
            mcs_dhcp_ip                 = "IP アドレスを自動的に取得します";
            mcs_dhcp_dns                = "DNSを自動的に取得します";
            mcs_ip_address              = "IP アドレス";
            mcs_network_mask            = "ネットワークマスク";
            mcs_input_secondary_dns     = "セカンダリDNSを入力します";
            mcs_secondary_dns           = "セカンダリDNS";
            mcs_input_dns               = "DNSを入力してください";
            mcs_input_alternate_dns     = "代替DNSを入力してください";
            mcs_input_ip                = "IPアドレスを入力してください";
            mcs_input_gateway           = "ゲートウェイを入力してください";
            mcs_input_network_mask      = "ネットワークマスクを入力してください";
            mcs_wifi_list               = "Wi-Fiリスト";
            mcs_display_date            = "日付を表示します";
            mcs_date_format             = "日付フォーマット";
            mcs_display_time            = "ディスプレー時間";
            mcs_time_format             = "時間フォーマット";
            mcs_24_hour                 = "24時間";
            mcs_12_hour                 = "12時間";
            mcs_display_weeks           = "週間を表示します";
            mcs_date_time               = "日付/時間";
            mcs_set_time                = "時間設定";
            mcs_set_week                = "週間を設定します";
            mcs_stream                  = "ストリーム";
            mcs_encode                  = "エンコード";
            mcs_resolution              = "解像度";
            mcs_frame_fate              = "FPS";
            mcs_maximum_bitrate         = "最大ビットレート";
            mcs_minimum_bitrate         = "最小ビットレート";
            mcs_i_frame_interval        = "Iフレーム間隔";
            mcs_video                   = "ビデオ";
            mcs_sampling_rate           = "サンプリングレート(kHz)";
            mcs_nickname                = "ニックネーム";
            mcs_old_password            = "現在のパスワード";
            mcs_confirm_password        = "パスワードを確認します";
            mcs_modify_password         = "パスワードを変更します";
            mcs_password                = "パスワード";
            mcs_admin_password          = "管理パスワード";
            mcs_guest_password          = "ゲストパスワード";
            mcs_product_info            = "製品情報";
            mcs_software_version        = "ソフトウェアバージョン";
            mcs_device_id               = "デバイスID";
            mcs_operation               = "操作";
            mcs_record                  = "レコード";
            mcs_record_2                = "レコード";
            mcs_upgrade_now             = "すぐアップグレードします";
            mcs_upgrading               = "アップグレード中";
            mcs_already_latest_version  = "最新のバージョンです";
            mcs_sensitivty              = "感度";
            mcs_user_defined            = "ユーザー定義";
            mcs_time                    = "時間";
            mcs_date                    = "日付";
            mcs_finish                  = "完成";
            mcs_fail                    = "失敗";
            mcs_motion                  = "動き検出";
            mcs_start                   = "開始";
            mcs_talk                    = "トークバック";
            mcs_password_input_inconsistent = "パスワードが確認用と不一致です";
            mcs_input_6_to_20_litters   = "入力6-20文字（Z、A-Z）または数字（0-9）";
            mcs_user_letter_range_hint  = "アカウントを6-20桁（使用）または文字（a-z、A-Z）が必要で、字母開頭";
            mcs_password_range_hint     = "パスワードは6-20文字または数字です";
            mcs_begin_with_the_letters  = "文字で始まり、文字または数字を含みます";
            mcs_sign_up                 = "登録";
            mcs_sign_up_failed          = "登録に失敗しました";
            mcs_successful_sign_up      = "登録に成功しました";
            mcs_are_you_sure_delete     = "削除しますか？";
            mcs_failed_to_set_the       = "設定に失敗しました";
            mcs_set_successfully        = "設定に成功しました";
            mcs_downloading             = "ダウンロードしています";
            mcs_wrote                   = "書き込んでいました";
            mcs_visit_again_later       = "後程に再ログインしてください";
            mcs_restart_failed          = "リスタートに失敗しました";
            mcs_upgrade_failed          = "アップデートに失敗しました";
            mcs_connnected              = "連続しました";
            mcs_connnected_to           = "に接続されている";
            mcs_not_select              = "選択しました";
            mcs_message_list            = "メッセージリスト";
            mcs_saved_password          = "保存されたパスワード";
            mcs_alert                   = "アラーム";
            mcs_no_record               = "レコードがありません";
            mcs_new_about               = "新 : しい 約";
            mcs_device                  = "設備";
            mcs_config                  = "配置";
            mcs_change_password_failed  = "パスワード変更に失敗しました";
            mcs_do_you_want_restart     = "再起動 しますか？";
            mcs_do_you_want_restore     = "工場出荷時の初期設定に戻しますか？";
            mcs_do_you_want_upgrade     = "アップグレードしますか？";
            mcs_load_end                = "ロードされました";
            mcs_loading                 = "積載...";
            mcs_down_refresh            = "ダウンでリフレッシュします";
            mcs_release_refresh         = "リフレッシュリリース";
            mcs_refreshing              = "爽やか";
            mcs_release_then_loading_data_hint = "ロードデータをリリースします";
            mcs_pull_refresh_hint       = "プルでリフレッシュします";
            mcs_restarting              = "リスタートしています";
            mcs_upgraded_time           = "更新日 : ";
            mcs_done                    = "完成";
            mcs_playback                = "プレーバック";
            mcs_i_o_alarm               = "I/Oアラーム";
            mcs_alarm_action            = "アラームアクション";
            mcs_alarm_sources           = "アラームソース";
            mcs_io_output               = "I/O アウトプット";
            mcs_snapshots               = "スナップショット";
            mcs_snapshot                = "スナップショット";
            mcs_snapshot_interval       = "スナップショット間隔(秒)";
            mcs_pre_record_length       = "プリレコード時間(秒)";
            mcs_nick_range_hint         = "ニックネームは20数字と文字以内です";
            mcs_save                    = "保存";
            mcs_close                   = "クローズ";
            mcs_snapshoting             = "で撮影";
            mcs_snapshot_failed         = "撮影に失敗しました";
            mcs_record_failed           = "レコードに失敗しました";
            mcs_saved_successfully      = "保存に成功しました";
            mcs_save_failed             = "保存に失敗しました";
            mcs_restart_to_take_effect  = "再起動後、有効になり ます。";
            mcs_please_allow_access_album = "MIPCはフォトアルバムを訪問することができるように設定し下さい.";
            mcs_ios_privacy_setting_for_photo_prompt = "iPhone \"設定 - >プライバシー - >写真\"中でアプリケーション\"MIPC\"変更することができます.";
            mcs_please_allow_access_camera = "MIPCは、お使いのカメラを訪問することを許可してください";
            mcs_ios_privacy_setting_for_camera_prompt = "iPhone \"設定 ->プライバシー ->カメラ\"中でアプリケーション\"MIPC\"変更することができます";
            mcs_busy_when_write         = "書き込みは忙しいです";
            mcs_unknown_error           = "不明なエラー";
            mcs_i_know                  = "分かりました！";
            mcs_segment                 = "セグメント";
            mcs_please_relogin          = "再ログインしてください";
            mcs_change_password_succeed = "パスワード変更に成功しました";
            mcs_upgrade_to_ver          = "新しいいバージョンをアップグレードします";
            mcs_restore_failed          = "リストアに失敗しました";
            mcs_please_restart          = "を再起動してください";
            mcs_keep_network_settings   = "予約のネットワーク設定とパスワード";
            mcs_not_connected           = "接続されていない";
            mcs_sdcard_not_ready        = "SDカードの準備中エラーを確認しています。";
            mcs_device_not_exist        = "デバイスが存在しません";
            mcs_disable                 = "無効";
            mcs_to_determine_the        = "確定しますか";
            mcs_alert_on                = "アラータ";
            mcs_alert_off               = "アラートを削除します";
            mcs_alert_onoff             = "オン/オフに警告";
            mcs_monday                  = "月曜";
            mcs_tuesday                 = "火曜";
            mcs_wednesday               = "水曜";
            mcs_thursday                = "木曜";
            mcs_friday                  = "金曜";
            mcs_saturday                = "土曜";
            mcs_sunday                  = "日曜";
            mcs_mon                     = "一";
            mcs_tue                     = "二";
            mcs_wed                     = "三";
            mcs_thu                     = "四";
            mcs_fri                     = "五";
            mcs_sat                     = "六";
            mcs_sun                     = "日";
            mcs_scheduled_recording     = "予約レコード";
            mcs_schedule                = "スケジュール";
            mcs_scheduled_recording_status = "予約レコードのステータス";
            mcs_folding                 = "折り畳み";
            mcs_unfolding               = "展開";
            mcs_end_time_should_lt_begin = "終了時間は開始時間より大きくなければなりません";
            mcs_recording               = "レコード中";
            mcs_prerecord_interval_range_hint = "プリレコード間隔は6以下です";
            mcs_snapshot_interval_range_hint = "スナップショット間隔は0または60以上です";
            mcs_not_ready               = "また準備完了していません";
            mcs_availablesize           = "有効サイズ";
            mcs_reboot                  = "リブート";
            mcs_alerter                 = "アラームを開く";
            mcs_pir                     = "人体感応";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "エンコーダー";
            mcs_ok                      = "確定";
            mcs_fault                   = "故障";
            mcs_sensor_status           = "センサーステータス";
            mcs_about                   = "について";
            mcs_reset_now               = "今すぐリセットします";
            mcs_reset_later             = "後程リセットします";
            mcs_prompt                  = "プロンプト";
            mcs_select                  = "選択";
            mcs_available_netword       = "ネットワークは無効で、設定しますか？";
            mcs_request_send            = "リクエストを送信中…";
            mcs_blank_device_id         = "デバイスIDは空にすることはできません";
            mcs_blank_username          = "ユーザー名は空にすることはできません";
            mcs_blank_password          = "パスワードは空にすることはできません";
            mcs_exist_user              = "ユーザー名は既に存在しています";
            mcs_invalid_user            = "無効なユーザ名";
            mcs_invalid_email_addr      = "無効な電子メールアドレス";
            mcs_system_err              = "システムエラー";
            mcs_exceed_device           = "デバイスのユーザーはオーバーランです";
            mcs_continue                = "続けます";
            mcs_prompt_exit             = "かどうかを名目に？";
            mcs_device_list             = "デバイスリスト";
            mcs_no_sdcard               = "SDカードがありません";
            mcs_no_hard_disk            = "ハード·ドライブはありません";
            mcs_show_more               = "もっと詳しい…";
            mcs_shotsnop_exists         = "写真は既に存在しています";
            mcs_input_nick              = "ニックネームを入力します";
            mcs_nick_not_empty          = "ニックは空にすることはできません";
            mcs_input_new_pass          = "新しいパスワードを入力してください";
            mcs_input_new_pass_again    = "もう一度新しいパスワードを入力してください";
            mcs_new_password            = "新しいパスワード";
            mcs_modify_network_prompt   = "ネットワーク変更はネットワーク障害を引き起こす可能性があり、変更確認?";
            mcs_wifi_disable_prompt     = "Wi-Fiを無効にします。続けますか？";
            mcs_eth_disable_prompt      = "イーサネットを無効にします。続けますか？";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "自動的に取得します";
            mcs_manually_set            = "手動設定";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "プライマリDNS";
            mcs_client_mode             = "ターミナルモデル";
            mcs_adhoc_mode              = "アドホック";
            mcs_connect_fail            = "接続に失敗しました";
            mcs_dhcp_server             = "DHCPサーバ";
            mcs_display_text            = "テキストを表示します";
            mcs_repair_prompt           = "SDカードの修復は一部のデータが失われる可能です。続けますか";
            mcs_format_prompt           = "フォーマットはSDカードのすべてのデータを削除します。続けますか？";
            mcs_mount_prompt            = "SDカードをマウントします。続けますか？";
            mcs_umount_prompt           = "SDカードのアンマウントはビデオと写真が保存することができません。続けますか？";
            mcs_sdcard_reset            = "設定に成功しました。カメラ再起動後有効になります。続けますか？";
            mcs_sdcard_repairing        = "再起動後に修復します";
            mcs_sdcard_formating        = "再起動後にフォーマットします";
            mcs_sdcard_umount           = "アンマウント";
            mcs_valid                   = "有効";
            mcs_io                      = "IOアラーム";
            mcs_input                   = "インプット";
            mcs_outinput                = "アウトプット";
            mcs_prompt_alert_on         = "アラートオン、続けますか？";
            mcs_auto_sync_date_time     = "自動同期";
            mcs_alarm_record            = "アラームレコード";
            mcs_username                = "ユーザ名";
            mcs_re_enter_the_password   = "もう一度パスワードを入力してください。";
            mcs_remember_me             = "サインをそのままします";
            mcs_home                    = "ホーム";
            mcs_install_the_plug        = "プラグインをインストールします";
            mcs_install_the_video_plug  = "ビデオプラグインをインストールします";
            mcs_install_now             = "今すぐインストールします";
            mcs_temporarily_installed_use_ordinary_video = "いいえ、後程でインストールします";
            mcs_brightness              = "明るさ";
            mcs_contrast                = "対比";
            mcs_color_saturation        = "飽和";
            mcs_sharpness               = "鋭利";
            mcs_duration                = "デュレーション";
            mcs_index                   = "索引";
            mcs_remark                  = "備考";
            mcs_media_stream            = "メディア";
            mcs_server                  = "サーバ";
            mcs_media_transfer          = "転送メディア";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "メーカー";
            mcs_model                   = "モデル";
            mcs_plugin_version          = "プラグインバージョン";
            mcs_network_interface       = "ネットワークインタフェース";
            mcs_transfer_protocol       = "転送プロトコル";
            mcs_year                    = "年";
            mcs_month                   = "月";
            mcs_day                     = "日";
            mcs_hour                    = "時間";
            mcs_minute                  = "分";
            mcs_second                  = "秒";
            mcs_millisec                = "ミリ";
            mcs_ntp                     = "時間サーバ";
            mcs_upload_upgrade          = "アップロード";
            mcs_stop                    = "ストップ";
            mcs_info_rewind             = "リワインド";
            mcs_fast_forward            = "早送り";
            mcs_previous_frame          = "前のフレーム";
            mcs_next_frame              = "次のフレーム";
            mcs_record_audio            = "オーディオレコード";
            mcs_week                    = "週間";
            mcs_all                     = "全部";
            mcs_id                      = "ID";
            mcs_select_all              = "全部を選択します";
            mcs_call                    = "コール";
            mcs_activation              = "アクティベーション";
            mcs_caption                 = "ファイルをアップロードします";
            mcs_alarm_device            = "アラートデバイス";
            mcs_not_installed           = "インストールされていません";
            mcs_join_us_now             = "今すぐ私たちに参加します";
            mcs_reconnect_please_wait   = "再接続しています。お待ちください";
            mcs_erasing                 = "削除しています";
            mcs_writing                 = "書き込んでいます";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "新しいバージョンがあります";
            mcs_equipment_flip          = "フリップ";
            mcs_device_status           = "デバイスステータス";
            mcs_audio_setting           = "オーディオ設定";
            mcs_nick_modify             = "ニックネームを変更します";
            mcs_ready                   = "OKです";
            mcs_full                    = "フルになりました";
            mcs_connecting              = "接続しています";
            mcs_message_buffering       = "メッセージバッファリング";
            mcs_upgrade_finish          = "アップグレード完了しました";
            mcs_image                   = "写真";
            mcs_bar                     = "条";
            mcs_init                    = "初期化";
            mcs_confirm_new_password    = "新しいパスワードを確認します";
            mcs_continue_switch_wireless_network = "ネットワークをスイッチすると、ネットワーク障害を引き起こす可能があります。続けますか？";
            mcs_restore_factory_settings_prompt = "工場出荷時の初期設定に戻すと、カメラは再起動します。続けますか？";
            mcs_username_does_not_exis  = "ユーザ名は存在していません";
            mcs_username_already_exists = "ユーザー名は既に存在しています";
            mcs_successful_whether_login = "登録に成功しました。今サインインしますか？";
            mcs_username_demand         = "文字で始まる6-20文字や数字";
            mcs_the_password_is_empty   = "パスワードは空です";
            mcs_password_demand         = "6-20 文字の英語や数字";
            mcs_password_empty          = "パスワードは空です";
            mcs_two_password_input_inconsistent = "パスワードが確認用と不一致です";
            mcs_the_user_name_is_empty  = "ユーザ名は空です";
            mcs_upgrade_to_the_latest_version = "最新のバージョンにアップグレードします";
            mcs_subnet_mask_wrong_format = "ネットワークマスクは無効な形式です";
            mcs_upgrade_successful_restart_to_take_effect = "成功に成功しました。有効にするデバイスを再起動します.";
            mcs_need_to_restart_the_camera_to_take_effect = "カメラを再起動後に、有効になります";
            mcs_not_allowed_close_two_network_cards = "イーサネットとWi-Fiが同時に無効にすることはできません";
            mcs_modified_successfully   = "変更に成功しました";
            mcs_connection_successfully = "接続に成功しました";
            mcs_connection_is_interrupted = "接続が壊れました";
            mcs_devices_in_the_account_overrun = "アカウント内のデバイスはオーバーランです";
            mcs_format_error            = "フォーマットエラー";
            mcs_change                  = "変更";
            mcs_refresh                 = "リフレッシュ";
            mcs_connect                 = "接続";
            mcs_upgrade                 = "アップグレード";
            mcs_activate                = "アクティブ";
            mcs_filter                  = "フィルタ";
            mcs_reset                   = "リセット";
            mcs_prompt_alert_off        = "アラートをオフにします。続けますか";
            mcs_invalid_server          = "無効なタイムサーバ";
            mcs_upgrade_prompt          = "デバイスソフトウェアをアップグレードします。続けます？";
            mcs_restart_prompt          = "再起動デバイス、継続?";
            mcs_repeat                  = "繰り返す";
            mcs_scheduled_one           = "スケジュール1";
            mcs_scheduled_two           = "スケジュール2";
            mcs_scheduled_three         = "スケジュール3";
            mcs_scheduled_four          = "スケジュール4";
            mcs_more                    = "もっと詳しい";
            mcs_leave                   = "離してもっとロードができます";
            mcs_qrcode_scan             = "QRコードスキャン";
            mcs_inserted                = "挿入しました";
            mcs_removed                 = "削除しました";
            mcs_upgrade_init            = "アップグレードが始まります";
            mcs_upgrade_download        = "アップグレードしてダウンロードします";
            mcs_check                   = "アップグレードして検査します";
            mcs_audio_encoder_config    = "オーディオコーデック";
            mcs_video_codec             = "ビデオコーデック";
            mcs_download                = "ダウンロード";
            mcs_client_download         = "クライアントダウンロード";
            mcs_for_more_clarity_smooth_video_experience = "もっと高画質で流暢のビデオを取得します";
            mcs_network                 = "ネットワーク";
            mcs_mobile_client_download  = "携帯クライアントダウンロード";
            mcs_readonly                = "リードオンリー";
            mcs_please_exit_and_relogin = "ログアウトして再ログインしてください";
            mcs_add_device_failed       = "設備の追加に失敗しました";
            mcs_set_password            = "パスワードの変更";
            mcs_7x24_hours              = "7x24(時間";
            mcs_motion_alert            = "モーション警告";
            mcs_mtalt                   = "%@ : モーション警告";
            mcs_io_alert                = "I/O 警告";
            mcs_ioalt                   = "%@ : I/O 警告";
            mcs_time_zone               = "時間帯";
            mcs_select_time             = "時間を選択";
            mcs_now                     = "今";
            mcs_mipc_have_alert_notification = "MIPCはアラート通知を持っている";
            mcs_notification_center     = "通知センター";
            mcs_sound                   = "音声";
            mcs_vibration               = "振動";
            mcs_clear_cache             = "キャッシュのクリア";
            mcs_clear_cache_hint        = "あなたはキャッシュをクリアしてもよろしいですか？";
            mcs_successfully_cleared_cache = "成功し、キャッシュをクリア";
            mcs_app_except_exit_hint    = "申し訳ありませんが、アプリケーションでは、例外が発生したため終了します.";
            mcs_rate_us                 = "レート問い合わせ";
            mcs_password_too_simple_hint = "パスワードは、セキュリティを向上させるために修正された、あまりにも簡単です.";
            mcs_check_for_new_version   = "新しいバージョンの確認";
            mcs_contact_us              = "お問い合わせ";
            mcs_buffer_time             = "時間をバッファリング";
            mcs_default                 = "デフォルト";
            mcs_alarmed_devices         = "アラーム発生デバイス";
            mcs_aec                     = "エコーキャンセル";
            mcs_permission_denied       = "パーミッションが拒否されました";
            mcs_full_screen             = "フルスクリーン";
            mcs_forgot_your_password    = "パスワードを忘れました";
            mcs_your_email              = "あなたのメールアドレス";
            mcs_sign_up_confirmation    = "確認メールを送信し、メールアドレスを確認するために送信されています。このメールに含まれるリンクにアクセスすると、アカウントをアクティブにします.";
            mcs_recovery_prompt         = "メールアドレス（ユーザー名）を入力してください、私たちは、パスワードをリセットする方法を教えにメッセージを送信します.";
            mcs_password_reset_confirmation = "電子メールは送信したメールアドレスに送信されています, このメールで送信されたリンクは、パスワードをリセットするために訪れる.";
            mcs_recovery_fail_no_mail   = "パスワードの回復は失敗します, このアカウントは、電子メールを結合していない";
            mcs_recovery_fail_invalid_link = "パスワードの回復は失敗します, 必ずリンクまたは回復の内容を再度確認してください.";
            mcs_recovery_ok_login       = "パスワード回復成功。にはサインインをしてください.";
            mcs_active_ok_login         = "アクティブな成功を占めている。にはサインインをしてください.";
            mcs_active_fail_invalid_link = "アクティブなアカウントは失敗。リンクの確認して内容確認するか、再度、無料サインアップをしてください.";
            mcs_login_fail_inactive     = "アカウントが非アクティブです。アクティブ、アクティブ電子メールの内容に従ってください.";
            mcs_sign_up_again           = "再びサインアップする";
            mcs_press_start_talk        = "話を押して、";
            mcs_release_stop_talk       = "停止するに放し";
            mcs_delete_device           = "デバイスを削除";
            mcs_success_removed_equipment = "デバイスを正常に削除します。";
            mcs_remove_equipment_failure = "機器の故障を削除します";
            mcs_device_busy             = "デバイスがビジー状態である";
            mcs_keep_testing            = "テストを継続";
            mcs_notify_tone             = "通知の着信音";
            mcs_float_video             = "Enabelフローティングビデオ";
            mcs_float_position          = "フローティング•ビデオ•ポジション";
            mcs_video_resolution        = "ビデオ解像度";
            mcs_float_resolution        = "フローティング•ビデオ解像度";
            mcs_top_left                = "左上";
            mcs_top_right               = "右上";
            mcs_bottom_left             = "左下";
            mcs_bottom_right            = "右下";
            mcs_action_next             = "次";
            mcs_action_cancel           = "キャンセル";
            mcs_action_retry            = "リトライ";
            mcs_action_add              = "加える";
            mcs_action_apply            = "アプリケーション";
            mcs_action_config           = "設定";
            mcs_action_skip             = "スキップ";
            mcs_action_ok               = "Ok";
            mcs_action_add_device       = "デバイスの追加";
            mcs_action_modify_password  = "パスワードを変更";
            mcs_action_config_wifi      = "設定Wi-Fi";
            mcs_state_connect_device    = "デバイスの接続";
            mcs_state_connect_device_fail = "機器の故障を接続";
            mcs_state_wait_device_online = "デバイスがオンラインされるのを待つ";
            mcs_state_device_online     = "オンライン";
            mcs_state_success           = "成功";
            mcs_state_add_device_success = "デバイスの成功を追加";
            mcs_state_add_device_fail   = "デバイスの故障を追加";
            mcs_state_modify_pass_success = "パスワードは正常に変更された";
            mcs_state_modify_pass_fail  = "パスワードの変更は失敗します";
            mcs_state_config_wifi_success = "設定無線LANの成功";
            mcs_state_config_wifi_fail  = "接続に失敗しました";
            mcs_state_connecting_to     = "への接続";
            mcs_network_connect_type    = "デバイスは、デバイスの電源がオンになっていることを確認し、[ネットワーク接続]を選択し、オンラインではありません。";
            mcs_prompt_modify_passwd    = "デバイスのパスワードが簡単すぎる、パスワードを変更してください。新しいパスワードは6文字未満でなければなりません.";
            mcs_prompt_config_wifi      = "お使いのデバイスは、まだあなたの無線LANに接続されていない、あなたのWi-Fiを設定してください。.";
            mcs_step1_check_connect     = "ステップ1 : ルータとカメラ用ネットワークケーブルを接続.";
            mcs_first_step_ethernet_connect = "ステップ1：あなたのルータとアクセスデバイスのネットワークポートのもう一方の端に接続するためのネットワークケーブルの一方の端を接続します。";
            mcs_step2_check_connect     = "ステップ2 : お使いのカメラの電源を入れます.";
            mcs_second_step_ethernet_connect = "ステップ2 : お使いのデバイスの電源は、デバイスを起動します。";
            mcs_hint_check_network      = "注意 : 起動が完了した後にカメラは、起動に約50秒かかり、LEDが3秒ごとにカメラがオンラインだったことを意味し、緑色のランプが点滅を3回点灯し、ウィザードは自動的に次のステップに入ります.";
            mcs_the_end                 = "終わり";
            mcs_hint_password_expired   = "パスワードの有効期限が切れて、再度追加してください。デバイス";
            mcs_hint_remove_ethernet    = "備考 : 無線LANが正常に動作し、あなたが今、ネットワークケーブルを取り外すことができます.";
            mcs_ip_format_incorrect     = "IPアドレス形式が正しくありません";
            mcs_login_sucess            = "ログインに成功";
            mcs_donot_remind            = "思い出さないでください";
            mcs_clear_cache_signout_hint = "キャッシュが継続して再度サインインが終了しますクリア？";
            mcs_devlist_adddev_hint     = "機器を追加するには、ここをクリックします";
            mcs_devlist_menu_hint       = "解像度を設定するには、ここをクリックしてください";
            mcs_update_failed           = "アップグレードに失敗しました";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "ローカル";
            mcs_set_npapi               = "プラグインをインストールしているならば、を訪問してください \'chrome://flags/#enable-npapi\'、を有効にNPAPI、";
            mcs_set_win32k              = "訪問 \'chrome://flags/#enable-win32k-renderer-lockdown\', win32k レンダラのロックダウンを無効にする,";
            mcs_restart_browser         = "ブラウザを再起動します";
            mcs_download_location       = "ダウンロード保存先";
            mcs_Networking_mode         = "ネットワーキング";
            mcs_wifi_intelligent_configuration = "WiFi接続";
            mcs_ethernet_configuration  = "イーサネット接続";
            mcs_wifi_connect            = "接続";
            mcs_hard_disk               = "ハードディスク";
            mcs_wifi_is_connection      = "接続、お待ちください...";
            mcs_wifi_intelligent_configuration_setup_ailure = "無線LANインテリジェント構成セットアップの失敗";
            mcs_box_list                = "リストボックス";
            mcs_repair_disk_prompt      = "修復ディスクは、いくつかのデータを失ったことがあり, 続けます?";
            mcs_format_disk_prompt      = "修復ディスクは、いくつかのデータを失ったことがあり, 続けます?";
            mcs_scheduled_alerting      = "計画の布";
            mcs_scheduled_alerting_one  = "計画の布 1";
            mcs_scheduled_alerting_two  = "計画の布 2";
            mcs_scheduled_alerting_three = "計画の布 3";
            mcs_scheduled_alerting_four = "計画の布 4";
            mcs_wifi_config_cancle      = "無線LANの設定が解除します";
            mcs_wifi_config_prepare     = "無線LANの前提条件";
            mcs_wifi_config_first       = "機器や携帯電話やルータは、1メートルの範囲内に維持しました";
            mcs_wifi_config_second      = "無線LANを設定する場合、デバイスは、ネットワークケーブルを接続することはできません";
            mcs_wifi_config_third       = "一秒を放しRESETリセット穴を押してください";
            mcs_wifi_config_success     = "コンフィギュレーションの成功";
            mcs_wifi_config_failure     = "構成に失敗しました";
            mcs_failure_prompt          = "再試行するか、正しく入力されている無線LANのパスワードを確認するために戻ってください";
            mcs_display_password        = "パスワードを表示";
            mcs_action_smart_config_wifi = "構成ウィザード";
            mcs_wifi_invalid            = "お使いのネットワークは、WiFiではないが、無線LANを接続してください！";
            mcs_phone_not_connect_wifi  = "WiFiネットワークが接続されていません";
            mcs_prompt_check_connection = "お使いのカメラは、オンラインではない、カメラの回線接続を確認してください.";
            mcs_wifi_cfg_ready          = "レディー";
            mcs_reset_complete          = "リセットが完了すると";
            mcs_how_to_restore_factory_settings = "工場出荷時の設定を復元する方法：10秒以上カメラの底部にあるRESET穴を押してRESET端子を使用します";
            mcs_forgetpass_action_wizard = "プレスRESETはリリース後孔10秒をリセットし、デバイスが自動的に再起動します管理者のパスワードをリセットします";
            mcs_prompt_check_device_connection = "お使いのデバイスがオンラインでない、デバイスを接続するための配線をチェック";
            mcs_input_wifi_name         = "入力してください無線LAN名";
            mcs_action_previous         = "前";
            mcs_io_alert_range_hint     = "IOアラート時間は60秒未満である必要があります";
            mcs_io_alert_time           = "IOアラーム時間(秒)";
            mcs_smart                   = "スマート";
            mcs_plan                    = "プラン";
            mcs_mute                    = "ミュート";
            mcs_wind_speed              = "風速";
            mcs_one                     = "一方の歯車";
            mcs_two                     = "二つの歯車";
            mcs_three                   = "三つの歯車";
            mcs_purify_mode             = "モードを浄化";
            mcs_video_list              = "動画リスト";
            mcs_wifi_cfg_restore_factory_settings = "、デバイスの近くに携帯電話を保持する装置が無線LANを設定した場合、1秒間RESET穴を押して放し、デバイスは工場出荷時の設定に復元され、自動的に再起動";
            mcs_mask_settings           = "マスクの設定";
            mcs_notification_settings   = "通知設定";
            mcs_alarm_settings          = "アラームの設定";
            mcs_motion_detection        = "モーション検出";
            mcs_io_alarm                = "I/Oアラーム";
            mcs_connect_status          = "接続状況";
            mcs_motion_notification     = "アラートと通知";
            mcs_device_connected        = "デバイスが接続されています";
            mcs_start_spray             = "スプレーを開始？";
            mcs_available_network       = "ネットワークが利用できません";
            mcs_select_wifi_wizard      = "まず、WiFiネットワークを選択してください";
            mcs_input_wifi_password     = "入力された無線LANのパスワード";
            mcs_device_admin_password   = "デバイスの管理者パスワード";
            mcs_device_guest_password   = "デバイスゲストパスワード";
            mcs_user_admin_password     = "ユーザー管理者パスワード";
            mcs_user_guest_password     = "ユーザゲストパスワード";
            mcs_save_network_set        = "ネットワーク設定とパスワードを保存します";
            mcs_nickname_not_set        = "カメラのニックネームが設定されていません";
            mcs_current_wifi            = "現在のWi-Fi";
            mcs_current_password_strength = "現在のパスワードの強度";
            mcs_new_password_strength   = "新しいパスワードの強度";
            mcs_needs_to_open_the_DHCP  = "ルーターは、DHCPを開く必要機能（自動的にIPを取得）の試みが失敗した場合、管理者に連絡してください。";
            mcs_picture                 = "絵";
            mcs_quality                 = "品質";
            mcs_size                    = "サイズ";
            mcs_guest_login             = "ゲストのログイン";
            mcs_audio_and_video         = "オーディオ/ビデオ";
            mcs_volume                  = "ボリューム";
            mcs_smooth                  = "スムーズ";
            mcs_clear                   = "クリア";
            mcs_handsfree               = "ハンズフリー";
            mcs_headphone               = "ヘッドフォン";
            mcs_my                      = "私の";
            mcs_customer_service        = "顧客サービス";
            mcs_firefox_flash_uninstall = "あなたのFlashプラグインが利用できない、解決策はhttps://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-workを参照してください。";
            mcs_plug                    = "ウィジェット";
            mcs_plug_load               = "ロードプラグイン";
            mcs_plug_load_refuse        = "プラグインをロードしないでください";
            mcs_plug_load_auto          = "自動";
            mcs_option                  = "オプション";
            mcs_option_ok               = "決定する";
            mcs_voice_call_fails        = "音声コールは、ネットワークをチェックし、失敗した";
            mcs_umounted_prompt         = "アンマウントするか?";
            mcs_signup_prompt           = "ここで新しい?";
            mcs_wifi_connect_sucess_prompt = "注：WIFIを正常に仕事して、あなたは今オフネットワーク";
            mcs_manual_input_prompt     = "手動入力デバイスID";
            mcs_qrscan_prompt           = "あなたはまだこのアプリケーションを許可訪問あなたのカメラは、iPhone」設定」－」プライバシー」－」カメラ」機能で、名前を見つけVimtag」「のアプリケーションを手直しする。";
            mcs_select_network_style    = "ネットワーク接続方式を選ぶ：";
            mcs_push                    = "お知らせ";
            mcs_connect_power_prompt    = "注：設備オンラインでない、先に確保は電源に接続します";
            mcs_fail_microphone         = "マイクにアクセスできない";
            mcs_microphone_prompt       = "「Vimtag「アプリケーションの名前を変更することが見つけ、「マイク」機能 - 「プライバシー」 - あなたは「セット」iPhoneで、このアプリケーションがマイクにアクセスできるようにではありません";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "削除している...";
            mcs_event                   = "事件";
            mcs_one_hour                = "一時間";
            mcs_half_hour               = "半時間";
            mcs_five_min                = "5分";
            mcs_category                = "類別";
            mcs_time_length             = "時間が長い";
            mcs_new                     = "新しい";
            mcs_week_setting_prompt     = "日曜日は空にできません";
            mcs_time_setting_prompt     = "時間を設定できない空";
            mcs_today                   = "今日";
            mcs_wifi_config_prepare     = "無線LANの前提条件";
            mcs_wifi_password           = "無線LANのパスワード";
            mcs_register_prompt         = "どうぞお先に登録するアカウント！";
            mcs_click_login             = "をクリックし";
            mcs_not_login_prompt        = "まだお登録、登録をクリックしてください！";
            mcs_product_presentation    = "トップページ";
            mcs_help_feedback           = "助ける";
            mcs_help_information        = "助ける";
            mcs_feedback                = "フィードバック";
            mcs_connect_wifi_prompt     = "接続WiFi";
            mcs_cloud                   = "雲";
            mcs_demo                    = "体験";
            mcs_shortest                = "最短";
            mcs_no_history              = "履歴はありませんありません";
            mcs_download_pc_client      = "PCクライアントをダウンロードするにはクリック";
            mcs_accounts_bind_email_exist = "このアカウントはメールすること";
            mcs_accounts_bind_email_busy = "このメールはもう過ぎてアカウントをする";
        }/* ja */
        else if(lang == "ko")
        {
            mcs_name                    = "이름";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "이름";
            mcs_old_nick                = "카메라 이름";
            mcs_linked                  = "링크됨";
            mcs_sign_in                 = "로그인";
            mcs_back                    = "Back";
            mcs_add                     = "추가";
            mcs_add_device              = "카메라 추가";
            mcs_device_existed          = "카메라가 이미 존재합니다";
            mcs_cancel                  = "취소";
            mcs_exit                    = "로그아웃";
            mcs_remember_password       = "비밀번호 저장";
            mcs_password_remembered     = "비밀번호 저장 완료";
            mcs_sign_ining              = "로그인중...";
            mcs_cloud_server            = "클라우드 서버";
            mcs_input_device_id         = "카메라 ID 입력";
            mcs_input_username          = "사용자이름";
            mcs_input_email_addr        = "이메일주소 입력";
            mcs_email_address           = "E-mail 주소";
            mcs_email                   = "사서함";
            mcs_binding                 = "제본";
            mcs_binding_email           = "바인딩 사서함";
            mcs_binding_send_prompt     = "바인딩 사서함";
            mcs_binding_email_prompt    = "당신은 당신이 사서함으로 재설정 할 수 있습니다, 비밀번호를 잊어 버려.";
            mcs_input_password          = "비밀번호 입력";
            mcs_access_server_failed    = "서버접속 실패";
            mcs_device_offline          = "카메라가 인터넷에 연결되어 있지 않습니다";
            mcs_invalid_password        = "비밀번호 오류";
            mcs_invalid_dev             = "장치가 존재하지 않습니다";
            mcs_login_faided            = "로그인 실패";
            mcs_invalid_qrcode          = "유효하지 않은 QR-코드 입니다";
            mcs_please_input_username   = "사용자이름을 입력해 주세요";
            mcs_please_input_password   = "비밀번호 입력";
            mcs_qrcode_scan_hint        = "장치의 하단에 보관 상자는 이차원 코드를 정렬";
            mcs_device_list_empty       = "장치 목록이 비어 있습니다";
            mcs_record_list_is_empty    = "녹화리스트가 공란입니다";
            mcs_password_expired        = "비밀번호가 만료되었습니다";
            mcs_set_video_size          = "영상 화질 설정";
            mcs_hd_1280x720             = "HD화질 [1280x720]";
            mcs_auto                    = "자동";
            mcs_normal_640x360          = "중화질 [640x360]";
            mcs_half_320x180            = "저화질 [320x180]";
            mcs_small_160x90            = "최소 [160x90]";
            mcs_play                    = "영상";
            mcs_settings                = "설정";
            mcs_messages                = "알람로그";
            mcs_alarm                   = "알람";
            mcs_delete                  = "삭제";
            mcs_delete_camera           = "삭제";
            mcs_apply                   = "확인";
            mcs_speed                   = "스피드";
            mcs_others                  = "기타";
            mcs_audio                   = "오디오 볼륨";
            mcs_speaker                 = "스피커";
            mcs_mic                     = "마이크";
            mcs_power_frequency         = "전원 주파수";
            mcs_online_upgrade          = "온라인 업그레이드";
            mcs_restore_the_factory_settings = "공장 초기화";
            mcs_restore                 = "초기화";
            mcs_restore_camera          = "다시 시작 장치";
            mcs_start_upgrade           = "업그레이드 시작";
            mcs_system                  = "시스템";
            mcs_system_settings         = "시스템 설정";
            mcs_online                  = "온라인";
            mcs_offline                 = "오프라인";
            mcs_query                   = "문의";
            mcs_begin_time              = "시작 시간";
            mcs_end_time                = "종료시간";
            mcs_mode                    = "모드";
            mcs_opened                  = "사용/사용안함";
            mcs_high                    = "높음";
            mcs_middle                  = "보통";
            mcs_low                     = "낮음";
            mcs_io_alert_input          = "I/O 입력";
            mcs_io_alert_output         = "I/O출력";
            mcs_normally_open           = "항상 사용";
            mcs_normally_close          = "항상 사용안함";
            mcs_motion_detection_sensitivity = "모션감지 감도";
            mcs_daytime                 = "주간";
            mcs_night                   = "야간";
            mcs_sdcord                  = "SD 카드";
            mcs_storage_device          = "저장 장치";
            mcs_set_mask                = "세트 마스크";
            mcs_status                  = "상태";
            mcs_capacity                = "전체용량";
            mcs_usage                   = "사용중";
            mcs_format                  = "포멧";
            mcs_repair                  = "해결";
            mcs_formating               = "포멧 중";
            mcs_repairing               = "수복 중";
            mcs_mounted                 = "접속";
            mcs_unmounted               = "SD카드 접속해제";
            mcs_mount                   = "접속";
            mcs_unmount                 = "접속해제";
            mcs_ethernet                = "이더넷";
            mcs_wifi                    = " Wi-Fi";
            mcs_enabled                 = "적용";
            mcs_mac_address             = "MAC주소";
            mcs_network_status          = "네트워크 상태";
            mcs_wifi_mode               = " Wi-Fi 모드";
            mcs_client                  = "클라이언트";
            mcs_ap                      = "AP";
            mcs_start_address           = "시작 IP";
            mcs_end_address             = "종료 IP";
            mcs_gateway                 = "게이트웨이";
            mcs_select_network          = "네트워크(SSID) 선택";
            mcs_dhcp_ip                 = "자동으로 IP주소 받기";
            mcs_dhcp_dns                = "DNS 자동받기";
            mcs_ip_address              = "IP주소";
            mcs_network_mask            = "네트워크 마스크";
            mcs_input_secondary_dns     = "보조 DNS";
            mcs_secondary_dns           = "DNS 서버";
            mcs_input_dns               = "DNS 입력";
            mcs_input_alternate_dns     = "대체 DNS 입력";
            mcs_input_ip                = "IP 주소 입력";
            mcs_input_gateway           = "게이트웨어 입력";
            mcs_input_network_mask      = "네트워크 마스크 입력";
            mcs_wifi_list               = " Wi-Fi 리스트";
            mcs_display_date            = "날짜표시";
            mcs_date_format             = "날짜 형식";
            mcs_display_time            = "시간 표시";
            mcs_time_format             = "시간 형식";
            mcs_24_hour                 = "24시간";
            mcs_12_hour                 = "12시간";
            mcs_display_weeks           = "주간 표시";
            mcs_date_time               = "날짜/시간";
            mcs_set_time                = "시간설정";
            mcs_set_week                = "주간설정";
            mcs_stream                  = "스트림";
            mcs_encode                  = "엔코드";
            mcs_resolution              = "해상도";
            mcs_frame_fate              = "프레임 레이트";
            mcs_maximum_bitrate         = "최대 비트레이트";
            mcs_minimum_bitrate         = "최소 비트레이트";
            mcs_i_frame_interval        = "프레임 인터벌";
            mcs_video                   = "영상";
            mcs_sampling_rate           = "샘플링 레이트(kHz)";
            mcs_nickname                = "카메라 이름";
            mcs_old_password            = "기존 비밀번호";
            mcs_confirm_password        = "비밀번호 확인";
            mcs_modify_password         = "비밀번호 변경";
            mcs_password                = "비밀번호";
            mcs_admin_password          = "관리자 암호";
            mcs_guest_password          = "방문자 암호";
            mcs_product_info            = "카메라 정보";
            mcs_software_version        = "소프트웨어 버전";
            mcs_device_id               = "카메라 ID";
            mcs_operation               = "작동";
            mcs_record                  = "녹화";
            mcs_record_2                = "녹화";
            mcs_upgrade_now             = "즉시 업그레이드";
            mcs_upgrading               = "업그레이드 중";
            mcs_already_latest_version  = "최신 업그레드입니다";
            mcs_sensitivty              = "감도";
            mcs_user_defined            = "사용자 정의";
            mcs_time                    = "시간";
            mcs_date                    = "Day";
            mcs_finish                  = "완료";
            mcs_fail                    = "실패";
            mcs_motion                  = "모션감지";
            mcs_start                   = "시작";
            mcs_talk                    = "토크";
            mcs_password_input_inconsistent = "비밀번호 오류입니다";
            mcs_input_6_to_20_litters   = "입력 6-20 글자 (A-Z, A-Z) 또는 숫자 (0-9)";
            mcs_user_letter_range_hint  = "계정 6-20 자리 를 (0-9) 또는 자모의 (a-z, A-Z) 으로 시작하는 필요한 자모";
            mcs_password_range_hint     = "비밀번호는6-20자리의 문자와 숫자입니다";
            mcs_begin_with_the_letters  = "숫자를 포함한 문자로 시작합니다";
            mcs_sign_up                 = "등록";
            mcs_sign_up_failed          = "등록 실패";
            mcs_successful_sign_up      = "등록 성공";
            mcs_are_you_sure_delete     = "삭제를 확인합니까?";
            mcs_failed_to_set_the       = "설정 실패";
            mcs_set_successfully        = "설정 성공";
            mcs_downloading             = "다운로드 중";
            mcs_wrote                   = "입력";
            mcs_visit_again_later       = "잠시후 다시 로그인 하십시오 ";
            mcs_restart_failed          = "재시작 실패";
            mcs_upgrade_failed          = "업데이트 실패";
            mcs_connnected              = "접속됨 ";
            mcs_connnected_to           = "에 접속";
            mcs_not_select              = "선택 안됨";
            mcs_message_list            = "메세지 리스트";
            mcs_saved_password          = "비밀번호 저장";
            mcs_alert                   = "경보";
            mcs_no_record               = "영상 없음";
            mcs_new_about               = "업데이트 : 관하여";
            mcs_device                  = "카메라";
            mcs_config                  = "설정";
            mcs_change_password_failed  = "비밀번호 변경 실패";
            mcs_do_you_want_restart     = "재시작 하겠습니까?";
            mcs_do_you_want_restore     = "공장초기화를 실행합니까?";
            mcs_do_you_want_upgrade     = "업그레이드를 실행합니까?";
            mcs_load_end                = "데이터 로딩 완료";
            mcs_loading                 = "로딩중...";
            mcs_down_refresh            = "아래로 내리면 리플레쉬 합니다";
            mcs_release_refresh         = "새로 고침 출시";
            mcs_refreshing              = "새로 고침";
            mcs_release_then_loading_data_hint = "놓으면 로드 됩니다";
            mcs_pull_refresh_hint       = "위로 올리면 리플레쉬 합니다";
            mcs_restarting              = "재시작 중";
            mcs_upgraded_time           = "업그레이드 시간: ";
            mcs_done                    = "완료";
            mcs_playback                = "녹화재생";
            mcs_i_o_alarm               = "I/O 경보";
            mcs_alarm_action            = "알람 설정";
            mcs_alarm_sources           = "알람 방식";
            mcs_io_output               = "I/O 출력";
            mcs_snapshots               = "스냅샷";
            mcs_snapshot                = "스냅샷";
            mcs_snapshot_interval       = "스냅샷 인터벌(초)";
            mcs_pre_record_length       = "사전 녹화(초)";
            mcs_nick_range_hint         = "카메라 이름은 20자 이내 입니다";
            mcs_save                    = "저장";
            mcs_close                   = "닫힘";
            mcs_snapshoting             = "사진 촬영";
            mcs_snapshot_failed         = "스냅샷 실패";
            mcs_record_failed           = "녹화실패";
            mcs_saved_successfully      = "저장 성공";
            mcs_save_failed             = "저장 실패";
            mcs_restart_to_take_effect  = "리부팅후에 적용 됩니다";
            mcs_please_allow_access_album = "MIPC 포토 앨범에 접속을 허용해주세요.";
            mcs_ios_privacy_setting_for_photo_prompt = "iPhone의\"설정->개인적->사진\"에 프로그램\"MIPC\"를 찾아내고 변경할 수 있다.";
            mcs_please_allow_access_camera = "MIPC의 카메라 접속을 허용합니다 ";
            mcs_ios_privacy_setting_for_camera_prompt = "iPhone의\"설정->개인적->사진\"에 카메라\"MIPC\"를 찾아내고 변경할 수 있다";
            mcs_busy_when_write         = "데이터 레코딩중";
            mcs_unknown_error           = "알 수 없는 오류";
            mcs_i_know                  = "이해 했습니다";
            mcs_segment                 = "비디오 파일";
            mcs_please_relogin          = "다시 로그하세요";
            mcs_change_password_succeed = "비밀번호 변경 성공";
            mcs_upgrade_to_ver          = "새버전으로 업그레이드";
            mcs_restore_failed          = "공장초기화 실패";
            mcs_please_restart          = "리부팅";
            mcs_keep_network_settings   = "예약 네트워크 설정 및 암호";
            mcs_not_connected           = "연결안됨";
            mcs_sdcard_not_ready        = "SD카드가 없습니다";
            mcs_device_not_exist        = "카메라가 존재하지 않습니다";
            mcs_disable                 = "사용안함";
            mcs_to_determine_the        = "확인합니까?";
            mcs_alert_on                = "알람 ON";
            mcs_alert_off               = "알람 OFF";
            mcs_alert_onoff             = "무장 On/Off";
            mcs_monday                  = "월요일";
            mcs_tuesday                 = "화요일";
            mcs_wednesday               = "수요일";
            mcs_thursday                = "목요일";
            mcs_friday                  = "금요일";
            mcs_saturday                = "토요일";
            mcs_sunday                  = "일요일";
            mcs_mon                     = "월";
            mcs_tue                     = "화";
            mcs_wed                     = "수";
            mcs_thu                     = "목";
            mcs_fri                     = "금";
            mcs_sat                     = "토";
            mcs_sun                     = "일";
            mcs_scheduled_recording     = "스케쥴 녹화";
            mcs_schedule                = "스케쥴";
            mcs_scheduled_recording_status = "스케쥴녹화 상태";
            mcs_folding                 = "닫음";
            mcs_unfolding               = "생성";
            mcs_end_time_should_lt_begin = "종료시간은 시작시간보다 이후여야 합니다";
            mcs_recording               = "녹화중";
            mcs_prerecord_interval_range_hint = "사전녹화는 6초 이내입니다 ";
            mcs_snapshot_interval_range_hint = "스냅샷촬영 인터벌은 0이상 60이하 입니다";
            mcs_not_ready               = "준비되지 않았습니다";
            mcs_availablesize           = "사용가능 용량";
            mcs_reboot                  = "리부팅";
            mcs_alerter                 = "알람";
            mcs_pir                     = "인체감응";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "엔코더";
            mcs_ok                      = "OK";
            mcs_fault                   = "에러";
            mcs_sensor_status           = "센서상태";
            mcs_about                   = "정보";
            mcs_reset_now               = "즉시 리셋";
            mcs_reset_later             = "나중에 리셋";
            mcs_prompt                  = "알림";
            mcs_select                  = "선택";
            mcs_available_netword       = "네트워크 접속안됨, 설정을 변경합니까?";
            mcs_request_send            = "요청 발송중";
            mcs_blank_device_id         = "카메라ID를 입력하세요";
            mcs_blank_username          = "사용자 이름을 입력하세요";
            mcs_blank_password          = "비밀번호를 입력하세요";
            mcs_exist_user              = "이미 존재하는 사용자입니다";
            mcs_invalid_user            = "유효하지 않는 사용자 이름입니다";
            mcs_invalid_email_addr      = "유효하지 않는 이메일 주소입니다";
            mcs_system_err              = "시스템오류";
            mcs_exceed_device           = "카메라 동시 접속자가 초과하였습니다";
            mcs_continue                = "계속";
            mcs_prompt_exit             = "혹시 종료?";
            mcs_device_list             = "장치 목록";
            mcs_no_sdcard               = "SD카드 없음";
            mcs_no_hard_disk            = "어떤 하드 드라이브가 포함되지 않음";
            mcs_show_more               = "더보기...";
            mcs_shotsnop_exists         = "이미 존재하는 사진입니다";
            mcs_input_nick              = "카메라이름 입력";
            mcs_nick_not_empty          = "카메라이름을 입력하세요";
            mcs_input_new_pass          = "비밀번호 입력";
            mcs_input_new_pass_again    = "새로운 비밀번호 재입력";
            mcs_new_password            = "새로운 비밀번호";
            mcs_modify_network_prompt   = "변경후 카메라가 재시작 합니다";
            mcs_wifi_disable_prompt     = " Wi-Fi 사용안함, 계속합니까?";
            mcs_eth_disable_prompt      = "이더넷 사용안함, 계속합니까?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "DHCP";
            mcs_manually_set            = "수동 설정";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "기본 DNS";
            mcs_client_mode             = "클라이언트 모드";
            mcs_adhoc_mode              = "애드호크";
            mcs_connect_fail            = "연결 실패";
            mcs_dhcp_server             = "DHCP서버";
            mcs_display_text            = "화면이름 표시";
            mcs_repair_prompt           = "SD카드를 수리하면 일부 데이터가 손실될 수 있습니다,계속합니까?";
            mcs_format_prompt           = "포멧을 하면 SD카드의 데이터가 삭제됩니다. 계속합니까?";
            mcs_mount_prompt            = "SD카드를 접속합니다. 계속합니까?";
            mcs_umount_prompt           = "SD카드 접속해제후 영상과 사진이 SD카드에 저장되지 않습니다. 계속합니까?";
            mcs_sdcard_reset            = "설정완료, 적용을 위해 카메라를 리부팅합니다. 계속합니까?";
            mcs_sdcard_repairing        = "수리중, 재부팅을 기다리세요";
            mcs_sdcard_formating        = "포멧중, 리부팅을 기다리세요";
            mcs_sdcard_umount           = "SD카드 접속해제";
            mcs_valid                   = "사용가능";
            mcs_io                      = "IO알람";
            mcs_input                   = "입력";
            mcs_outinput                = "출력";
            mcs_prompt_alert_on         = "경보 On. 계속합니까?";
            mcs_auto_sync_date_time     = "셀신";
            mcs_alarm_record            = "알람 영상";
            mcs_username                = "사용자 이름";
            mcs_re_enter_the_password   = "비밀번호 재입력";
            mcs_remember_me             = "로그인 상태유지";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "플러그인 설치";
            mcs_install_the_video_plug  = "영상 플러그인 설치";
            mcs_install_now             = "즉시 설치";
            mcs_temporarily_installed_use_ordinary_video = "다음에 설치";
            mcs_brightness              = "밝기";
            mcs_contrast                = "명암";
            mcs_color_saturation        = "채도";
            mcs_sharpness               = "선명도";
            mcs_duration                = "재생시간";
            mcs_index                   = "번호";
            mcs_remark                  = "비고";
            mcs_media_stream            = "미디어";
            mcs_server                  = "서버";
            mcs_media_transfer          = "미디어 전송";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "제조자";
            mcs_model                   = "식별코드";
            mcs_plugin_version          = "플러그인 버전";
            mcs_network_interface       = "네트워크";
            mcs_transfer_protocol       = "전송 프로토콜";
            mcs_year                    = "년";
            mcs_month                   = "월";
            mcs_day                     = "날";
            mcs_hour                    = "시간";
            mcs_minute                  = "분";
            mcs_second                  = "초";
            mcs_millisec                = "밀리 초";
            mcs_ntp                     = "타임 서버";
            mcs_upload_upgrade          = "업그레이드 업로드";
            mcs_stop                    = "정지";
            mcs_info_rewind             = "뒤로";
            mcs_fast_forward            = "앞으로";
            mcs_previous_frame          = "이전 프레임";
            mcs_next_frame              = "다음 프레임";
            mcs_record_audio            = "오디오녹음";
            mcs_week                    = "주간";
            mcs_all                     = "전체";
            mcs_id                      = "ID";
            mcs_select_all              = "모두 선택";
            mcs_call                    = "Call";
            mcs_activation              = "활성화";
            mcs_caption                 = "업로드 파일";
            mcs_alarm_device            = "모션감도";
            mcs_not_installed           = "설치되지 않음";
            mcs_join_us_now             = "지금 가입";
            mcs_reconnect_please_wait   = "재연결중, 기다리세요";
            mcs_erasing                 = "삭제중";
            mcs_writing                 = "저장중";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "새로운 버전이 있습니다";
            mcs_equipment_flip          = "화면반전";
            mcs_device_status           = "카메라 상태";
            mcs_audio_setting           = "오디오 설정";
            mcs_nick_modify             = "카메라 이름변경";
            mcs_ready                   = "준비됨";
            mcs_full                    = "가득 참";
            mcs_connecting              = "연결중";
            mcs_message_buffering       = "버퍼링";
            mcs_upgrade_finish          = "업그레이드 완료";
            mcs_image                   = "이미지";
            mcs_bar                     = "로그";
            mcs_init                    = "초기화";
            mcs_confirm_new_password    = "새로운 비밀번호 확인";
            mcs_continue_switch_wireless_network = "네트워크 전환으로 접속이 중단될수 있습니다. 계속합니까?";
            mcs_restore_factory_settings_prompt = "카메라가 공장초기화 됩니다. 계속합니까?";
            mcs_username_does_not_exis  = "사용자이름이 존재하지 않습니다";
            mcs_username_already_exists = "존재하는 사용자이름 입니다";
            mcs_successful_whether_login = "가입성공, 로그인 하겠습니까?";
            mcs_username_demand         = "6-20자리의 문자또는 숫자";
            mcs_the_password_is_empty   = "비밀번호가 입력되지 않았습니다";
            mcs_password_demand         = "6-20자리의 문자또는 숫자";
            mcs_password_empty          = "비밀번호를 재입력하세요";
            mcs_two_password_input_inconsistent = "비밀번호가 일치하지 않습니다";
            mcs_the_user_name_is_empty  = "사용자 이름이 입력되지 않았습니다";
            mcs_upgrade_to_the_latest_version = "최신버전으로 업그레이드";
            mcs_subnet_mask_wrong_format = "네트워크 마스크 형식오류";
            mcs_upgrade_successful_restart_to_take_effect = "업그레이드 성공, 을 적용하려면 장치를 다시 시작.";
            mcs_need_to_restart_the_camera_to_take_effect = "을 적용하려면 장치를 다시 시작";
            mcs_not_allowed_close_two_network_cards = "이더넷과 Wi-Fi를 동시에 사용중지 할수 없습니다";
            mcs_modified_successfully   = "수정 성공";
            mcs_connection_successfully = "연결됨";
            mcs_connection_is_interrupted = "연결 중단";
            mcs_devices_in_the_account_overrun = "동시 접속자 초과 ";
            mcs_format_error            = "포멧오류";
            mcs_change                  = "변경";
            mcs_refresh                 = "갱신";
            mcs_connect                 = "연결";
            mcs_upgrade                 = "업그레이드";
            mcs_activate                = "활성화";
            mcs_filter                  = "정렬";
            mcs_reset                   = "초기화";
            mcs_prompt_alert_off        = "경계 Off, 계속합니까?";
            mcs_invalid_server          = "유효하지 않은 타임서버 ";
            mcs_upgrade_prompt          = "장치의 소프트웨어를 업그레이드합니다. 계속?";
            mcs_restart_prompt          = "다시 시작 장치, 계속?";
            mcs_repeat                  = "반복";
            mcs_scheduled_one           = "스케쥴녹화 1";
            mcs_scheduled_two           = "스케쥴녹화 2";
            mcs_scheduled_three         = "스케쥴녹화 3";
            mcs_scheduled_four          = "스케쥴녹화 4";
            mcs_more                    = "더보기";
            mcs_leave                   = "놓으면 더 많이 표시됩니다";
            mcs_qrcode_scan             = "QR코드 스캔";
            mcs_inserted                = "삽입됨";
            mcs_removed                 = "제거됨";
            mcs_upgrade_init            = "업그레이드 시작";
            mcs_upgrade_download        = "업그레이드 다운로드";
            mcs_check                   = "업그레이드 확인";
            mcs_audio_encoder_config    = "오디오 코덱";
            mcs_video_codec             = "비디오 코덱";
            mcs_download                = "다운로드";
            mcs_client_download         = "클라이언트 다운로드";
            mcs_for_more_clarity_smooth_video_experience = "자연스러운 고해상도 지원 ";
            mcs_network                 = "네트워크";
            mcs_mobile_client_download  = "모바일 클라이언트 다운로드";
            mcs_readonly                = "읽기 전용";
            mcs_please_exit_and_relogin = "로그아웃 후에 다시 로그인하세요";
            mcs_add_device_failed       = "카메라추가 실패";
            mcs_set_password            = "암호 변경";
            mcs_7x24_hours              = "매일녹화(24시간)";
            mcs_motion_alert            = "모션감지 경보";
            mcs_mtalt                   = "%@ : 모션감지 경보";
            mcs_io_alert                = "I/O 경보";
            mcs_ioalt                   = "%@ : I/O 경보";
            mcs_time_zone               = "타임존";
            mcs_select_time             = "시간 선택";
            mcs_now                     = "현재";
            mcs_mipc_have_alert_notification = "MIPC 경보 알림";
            mcs_notification_center     = "알림 센터";
            mcs_sound                   = "소리";
            mcs_vibration               = "진동";
            mcs_clear_cache             = "캐시 삭제";
            mcs_clear_cache_hint        = "캐시를 삭제 하시겠습니까?";
            mcs_successfully_cleared_cache = "캐시삭제 성공";
            mcs_app_except_exit_hint    = "죄송합니다, 프로그램에 예외가 발생하여 종료됩니다.";
            mcs_rate_us                 = "등급 표시";
            mcs_password_too_simple_hint = "암호의 보안수준이 낮습니다. 높은 보안의 암호로 수정하세요";
            mcs_check_for_new_version   = "새 버전 확인";
            mcs_contact_us              = "연락주십시오";
            mcs_buffer_time             = "버퍼링 타임";
            mcs_default                 = "초기화";
            mcs_alarmed_devices         = "경보장치";
            mcs_aec                     = "울림 제거";
            mcs_permission_denied       = "권한이 거부되었습니다";
            mcs_full_screen             = "전체 화면";
            mcs_forgot_your_password    = "비밀번호 찾기";
            mcs_your_email              = "귀하의 이메일";
            mcs_sign_up_confirmation    = "확인메일이 귀하의 이메일 주소로 발송되었습니다. 본 이메일에서 링크를 클릭하면 계정이 활성화 됩니다..";
            mcs_recovery_prompt         = "전자 메일 주소 (사용자 이름)을 입력하십시오, 귀하의 비밀번호 재설정을 안내하는 이메일을 발송하겠습니다.";
            mcs_password_reset_confirmation = "암호재설정을 위한 이메일이 발송되었습니다. 비밀번호 재설정 안내를 참조하세요";
            mcs_recovery_fail_no_mail   = "귀하의 계정에 이메일 주소가 없으므로 비밀번호를 전송할 수 없습니다. ";
            mcs_recovery_fail_invalid_link = "비밀번호 복구실패, 비밀번호 복구 이메일의 안내를 다시 확인해 주세요";
            mcs_recovery_ok_login       = "비밀 번호 복구 성공. 로그인하세요.";
            mcs_active_ok_login         = "계정이 활성화 되었습니다. 로그인 하세요.";
            mcs_active_fail_invalid_link = "계정 활성화 실패. 다시 시도해 주세요";
            mcs_login_fail_inactive     = "계정이 비활성화 상태입니다. 새로운 계정가입을 위한 안내를 따라주세요.";
            mcs_sign_up_again           = "재가입";
            mcs_press_start_talk        = "누른후 통화";
            mcs_release_stop_talk       = "정지 해제";
            mcs_delete_device           = "삭제";
            mcs_success_removed_equipment = "성공적으로 장치 삭제";
            mcs_remove_equipment_failure = "장비 고장 제거";
            mcs_device_busy             = "카메라가 사용 중입니다";
            mcs_keep_testing            = "테스트 계속";
            mcs_notify_tone             = "알림 벨소리";
            mcs_float_video             = "팝업 비디오 사용";
            mcs_float_position          = "팝업 비디오 위치";
            mcs_video_resolution        = "비디오 해상도";
            mcs_float_resolution        = "팝업 비디오 해상도";
            mcs_top_left                = "왼쪽 위";
            mcs_top_right               = "오른쪽 위";
            mcs_bottom_left             = "왼쪽 아래";
            mcs_bottom_right            = "오른쪽 아래";
            mcs_action_next             = "다음";
            mcs_action_cancel           = "취소";
            mcs_action_retry            = "재시도";
            mcs_action_add              = "추가";
            mcs_action_apply            = "적용";
            mcs_action_config           = "설정";
            mcs_action_skip             = "건너 뛰기";
            mcs_action_ok               = "확인";
            mcs_action_add_device       = "카메라 추가";
            mcs_action_modify_password  = "비밀번호 변경";
            mcs_action_config_wifi      = "무선 랜 설정";
            mcs_state_connect_device    = "카메라 연결";
            mcs_state_connect_device_fail = "카메라 연결실패 ";
            mcs_state_wait_device_online = "카메라 온라인을 대기 중";
            mcs_state_device_online     = "온라인";
            mcs_state_success           = "성공";
            mcs_state_add_device_success = "카메라 추가 성공";
            mcs_state_add_device_fail   = "장치 고장을 쓰";
            mcs_state_modify_pass_success = "암호변경 성공";
            mcs_state_modify_pass_fail  = "암호변경 실패";
            mcs_state_config_wifi_success = " Wi-Fi설정 성공";
            mcs_state_config_wifi_fail  = "연결 실패";
            mcs_state_connecting_to     = "에 연결";
            mcs_network_connect_type    = "장치는 장치의 전원이 켜져 있는지 확인하고 네트워크 연결을 선택, 온라인으로되지 않습니다 :";
            mcs_prompt_modify_passwd    = "장치의 암호가 너무 간단하고, 암호를 수정하시기 바랍니다. 새로운 암호 미만 6 자지지 않습니다";
            mcs_prompt_config_wifi      = "장치가 여전히 무선 랜에 연결되어 있지 않은, 당신의 Wi-Fi 인터넷을 구성하십시오";
            mcs_step1_check_connect     = "1 단계 : 카메라 후면의 랜포트와 공유기 후면의 비어있는 랜포트를 랜케이블로 각각 연결하세요";
            mcs_first_step_ethernet_connect = "1 단계: 라우터 및 액세스 장치에 네트워크 포트의 다른 단부에 연결하는 네트워크 케이블의 한쪽 끝을 연결한다.";
            mcs_step2_check_connect     = "2 단계 : 카메라의 전원을 켭니다.";
            mcs_second_step_ethernet_connect = "2 단계 : 장치에 전원이 장치를 시작합니다.";
            mcs_hint_check_network      = " 참고 : 시작이 완료되면 카메라를 시작, 약 50 초 정도, 상태 2 3 초마다 카메라가 온라인을 의미하는 녹색 등이 깜박 세 번 조명 마법사는 자동으로 다음 단계를 입력합니다.";
            mcs_the_end                 = "끝";
            mcs_hint_password_expired   = "암호가 만료 된, 제발 장치를 다시 추가";
            mcs_hint_remove_ethernet    = "비고 : Wi-Fi가 연결되었습니다. 공유기에 연결된 카메라의 랜케이블을 분리 할수 있습니다";
            mcs_ip_format_incorrect     = "IP 주소 형식이 잘못되었습니다";
            mcs_login_sucess            = "로그인 성공";
            mcs_donot_remind            = "저장 안함";
            mcs_clear_cache_signout_hint = "캐시 삭제후 로그인을 다시해야 합니다. 계속합니까?";
            mcs_devlist_adddev_hint     = "장비를 추가 하시려면 이곳을 클릭하세요";
            mcs_devlist_menu_hint       = "해상도를 설정하려면 여기를 클릭하십시오";
            mcs_update_failed           = "업그레이드 실패";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "지방의";
            mcs_set_npapi               = "만약 플러그인 설치 의해, 방문해 주십시오 \'chrome://flags/#enable-npapi\', NPAPI 가능, ";
            mcs_set_win32k              = "방문 \'chrome://flags/#enable-win32k-renderer-lockdown\', 장애인 Win32k를 렌더러 잠금,";
            mcs_restart_browser         = "브라우저를 다시 시작";
            mcs_download_location       = "다운로드 위치";
            mcs_Networking_mode         = "네트워킹";
            mcs_wifi_intelligent_configuration = "와이파이 연결";
            mcs_ethernet_configuration  = "이더넷 연결";
            mcs_wifi_connect            = "연결";
            mcs_hard_disk               = "하드 디스크";
            mcs_wifi_is_connection      = "연결, 기다려주십시오...";
            mcs_wifi_intelligent_configuration_setup_ailure = "와이파이 지능형 구성 설정 오류";
            mcs_box_list                = "목록 상자";
            mcs_repair_disk_prompt      = "복구 디스크 는 일부 데이터를 손실 할 수 있습니다, 계속?";
            mcs_format_disk_prompt      = "포맷 디스크 삭제됩니다. 모든 데이터를 계속?";
            mcs_scheduled_alerting      = "계획 전초선을 치다";
            mcs_scheduled_alerting_one  = "계획 전초선을 치다 1";
            mcs_scheduled_alerting_two  = "계획 전초선을 치다 2";
            mcs_scheduled_alerting_three = "계획 전초선을 치다 3";
            mcs_scheduled_alerting_four = "계획 전초선을 치다 4";
            mcs_wifi_config_cancle      = "무선 랜 구성 취소";
            mcs_wifi_config_prepare     = "와이파이 전제 조건";
            mcs_wifi_config_first       = "장치 및 이동 전화와 라우터 1 ㎛의 범위로 유지";
            mcs_wifi_config_second      = "무선 랜을 구성 할 때, 장치는 네트워크 케이블을 연결하지 수";
            mcs_wifi_config_third       = "1 초 후 해제 리셋 리셋 구멍을 눌러";
            mcs_wifi_config_success     = "구성 성공";
            mcs_wifi_config_failure     = "구성 실패";
            mcs_failure_prompt          = "다시 시도하거나 올바르게 입력 와이파이 암호를 확인하기 위해 보내 주시기 바랍니다";
            mcs_display_password        = "비밀번호 표시";
            mcs_action_smart_config_wifi = "구성 마법사";
            mcs_wifi_invalid            = "당신의 네트워크는 무선 랜을하지 와이파이 연결하십시오입니다!";
            mcs_phone_not_connect_wifi  = "무선 네트워크가 연결되지";
            mcs_prompt_check_connection = "카메라가 온라인이 아닙니다. 카메라의 연결상태를 확인해 주세요";
            mcs_wifi_cfg_ready          = "준비된";
            mcs_reset_complete          = "재설정 완료";
            mcs_how_to_restore_factory_settings = "기본 설정을 복원하는 방법 : 10 초 이상 카메라의 하단에있는 리셋 구멍을 눌러 리셋 핀을 사용";
            mcs_forgetpass_action_wizard = "10 초 출시 된 이후 보도 리셋 리셋 구멍이 자동으로 다시 시작됩니다 장치 관리자의 암호를 재설정";
            mcs_prompt_check_device_connection = "장치가 온라인 상태가 아닌, 장치를 연결하는 배선을 확인";
            mcs_input_wifi_name         = "제발 입력 와이파이 이름";
            mcs_action_previous         = "이전";
            mcs_io_alert_range_hint     = "IO 경고 시간은 60 초 미만이어야한다";
            mcs_io_alert_time           = "IO 알람 시간(초)";
            mcs_smart                   = "똑똑한";
            mcs_plan                    = "계획";
            mcs_mute                    = "음소거";
            mcs_wind_speed              = "풍속";
            mcs_one                     = "하나의 기어";
            mcs_two                     = "두 기어";
            mcs_three                   = "세 기어";
            mcs_purify_mode             = "모드를 정화";
            mcs_video_list              = "동영상 목록";
            mcs_wifi_cfg_restore_factory_settings = "장치에 가까운 휴대 전화를 잡고 장치가 무선 랜을 구성한 경우, 다음 1 초 동안 리셋 구멍을 보도 자료, 장치가 공장 설정으로 복원하고 자동으로 다시 시작";
            mcs_mask_settings           = "마스크 설정";
            mcs_notification_settings   = "알림 설정";
            mcs_alarm_settings          = "알람 설정";
            mcs_motion_detection        = "모션 감지";
            mcs_io_alarm                = "I/O 알람";
            mcs_connect_status          = "연결 상태";
            mcs_motion_notification     = "경고 및 알림";
            mcs_device_connected        = "장치가 연결된";
            mcs_start_spray             = "분사 시작?";
            mcs_available_network       = "네트워크 접속안됨";
            mcs_select_wifi_wizard      = "먼저 무선 네트워크를 선택하세요";
            mcs_input_wifi_password     = "입력 무선 랜 암호";
            mcs_device_admin_password   = "장치 관리자 암호";
            mcs_device_guest_password   = "장치 손님 암호";
            mcs_user_admin_password     = "사용자 관리자 암호";
            mcs_user_guest_password     = "사용자 게스트 암호";
            mcs_save_network_set        = "네트워크 설정 및 암호 저장";
            mcs_nickname_not_set        = "카메라 별명이 설정되어 있지 않습니다";
            mcs_current_wifi            = "현재 와이파이";
            mcs_current_password_strength = "현재 암호 강도";
            mcs_new_password_strength   = "새로운 암호 강도";
            mcs_needs_to_open_the_DHCP  = "라우터는 시도가 실패 할 경우, 기능 (자동으로 IP를 얻을), 관리자에게 문의하십시오 DHCP를 열 필요가있다.";
            mcs_picture                 = "그림";
            mcs_quality                 = "품질";
            mcs_size                    = "크기";
            mcs_guest_login             = "고객 로그인";
            mcs_audio_and_video         = "오디오 / 비디오";
            mcs_volume                  = "체적";
            mcs_smooth                  = "부드러운";
            mcs_clear                   = "명확한";
            mcs_handsfree               = "핸즈프리";
            mcs_headphone               = "헤드폰";
            mcs_my                      = "나의";
            mcs_customer_service        = "고객 서비스";
            mcs_firefox_flash_uninstall = "플래시 플러그인을 사용할 수없는,이 솔루션은 https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work를 참조하시기 바랍니다";
            mcs_plug                    = "위젯";
            mcs_plug_load               = "로드 플러그인";
            mcs_plug_load_refuse        = "플러그인을로드하지 마십시오";
            mcs_plug_load_auto          = "자동적 인";
            mcs_option                  = "옵션";
            mcs_option_ok               = "결정";
            mcs_voice_call_fails        = "음성 호출은 네트워크 확인 실패";
            mcs_umounted_prompt         = "혹시 마운트?";
            mcs_signup_prompt           = "새로 온?";
            mcs_wifi_connect_sucess_prompt = "비고: WIFI 정상 근무, 지금 수 네트워크 연결 끊기";
            mcs_manual_input_prompt     = "수동 입력 장치 ID";
            mcs_qrscan_prompt           = "당신 아직 이 프로그램을 액세스할 수 카메라, 좀 아이폰 ’ 설정 \'－ ’ 프라이버시 ’ － ’ 카메라 ’ 기능 에서 찾을 Vimtag 이름 위해 ’ ‘ 프로그램을 변경할 수 있습니다.";
            mcs_select_network_style    = "선택 네트워크 연결 방식:";
            mcs_push                    = "발표";
            mcs_connect_power_prompt    = "비고: 장치 안 -, 먼저 확보한 전원 연결됨";
            mcs_fail_microphone         = "마이크 접근할 수 없습니다";
            mcs_microphone_prompt       = "이 응용 프로그램은 \'설정\'아이폰, 마이크에 액세스 할 수 있도록하지 않습니다 - \'개인 정보 보호\'- \'마이크\'기능, 수정 될 \'Vimtag\'응용 프로그램의 이름을 찾을 수";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "삭제 중...";
            mcs_event                   = "사건";
            mcs_one_hour                = "한 시간";
            mcs_half_hour               = "반";
            mcs_five_min                = "5분";
            mcs_category                = "분류";
            mcs_time_length             = "이름";
            mcs_new                     = "새";
            mcs_week_setting_prompt     = "주 못 비어";
            mcs_time_setting_prompt     = "시간 설정 못 비어";
            mcs_today                   = "오늘";
            mcs_wifi_config_prepare     = "와이파이 전제 조건";
            mcs_wifi_password           = "무선 랜 암호";
            mcs_register_prompt         = "당신이 먼저 계정 등록!";
            mcs_click_login             = "눌러서 로그인";
            mcs_not_login_prompt        = "아직 로그인 단추를 누르십시오 등록!";
            mcs_product_presentation    = "홈";
            mcs_help_feedback           = "돕다";
            mcs_help_information        = "돕다";
            mcs_feedback                = "피드백";
            mcs_connect_wifi_prompt     = "연결 WiFi";
            mcs_cloud                   = "구름";
            mcs_demo                    = "체험";
            mcs_shortest                = "최단";
            mcs_no_history              = "병력 없음";
            mcs_download_pc_client      = "PC 클라이언트를 다운로드하려면 클릭";
            mcs_accounts_bind_email_exist = "이 계정 이미 바인딩 적이 사서함";
            mcs_accounts_bind_email_busy = "이 메일 계정 적이 이미 바인딩";
        }/* ko */
        else if(lang == "de")
        {
            mcs_name                    = "Name";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Name";
            mcs_old_nick                = "Nickname";
            mcs_linked                  = "Verbunden";
            mcs_sign_in                 = "Login";
            mcs_back                    = "Zurück";
            mcs_add                     = "Hinzufügen";
            mcs_add_device              = "Gerät hinfügen";
            mcs_device_existed          = "Gerät ist bereits vorhanden";
            mcs_cancel                  = "Abbrechen";
            mcs_exit                    = "Beenden";
            mcs_remember_password       = "Passwort speichern";
            mcs_password_remembered     = "Passwort gespeichert";
            mcs_sign_ining              = "Login...";
            mcs_cloud_server            = "Cloud Server";
            mcs_input_device_id         = "ID des Geräts eingeben";
            mcs_input_username          = "Benutzernamen eingeben";
            mcs_input_email_addr        = "Geben Sie die E-Mail-Adresse ein";
            mcs_email_address           = "E-Mail-Adresse";
            mcs_email                   = "Mailbox";
            mcs_binding                 = "verbindlich";
            mcs_binding_email           = "Verbindliche Mailbox";
            mcs_binding_send_prompt     = "Verbindliche Mailbox";
            mcs_binding_email_prompt    = "Verbindliche Mailbox";
            mcs_input_password          = "Passwort eingeben";
            mcs_access_server_failed    = "Serverzugriff gescheitert";
            mcs_device_offline          = "Gerät ist offline";
            mcs_invalid_password        = "Ungültiges Passwort";
            mcs_invalid_dev             = "Gerät ist nicht vorhanden";
            mcs_login_faided            = "Login fehlgeschlagen";
            mcs_invalid_qrcode          = "Ungültiger QR Code";
            mcs_please_input_username   = "Bitte Benutzernamen eingeben";
            mcs_please_input_password   = "Bitte Passwort eingeben";
            mcs_qrcode_scan_hint        = "Bewahren Sie den Karton an der Unterseite des Geräts wird zweidimensionalen Codes ausgerichtet";
            mcs_device_list_empty       = "Liste des Gerätes ist leer";
            mcs_record_list_is_empty    = "Die Liste des Datensatzes ist leer";
            mcs_password_expired        = "Passwort abgelaufen";
            mcs_set_video_size          = "Stellen Sie die Videoqualität ein";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Automatisch";
            mcs_normal_640x360          = "Normal [640x360]";
            mcs_half_320x180            = "Mittel [320x180]";
            mcs_small_160x90            = "Klein [160x90]";
            mcs_play                    = "Starten";
            mcs_settings                = "Einstellungen";
            mcs_messages                = "Nachrichten";
            mcs_alarm                   = "Alarm";
            mcs_delete                  = "Löschen";
            mcs_delete_camera           = "Löschen ";
            mcs_apply                   = "Anwenden";
            mcs_speed                   = "Geschwindigkeit";
            mcs_others                  = "Sonstige";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Lautsprecher";
            mcs_mic                     = "Microfon";
            mcs_power_frequency         = "Netzfrequenz";
            mcs_online_upgrade          = "Onlineaktualisierung";
            mcs_restore_the_factory_settings = "Werkseinstellungen wiederherstellen";
            mcs_restore                 = "Wiederherstellung";
            mcs_restore_camera          = "Gerät neu starten";
            mcs_start_upgrade           = "Aktualisierung starten";
            mcs_system                  = "System";
            mcs_system_settings         = "Systemeinstellungen";
            mcs_online                  = "Online";
            mcs_offline                 = "Offline";
            mcs_query                   = "Anfrage";
            mcs_begin_time              = "Startzeit";
            mcs_end_time                = "Endzeit";
            mcs_mode                    = "Modus";
            mcs_opened                  = "Geöffnet";
            mcs_high                    = "Hoch";
            mcs_middle                  = "Mitte";
            mcs_low                     = "Niedrig";
            mcs_io_alert_input          = "I/O Alarm Eingabe";
            mcs_io_alert_output         = "I/O Alarm Ausgang";
            mcs_normally_open           = "Normalerweise öffnen";
            mcs_normally_close          = "Normalerweise geschlossen";
            mcs_motion_detection_sensitivity = "Empfindlichkeit der Bewegungserkennung";
            mcs_daytime                 = "Tageszeit";
            mcs_night                   = "Nacht";
            mcs_sdcord                  = "SD Karte";
            mcs_storage_device          = "Speichergeräte";
            mcs_set_mask                = "Set Maske";
            mcs_status                  = "Zustand";
            mcs_capacity                = "Kapazität";
            mcs_usage                   = "Einsatz";
            mcs_format                  = "Format";
            mcs_repair                  = "Reparatur";
            mcs_formating               = "wird formatiert";
            mcs_repairing               = "wird repariert";
            mcs_mounted                 = "Mount";
            mcs_unmounted               = "Steckpatz";
            mcs_mount                   = "Mount";
            mcs_unmount                 = "Steckplatz";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "WLAN";
            mcs_enabled                 = "Aktivieren";
            mcs_mac_address             = "MAC Adresse";
            mcs_network_status          = "Netzwerkstatus";
            mcs_wifi_mode               = "Wi-Fi Modus";
            mcs_client                  = "Klient";
            mcs_ap                      = "Hot spot";
            mcs_start_address           = "Startadresse";
            mcs_end_address             = "Endadresse";
            mcs_gateway                 = "Gateway";
            mcs_select_network          = "Netzwerk wählen";
            mcs_dhcp_ip                 = "IP : DHCP benutzen";
            mcs_dhcp_dns                = "DNS : DHCP benutzen";
            mcs_ip_address              = "IP Adresse";
            mcs_network_mask            = "Netzwerkmaske";
            mcs_input_secondary_dns     = "Zweitrangige DNS eingeben";
            mcs_secondary_dns           = "Zweitrangige DNS";
            mcs_input_dns               = "DNS eingeben";
            mcs_input_alternate_dns     = "Alternative DNS eingeben";
            mcs_input_ip                = "IP eingeben";
            mcs_input_gateway           = "Gateway eingeben";
            mcs_input_network_mask      = "Netzwerkmaske eingeben";
            mcs_wifi_list               = "Wi-Fi Liste";
            mcs_display_date            = "Anzeige des Datums";
            mcs_date_format             = "Datumsformat";
            mcs_display_time            = "Zeit Anzeige";
            mcs_time_format             = "Zeitformat";
            mcs_24_hour                 = "24-Stunden";
            mcs_12_hour                 = "12-Stunden";
            mcs_display_weeks           = "Wochenanzeige";
            mcs_date_time               = "Datum/Zeit";
            mcs_set_time                = "Zeit einstellen";
            mcs_set_week                = "Wochen einstellen";
            mcs_stream                  = "Datenfluss";
            mcs_encode                  = "Kodieren";
            mcs_resolution              = "Resolution";
            mcs_frame_fate              = "Bildrate (FPS)";
            mcs_maximum_bitrate         = "Maximale Bitrate";
            mcs_minimum_bitrate         = "Minimale Bitrate";
            mcs_i_frame_interval        = "I-Frame-Intervall";
            mcs_video                   = "Video";
            mcs_sampling_rate           = "Abtastrate (kHz)";
            mcs_nickname                = "Nickname";
            mcs_old_password            = "Altes Passwort";
            mcs_confirm_password        = "Passwort bestätigen";
            mcs_modify_password         = "Passwort modifizieren";
            mcs_password                = "Passwort";
            mcs_admin_password          = "Admin Passwort";
            mcs_guest_password          = "Gästepasswort";
            mcs_product_info            = "Geräteinformationen";
            mcs_software_version        = "Softwareversion";
            mcs_device_id               = "ID des Gerätes";
            mcs_operation               = "Operation";
            mcs_record                  = "Aufnahme";
            mcs_record_2                = "Aufnahme";
            mcs_upgrade_now             = "Jetzt aktualisieren";
            mcs_upgrading               = "Wird aktualisiert";
            mcs_already_latest_version  = "Neuste Version";
            mcs_sensitivty              = "Empfindlichkeit";
            mcs_user_defined            = "Benutzerdefiniert";
            mcs_time                    = "Zeit";
            mcs_date                    = "Datum";
            mcs_finish                  = "Ende";
            mcs_fail                    = "Gescheitert";
            mcs_motion                  = "Bewegung";
            mcs_start                   = "Start";
            mcs_talk                    = "Sprechen";
            mcs_password_input_inconsistent = "Passworteingabe fehlerhaft";
            mcs_input_6_to_20_litters   = "Input 6-20 Buchstaben (a-z, A-Z) oder Zahlen (0-9)";
            mcs_user_letter_range_hint  = "Kontonummer 6­20 ziffern (0 - 9) Oder buchstaben (a - Z, a - Z), MIT Einem buchstaben";
            mcs_password_range_hint     = "Passwort muss 6-20 Buchstaben oder Nummern beinhalten";
            mcs_begin_with_the_letters  = "Beginnen Sie mit einem Buchstaben";
            mcs_sign_up                 = "Registrieren";
            mcs_sign_up_failed          = "Registrierung gescheitert";
            mcs_successful_sign_up      = "Erfolgreiche Registrierung";
            mcs_are_you_sure_delete     = "Möchten Sie sicher löschen?";
            mcs_failed_to_set_the       = "Installation fehlgeschlagen";
            mcs_set_successfully        = "Einstellung erfolgreich";
            mcs_downloading             = "Herunterladen";
            mcs_wrote                   = "Geschrieben";
            mcs_visit_again_later       = "Bitte versuchen Sie es später noch einmal";
            mcs_restart_failed          = "Neustart fehlgeschlagen";
            mcs_upgrade_failed          = "Aktualisierung gescheitert";
            mcs_connnected              = "Verbunden";
            mcs_connnected_to           = "Verbunden mit";
            mcs_not_select              = "Nicht gewählt";
            mcs_message_list            = "Nachrichtenliste";
            mcs_saved_password          = "Passwort gespeichert";
            mcs_alert                   = "Alarm";
            mcs_no_record               = "Keine Aufname";
            mcs_new_about               = "Neu : über";
            mcs_device                  = "Gerät";
            mcs_config                  = "Einstellung";
            mcs_change_password_failed  = "Passwortänderung fehlgeschlagen";
            mcs_do_you_want_restart     = "Möchten Sie neustarten?";
            mcs_do_you_want_restore     = "Möchten Sie wiederherstellen?";
            mcs_do_you_want_upgrade     = "Möchten Sie aktualisieren?";
            mcs_load_end                = "Ende des Downloads";
            mcs_loading                 = "Laden...";
            mcs_down_refresh            = "Unten aktualisieren";
            mcs_release_refresh         = "Aktualisieren Release";
            mcs_refreshing              = "erfrischend";
            mcs_release_then_loading_data_hint = "Aktualisierung  ";
            mcs_pull_refresh_hint       = "Ziehen aktualisieren";
            mcs_restarting              = "Neustart";
            mcs_upgraded_time           = "Aktualisiert am: ";
            mcs_done                    = "Erledigt";
            mcs_playback                = "Wiedergabe";
            mcs_i_o_alarm               = "I/O Alarm";
            mcs_alarm_action            = "Alarm Aktionen";
            mcs_alarm_sources           = "Alarmrquellen";
            mcs_io_output               = "I/O Ausgang";
            mcs_snapshots               = "Momentaufnahme";
            mcs_snapshot                = "Momentaufnahme";
            mcs_snapshot_interval       = "Momentaufnahme Intervall(s)";
            mcs_pre_record_length       = "Pre-Aufzeichnungslänge (s)";
            mcs_nick_range_hint         = "Nickname max. 20 Ziffern und Buchstaben";
            mcs_save                    = "Speichern";
            mcs_close                   = "Schließen";
            mcs_snapshoting             = "Fotografieren";
            mcs_snapshot_failed         = "Fotoaufnahme gescheitert";
            mcs_record_failed           = "Aufname gescheitert";
            mcs_saved_successfully      = "Erfolgreich gespeichert";
            mcs_save_failed             = "Speichern gescheitert";
            mcs_restart_to_take_effect  = "Änderung erst nach Neustart wirksam";
            mcs_please_allow_access_album = "Bitte erlauben Sie MIPC den Zugang auf ihr Fotoalbum.";
            mcs_ios_privacy_setting_for_photo_prompt = "Sie können mit dem iPhone unter \"Einstellungen-> Datenschutz ->Fotos\", die Applikation \"MIPC\"ändern.";
            mcs_please_allow_access_camera = "Bitte erlauben Sie MIPC den Zugang auf ihre Kamera";
            mcs_ios_privacy_setting_for_camera_prompt = "Sie können mit dem iPhone unter \"Einstellungen-> Datenschutz ->Kamera\", die Applikation \"MIPC\"ändern";
            mcs_busy_when_write         = "Beschäftigt mit Schreiben";
            mcs_unknown_error           = "Unbekannter Fehler";
            mcs_i_know                  = "Ich weiß!";
            mcs_segment                 = "Segment";
            mcs_please_relogin          = "Wieder ein login";
            mcs_change_password_succeed = "Das Passwort erfolgreich geändert";
            mcs_upgrade_to_ver          = "Aktualisieren Sie auf die neuste Version";
            mcs_restore_failed          = "Wiederherstellung gescheitert";
            mcs_please_restart          = "Bitte neustarten";
            mcs_keep_network_settings   = "Reservierung von Netzwerkeinstellungen und Passwort";
            mcs_not_connected           = "Nicht verbunden";
            mcs_sdcard_not_ready        = "SDKarte ist nicht bereit";
            mcs_device_not_exist        = "Gerät existiert nicht";
            mcs_disable                 = "inaktiv";
            mcs_to_determine_the        = "Um zu bestätigen";
            mcs_alert_on                = "Alarmieren";
            mcs_alert_off               = "Alarmieren aus";
            mcs_alert_onoff             = "Alarm an/aus";
            mcs_monday                  = "Montag";
            mcs_tuesday                 = "Dienstag";
            mcs_wednesday               = "Mittwoch";
            mcs_thursday                = "Donnerstag";
            mcs_friday                  = "Freitag";
            mcs_saturday                = "Samstag";
            mcs_sunday                  = "Sonntag";
            mcs_mon                     = "Mo";
            mcs_tue                     = "Di";
            mcs_wed                     = "Mi";
            mcs_thu                     = "Do";
            mcs_fri                     = "Fr";
            mcs_sat                     = "Sa";
            mcs_sun                     = "So";
            mcs_scheduled_recording     = "Geplante Aufnahme";
            mcs_schedule                = "Geplante";
            mcs_scheduled_recording_status = "Geplanter Aufnahmezustand";
            mcs_folding                 = "Zusammengeklappt";
            mcs_unfolding               = "Wochentage";
            mcs_end_time_should_lt_begin = "Die Schlusszeit muss länger sein als die Startzeit";
            mcs_recording               = "Wird aufgenommen";
            mcs_prerecord_interval_range_hint = "Pre-Aufnahmezeit sollte weniger als 6 Sekunden sein";
            mcs_snapshot_interval_range_hint = "Momentaufnahme-Interval sollte 0 oder größer als 60 sein.";
            mcs_not_ready               = "Nicht bereit";
            mcs_availablesize           = "Verfügbarkeitssgröße";
            mcs_reboot                  = "Neustart";
            mcs_alerter                 = "Öffnen Sie den Alarm";
            mcs_pir                     = "Infrarotmelder";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Eingeber";
            mcs_ok                      = "OK";
            mcs_fault                   = "Fehler";
            mcs_sensor_status           = "Zustand Sensor";
            mcs_about                   = "über";
            mcs_reset_now               = "Jetzt Neustart durchführen";
            mcs_reset_later             = "Reset später ";
            mcs_prompt                  = "Bedienerhinweis";
            mcs_select                  = "Wählen";
            mcs_available_netword       = "Netzwerk ist nicht verfügbar, Netzwerk einstellen";
            mcs_request_send            = "Anfrage wird verschickt…";
            mcs_blank_device_id         = "ID des Gerätes eingeben.";
            mcs_blank_username          = "Benutzername eingeben";
            mcs_blank_password          = "Passwort eingeben";
            mcs_exist_user              = "Benutzer existiert bereits";
            mcs_invalid_user            = "Benutzer abgelaufen";
            mcs_invalid_email_addr      = "Ungültige E-Mail-Adresse";
            mcs_system_err              = "Systemsfehler";
            mcs_exceed_device           = "Die Zahl der Nutzer ist überschritten";
            mcs_continue                = "Fortsetzen";
            mcs_prompt_exit             = "Ob der rückzug?";
            mcs_device_list             = "Geräteliste";
            mcs_no_sdcard               = "Keine SD Karte vorhanden";
            mcs_no_hard_disk            = "kein Festplattenlaufwerk";
            mcs_show_more               = "Mehr…";
            mcs_shotsnop_exists         = "Fotos existieren schon";
            mcs_input_nick              = "Benutzername eingeben";
            mcs_nick_not_empty          = "Benutzername eingeben";
            mcs_input_new_pass          = "Neues Passwort eingeben";
            mcs_input_new_pass_again    = "Neues Passwort noch einmal eingeben";
            mcs_new_password            = "Neues Passwort";
            mcs_modify_network_prompt   = "Änderung des Netzwerks kann zum Verlust des vorhandenen Nertzwerks führen, bitten bestätigen Sie die Änderung noch einmal?";
            mcs_wifi_disable_prompt     = "Ausschalten des WLANs fortsetzen?";
            mcs_eth_disable_prompt      = "Ausschalten des Ethernets fortsetzen?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "DHCP benutzen";
            mcs_manually_set            = "Wird manuell eingestellt";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "Primäre DNS";
            mcs_client_mode             = "Klient";
            mcs_adhoc_mode              = "Ad Hoc";
            mcs_connect_fail            = "Verbindungsfehler";
            mcs_dhcp_server             = "DHCP Server";
            mcs_display_text            = "Anzeige des Textes";
            mcs_repair_prompt           = "Reparatur kann zum Verlust der Daten führen, fortsetzen?";
            mcs_format_prompt           = "Durch Formatierung können alle Daten auf der SD Karte gelöscht werden, fortsetzen?";
            mcs_mount_prompt            = "SD Karte einsetzen, fortsetzen?";
            mcs_umount_prompt           = "Video und Fotos können nach der Deinstallation der SD Karte nicht gespeichert werden . Forsetzen?";
            mcs_sdcard_reset            = "Erforgreiche Einstellung, Kamera neustarten. Fortsetzen?";
            mcs_sdcard_repairing        = "Reparatur Neustart erwarten";
            mcs_sdcard_formating        = "Formatierung wartet auf Neustart";
            mcs_sdcard_umount           = "Unmotiert";
            mcs_valid                   = "Gültig";
            mcs_io                      = "IO Alarm";
            mcs_input                   = "Eingang";
            mcs_outinput                = "Ausgang";
            mcs_prompt_alert_on         = "Alarm an, fortsetzen";
            mcs_auto_sync_date_time     = "Automatische synchronisation";
            mcs_alarm_record            = "Aufnahme nach Alarm";
            mcs_username                = "Benutzername";
            mcs_re_enter_the_password   = "Das Passwort noch einmal eingeben";
            mcs_remember_me             = "Bleiben Sie beim Login";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Stecker installieren";
            mcs_install_the_video_plug  = "Videostecker einstecken";
            mcs_install_now             = "Jtzt installieren";
            mcs_temporarily_installed_use_ordinary_video = "Nein, später installieren";
            mcs_brightness              = "Helligkeit";
            mcs_contrast                = "Kontrast";
            mcs_color_saturation        = "Farbsättigung";
            mcs_sharpness               = "Schärfe";
            mcs_duration                = "Dauer";
            mcs_index                   = "Index";
            mcs_remark                  = "Bemerkung";
            mcs_media_stream            = "Medien";
            mcs_server                  = "Server";
            mcs_media_transfer          = "Übertragung von Medien";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Hersteller";
            mcs_model                   = "Modell";
            mcs_plugin_version          = "Version des Plug-in ";
            mcs_network_interface       = "Netzwerkschnittstelle";
            mcs_transfer_protocol       = "Übertragungsprotokoll";
            mcs_year                    = "Jahr";
            mcs_month                   = "Monat";
            mcs_day                     = "Tag";
            mcs_hour                    = "Stunde";
            mcs_minute                  = "Minute";
            mcs_second                  = "Sekunde";
            mcs_millisec                = "Millisekunde";
            mcs_ntp                     = "Zeitserver";
            mcs_upload_upgrade          = "Upload Aktualisierung";
            mcs_stop                    = "Stoppen";
            mcs_info_rewind             = "Rückspulen";
            mcs_fast_forward            = "Schnellvorlauf";
            mcs_previous_frame          = "Vorheriges Bild";
            mcs_next_frame              = "Nächstes Bild";
            mcs_record_audio            = "Audio aufnehmen";
            mcs_week                    = "Woche";
            mcs_all                     = "Alles";
            mcs_id                      = "ID";
            mcs_select_all              = "Alles wählen";
            mcs_call                    = "Anrufen";
            mcs_activation              = "Aktivierung";
            mcs_caption                 = "Datei hochladen";
            mcs_alarm_device            = "Geräte Alarm";
            mcs_not_installed           = "Nicht installiert";
            mcs_join_us_now             = "Begleiten Sie uns jetzt";
            mcs_reconnect_please_wait   = "Wiederverbinden, bitte warten";
            mcs_erasing                 = "Wird gelöscht";
            mcs_writing                 = "Wird geschrieben";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Es gibt eine neue Version";
            mcs_equipment_flip          = "Drehen";
            mcs_device_status           = "Zustand des Geräts";
            mcs_audio_setting           = "Audioeinstellung";
            mcs_nick_modify             = "Modifikation des Benutzernamen";
            mcs_ready                   = "Bereit";
            mcs_full                    = "Voll";
            mcs_connecting              = "Wird verbunden";
            mcs_message_buffering       = "Nachrichten Speichern";
            mcs_upgrade_finish          = "Aktualisierung erledigt";
            mcs_image                   = "Bilder";
            mcs_bar                     = "Akte";
            mcs_init                    = "Initialisierung";
            mcs_confirm_new_password    = "Neues Passwort bestätigen";
            mcs_continue_switch_wireless_network = "Netzwerkwechseln kann zum Misserforg des Netzwerks führen. Fortsetzen?";
            mcs_restore_factory_settings_prompt = "Werkseinstellungen wiederhestellen. Ausrüstung nach Wiederherstellung neugestarten. Fortsetzen?";
            mcs_username_does_not_exis  = "Benutzername existiert nicht.";
            mcs_username_already_exists = "Benutzername existiert schon";
            mcs_successful_whether_login = "Erforgreiche registration, jetzt einloggen?";
            mcs_username_demand         = "6-20 Buchstaben oder Nummern mit den Buchstaben beginnen";
            mcs_the_password_is_empty   = "Das Passwort eingeben";
            mcs_password_demand         = "6-20 Buchstaben oder Nummern mit den Buchstaben beginnen";
            mcs_password_empty          = "Das Passwort bestätigen ";
            mcs_two_password_input_inconsistent = "Die Eingabe der Passwörter Stimmt nicht überein";
            mcs_the_user_name_is_empty  = "Den Benutzernamen eingeben";
            mcs_upgrade_to_the_latest_version = "Aktualisiert Sie auf die neueste Version";
            mcs_subnet_mask_wrong_format = "Netzwerkmaske hat ein ungültiges Format";
            mcs_upgrade_successful_restart_to_take_effect = "Aktualisierung erforgreich, sie müssen die Ausrüstung neustarten.";
            mcs_need_to_restart_the_camera_to_take_effect = "Sie müssen die Ausrüstung neustarten";
            mcs_not_allowed_close_two_network_cards = "Ethernet und Wi-Fi können nicht gleichzeitig gesperrt werden";
            mcs_modified_successfully   = "Erforgreiche Änderung";
            mcs_connection_successfully = "Verbindung erforgreich";
            mcs_connection_is_interrupted = "Verbindung abgebrochen";
            mcs_devices_in_the_account_overrun = "Anzahl der Benutzer überschritten";
            mcs_format_error            = "Fehler im Format";
            mcs_change                  = "Ändern";
            mcs_refresh                 = "Aktualisieren";
            mcs_connect                 = "Verbinden";
            mcs_upgrade                 = "Aktualisierung";
            mcs_activate                = "Aktivieren";
            mcs_filter                  = "Filter";
            mcs_reset                   = "Zurücksetzen";
            mcs_prompt_alert_off        = "Alarm aus, fortsetzen?";
            mcs_invalid_server          = "Ungültiger Zeitserver";
            mcs_upgrade_prompt          = "Die Ausrüstung software  aktualisieren. Fortsetzen?";
            mcs_restart_prompt          = "Gerät neu starten, fortsetzen?";
            mcs_repeat                  = "Wiederholen";
            mcs_scheduled_one           = "Zeitplanprogramm 1";
            mcs_scheduled_two           = "Zeitplanprogramm 2";
            mcs_scheduled_three         = "Zeitplanprogramm 3";
            mcs_scheduled_four          = "Zeitplanprogramm 4";
            mcs_more                    = "Mehr";
            mcs_leave                   = "Verlassen um hochzuladen";
            mcs_qrcode_scan             = "QR Kode scannen";
            mcs_inserted                = "Einfügen";
            mcs_removed                 = "Entfernt";
            mcs_upgrade_init            = "Aktualisierung beginnen";
            mcs_upgrade_download        = "Aktualisierung Herunterladen";
            mcs_check                   = "Überprüfen";
            mcs_audio_encoder_config    = "Audio Codec";
            mcs_video_codec             = "Video Codec";
            mcs_download                = "Downloaden";
            mcs_client_download         = "Klient herunterladen";
            mcs_for_more_clarity_smooth_video_experience = "Verbesser der Videoschäfe und -flusses";
            mcs_network                 = "Netzwerk";
            mcs_mobile_client_download  = "Mobil-Klient herunterladen";
            mcs_readonly                = "Nur lesen";
            mcs_please_exit_and_relogin = "Bitte verlassen und erneut einloggen";
            mcs_add_device_failed       = "Gerät hinzufügen gescheitert";
            mcs_set_password            = "Kennwort ändern";
            mcs_7x24_hours              = "7 x 24(Stunden)";
            mcs_motion_alert            = "Bewegungsalarm";
            mcs_mtalt                   = "%@ : Bewegungsmeldung";
            mcs_io_alert                = "I/O alarm";
            mcs_ioalt                   = "%@ : I/O alarm";
            mcs_time_zone               = "Zeitzone";
            mcs_select_time             = "Wählen Sie die Zeit";
            mcs_now                     = "Jetzt";
            mcs_mipc_have_alert_notification = "MIPC sie haben eine Warnmeldung";
            mcs_notification_center     = "Benachrichtungs Center";
            mcs_sound                   = "Ertönen";
            mcs_vibration               = "Vibration";
            mcs_clear_cache             = "Zwischenspeicher leeren";
            mcs_clear_cache_hint        = "Sind Sie sicher, dass Sie den Zwischenspeicher löschen möchten?";
            mcs_successfully_cleared_cache = "Zwischenspeicher erfolgreich gelöscht";
            mcs_app_except_exit_hint    = "Leider hat die Anwendung einen Fehler festgestellt und wird beendet.";
            mcs_rate_us                 = "Rate us";
            mcs_password_too_simple_hint = "Passwort ist zu einfach und muss modifiziert werden, um die Sicherheit zu verbessern.";
            mcs_check_for_new_version   = "Test für neue Version";
            mcs_contact_us              = "Kontaktieren Sie uns";
            mcs_buffer_time             = "Pufferzeit";
            mcs_default                 = "Fehler";
            mcs_alarmed_devices         = "Gerätealarm aktiv";
            mcs_aec                     = "Echounterdrückung";
            mcs_permission_denied       = "Erlaubnis abgelehnt";
            mcs_full_screen             = "Vollbild";
            mcs_forgot_your_password    = "Passwort vergessen";
            mcs_your_email              = "Ihre E-Mail";
            mcs_sign_up_confirmation    = "Eine Bestätigungs-E-Mail wird geschickt, um die angegebene E-Mail-Adresse zu überprüfen. Klicken Sie auf den Link in dieser E-Mail, um das Konto zu aktivieren.";
            mcs_recovery_prompt         = "Bitte geben Sie Ihre E-Mail-Adresse ein (Benutzername). Sie erhalten umgehend eine Nachricht, wie man das Passwort zurückzusetzen kann.";
            mcs_password_reset_confirmation = "Sie erhalten eine E-Mail die angegebene E-Mail-Adresse, klicken Sie auf den Link, um das Passwort zurückzusetzen.";
            mcs_recovery_fail_no_mail   = "Passwort-Wiederherstellung gescheitert, die E-Mail Adresse ist uns nicht bekannt";
            mcs_recovery_fail_invalid_link = "Passwort-Wiederherstellung gescheitert, bitte stellen Sie sicher, bitte versuchen Sie es erneut.";
            mcs_recovery_ok_login       = "Passworteingabe erfolgreich, jetzt anmelden.";
            mcs_active_ok_login         = "Konto aktiviviert. Jetzt anmelden.";
            mcs_active_fail_invalid_link = "Konto aktiv gescheitert. Bitte veruchen Sie es erneut.";
            mcs_login_fail_inactive     = "Konto ist inaktiv. Bitte folgen Sie den Instruktionen der E-Mail um den Account zu aktivieren.";
            mcs_sign_up_again           = "Erneute Registrierung";
            mcs_press_start_talk        = "Drücken, um zu sprechen";
            mcs_release_stop_talk       = "Drücken, um zu stoppen";
            mcs_delete_device           = "Gerät löschen";
            mcs_success_removed_equipment = "Gerät löschen erfolgreich";
            mcs_remove_equipment_failure = "Entfernen Sie Geräteausfall";
            mcs_device_busy             = "Das Gerät ist nun damit beschäftigt";
            mcs_keep_testing            = "Weiterer Test";
            mcs_notify_tone             = "Klingelton für Benachrichtigungen";
            mcs_float_video             = "フローティング•ビデオを有効にする";
            mcs_float_position          = "Schwimmende Videoposition";
            mcs_video_resolution        = "Video-Auflösung";
            mcs_float_resolution        = "Schwimmende Video-Auflösung";
            mcs_top_left                = "oben links";
            mcs_top_right               = "rechts oben";
            mcs_bottom_left             = "unten links";
            mcs_bottom_right            = "unten rechts";
            mcs_action_next             = "nächste";
            mcs_action_cancel           = "stornieren";
            mcs_action_retry            = "wiederholen";
            mcs_action_add              = "hinzufügen";
            mcs_action_apply            = "Anwendung";
            mcs_action_config           = "Konfiguration";
            mcs_action_skip             = "überspringen";
            mcs_action_ok               = "Ok";
            mcs_action_add_device       = "Gerät hinzufügen";
            mcs_action_modify_password  = "Kennwort ändern";
            mcs_action_config_wifi      = "Wi-Fi einstellen";
            mcs_state_connect_device    = "Anschließen von Geräten";
            mcs_state_connect_device_fail = "Anschließen des Gerätes fehlgeschlagen";
            mcs_state_wait_device_online = "Warten Sie bis das Gerät online ist";
            mcs_state_device_online     = "Online";
            mcs_state_success           = "Erfolg";
            mcs_state_add_device_success = "Gerät hinzufügen erfolgreich";
            mcs_state_add_device_fail   = "Einen Gerätefehler hinzufügen";
            mcs_state_modify_pass_success = "Passwort erfolgreich geändert";
            mcs_state_modify_pass_fail  = "Passwortänderung scheitert";
            mcs_state_config_wifi_success = "Einrichten des Wi-Fi erfolgreich";
            mcs_state_config_wifi_fail  = "Verbindungsfehler";
            mcs_state_connecting_to     = "Anschließen an";
            mcs_network_connect_type    = "Gerät ist nicht online, können Sie sicherstellen, dass das Gerät eingeschaltet ist auf, und wählen Sie Netzwerkverbindung:";
            mcs_prompt_modify_passwd    = "Das Passwort des Geräts ist zu einfach, ändern Sie bitte Ihr Passwort ein. Neues Passwort muss mindestens sechs Zeichen lang sein.";
            mcs_prompt_config_wifi      = "Ihr Gerät ist noch immer nicht auf Ihr WiFi verbunden ist, konfigurieren Sie den Wi-Fi.";
            mcs_step1_check_connect     = "Schritt 1 : Verbinden Sie Ihren Router und die Kamera mit dem Netzwerkkabel.";
            mcs_first_step_ethernet_connect = "Schritt 1: Schließen Sie ein Ende eines Netzwerkkabels an den Router und das andere Ende des Netzwerkanschluss Zugangsgerät zu verbinden.";
            mcs_step2_check_connect     = "Schritt 2 : Schalten Sie die Kamera ein.";
            mcs_second_step_ethernet_connect = "Schritt 2 : Die Macht auf Ihrem Gerät, starten Sie das Gerät.";
            mcs_hint_check_network      = "Hinweis : die Kamera benötigt etwa 50 Sekunden um zu starten. Wenn die Inbetriebnahme abgeschlossen ist, leuchtet LED 3 Sekunden lang und das grüne Licht blinkt dreimal, das bedeutet, dass die Kamera online ist. Der Assistent wird nun automatisch den nächsten Schritt vorgeben.";
            mcs_the_end                 = "Das Ende";
            mcs_hint_password_expired   = "Passwort ist abgelaufen, bitte fügen Sie das Gerät erneut hinzu.";
            mcs_hint_remove_ethernet    = "Bemerkung : Das Wi-Fi funktioniert ordnungsgemäß, Sie können nun das Netzwerkkabel entfernen.";
            mcs_ip_format_incorrect     = "IP-Adressformat ist falsch";
            mcs_login_sucess            = "Erfolgreicher Login";
            mcs_donot_remind            = "Erinnern Sie sich nicht?";
            mcs_clear_cache_signout_hint = "Löschen der Cache verlassen, melden Sie sich erneut an, weiter?";
            mcs_devlist_adddev_hint     = "Klicken Sie hier, um Geräte hinzufügen";
            mcs_devlist_menu_hint       = "Klicken Sie hier, um die Auflösung einzustellen";
            mcs_update_failed           = "Upgrade fehlgeschlagen";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Lokal";
            mcs_set_npapi               = "Wenn das Plugin installiert wurde, besuchen Sie bitte \'chrome://flags/#enable-npapi\', ermöglichen NPAPI, ";
            mcs_set_win32k              = "Besuch \'chrome://flags/#enable-win32k-renderer-lockdown\', Behinderte Win32k Renderer Standbildaufnahme,";
            mcs_restart_browser         = "Starten Sie den Browser";
            mcs_download_location       = "Downloadpfad";
            mcs_Networking_mode         = "Netzwerkmodus";
            mcs_wifi_intelligent_configuration = "WIFI-Verbindung";
            mcs_ethernet_configuration  = "Ethernet-Verbindung";
            mcs_wifi_connect            = "Anschluss";
            mcs_hard_disk               = "Festplatte";
            mcs_wifi_is_connection      = "Anschließen, bitte warten Sie...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi intelligente Konfiguration Setup-Fehler";
            mcs_box_list                = "Listenfeld";
            mcs_repair_disk_prompt      = "Repair Disk können einige Daten verloren, fortsetzen?";
            mcs_format_disk_prompt      = "Format Platte werden alle Daten zu löschen, fortsetzen?";
            mcs_scheduled_alerting      = "Arming Programm";
            mcs_scheduled_alerting_one  = "Arming Programm 1";
            mcs_scheduled_alerting_two  = "Arming Programm 2";
            mcs_scheduled_alerting_three = "Arming Programm 3";
            mcs_scheduled_alerting_four = "Arming Programm 4";
            mcs_wifi_config_cancle      = "wifi-Konfiguration aufheben";
            mcs_wifi_config_prepare     = "wifi Voraussetzungen";
            mcs_wifi_config_first       = "Die Vorrichtungen und Mobiltelefonen und Routern im Bereich von 1 m gehalten";
            mcs_wifi_config_second      = "Bei der Konfiguration von WLAN kann das Gerät das Netzwerkkabel nicht einstecken";
            mcs_wifi_config_third       = "Drücken Sie die RESET Reset-Öffnung einer Sekunde und dann freigeben";
            mcs_wifi_config_success     = "Configuration Erfolg";
            mcs_wifi_config_failure     = "Konfiguration fehlgeschlagen";
            mcs_failure_prompt          = "Bitte versuchen Sie es erneut oder kehren Sie zu WIFI Kennwort überprüfen ist richtig eingegeben";
            mcs_display_password        = "Passwort anzeigen";
            mcs_action_smart_config_wifi = "Configuration Wizard";
            mcs_wifi_invalid            = "Ihr Netzwerk nicht WiFi, schließen Sie bitte WiFi!";
            mcs_phone_not_connect_wifi  = "WiFi-Netzwerk nicht angeschlossen";
            mcs_prompt_check_connection = "Ihre Kamera ist nicht online, Verbindung der Kamera überprüfen.";
            mcs_wifi_cfg_ready          = "Bereit";
            mcs_reset_complete          = "Reset abgeschlossen ist";
            mcs_how_to_restore_factory_settings = "Wie Sie die Werkseinstellungen wieder her: verwenden Sie den Reset-Pin Drücken der RESET-Loch an der Unterseite der Kamera für mehr als 10 Sekunden";
            mcs_forgetpass_action_wizard = "Drücken Sie RESET Reset Loch 10 Sekunden nach dem Release, setzt das Gerät automatisch neu starten, das Passwort für den Admin-";
            mcs_prompt_check_device_connection = "Ihr Gerät ist nicht online, überprüfen Sie die Verdrahtung zum Anschließen des Geräts";
            mcs_input_wifi_name         = "Bitte geben Sie Namen wifi";
            mcs_action_previous         = "früher";
            mcs_io_alert_range_hint     = "IO Alarmzeit sollte weniger als 60 Sekunden";
            mcs_io_alert_time           = "IO Alarmzeit(s)";
            mcs_smart                   = "intelligent";
            mcs_plan                    = "Plan";
            mcs_mute                    = "stumm";
            mcs_wind_speed              = "Windgeschwindigkeit";
            mcs_one                     = "ein Zahnrad";
            mcs_two                     = "zwei Getriebe";
            mcs_three                   = "Three gear";
            mcs_purify_mode             = "reinigen Modus";
            mcs_video_list              = "Video-Liste";
            mcs_wifi_cfg_restore_factory_settings = "Halten Sie das Mobiltelefon in der Nähe von Gerät, wenn Gerät ist WiFi konfiguriert, drücken Sie die RESET-Öffnung für eine Sekunde dann los, wird das Gerät auf die Werkseinstellungen wiederherstellen und automatisch neu startet";
            mcs_mask_settings           = "Mask-Einstellungen";
            mcs_notification_settings   = "Benachrichtigungseinstellungen";
            mcs_alarm_settings          = "Alarmeinstellungen";
            mcs_motion_detection        = "Bewegungserkennung";
            mcs_io_alarm                = "E/A-Alarm";
            mcs_connect_status          = "Verbindungsstatus";
            mcs_motion_notification     = "Warnungen und Benachrichtigungen";
            mcs_device_connected        = "Gerät angeschlossen ist";
            mcs_start_spray             = "Starten Sie Spritzen?";
            mcs_available_network       = "Netzwerk ist nicht verfügbar";
            mcs_select_wifi_wizard      = "Bitte wählen Sie zunächst WiFi-Netzwerk";
            mcs_input_wifi_password     = "Eingangs WiFi vergessen";
            mcs_device_admin_password   = "Gerät Admin-Passwort";
            mcs_device_guest_password   = "Gästepasswort";
            mcs_user_admin_password     = "User-Admin-Passwort";
            mcs_user_guest_password     = "Benutzer Gast vergessen";
            mcs_save_network_set        = "Sparen Sie Netzwerk-Set und ein Passwort";
            mcs_nickname_not_set        = "Kamera Spitznamen nicht gesetzt";
            mcs_current_wifi            = "Aktuelle WLAN";
            mcs_current_password_strength = "Die aktuelle Stärke von Passwörtern";
            mcs_new_password_strength   = "Neue Passwortstärke";
            mcs_needs_to_open_the_DHCP  = "Ihr Router muss der DHCP-Open-Funktion (automatische IP zu erhalten), wenn der Versuch nicht erfolgreich ist, kontaktieren Sie bitte den Administrator.";
            mcs_picture                 = "Bild";
            mcs_quality                 = "Qualität";
            mcs_size                    = "Größe";
            mcs_guest_login             = "Gast Login";
            mcs_audio_and_video         = "Audio / Video";
            mcs_volume                  = "Volumen";
            mcs_smooth                  = "glatt";
            mcs_clear                   = "klar";
            mcs_handsfree               = "Freisprechen";
            mcs_headphone               = "Kopfhörer";
            mcs_my                      = "meine";
            mcs_customer_service        = "Kundendienst";
            mcs_firefox_flash_uninstall = "Ihr Flash Plugin nicht verfügbar ist, die Lösung finden Sie https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Widget";
            mcs_plug_load               = "Last-Plugins";
            mcs_plug_load_refuse        = "Plugins Legen Sie nicht";
            mcs_plug_load_auto          = "automatisch";
            mcs_option                  = "Options";
            mcs_option_ok               = "bestimmen";
            mcs_voice_call_fails        = "Voice-Aufruf fehlschlägt, überprüfen Sie die Netzwerk";
            mcs_umounted_prompt         = "ob auszuhängen?";
            mcs_signup_prompt           = "neu hier?";
            mcs_wifi_connect_sucess_prompt = "Anm.: Wi - fi zu Arbeiten, sie können jetzt trennen - Netzwerk";
            mcs_manual_input_prompt     = "Manuelle Eingabe der Geräte - ID";
            mcs_qrscan_prompt           = "Sie nicht zulassen, dass diese Anwendung für den zugriff auf ihre Kamera, bitte auf dem iPhone ‘einstellungen’ - ’ privacy ’ - ’ Kamera ’ - funktion zu Finden, die für Vimtag namen ’ anwendungen ’ geändert werden.";
            mcs_select_network_style    = "Sie Netzwerk - Verbindung:";
            mcs_push                    = "Durchsage";
            mcs_connect_power_prompt    = "Anm.: Gerät nicht online, bitte stellen sie Sicher, dass bereits im zusammenhang mit der Energieversorgung";
            mcs_fail_microphone         = "Keinen zugriff auf mikrofon";
            mcs_microphone_prompt       = "Sie sind nicht zu erlauben, diese Anwendung, um das Mikrofon zu gelangen, in der ‘Set’ iPhone - die ’Privatsphäre‘ - ’Mikrofon‘ -Funktion finden Sie den Namen des \'Vimtag\' Anwendung geändert werden";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Löschen...";
            mcs_event                   = "Ereignisse";
            mcs_one_hour                = "Eine stunde";
            mcs_half_hour               = "Eine HALBE stunde";
            mcs_five_min                = "Fünf minuten";
            mcs_category                = "Zu";
            mcs_time_length             = "Lange Zeit";
            mcs_new                     = "NeUe";
            mcs_week_setting_prompt     = "Am nicht Leer";
            mcs_time_setting_prompt     = "Zeit, die nicht Leer";
            mcs_today                   = "Heute";
            mcs_wifi_config_prepare     = "wifi Voraussetzungen";
            mcs_wifi_password           = "wifi vergessen";
            mcs_register_prompt         = "Bitte registrieren, konto!";
            mcs_click_login             = "Klicken sie zum login";
            mcs_not_login_prompt        = "Sie sind nicht angemeldet, klicken sie bitte hier, um Sich!";
            mcs_product_presentation    = "Homepage";
            mcs_help_feedback           = "Helfen";
            mcs_help_information        = "Helfen";
            mcs_feedback                = "Feedback";
            mcs_connect_wifi_prompt     = "MIT WiFi";
            mcs_cloud                   = "wolke";
            mcs_demo                    = "demo";
            mcs_shortest                = "Kürzeste";
            mcs_no_history              = "Keine Geschichte";
            mcs_download_pc_client      = "Klicken Sie auf, um die PC-Client herunterladen";
            mcs_accounts_bind_email_exist = "Die e - mail - konto haben Sich bereits verpflichtet";
            mcs_accounts_bind_email_busy = "Haben Sich bereits verpflichtet, die e - mail - konto";
        }/* de */
        else if(lang == "fr")
        {
            mcs_name                    = "Nom";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Nom";
            mcs_old_nick                = "Nom d\'utilisateur";
            mcs_linked                  = "Connecté";
            mcs_sign_in                 = "Connecter";
            mcs_back                    = "Retourner";
            mcs_add                     = "Ajouter";
            mcs_add_device              = "Ajout. Dispositif";
            mcs_device_existed          = "Dispositif déjà existant";
            mcs_cancel                  = "Annuler";
            mcs_exit                    = "Fermer";
            mcs_remember_password       = "Retenir le mot de passe";
            mcs_password_remembered     = "Mot de passe enregistré";
            mcs_sign_ining              = "Connexion en cours...";
            mcs_cloud_server            = "Serveur cloud";
            mcs_input_device_id         = "ID du dispositif d’entrée";
            mcs_input_username          = "Entrée Nom d\'utilisateur";
            mcs_input_email_addr        = "Entrez l\'adresse e-mail";
            mcs_email_address           = "e-mail adresse";
            mcs_email                   = "Boîte aux lettres";
            mcs_binding                 = "Reliure";
            mcs_binding_email           = "boîte aux lettres Reliure";
            mcs_binding_send_prompt     = "boîte aux lettres Reliure";
            mcs_binding_email_prompt    = "boîte aux lettres Reliure";
            mcs_input_password          = "Entrée du mot de passe";
            mcs_access_server_failed    = "Échec serveur";
            mcs_device_offline          = "Dispositif deconnecté";
            mcs_invalid_password        = "Mot de passe invalide";
            mcs_invalid_dev             = "Ne existe pas dispositif";
            mcs_login_faided            = "Erreur de connexion";
            mcs_invalid_qrcode          = "Code-QR invalide";
            mcs_please_input_username   = "Veuillez entrer le nom d’utilisateur";
            mcs_please_input_password   = "Veuillez entrer le mot de passe";
            mcs_qrcode_scan_hint        = "Gardez la boîte au bas de l\'appareil est aligné code bidimensionnel";
            mcs_device_list_empty       = "Liste des dispositifs vide";
            mcs_record_list_is_empty    = "Liste des vidéos vide ";
            mcs_password_expired        = "Expiration du mot de passe";
            mcs_set_video_size          = "Modifier la taille du vidéo";
            mcs_hd_1280x720             = "Haute définition [1280x720]";
            mcs_auto                    = "Automatique";
            mcs_normal_640x360          = "Normale [640x360]";
            mcs_half_320x180            = "Moyen [320x180]";
            mcs_small_160x90            = "Min [160x90]";
            mcs_play                    = "Voir";
            mcs_settings                = "Réglages";
            mcs_messages                = "Messages";
            mcs_alarm                   = "Alarme";
            mcs_delete                  = "Efaccer";
            mcs_delete_camera           = "Efaccer ";
            mcs_apply                   = "Appliquer";
            mcs_speed                   = "Vitesse";
            mcs_others                  = "Autres";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Haut-parleur";
            mcs_mic                     = "Micro";
            mcs_power_frequency         = "Fréquence d\'alimentation";
            mcs_online_upgrade          = "Mise à jour en ligne";
            mcs_restore_the_factory_settings = "Restaurer les parameters usine";
            mcs_restore                 = "Restaurer";
            mcs_restore_camera          = "redémarrage de l\'équipement";
            mcs_start_upgrade           = "Commencer l\'actualisation";
            mcs_system                  = "Système";
            mcs_system_settings         = "Paramètres du système";
            mcs_online                  = "Dispositif en ligne";
            mcs_offline                 = "Dispositif hors ligne";
            mcs_query                   = "Requête";
            mcs_begin_time              = "Heure de début";
            mcs_end_time                = "Heure de fin";
            mcs_mode                    = "Modèle";
            mcs_opened                  = "Ouvert";
            mcs_high                    = "Haut";
            mcs_middle                  = "Moyen";
            mcs_low                     = "Bas";
            mcs_io_alert_input          = "E/S entrée d’alarme";
            mcs_io_alert_output         = "E/S sortie d’alarme";
            mcs_normally_open           = "Normalement ouvert";
            mcs_normally_close          = "Normalement fermé";
            mcs_motion_detection_sensitivity = "Sensibilité de la détection de mouvement";
            mcs_daytime                 = "Jour";
            mcs_night                   = "Nuit";
            mcs_sdcord                  = "La carte SD";
            mcs_storage_device          = "les périphériques de stockage";
            mcs_set_mask                = "Set masque";
            mcs_status                  = "Etat";
            mcs_capacity                = "Capacité";
            mcs_usage                   = "Usage";
            mcs_format                  = "Format";
            mcs_repair                  = "Réparer";
            mcs_formating               = "Formatatage en cours";
            mcs_repairing               = "En cours de réparation";
            mcs_mounted                 = "Chargé";
            mcs_unmounted               = "Déchargé";
            mcs_mount                   = "Charger";
            mcs_unmount                 = "Décharger";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Activé";
            mcs_mac_address             = "Adresse MAC";
            mcs_network_status          = "État du réseau";
            mcs_wifi_mode               = "Mode sans fil";
            mcs_client                  = "Client";
            mcs_ap                      = "AP";
            mcs_start_address           = "Adresse de début";
            mcs_end_address             = "Adresse de fin";
            mcs_gateway                 = "La passerelle";
            mcs_select_network          = "Sélectionnez le réseau";
            mcs_dhcp_ip                 = "Dhcp : IP automatique";
            mcs_dhcp_dns                = "Dhcp, dns automatique";
            mcs_ip_address              = "Adresse IP";
            mcs_network_mask            = "Masque de réseau";
            mcs_input_secondary_dns     = "Entrée de DNS secondaire";
            mcs_secondary_dns           = "DNS secondaire";
            mcs_input_dns               = "Entrée de DNS";
            mcs_input_alternate_dns     = "Entrée de DNS auxiliaire";
            mcs_input_ip                = "Entrée de l’adresse IP";
            mcs_input_gateway           = "Entrée de la passerelle";
            mcs_input_network_mask      = "Entrée masque de réseau";
            mcs_wifi_list               = "Liste de Wi-Fi";
            mcs_display_date            = "Affichage de la date";
            mcs_date_format             = "Format/date";
            mcs_display_time            = "L’affichage du temps";
            mcs_time_format             = "Format de l\'heure";
            mcs_24_hour                 = "24h/24h";
            mcs_12_hour                 = "12 heures sur 24";
            mcs_display_weeks           = "Affichage - Semaines";
            mcs_date_time               = "Date/temps";
            mcs_set_time                = "La configuration du temps";
            mcs_set_week                = "Établir la semaine";
            mcs_stream                  = "Flux";
            mcs_encode                  = "Codage";
            mcs_resolution              = "Résolution";
            mcs_frame_fate              = "Entrelacement (FPS)";
            mcs_maximum_bitrate         = "Débit binaire maximal";
            mcs_minimum_bitrate         = "Bitrate minimal";
            mcs_i_frame_interval        = "Intervalle de Frame";
            mcs_video                   = "Vidéo";
            mcs_sampling_rate           = "Sampling rate(kHz";
            mcs_nickname                = "Nom d\'utilisateur";
            mcs_old_password            = "Ancien mot de passe";
            mcs_confirm_password        = "Confirmer le mot de passe";
            mcs_modify_password         = "Changer le mot de passe";
            mcs_password                = "Mot de passe";
            mcs_admin_password          = "Mot de passe Admin";
            mcs_guest_password          = "Invité Mot de passe";
            mcs_product_info            = "Info";
            mcs_software_version        = "Version du logiciel";
            mcs_device_id               = "Équipement ID";
            mcs_operation               = "Opération";
            mcs_record                  = "Enregistrer";
            mcs_record_2                = "Enregistrer";
            mcs_upgrade_now             = "Mise à jour maintenant";
            mcs_upgrading               = "Mise à jour en cours";
            mcs_already_latest_version  = "La dernière version est installée";
            mcs_sensitivty              = "Sensibilité";
            mcs_user_defined            = "Définition par l\'utilisateur";
            mcs_time                    = "Temps";
            mcs_date                    = "Day";
            mcs_finish                  = "Terminé";
            mcs_fail                    = "Erreur";
            mcs_motion                  = "Détection en mouvement";
            mcs_start                   = "Commencer";
            mcs_talk                    = "Parler";
            mcs_password_input_inconsistent = "Erreur mot de passe";
            mcs_input_6_to_20_litters   = "Entrée 6-20 lettres (a-z, A-Z) ou des chiffres (0-9)";
            mcs_user_letter_range_hint  = "Le numéro de compte est de 6 à 20 chiffres (0 - 9) ou de lettres (de a à Z, a - z), doit commencer par une lettre";
            mcs_password_range_hint     = "Le mot de passe est 6-20 nombres et lettres";
            mcs_begin_with_the_letters  = "Commencer par lettres";
            mcs_sign_up                 = "S’inscrire";
            mcs_sign_up_failed          = "Échec de l’inscription";
            mcs_successful_sign_up      = "Inscription réussie";
            mcs_are_you_sure_delete     = "Voulez vous supprimer?";
            mcs_failed_to_set_the       = "Erreur d\'Installation";
            mcs_set_successfully        = "Installation réussie";
            mcs_downloading             = "Téléchargement en cours";
            mcs_wrote                   = "Écrit";
            mcs_visit_again_later       = "Essayer la connexion plus tard";
            mcs_restart_failed          = "Erreur de démarrage";
            mcs_upgrade_failed          = "Mise à jour échouée";
            mcs_connnected              = "Connecté";
            mcs_connnected_to           = "Connecté à";
            mcs_not_select              = "Non seleccioné";
            mcs_message_list            = "Liste de messages";
            mcs_saved_password          = "Mot de passe enregistré";
            mcs_alert                   = "Alerte";
            mcs_no_record               = "Aucun enregistrement";
            mcs_new_about               = "Nouveau - de";
            mcs_device                  = "Dispositif";
            mcs_config                  = "Configuration";
            mcs_change_password_failed  = "Changement de mot de passe échoué";
            mcs_do_you_want_restart     = "Voulez-vous démarrer ?";
            mcs_do_you_want_restore     = "Voulez-vous restaurer?";
            mcs_do_you_want_upgrade     = "Voulez-vous effectuer la mise à jour ?";
            mcs_load_end                = "Fin de téléchargement";
            mcs_loading                 = "Chargement...";
            mcs_down_refresh            = "Vers le bas pour rafraîchir le page";
            mcs_release_refresh         = "Actualiser presse";
            mcs_refreshing              = "rafraîchissant";
            mcs_release_then_loading_data_hint = "Actualiser téléchargement";
            mcs_pull_refresh_hint       = "Tirer pour charger la page";
            mcs_restarting              = "Redémarrage";
            mcs_upgraded_time           = "Mis à jour le : ";
            mcs_done                    = "Terminé";
            mcs_playback                = "Playback";
            mcs_i_o_alarm               = "E/S alarme";
            mcs_alarm_action            = "Action alerte";
            mcs_alarm_sources           = "Sources d’alerte";
            mcs_io_output               = "E/S sortie";
            mcs_snapshots               = "Prendre une photo";
            mcs_snapshot                = "Prendre photo";
            mcs_snapshot_interval       = "Intervalle (seconde)";
            mcs_pre_record_length       = "La durée de pré-vidéo";
            mcs_nick_range_hint         = "Nom d\'utilisateur - pas plus de 20 caractères";
            mcs_save                    = "Sauvegarder";
            mcs_close                   = "Fermer";
            mcs_snapshoting             = "photographié dans";
            mcs_snapshot_failed         = "Erreur photo";
            mcs_record_failed           = "Enregistrement échoué";
            mcs_saved_successfully      = "Sauvegarde réussie";
            mcs_save_failed             = "Sauvegarde a échou ";
            mcs_restart_to_take_effect  = "Redémarrer pour que modifications soient prises en compte";
            mcs_please_allow_access_album = "Je vous pris d’autoriser MIPC à accéder votre album de photos.";
            mcs_ios_privacy_setting_for_photo_prompt = "Vous pouvez modifier dans iPhone \"config ->privée ->Photos\", trouve l’application \"MIPC\" changer.";
            mcs_please_allow_access_camera = "Autoriser MIPC à accéder à votre appareil photo";
            mcs_ios_privacy_setting_for_camera_prompt = "Vous pouvez modifier dans iPhone \"Config ->Privée ->Caméra\", trouve l’application \"MIPC\" changer";
            mcs_busy_when_write         = "Occupée à écrire";
            mcs_unknown_error           = "Erreur inconnue";
            mcs_i_know                  = "Je sais";
            mcs_segment                 = "Segment";
            mcs_please_relogin          = "Reconnecter";
            mcs_change_password_succeed = "Changement de mot de passe accepté";
            mcs_upgrade_to_ver          = "Mise à jour de la nouvelle version";
            mcs_restore_failed          = "Restauration échouée";
            mcs_please_restart          = "Redémarrer ";
            mcs_keep_network_settings   = "Les paramètres réseau des Réserves et mot de passe";
            mcs_not_connected           = "Non connecté";
            mcs_sdcard_not_ready        = "SD carte n’est pas prêt";
            mcs_device_not_exist        = "Dispositif n’existe pas";
            mcs_disable                 = "M.hors service ";
            mcs_to_determine_the        = "Confirmer ou non";
            mcs_alert_on                = "Mettre l\'alarme";
            mcs_alert_off               = "Enlever l\'alarme";
            mcs_alert_onoff             = "Alerte on / off";
            mcs_monday                  = "Lundi";
            mcs_tuesday                 = "Mardi";
            mcs_wednesday               = "Mercredi";
            mcs_thursday                = "Jeudi";
            mcs_friday                  = "Vendredi";
            mcs_saturday                = "Samedi";
            mcs_sunday                  = "Dimanche";
            mcs_mon                     = "Lun";
            mcs_tue                     = "Mar";
            mcs_wed                     = "Mer";
            mcs_thu                     = "Jeu";
            mcs_fri                     = "Ven";
            mcs_sat                     = "Sam";
            mcs_sun                     = "Dim";
            mcs_scheduled_recording     = "Programmer un enregistrement";
            mcs_schedule                = "Programmer";
            mcs_scheduled_recording_status = "État de l’enregistrement programmé";
            mcs_folding                 = "Plier";
            mcs_unfolding               = "Étaler";
            mcs_end_time_should_lt_begin = "Le temps de fin doit être plus grand que celui du démarrage !";
            mcs_recording               = "En cours d\'enregistrement";
            mcs_prerecord_interval_range_hint = "Le temps de l’enregistrement anticipé doit être moins de 6 secondes";
            mcs_snapshot_interval_range_hint = "L’intervalle de capture d’écran doit être 0 ou supérieure à 60";
            mcs_not_ready               = "Non prêt";
            mcs_availablesize           = "Taille disponible";
            mcs_reboot                  = "Redémarrer";
            mcs_alerter                 = "Ouvrez l’alarme";
            mcs_pir                     = "PIR";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "L’encodeur";
            mcs_ok                      = "Confirmer";
            mcs_fault                   = "Panne";
            mcs_sensor_status           = "État du Senseur";
            mcs_about                   = "Info";
            mcs_reset_now               = "Redémarrer maintenant";
            mcs_reset_later             = "Réinitialiser plus tard";
            mcs_prompt                  = "Immédiat";
            mcs_select                  = "Sélectionner";
            mcs_available_netword       = "Le réseau est inaccessible, configurer une nouvelle connexion ou un nouveau réseau ?";
            mcs_request_send            = "Demande en cours..";
            mcs_blank_device_id         = "ID du dispositif obligatoire";
            mcs_blank_username          = "Nom d’utilisateur obligatoire";
            mcs_blank_password          = "Mot de passe obligatoire";
            mcs_exist_user              = "Nom d\'Utilisateur existe déjà";
            mcs_invalid_user            = "Nom d\'utilisateur invalide";
            mcs_invalid_email_addr      = "Adresse e-mail invalide";
            mcs_system_err              = "Erreur du système";
            mcs_exceed_device           = "Le nombre d’utilisateurs dépasse le limite.";
            mcs_continue                = "Continuer";
            mcs_prompt_exit             = "Si le retrait?";
            mcs_device_list             = "Liste des appareils";
            mcs_no_sdcard               = "Pas de carte SD";
            mcs_no_hard_disk            = "Pas de disque dur";
            mcs_show_more               = "Plus";
            mcs_shotsnop_exists         = "L’image existe";
            mcs_input_nick              = "Taper le nom d\'utilisateur";
            mcs_nick_not_empty          = "Le nom d\'utilisateur ne peut pas être vide";
            mcs_input_new_pass          = "Taper le nouveau mot de passe";
            mcs_input_new_pass_again    = "Taper encore une fois le nouveau mot de passe";
            mcs_new_password            = "Nouveau mot de passe";
            mcs_modify_network_prompt   = "Le changement des paramètres du réseau peuvent perturber la connexion, vouliez continuer?";
            mcs_wifi_disable_prompt     = "Désactiver Wi-Fi, continuer?";
            mcs_eth_disable_prompt      = "Desactiver Ethernet, continuer ?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Utiliser DHCP";
            mcs_manually_set            = "Configurer manuellement";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "Serveur DNS préféré";
            mcs_client_mode             = "Mode client";
            mcs_adhoc_mode              = "Adhoc";
            mcs_connect_fail            = "Erreur de connexion";
            mcs_dhcp_server             = "DHCP serveur";
            mcs_display_text            = "Afficher le texte";
            mcs_repair_prompt           = "Réparer SD carte conduirait à la perte d’une partie de données, continuer?";
            mcs_format_prompt           = "Formater va supprimer toutes les données de la carte SD, continuer?";
            mcs_mount_prompt            = "Charger la carte SD, continuer?";
            mcs_umount_prompt           = "Vidéos et images ne peuvent pas être conservés après le déchargement, continuer ?";
            mcs_sdcard_reset            = "Paramétres actualizés , il faut redémarrer le caméra, continuer ?";
            mcs_sdcard_repairing        = "Réparation en cours, redémarrage d’attente";
            mcs_sdcard_formating        = "Formattage en cours, redémarrage d’attente";
            mcs_sdcard_umount           = "Non chargé";
            mcs_valid                   = "Disponible";
            mcs_io                      = "E/S alarme";
            mcs_input                   = "Entrer";
            mcs_outinput                = "Sortie";
            mcs_prompt_alert_on         = "Activer l\'alarme, continuer ?";
            mcs_auto_sync_date_time     = "Synchronisation automatique";
            mcs_alarm_record            = "Enregistrement d’alarme";
            mcs_username                = "Nom d’utilisateur";
            mcs_re_enter_the_password   = "Retaper le mot de passe";
            mcs_remember_me             = "Garder la session active";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Installer le pilote";
            mcs_install_the_video_plug  = "Installer le branchement vidéo";
            mcs_install_now             = "Installer immédiatement";
            mcs_temporarily_installed_use_ordinary_video = "Non, installer plus tard";
            mcs_brightness              = "Luminosité";
            mcs_contrast                = "Contraste";
            mcs_color_saturation        = "Saturation";
            mcs_sharpness               = "Netteté";
            mcs_duration                = "Durée";
            mcs_index                   = "Index";
            mcs_remark                  = "Remarque";
            mcs_media_stream            = "Média";
            mcs_server                  = "Serveur";
            mcs_media_transfer          = "Transférer le média";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Producteur";
            mcs_model                   = "Modèle";
            mcs_plugin_version          = "Version du plug-in";
            mcs_network_interface       = "Interface de réseau";
            mcs_transfer_protocol       = "Protocole de transmission";
            mcs_year                    = "An";
            mcs_month                   = "Mois";
            mcs_day                     = "Jour";
            mcs_hour                    = "Heure";
            mcs_minute                  = "Minute";
            mcs_second                  = "Seconde";
            mcs_millisec                = "Milliseconde";
            mcs_ntp                     = "L’adresse du serveur NTP";
            mcs_upload_upgrade          = "Télécharget la mise a jour";
            mcs_stop                    = "Arrêter";
            mcs_info_rewind             = "Rembobinage";
            mcs_fast_forward            = "Avancer rapidement";
            mcs_previous_frame          = "Image précédente";
            mcs_next_frame              = "Image suivante";
            mcs_record_audio            = "Enregister l’audio";
            mcs_week                    = "Semaine";
            mcs_all                     = "Tout";
            mcs_id                      = "ID";
            mcs_select_all              = "Sélectionner tout";
            mcs_call                    = "Appeler";
            mcs_activation              = "Activation";
            mcs_caption                 = "Télécharger un fichier";
            mcs_alarm_device            = "Dispositif d’alerte";
            mcs_not_installed           = "N\'est pas installé";
            mcs_join_us_now             = "Nous rejoindre maintenant";
            mcs_reconnect_please_wait   = "En cours de reconnection";
            mcs_erasing                 = "En cours d’effaçage";
            mcs_writing                 = "En cours d’écriture";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Une nouvelle version est disponible";
            mcs_equipment_flip          = "FLIP";
            mcs_device_status           = "État du dispositif";
            mcs_audio_setting           = "Paramètres d’audio";
            mcs_nick_modify             = "Changer le nom d´utilisateur";
            mcs_ready                   = "Prêt";
            mcs_full                    = "Écriture pleine";
            mcs_connecting              = "En cours de connexion";
            mcs_message_buffering       = "Mémoire des messages";
            mcs_upgrade_finish          = "Chargement fini";
            mcs_image                   = "Image";
            mcs_bar                     = "Registres";
            mcs_init                    = "Initialiser";
            mcs_confirm_new_password    = "Confirmer le nouveau mot de passe";
            mcs_continue_switch_wireless_network = "Changer le réseau peut causer une défaillance, continuer?";
            mcs_restore_factory_settings_prompt = "Restaurer les paramètres d’usine, le système va redémarrer, continuer ?";
            mcs_username_does_not_exis  = "Le nom d’utilisateur n’exite pas";
            mcs_username_already_exists = "Le nom d’utilisateur existe";
            mcs_successful_whether_login = "Inscription terminé, connectez maintenant.";
            mcs_username_demand         = "6-20 chiffres ou lettres. Commencer par lettres";
            mcs_the_password_is_empty   = "Le mot de passé est vide";
            mcs_password_demand         = "6-20 lettres ou chiffres";
            mcs_password_empty          = "Confirmer le mot de passe est vide";
            mcs_two_password_input_inconsistent = "Deux entrées de mots de passe incompatibles";
            mcs_the_user_name_is_empty  = "Le mot de passé est vide";
            mcs_upgrade_to_the_latest_version = "Mise a jour jusqu’à la dernière version";
            mcs_subnet_mask_wrong_format = "Format invalide de masque de réseau";
            mcs_upgrade_successful_restart_to_take_effect = "Mise a jour effectué, redémarrer votre équipement pour sa prise en effet.";
            mcs_need_to_restart_the_camera_to_take_effect = "Redémarrer votre équipement pour sa prise en effet";
            mcs_not_allowed_close_two_network_cards = "Ethernet et Wi-Fi peuvent pas être désactivés simultanément";
            mcs_modified_successfully   = "Modification réussite";
            mcs_connection_successfully = "Connection réussite ";
            mcs_connection_is_interrupted = "Connexion interrompue";
            mcs_devices_in_the_account_overrun = "Le nombre d’utilisateur dépasse la limite";
            mcs_format_error            = "Erreur du format";
            mcs_change                  = "Modifier";
            mcs_refresh                 = "Actualiser";
            mcs_connect                 = "Connecter";
            mcs_upgrade                 = "Mis a jour";
            mcs_activate                = "Activer";
            mcs_filter                  = "Filtre";
            mcs_reset                   = "Reset";
            mcs_prompt_alert_off        = "Alerte Off, continuer";
            mcs_invalid_server          = "L’adresse du serveur NTP est invalide";
            mcs_upgrade_prompt          = "Mettre à jour du programme de la équipement, continuer?";
            mcs_restart_prompt          = "Redémarrer le dispositif, continuer";
            mcs_repeat                  = "Répéter";
            mcs_scheduled_one           = "Enregistrement programmé 1";
            mcs_scheduled_two           = "Enregistrement programmé 2";
            mcs_scheduled_three         = "Enregistrement programmé 3";
            mcs_scheduled_four          = "Enregistrement programmé 4";
            mcs_more                    = "Plus";
            mcs_leave                   = "Quitter pour télécharger";
            mcs_qrcode_scan             = "Scanner le code QR";
            mcs_inserted                = "Inséré";
            mcs_removed                 = "Effacé";
            mcs_upgrade_init            = "Commencer la mise a jour";
            mcs_upgrade_download        = "Télécharger la mise a jour";
            mcs_check                   = "Verifier";
            mcs_audio_encoder_config    = "Paramétres de codec audio";
            mcs_video_codec             = "Le codage vidéo";
            mcs_download                = "Télécharger";
            mcs_client_download         = "Téléchargement du client";
            mcs_for_more_clarity_smooth_video_experience = "Obtenir le vidéo plus claire et plus fluide";
            mcs_network                 = "Réseau";
            mcs_mobile_client_download  = "Téléchargement du Mobile client";
            mcs_readonly                = "En lecture seule";
            mcs_please_exit_and_relogin = "Veillez vous déconnecter et se connecter de nouveau";
            mcs_add_device_failed       = "Erreur de l’addition du dispositif";
            mcs_set_password            = "Modifier mot de passe";
            mcs_7x24_hours              = "7x24(heures)";
            mcs_motion_alert            = "Alerte mouvement";
            mcs_mtalt                   = "%@ : Alerte mouvement";
            mcs_io_alert                = "alerte E/S";
            mcs_ioalt                   = "%@ : alerte E/S";
            mcs_time_zone               = "Fuseau horaire";
            mcs_select_time             = "Sélectionner l’heure";
            mcs_now                     = "Maintenant";
            mcs_mipc_have_alert_notification = "MIPC ont notification d’alerte";
            mcs_notification_center     = "Centre de notifications";
            mcs_sound                   = "Son";
            mcs_vibration               = "Vibration";
            mcs_clear_cache             = "Vider le cache";
            mcs_clear_cache_hint        = "Êtes-vous sûr de vouloir vider le cache?";
            mcs_successfully_cleared_cache = "Succès - effacer mémoire cache";
            mcs_app_except_exit_hint    = "Désolé, l’application a rencontré une exception et va s\'arrêter.";
            mcs_rate_us                 = "Nous taux";
            mcs_password_too_simple_hint = "Mot de passe est trop simple, modifier pour améliorer la sécurité.";
            mcs_check_for_new_version   = "Vérifier une nouvelle version";
            mcs_contact_us              = "Contactez-nous";
            mcs_buffer_time             = "Temps de maintien";
            mcs_default                 = "Défaut";
            mcs_alarmed_devices         = "Dispositifs d\'alarme actifs";
            mcs_aec                     = "Annulation d’écho";
            mcs_permission_denied       = "Permission refusée ";
            mcs_full_screen             = "plein écran";
            mcs_forgot_your_password    = "Mot de passe oublié";
            mcs_your_email              = "Votre e-mail";
            mcs_sign_up_confirmation    = "Un email de confirmation est envoyé pour vérifier l\'adresse de courriel soumise. Visiter le lien envoyé dans cet e-mail pour activer le compte.";
            mcs_recovery_prompt         = "S\'il vous plaît, entrez votre adresse e-mail (nom d\'utilisateur), nous vous enverrons un message pour vous dire comment faire pour réinitialiser le mot de passe.";
            mcs_password_reset_confirmation = "Un e-mail est envoyé à l\'adresse de courriel soumise, Visiter le lien envoyé dans cet e-mail pour réinitialiser le mot de passe.";
            mcs_recovery_fail_no_mail   = "Récupération de mot de passe sûr, ce compte n\'a pas lier email";
            mcs_recovery_fail_invalid_link = "Récupération de mot de passe sûr, s\'il vous plaît assurez-vous que le contenu du lien ou de récupération à nouveau.";
            mcs_recovery_ok_login       = "Succès de récupération de mot de passe, connectez-vous maintenant.";
            mcs_active_ok_login         = "Compte succès actif. Connectez-vous maintenant.";
            mcs_active_fail_invalid_link = "Compte actif sûr. S\'il vous plaît assurez-vous que le contenu du lien ou Inscrivez-vous de nouveau.";
            mcs_login_fail_inactive     = "Compte est inactif. S\'il vous plaît suivre le contenu du courrier électronique actif à actif.";
            mcs_sign_up_again           = "Inscrivez-vous à nouveau";
            mcs_press_start_talk        = "Presser pour parler";
            mcs_release_stop_talk       = "Relâchez pour entendre";
            mcs_delete_device           = "dispositif supprimer";
            mcs_success_removed_equipment = "Supprimer dispositif succès";
            mcs_remove_equipment_failure = "Retirer défaillance de l\'équipement";
            mcs_device_busy             = "Périphérique occupé";
            mcs_keep_testing            = "continuer essai";
            mcs_notify_tone             = "sonnerie de notification";
            mcs_float_video             = "Activer vidéo flottante";
            mcs_float_position          = "Position vidéo flottante";
            mcs_video_resolution        = "Résolution vidéo";
            mcs_float_resolution        = "Résolution vidéo flottante";
            mcs_top_left                = "En haut à gauche";
            mcs_top_right               = "En haut à droite";
            mcs_bottom_left             = "En bas à gauche";
            mcs_bottom_right            = "En bas à droite";
            mcs_action_next             = "suivant";
            mcs_action_cancel           = "annuler";
            mcs_action_retry            = "refaire";
            mcs_action_add              = "ajouter";
            mcs_action_apply            = "appliquer";
            mcs_action_config           = "configuration";
            mcs_action_skip             = "sauter";
            mcs_action_ok               = "Ok";
            mcs_action_add_device       = "Ajouter un appareil";
            mcs_action_modify_password  = "changer mot de passe";
            mcs_action_config_wifi      = "Réglages Wi-Fi";
            mcs_state_connect_device    = "Connexion en cours";
            mcs_state_connect_device_fail = "Échec de la connexion à l\'appareil";
            mcs_state_wait_device_online = "Attendez que l\'appareil soit en ligne";
            mcs_state_device_online     = "Connecté";
            mcs_state_success           = "succès";
            mcs_state_add_device_success = "Appareil ajouté avec succès ";
            mcs_state_add_device_fail   = "Echec de l\'ajout de l\'appareil";
            mcs_state_modify_pass_success = "Mot de passe changé avec succès";
            mcs_state_modify_pass_fail  = "Échec du changement de mot de passe";
            mcs_state_config_wifi_success = "Wi-Fi configuré avec succès";
            mcs_state_config_wifi_fail  = "Erreur de connexion";
            mcs_state_connecting_to     = "Connexion à";
            mcs_network_connect_type    = "Dispositif est pas en ligne, vous vous assurez que l\'appareil est sous tension, puis sélectionnez Connexion réseau:";
            mcs_prompt_modify_passwd    = "Votre mot de passe est trop simple dispositif, s\'il vous plaît modifier le mot de passe. Nouveau mot de passe ne doit pas être inférieure à six caractères.";
            mcs_prompt_config_wifi      = "Votre appareil est toujours pas connecté à votre réseau local, s\'il vous plaît configurer votre réseau Wi-Fi.";
            mcs_step1_check_connect     = "Étape 1 : Connectez votre caméra et votre routeur à l\'aide du câble réseau.";
            mcs_first_step_ethernet_connect = "Etape 1: Branchez une extrémité d\'un câble réseau pour se connecter à votre routeur et l\'autre extrémité du port réseau du périphérique d\'accès.";
            mcs_step2_check_connect     = "Etape 2 : Allumez votre caméra.";
            mcs_second_step_ethernet_connect = "Etape 2 : La puissance de votre appareil, démarrer l\'appareil.";
            mcs_hint_check_network      = "Remarque : l\'appareil prend environ 50 secondes pour démarrer; après cela le voyant LED clignote trois fois toutes les trois secondes, ce qui signifie que l\'appareil est en ligne, l\'assistant passe automatiquement à l\'étape suivante.";
            mcs_the_end                 = "l\'extrémité";
            mcs_hint_password_expired   = "Le mot de passe a expiré, veuillez le changer";
            mcs_hint_remove_ethernet    = "Remarque : Le wi-Fi fonctionne correctement, vous pouvez maintenant débrancher le câble réseau.";
            mcs_ip_format_incorrect     = "Le format d\'adresse IP est incorrect";
            mcs_login_sucess            = "connexion réussie";
            mcs_donot_remind            = "ne pas rappeler";
            mcs_clear_cache_signout_hint = "Effacer le cache?";
            mcs_devlist_adddev_hint     = "Cliquez ici pour ajouter l\'équipement";
            mcs_devlist_menu_hint       = "Cliquez ici pour régler la résolution";
            mcs_update_failed           = "La mise à jour a échoué";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Local";
            mcs_set_npapi               = "Si le plugin a été installé, se il vous plaît visiter \'chrome://flags/#enable-npapi\', permettre NPAPI, ";
            mcs_set_win32k              = "visite \'chrome://flags/#enable-win32k-renderer-lockdown\', win32k handicapés rendu lockdown,";
            mcs_restart_browser         = "Redémarrez le navigateur";
            mcs_download_location       = "Enregistrer les fichiers dans le dossier";
            mcs_Networking_mode         = "mode réseau";
            mcs_wifi_intelligent_configuration = "connexion WIFI";
            mcs_ethernet_configuration  = "connexion Ethernet";
            mcs_wifi_connect            = "lien";
            mcs_hard_disk               = "disque dur";
            mcs_wifi_is_connection      = "Connexion, s\'il vous plaît patienter...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi configuration intelligente échec de la configuration";
            mcs_box_list                = "boîte de liste";
            mcs_repair_disk_prompt      = "Réparation disque peut perdu des données, continuer?";
            mcs_format_disk_prompt      = "Formater le disque effacera toutes les données, continuer?";
            mcs_scheduled_alerting      = "Programme d\'armement";
            mcs_scheduled_alerting_one  = "Programme d\'armement 1";
            mcs_scheduled_alerting_two  = "Programme d\'armement 2";
            mcs_scheduled_alerting_three = "Programme d\'armement 3";
            mcs_scheduled_alerting_four = "Programme d\'armement 4";
            mcs_wifi_config_cancle      = "configuration wifi annuler";
            mcs_wifi_config_prepare     = "Prérequis wifi";
            mcs_wifi_config_first       = "Les dispositifs et les téléphones mobiles et les routeurs maintenus dans la plage de 1 m";
            mcs_wifi_config_second      = "Lors de la configuration wifi, l\'appareil ne peut pas brancher le câble réseau";
            mcs_wifi_config_third       = "Appuyez sur le bouton de réinitialisation RESET une seconde puis relâchez";
            mcs_wifi_config_success     = "le succès de configuration";
            mcs_wifi_config_failure     = "échec de configuration";
            mcs_failure_prompt          = "S\'il vous plaît essayer de nouveau ou retourner pour vérifier le mot de passe est entré correctement WIFI";
            mcs_display_password        = "montrer le mot de passe";
            mcs_action_smart_config_wifi = "Assistant de configuration";
            mcs_wifi_invalid            = "Votre réseau est pas WiFi, s\'il vous plaît connecter WiFi!";
            mcs_phone_not_connect_wifi  = "Réseau WiFi non connecté";
            mcs_prompt_check_connection = "Votre caméra n\'est pas en ligne, vérifiez la connexion.";
            mcs_wifi_cfg_ready          = "Prêt";
            mcs_reset_complete          = "réinitialisation est terminée";
            mcs_how_to_restore_factory_settings = "Comment restaurer les paramètres d\'usine: utiliser la broche RESET en appuyant sur le trou RESET au bas de l\'appareil photo pour plus de 10 secondes";
            mcs_forgetpass_action_wizard = "Appuyez sur RESET trou de réinitialisation de 10 secondes après la libération, l\'appareil va redémarrer automatiquement réinitialise le mot de passe pour l\'admin";
            mcs_prompt_check_device_connection = "Votre appareil est pas en ligne, vérifier le câblage pour relier l\'appareil";
            mcs_input_wifi_name         = "S\'il vous plaît entrée nom de wifi";
            mcs_action_previous         = "précédent";
            mcs_io_alert_range_hint     = "IO temps alerte doit être inférieur à 60 secondes";
            mcs_io_alert_time           = "IO heure de l\'alarme(s)";
            mcs_smart                   = "intelligent";
            mcs_plan                    = "plan";
            mcs_mute                    = "muet";
            mcs_wind_speed              = "la vitesse du vent";
            mcs_one                     = "un engrenage";
            mcs_two                     = "deux engins";
            mcs_three                   = "trois engins";
            mcs_purify_mode             = "Mode purifier";
            mcs_video_list              = "La liste de la vidéo";
            mcs_wifi_cfg_restore_factory_settings = "Tenez le téléphone portable à proximité de l\'appareil, si l\'appareil a configuré WiFi, appuyez sur RESET pendant une seconde puis relâchez, le dispositif permet de restaurer les paramètres d\'usine et redémarre automatiquement";
            mcs_mask_settings           = "Paramètres de masque";
            mcs_notification_settings   = "Paramètres de notification";
            mcs_alarm_settings          = "Paramètres d\'alarme";
            mcs_motion_detection        = "Détection De Mouvement";
            mcs_io_alarm                = "Détection De Mouvement";
            mcs_connect_status          = "Etat de la connexion";
            mcs_motion_notification     = "Alertes et notifications";
            mcs_device_connected        = "L\'appareil est connecté";
            mcs_start_spray             = "Commencer à pulvériser?";
            mcs_available_network       = "Le réseau est inaccessible";
            mcs_select_wifi_wizard      = "S\'il vous plaît sélectionnez réseau WiFi abord";
            mcs_input_wifi_password     = "Entrée mot de passe WiFi";
            mcs_device_admin_password   = "Dispositif mot de passe admin";
            mcs_device_guest_password   = "Dispositif mot de passe invité";
            mcs_user_admin_password     = "Utilisateur mot de passe admin";
            mcs_user_guest_password     = "Utilisateur mot de passe invité";
            mcs_save_network_set        = "Enregistrer ensemble du réseau et mot de passe";
            mcs_nickname_not_set        = "Surnom de l\'appareil photo est pas réglé";
            mcs_current_wifi            = "Courant Wi-Fi";
            mcs_current_password_strength = "La force de mot de passe actuel";
            mcs_new_password_strength   = "New force de mot de passe";
            mcs_needs_to_open_the_DHCP  = "Votre routeur doit ouvrir le DHCP (obtenir automatiquement IP) fonction, si la tentative échoue, se il vous pla?t contactez l\'administrateur.";
            mcs_picture                 = "image";
            mcs_quality                 = "qualité";
            mcs_size                    = "taille";
            mcs_guest_login             = "Invité Connexion";
            mcs_audio_and_video         = "Audio / Vidéo";
            mcs_volume                  = "volume";
            mcs_smooth                  = "lisse";
            mcs_clear                   = "clair";
            mcs_handsfree               = "Mains libres";
            mcs_headphone               = "Casque";
            mcs_my                      = "ma";
            mcs_customer_service        = "service à la clientèle";
            mcs_firefox_flash_uninstall = "Votre plugin flash ne sont pas disponibles, la solution s\'il vous plaît se référer https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Widget";
            mcs_plug_load               = "plugins de charge";
            mcs_plug_load_refuse        = "Ne chargez pas de plugins";
            mcs_plug_load_auto          = "automatique";
            mcs_option                  = "options";
            mcs_option_ok               = "déterminer";
            mcs_voice_call_fails        = "Appel vocal échoue, vérifiez le réseau";
            mcs_umounted_prompt         = "s\'il a terre?";
            mcs_signup_prompt           = "nouveau ici?";
            mcs_wifi_connect_sucess_prompt = "Commentaires: le travail normal wifi, vous pouvez maintenant est déconnecté du réseau";
            mcs_manual_input_prompt     = "L\'entrée manuelle de l\'id de dispositif";
            mcs_qrscan_prompt           = "Vous n\'avez pas autorisé de cette application d\'accéder à votre caméra, dans des fonctions de demande sur l\'iPhone \'est\' - \'intimité\' - \'caméra\', de trouver le nom de ‘Vimtag’ pour des applications de modification.";
            mcs_select_network_style    = "Sélection de mode de connexion de réseau:";
            mcs_push                    = "annonce";
            mcs_connect_power_prompt    = "Note: le dispositif n\'est pas en ligne, s\'il vous plaît, ce qui relie la source de puissance";
            mcs_fail_microphone         = "Impossible d\'accéder à un microphone";
            mcs_microphone_prompt       = "Vous n\'êtes pas pour permettre à cette application pour accéder à votre microphone, dans le \'set\' iPhone - la «vie privée» - fonction \'micro\', trouver le nom de l\'application \'Vimtag\' être modifiés";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Suppression...";
            mcs_event                   = "événement";
            mcs_one_hour                = "Une heure";
            mcs_half_hour               = "Une demi - heure";
            mcs_five_min                = "Cinq minutes";
            mcs_category                = "Catégories";
            mcs_time_length             = "Lorsque la longueur";
            mcs_new                     = "Nouveau";
            mcs_week_setting_prompt     = "Semaine ne doit pas être vide";
            mcs_time_setting_prompt     = "Le temps de réglage ne peut pas être vide";
            mcs_today                   = "Aujourd\'hui";
            mcs_wifi_config_prepare     = "Prérequis wifi";
            mcs_wifi_password           = "mot de passe wifi";
            mcs_register_prompt         = "Veuillez signer!";
            mcs_click_login             = "Cliquez sur le signe";
            mcs_not_login_prompt        = "Vous n\'avez pas signer, s\'il vous plaît, cliquez sur le signe!";
            mcs_product_presentation    = "Page d\'accueil";
            mcs_help_feedback           = "Aider";
            mcs_help_information        = "Aider";
            mcs_feedback                = "Rétroaction";
            mcs_connect_wifi_prompt     = "Connexion wifi";
            mcs_cloud                   = "niveau plus tard";
            mcs_demo                    = "démo";
            mcs_shortest                = "Le plus court";
            mcs_no_history              = "Pas d\'historique";
            mcs_download_pc_client      = "Cliquez ici pour télécharger le client du PC";
            mcs_accounts_bind_email_exist = "Le numéro de compte est lié dans la boîte aux lettres";
            mcs_accounts_bind_email_busy = "La boîte aux lettres est lié sur le compte";
        }/* fr */
        else if(lang == "es")
        {
            mcs_name                    = "Nombre";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Nombre";
            mcs_old_nick                = "Apodo";
            mcs_linked                  = "Vinculado";
            mcs_sign_in                 = "Registrarse";
            mcs_back                    = "Atrás";
            mcs_add                     = "Añadir";
            mcs_add_device              = "Añadir dispositivo";
            mcs_device_existed          = "Ya existe dispositivo";
            mcs_cancel                  = "Cancelar";
            mcs_exit                    = "Salir";
            mcs_remember_password       = "Recordar contraseña";
            mcs_password_remembered     = "Contraseña recordada";
            mcs_sign_ining              = "En proceso de registro...";
            mcs_cloud_server            = "Servidor Cloud";
            mcs_input_device_id         = "Dispositivo de entrada ID";
            mcs_input_username          = "Introducir el nombre de usuario";
            mcs_input_email_addr        = "Introduce una dirección de correo electrónico";
            mcs_email_address           = "E por correo electrónico";
            mcs_email                   = "Buzón";
            mcs_binding                 = "Encuadernación";
            mcs_binding_email           = "buzón de Encuadernación";
            mcs_binding_send_prompt     = "buzón de Encuadernación";
            mcs_binding_email_prompt    = "buzón de Encuadernación";
            mcs_input_password          = "Introducir la contraseña";
            mcs_access_server_failed    = "Acceso al servidor fallido";
            mcs_device_offline          = "Dispositivo desconectado";
            mcs_invalid_password        = "Contraseña desacertada";
            mcs_invalid_dev             = "Dispositivo no existe";
            mcs_login_faided            = "Error de acceso";
            mcs_invalid_qrcode          = "No válido QR-Code";
            mcs_please_input_username   = "Introduzca nombre de usuario";
            mcs_please_input_password   = "Introduzca contraseña";
            mcs_qrcode_scan_hint        = "Mantenga la caja en la parte inferior del dispositivo está alineado código bidimensiona";
            mcs_device_list_empty       = "Lista de dispositivos vacía";
            mcs_record_list_is_empty    = "La lista de video está vacía";
            mcs_password_expired        = "Contraseña caducado";
            mcs_set_video_size          = "Ajuste el tamaño del video";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Auto";
            mcs_normal_640x360          = "Normal [640x360]";
            mcs_half_320x180            = "La mitad [320x180]";
            mcs_small_160x90            = "Menor [160x90]";
            mcs_play                    = "Jugar";
            mcs_settings                = "Ajustes";
            mcs_messages                = "Mensajes";
            mcs_alarm                   = "Alarma";
            mcs_delete                  = "Eliminar";
            mcs_delete_camera           = "Eliminar ";
            mcs_apply                   = "Aplicar";
            mcs_speed                   = "Velocidad";
            mcs_others                  = "Otras";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Altavoz";
            mcs_mic                     = "Microphone";
            mcs_power_frequency         = "Frecuencia de red";
            mcs_online_upgrade          = "Actualización online";
            mcs_restore_the_factory_settings = "Restaurar los ajustes de fábrica";
            mcs_restore                 = "Restaurar";
            mcs_restore_camera          = "dispositivo de reinicio";
            mcs_start_upgrade           = "Iniciar actualización";
            mcs_system                  = "Sistema";
            mcs_system_settings         = "Ajustes de sistema";
            mcs_online                  = "Conectado";
            mcs_offline                 = "Desconectado";
            mcs_query                   = "Preguntar";
            mcs_begin_time              = "Tiempo comenzado";
            mcs_end_time                = "Tiempo finalizado";
            mcs_mode                    = "Modo";
            mcs_opened                  = "Abierto";
            mcs_high                    = "Alto";
            mcs_middle                  = "Medio";
            mcs_low                     = "Bajo";
            mcs_io_alert_input          = "I / O de entrada";
            mcs_io_alert_output         = "I / O de salida";
            mcs_normally_open           = "Normalmente abierto";
            mcs_normally_close          = "Normalmente cerrado";
            mcs_motion_detection_sensitivity = "La sensibilidad de detección de movimiento";
            mcs_daytime                 = "El día";
            mcs_night                   = "Noche";
            mcs_sdcord                  = "SDCard";
            mcs_storage_device          = "Los dispositivos de almacenamiento";
            mcs_set_mask                = "Set máscara";
            mcs_status                  = "Estado";
            mcs_capacity                = "Capacidad";
            mcs_usage                   = "Usado";
            mcs_format                  = "Formato";
            mcs_repair                  = "Reparar";
            mcs_formating               = "En proceso de formato";
            mcs_repairing               = "En proceso de reparación";
            mcs_mounted                 = "Montado";
            mcs_unmounted               = "Desmontado";
            mcs_mount                   = "Montar";
            mcs_unmount                 = "Desmontar";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Activado";
            mcs_mac_address             = "Dirección MAC";
            mcs_network_status          = "Estado de la red";
            mcs_wifi_mode               = "Wi-Fi modo";
            mcs_client                  = "Cliente";
            mcs_ap                      = "AP";
            mcs_start_address           = "Dirección de inicio";
            mcs_end_address             = "Dirección de destino";
            mcs_gateway                 = "Gateway";
            mcs_select_network          = "Seleccione la red";
            mcs_dhcp_ip                 = "IP : Usar DHCP";
            mcs_dhcp_dns                = "DNS : Usar DHCP";
            mcs_ip_address              = "Dirección de IP";
            mcs_network_mask            = "Máscara de red";
            mcs_input_secondary_dns     = "Introduzca DNS secundario";
            mcs_secondary_dns           = "DNS secundario";
            mcs_input_dns               = "Introduzca DNS";
            mcs_input_alternate_dns     = "Introduzca DNS alternativo";
            mcs_input_ip                = "Introduzca la dirección de IP";
            mcs_input_gateway           = "Introduzca Gateway";
            mcs_input_network_mask      = "Introduzca máscara de red";
            mcs_wifi_list               = "Wi-Fi lista";
            mcs_display_date            = "Mostrar fecha";
            mcs_date_format             = "Fornato de fecha";
            mcs_display_time            = "Mostrar tiempo";
            mcs_time_format             = "Formato de tiempo";
            mcs_24_hour                 = "24-horas";
            mcs_12_hour                 = "12-horas";
            mcs_display_weeks           = "Mostrar semanas";
            mcs_date_time               = "Fecha/Tiempo";
            mcs_set_time                = "Ajuste de la hora";
            mcs_set_week                = "Ajuste de semana";
            mcs_stream                  = "Stream";
            mcs_encode                  = "Codificación";
            mcs_resolution              = "Resolución";
            mcs_frame_fate              = "Destino Frame";
            mcs_maximum_bitrate         = "Bitrate máximo";
            mcs_minimum_bitrate         = "Bitrate mínimo";
            mcs_i_frame_interval        = "Intervalo de I -Frame";
            mcs_video                   = "Vídeo";
            mcs_sampling_rate           = "Frecuencia de muestreo (kHz )";
            mcs_nickname                = "Apodo";
            mcs_old_password            = "Contraseña antigua";
            mcs_confirm_password        = "Confirmar contraseña";
            mcs_modify_password         = "Modificar la contraseña";
            mcs_password                = "Contraseña";
            mcs_admin_password          = "Admin Password";
            mcs_guest_password          = "Visitante Contraseña";
            mcs_product_info            = "Información del producto";
            mcs_software_version        = "Versión de software";
            mcs_device_id               = "ID de dispositivo";
            mcs_operation               = "Operación";
            mcs_record                  = "Grabar";
            mcs_record_2                = "Grabar";
            mcs_upgrade_now             = "Actualizar ahora";
            mcs_upgrading               = "Está actualizando";
            mcs_already_latest_version  = "Ultimá versión";
            mcs_sensitivty              = "Sensibilidad";
            mcs_user_defined            = "Definido por el usuario";
            mcs_time                    = "Tiempo";
            mcs_date                    = "Fecha";
            mcs_finish                  = "Terminado";
            mcs_fail                    = "Fallado";
            mcs_motion                  = "Movimiento";
            mcs_start                   = "Comenzar";
            mcs_talk                    = "Hablar";
            mcs_password_input_inconsistent = "Introducción de contraseña incompatible";
            mcs_input_6_to_20_litters   = "De entrada 6-20 letras (a-z, A-Z) o números (0-9)";
            mcs_user_letter_range_hint  = "Cuenta con 6 - 20 dígitos (0 - 9) o letras (A - Z, a - z), debe comenzar con una letra";
            mcs_password_range_hint     = "La contraseña es 6-20 letra o número";
            mcs_begin_with_the_letters  = "Comience con letras";
            mcs_sign_up                 = "Contratar";
            mcs_sign_up_failed          = "Regístrate fallado";
            mcs_successful_sign_up      = "Regístrate con éxito";
            mcs_are_you_sure_delete     = "Está seguro de eliminar ?";
            mcs_failed_to_set_the       = "Ajuste error";
            mcs_set_successfully        = "Ajuste con éxito";
            mcs_downloading             = "Descargando";
            mcs_wrote                   = "Escrito";
            mcs_visit_again_later       = "Visite de nuevo más tarde";
            mcs_restart_failed          = "Reiniciar fallido";
            mcs_upgrade_failed          = "Actualización fallada";
            mcs_connnected              = "Conectado";
            mcs_connnected_to           = "Conectado a";
            mcs_not_select              = "No seleccionar";
            mcs_message_list            = "List de mensaje";
            mcs_saved_password          = "Contraseña guardada";
            mcs_alert                   = "Alerta";
            mcs_no_record               = "No video";
            mcs_new_about               = "Nuevo : sobre";
            mcs_device                  = "Dispositivo";
            mcs_config                  = "Configuración";
            mcs_change_password_failed  = "Cambiar contraseña fallado";
            mcs_do_you_want_restart     = "Desea reiniciar ?";
            mcs_do_you_want_restore     = "Desea restaurar?";
            mcs_do_you_want_upgrade     = "Desea actualizar ?";
            mcs_load_end                = "Terminar cargar";
            mcs_loading                 = "Cargando...";
            mcs_down_refresh            = "Abajo para actualizar";
            mcs_release_refresh         = "liberación Actualizar";
            mcs_refreshing              = "refrescante";
            mcs_release_then_loading_data_hint = "La liberación de la carga de datos";
            mcs_pull_refresh_hint       = "Tire para cargar";
            mcs_restarting              = "Reiniciando";
            mcs_upgraded_time           = "Actualizada el : ";
            mcs_done                    = "Terminado";
            mcs_playback                = "Reproducción";
            mcs_i_o_alarm               = "I/O Alarma";
            mcs_alarm_action            = "Acto de alarma";
            mcs_alarm_sources           = "Fuentes de alarma";
            mcs_io_output               = "I/O Salida";
            mcs_snapshots               = "Instantánea";
            mcs_snapshot                = "Instantánea";
            mcs_snapshot_interval       = "Intervo de instantánea";
            mcs_pre_record_length       = "Longitud del Pre - registro ( s )";
            mcs_nick_range_hint         = "Apodo menos de 20 dígitos y letras";
            mcs_save                    = "Guardar";
            mcs_close                   = "Cerrar";
            mcs_snapshoting             = "fotografiado en";
            mcs_snapshot_failed         = "Fotos fallidas";
            mcs_record_failed           = "Error en la operación de video";
            mcs_saved_successfully      = "Guardado con éxito";
            mcs_save_failed             = "Guardado fallado";
            mcs_restart_to_take_effect  = "Reiniciar surta efecto";
            mcs_please_allow_access_album = "Por favor permita MIPC visitar a su álbum de fotos.";
            mcs_ios_privacy_setting_for_photo_prompt = "IPhone \" Ajustes - > Privacidad -> Fotos \" , encontrar la aplicación \" MIPC \" cambiar.";
            mcs_please_allow_access_camera = "Por favor permita MIPC visitar a su Cámara";
            mcs_ios_privacy_setting_for_camera_prompt = "Puedes estar en iPhone \"Ajustes - > Privacidad -> Cámara\" , encontrar la aplicación \" MIPC \" cambiar";
            mcs_busy_when_write         = "Ocupado cuando escribir";
            mcs_unknown_error           = "Desconocido error";
            mcs_i_know                  = "!Yo sé!";
            mcs_segment                 = "Fragmente";
            mcs_please_relogin          = "Regístrate de nuevo";
            mcs_change_password_succeed = "Cambiar contraseña - éxito";
            mcs_upgrade_to_ver          = "Actualizar a una nueva versión";
            mcs_restore_failed          = "Restaurar fallado";
            mcs_please_restart          = "Reinicie";
            mcs_keep_network_settings   = "Configuración de red y Reservas contraseña";
            mcs_not_connected           = "Desconectado";
            mcs_sdcard_not_ready        = "SDCard no está listo";
            mcs_device_not_exist        = "No existe dispositivo";
            mcs_disable                 = "Inhabilitado";
            mcs_to_determine_the        = "¿Está seguro?";
            mcs_alert_on                = "Disponer la defensa";
            mcs_alert_off               = "Retirar una guarnición";
            mcs_alert_onoff             = "Alertar de encendido / apagado";
            mcs_monday                  = "Lunes";
            mcs_tuesday                 = "Martes";
            mcs_wednesday               = "Miércoles";
            mcs_thursday                = "Jueves";
            mcs_friday                  = "Viernes";
            mcs_saturday                = "Sábado";
            mcs_sunday                  = "Domingo";
            mcs_mon                     = "Lunes";
            mcs_tue                     = "Martes";
            mcs_wed                     = "Miércoles";
            mcs_thu                     = "Jueves";
            mcs_fri                     = "Viernes";
            mcs_sat                     = "Sábado";
            mcs_sun                     = "Sol";
            mcs_scheduled_recording     = "Grabación programada";
            mcs_schedule                = "Programada";
            mcs_scheduled_recording_status = "Estado de grabación programada";
            mcs_folding                 = "Plegado";
            mcs_unfolding               = "Desplegado";
            mcs_end_time_should_lt_begin = "Hora de finalización debe ser mayor que el tiempo de inicio";
            mcs_recording               = "Grabando";
            mcs_prerecord_interval_range_hint = "Tiempo de pre -grabado debe ser menos de 6 segundos";
            mcs_snapshot_interval_range_hint = "Intervalo de instantánea debe ser 0 o mayor que 60";
            mcs_not_ready               = "No preparado";
            mcs_availablesize           = "Capacilidad disponible";
            mcs_reboot                  = "Reiniciar";
            mcs_alerter                 = "Abra la alarma";
            mcs_pir                     = "PIR";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Encoder";
            mcs_ok                      = "Seguro";
            mcs_fault                   = "Error";
            mcs_sensor_status           = "Estado Sensor";
            mcs_about                   = "Sobre";
            mcs_reset_now               = "Reiniciar ahora";
            mcs_reset_later             = "Reiniciar tarde";
            mcs_prompt                  = "Consejos";
            mcs_select                  = "Seleccionar";
            mcs_available_netword       = "La red no está disponible, desea configurarla?";
            mcs_request_send            = "Enviando orden";
            mcs_blank_device_id         = "ID de dispositivo no puede estar vacío";
            mcs_blank_username          = "Nombre de usuario no puede estar vacío";
            mcs_blank_password          = "La contraseña no puede estar vacío";
            mcs_exist_user              = "Usuario existente";
            mcs_invalid_user            = "Usuario no válido";
            mcs_invalid_email_addr      = "Dirección de correo electrónico no es válido";
            mcs_system_err              = "Error del sistema";
            mcs_exceed_device           = "Los usuarios del dispositivo invadidos";
            mcs_continue                = "Continuar";
            mcs_prompt_exit             = "La salida de?";
            mcs_device_list             = "lista de dispositivos";
            mcs_no_sdcard               = "No hay tarjeta SD";
            mcs_no_hard_disk            = "Sin disco duro";
            mcs_show_more               = "Más";
            mcs_shotsnop_exists         = "Las fotos han sido existidos";
            mcs_input_nick              = "Entrar su apodo";
            mcs_nick_not_empty          = "El apodo no puede estar vacío";
            mcs_input_new_pass          = "Entrar su nueva contraseña";
            mcs_input_new_pass_again    = "Entrar su nueva contraseña otra vez";
            mcs_new_password            = "Nueva contraseña";
            mcs_modify_network_prompt   = "Modificación de parámetros de red podría causar interrupciones de la red, por favor confirme su modificar otra vez?";
            mcs_wifi_disable_prompt     = "Desactivar Wi-Fi，Continue?";
            mcs_eth_disable_prompt      = "Desactivar la tajeta de red de ethernet. Desea continuar?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Uso DHCP";
            mcs_manually_set            = "Configurar manualmente";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "DNS primario";
            mcs_client_mode             = "Cliente modo";
            mcs_adhoc_mode              = "Adhoc";
            mcs_connect_fail            = "Error de conexión";
            mcs_dhcp_server             = "Servidor DHCP";
            mcs_display_text            = "Mostrar texto";
            mcs_repair_prompt           = "Reparar la causa tal vez que perder algunos datos. ¿Desea continuar?";
            mcs_format_prompt           = "Formato borrará todos los datos en la tarjeta SD. ¿Desea continuar?";
            mcs_mount_prompt            = "Tarjeta SD de monte. ¿Desea continuar?";
            mcs_umount_prompt           = "Video y foto no pueden ser salvo después SD umount. ¿Desea continuar?";
            mcs_sdcard_reset            = "Sistema de éxito, reiniciar la cámara para que surta efecto";
            mcs_sdcard_repairing        = "Reparación espera reiniciar";
            mcs_sdcard_formating        = "Formateo espera reiniciar";
            mcs_sdcard_umount           = "Desmontar";
            mcs_valid                   = "Válido";
            mcs_io                      = "La alerta de IO";
            mcs_input                   = "Entrada";
            mcs_outinput                = "Salida";
            mcs_prompt_alert_on         = "Encendir la alerta,¿Continua?";
            mcs_auto_sync_date_time     = "La sincronización automática";
            mcs_alarm_record            = "Grabación de alarma";
            mcs_username                = "Nombre de usuario";
            mcs_re_enter_the_password   = "Vuelva a escribir su contraseña";
            mcs_remember_me             = "Estancia firmado en";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Instalar el enchufe video";
            mcs_install_the_video_plug  = "Instalar el enchufe video";
            mcs_install_now             = "Instalar ahora";
            mcs_temporarily_installed_use_ordinary_video = "No, instalar más tarde";
            mcs_brightness              = "Brillo";
            mcs_contrast                = "Contraste";
            mcs_color_saturation        = "Saturación";
            mcs_sharpness               = "Nitidez";
            mcs_duration                = "Duración";
            mcs_index                   = "Índice";
            mcs_remark                  = "Notas";
            mcs_media_stream            = "Los medios de comunicación";
            mcs_server                  = "Servidor";
            mcs_media_transfer          = "Transferencia de video";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Fabricante";
            mcs_model                   = "Modelo";
            mcs_plugin_version          = "Versión plug-in";
            mcs_network_interface       = "Interfaz de red";
            mcs_transfer_protocol       = "Protocolo de transferencia";
            mcs_year                    = "Año";
            mcs_month                   = "Mes";
            mcs_day                     = "Dia";
            mcs_hour                    = "Hora";
            mcs_minute                  = "Minuto";
            mcs_second                  = "Segundos";
            mcs_millisec                = "Milisegundo";
            mcs_ntp                     = "Servidor de hora";
            mcs_upload_upgrade          = "Subir la actualización";
            mcs_stop                    = "Parada";
            mcs_info_rewind             = "Rebobinado";
            mcs_fast_forward            = "Avance rápido";
            mcs_previous_frame          = "Fotograma anterior";
            mcs_next_frame              = "Siguiente fotograma";
            mcs_record_audio            = "Grabación de audio";
            mcs_week                    = "Semana";
            mcs_all                     = "Todo";
            mcs_id                      = "ID";
            mcs_select_all              = "Seleccionar todo";
            mcs_call                    = "Llamar";
            mcs_activation              = "Activación";
            mcs_caption                 = "Subir archivo";
            mcs_alarm_device            = "Dispositivo de alerta";
            mcs_not_installed           = "No está instalada";
            mcs_join_us_now             = "Únase a nosotros ahora";
            mcs_reconnect_please_wait   = "Vuelva a conectar, un momento por favor";
            mcs_erasing                 = "Está borrando";
            mcs_writing                 = "Está escribiendo";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Hay nueva versión";
            mcs_equipment_flip          = "FLIP";
            mcs_device_status           = "Estado del dispositivo";
            mcs_audio_setting           = "Configuración de audio";
            mcs_nick_modify             = "Modificar apodos";
            mcs_ready                   = "Está listo";
            mcs_full                    = "Está lleno";
            mcs_connecting              = "Está conectando";
            mcs_message_buffering       = "Búffer de mensajes";
            mcs_upgrade_finish          = "Actualiza terminar";
            mcs_image                   = "Imagen";
            mcs_bar                     = "Sección";
            mcs_init                    = "Inicializar";
            mcs_confirm_new_password    = "Confirmar nueva contraseña";
            mcs_continue_switch_wireless_network = "Cambiar la red tal vez causar fallas de la red. ¿Desea continuar?";
            mcs_restore_factory_settings_prompt = "Restaurar los ajustes de fábrica. equipo será el reinicio después de la restauración. ¿ Continuar?";
            mcs_username_does_not_exis  = "Nombre de usuario no existe";
            mcs_username_already_exists = "Nombre de usuario ya existe";
            mcs_successful_whether_login = "Regist éxito, ¿muestra ahora ?";
            mcs_username_demand         = "Comienzan con 6-20 letras o números";
            mcs_the_password_is_empty   = "La contraseña está vacía";
            mcs_password_demand         = "6-20 letras o números";
            mcs_password_empty          = "Confirmar contraseña vacía";
            mcs_two_password_input_inconsistent = "Entrada de la contraseña de dos incompatible";
            mcs_the_user_name_is_empty  = "El nombre de usuario está vacío";
            mcs_upgrade_to_the_latest_version = "Actualizado a la última versión";
            mcs_subnet_mask_wrong_format = "Formato no válido de la máscara de red";
            mcs_upgrade_successful_restart_to_take_effect = "Actualiza con éxito .Debe reiniciar la equipo para que surta efecto.";
            mcs_need_to_restart_the_camera_to_take_effect = "Debe reiniciar la equipo para que surta efecto";
            mcs_not_allowed_close_two_network_cards = "Ethernet y Wi-Fi no se pueden desactivar simultáneamente";
            mcs_modified_successfully   = "Modificado con éxito";
            mcs_connection_successfully = "Conectar con éxito";
            mcs_connection_is_interrupted = "Conexión interrumpida";
            mcs_devices_in_the_account_overrun = "Excede el número de dispositivos de usuario";
            mcs_format_error            = "Error de formato";
            mcs_change                  = "Cambiar";
            mcs_refresh                 = "Renovar";
            mcs_connect                 = "Conectar";
            mcs_upgrade                 = "Actualizar";
            mcs_activate                = "Activar";
            mcs_filter                  = "Filtrar";
            mcs_reset                   = "Reset";
            mcs_prompt_alert_off        = "Apagar el alerta , ¿Continuar?";
            mcs_invalid_server          = "Dirección del servidor NTP no es válido";
            mcs_upgrade_prompt          = "Actualizar el programa de la equipo ，¿continua？";
            mcs_restart_prompt          = "Reinicie la dispositivo, continua？";
            mcs_repeat                  = "Repetir";
            mcs_scheduled_one           = "Programado uno";
            mcs_scheduled_two           = "Programado 2";
            mcs_scheduled_three         = "Programado tres";
            mcs_scheduled_four          = "Programado cuatro";
            mcs_more                    = "Más";
            mcs_leave                   = "Afloje Cargando más";
            mcs_qrcode_scan             = "Escanear el código QR";
            mcs_inserted                = "Insertado";
            mcs_removed                 = "Eliminado";
            mcs_upgrade_init            = "Comenzar a actualizar";
            mcs_upgrade_download        = "Actualizar descargar";
            mcs_check                   = "Comprobación";
            mcs_audio_encoder_config    = "Configuración de codec de audio";
            mcs_video_codec             = "Codec de vídeo";
            mcs_download                = "Descargar";
            mcs_client_download         = "Descarga de Clientes";
            mcs_for_more_clarity_smooth_video_experience = "Obtenga la experiencia de vídeo más fluida y nítida";
            mcs_network                 = "Red";
            mcs_mobile_client_download  = "Descarga de Clientes de teléfonos";
            mcs_readonly                = "Sólo leer";
            mcs_please_exit_and_relogin = "Por favor ingresa de nuevo para salir";
            mcs_add_device_failed       = "Error en agregar dispositivos";
            mcs_set_password            = "Cambiar contraseña";
            mcs_7x24_hours              = "7x24(hora)";
            mcs_motion_alert            = "Alerta de movimiento";
            mcs_mtalt                   = "%@ : Alerta de movimiento";
            mcs_io_alert                = "I/O alerta";
            mcs_ioalt                   = "%@ : I/O alerta";
            mcs_time_zone               = "Huso horario";
            mcs_select_time             = "Seleccionar el tiempo";
            mcs_now                     = "Ahora";
            mcs_mipc_have_alert_notification = "MIPC tiene notificación de alerta";
            mcs_notification_center     = "Notification Center";
            mcs_sound                   = "Sonido";
            mcs_vibration               = "Vibración";
            mcs_clear_cache             = "Borrar caché";
            mcs_clear_cache_hint        = "¿Está seguro que desea borrar la memoria caché?";
            mcs_successfully_cleared_cache = "Éxito borrado la caché";
            mcs_app_except_exit_hint    = "Lo sentimos, la aplicación ha detectado una excepción y terminará.";
            mcs_rate_us                 = "Rate us";
            mcs_password_too_simple_hint = "La contraseña es demasiado simple, modificado para mejorar la seguridad.";
            mcs_check_for_new_version   = "Comprobar si hay nuevas versiones";
            mcs_contact_us              = "Contáctenos";
            mcs_buffer_time             = "Tiempo de autonomía";
            mcs_default                 = "Defecto";
            mcs_alarmed_devices         = "Dispositivo de alarma";
            mcs_aec                     = "Cancelación de eco";
            mcs_permission_denied       = "Permiso denegado";
            mcs_full_screen             = "full Screen";
            mcs_forgot_your_password    = "¿Olvidaste tu contraseña";
            mcs_your_email              = "Su correo electrónico";
            mcs_sign_up_confirmation    = "Un correo electrónico de confirmación ha sido enviado a verificar la dirección de correo electrónico enviada. Visitando el enlace enviado en este correo electrónico se activará la cuenta.";
            mcs_recovery_prompt         = "Introduzca su dirección de correo electrónico (nombre de usuario), le enviaremos un mensaje para decirle cómo restablecer la contraseña.";
            mcs_password_reset_confirmation = "Un correo electrónico se envía a la dirección de correo electrónico enviada, Visitando el enlace enviado en este correo electrónico para restablecer la contraseña.";
            mcs_recovery_fail_no_mail   = "Recuperar la contraseña fracasan, esta cuenta no haber enlazar email";
            mcs_recovery_fail_invalid_link = "Recuperar la contraseña fracasan, por favor, asegúrese de que el contenido de enlace o la recuperación de nuevo.";
            mcs_recovery_ok_login       = "Éxito de recuperación de contraseña, identifíquese";
            mcs_active_ok_login         = "Cuenta éxito activo. Identifíquese.";
            mcs_active_fail_invalid_link = "Cuenta activa falle. Por favor, asegúrese de que el contenido de enlace o Registrarse nuevamente.";
            mcs_login_fail_inactive     = "Cuenta está inactiva. Por favor, siga el contenido de correo electrónico activa para activar.";
            mcs_sign_up_again           = "Iniciar de nuevo";
            mcs_press_start_talk        = "Pulsar para hablar";
            mcs_release_stop_talk       = "Suelte para detener";
            mcs_delete_device           = "Elimina dispositivo";
            mcs_success_removed_equipment = "Eliminar un dispositivo con éxito";
            mcs_remove_equipment_failure = "Retire la falla del equipo";
            mcs_device_busy             = "El dispositivo está ocupado ahora";
            mcs_keep_testing            = "Continuar prueba";
            mcs_notify_tone             = "tono de notificación";
            mcs_float_video             = "Habilitar vídeo flotante";
            mcs_float_position          = "Flotante posición de vídeo";
            mcs_video_resolution        = "resolución de vídeo";
            mcs_float_resolution        = "Flotante resolución de vídeo";
            mcs_top_left                = "Arriba a la izquierda";
            mcs_top_right               = "Arriba a la derecha";
            mcs_bottom_left             = "Abajo a la izquierda";
            mcs_bottom_right            = "Abajo a la derecha";
            mcs_action_next             = "próximo";
            mcs_action_cancel           = "cancelar";
            mcs_action_retry            = "Reintente";
            mcs_action_add              = "añadir";
            mcs_action_apply            = "aplicación";
            mcs_action_config           = "configuración";
            mcs_action_skip             = "omitir";
            mcs_action_ok               = "Bueno";
            mcs_action_add_device       = "Añadir dispositivo";
            mcs_action_modify_password  = "Cambiar contraseña";
            mcs_action_config_wifi      = "Wi-Fi Configurar";
            mcs_state_connect_device    = "Conexión de los dispositivos";
            mcs_state_connect_device_fail = "Conecte el fallo del equipo";
            mcs_state_wait_device_online = "A la espera de dispositivo a estar online";
            mcs_state_device_online     = "Online";
            mcs_state_success           = "éxito";
            mcs_state_add_device_success = "Añadir el éxito de dispositivos";
            mcs_state_add_device_fail   = "Añadir un fallo del dispositivo";
            mcs_state_modify_pass_success = "Contraseña cambiada con éxito";
            mcs_state_modify_pass_fail  = "Cambio de contraseña falla";
            mcs_state_config_wifi_success = "Éxito Establezca Wi-Fi";
            mcs_state_config_wifi_fail  = "Error de conexión";
            mcs_state_connecting_to     = "Conexión a";
            mcs_network_connect_type    = "El dispositivo no está en línea, se asegura de que el dispositivo está encendido, y luego selecciona la conexión de red:";
            mcs_prompt_modify_passwd    = "Su contraseña del dispositivo es demasiado simple, modifique la contraseña. Nueva contraseña no podrá ser inferior a seis caracteres.";
            mcs_prompt_config_wifi      = "Su dispositivo aún no está conectado a su Wi-Fi, por favor, configure su red Wi-Fi.";
            mcs_step1_check_connect     = "Paso 1 : Conecte el router y el cable de red está utilizando la cámara.";
            mcs_first_step_ethernet_connect = "Paso 1: Conecte un extremo de un cable de red para conectarse a su router y el otro extremo al puerto de red del dispositivo de acceso.";
            mcs_step2_check_connect     = "Paso 2 : Encienda la cámara.";
            mcs_second_step_ethernet_connect = "Paso 2 : El poder de su dispositivo, inicie el dispositivo.";
            mcs_hint_check_network      = "Nota : la cámara tarda unos 50 segundos en arrancar, tras el inicio es completa, estado2 enciende tres segundos, la luz verde parpadea tres veces, lo que significa que cada cámara ha estado en línea, el asistente introducirá automáticamente la siguiente etapa.";
            mcs_the_end                 = "El fin";
            mcs_hint_password_expired   = "La contraseña ha caducado, por favor vuelve a agregar el dispositivo";
            mcs_hint_remove_ethernet    = "Observación : Wi-Fi funciona correctamente, ahora puede desconectar el cable de red.";
            mcs_ip_format_incorrect     = "Formato de dirección IP no es correcta";
            mcs_login_sucess            = "Inicio de sesión correcto";
            mcs_donot_remind            = "no le recuerde";
            mcs_clear_cache_signout_hint = "Borrar caché saldrá sesión de nuevo para continuar?";
            mcs_devlist_adddev_hint     = "Haz clic aquí para agregar equipos";
            mcs_devlist_menu_hint       = "Haga clic aquí para configurar la resolución";
            mcs_update_failed           = "No actualizar";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Local";
            mcs_set_npapi               = "Si el plugin se ha instalado, por favor visita \'chrome://flags/#enable-npapi\', permitirá NPAPI, ";
            mcs_set_win32k              = "visita \'chrome://flags/#enable-win32k-renderer-lockdown\', desactivado win32k renderizador lockdown,";
            mcs_restart_browser         = "Reinicie el navegador";
            mcs_download_location       = "Ubicación de la descarga";
            mcs_Networking_mode         = "modo de Redes";
            mcs_wifi_intelligent_configuration = "conexión WIFI";
            mcs_ethernet_configuration  = "conexión Ethernet";
            mcs_wifi_connect            = "conexión";
            mcs_hard_disk               = "disco duro";
            mcs_wifi_is_connection      = "Conexión, por favor espere...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi configuración inteligente error de instalación";
            mcs_box_list                = "boîte de liste";
            mcs_repair_disk_prompt      = "Disco de reparación puede perderse algunos datos, continuar?";
            mcs_format_disk_prompt      = "Formato de disco borrará todos los datos, continuer?";
            mcs_scheduled_alerting      = "Programa Armado";
            mcs_scheduled_alerting_one  = "Programa Armado 1";
            mcs_scheduled_alerting_two  = "Programa Armado 2";
            mcs_scheduled_alerting_three = "Programa Armado 3";
            mcs_scheduled_alerting_four = "Programa Armado 4";
            mcs_wifi_config_cancle      = "configuración wifi cancelar";
            mcs_wifi_config_prepare     = "wifi Requisitos";
            mcs_wifi_config_first       = "Los dispositivos y móviles y routers mantienen en el rango de 1 m";
            mcs_wifi_config_second      = "Al configurar wifi, el dispositivo no puede conectar el cable de red";
            mcs_wifi_config_third       = "Pulse el orificio de reinicio REINICIO un segundo y luego suelte";
            mcs_wifi_config_success     = "el éxito de configuración";
            mcs_wifi_config_failure     = "Configuración fracasó";
            mcs_failure_prompt          = "Por favor, inténtelo de nuevo o volver a comprobar WIFI contraseña se introduce correctamente";
            mcs_display_password        = "Mostrar contraseña";
            mcs_action_smart_config_wifi = "Asistente de configuración";
            mcs_wifi_invalid            = "Su red no es WiFi, por favor conectar WiFi!";
            mcs_phone_not_connect_wifi  = "Red WiFi no está conectado";
            mcs_prompt_check_connection = "La cámara no está en línea, compruebe la conexión de la línea de la cámara.";
            mcs_wifi_cfg_ready          = "Listo";
            mcs_reset_complete          = "Reset es completa";
            mcs_how_to_restore_factory_settings = "Cómo restaurar la configuración de fábrica: usar el pin de RESET pulsando el agujero de RESET en la parte inferior de la cámara durante más de 10 segundos";
            mcs_forgetpass_action_wizard = "Pulse RESET Restablecer agujero 10 segundos después del lanzamiento, el dispositivo se reiniciará automáticamente restablece la contraseña del administrador";
            mcs_prompt_check_device_connection = "Su dispositivo no está en línea, revisar el cableado para conectar el dispositivo";
            mcs_input_wifi_name         = "Por favor introduce el nombre wifi";
            mcs_action_previous         = "anterior";
            mcs_io_alert_range_hint     = "IO tiempo de alerta debe ser menos de 60 segundos";
            mcs_io_alert_time           = "IO hora de alarma(s)";
            mcs_smart                   = "inteligente";
            mcs_plan                    = "plan";
            mcs_mute                    = "mudo";
            mcs_wind_speed              = "velocidad del viento";
            mcs_one                     = "un engranaje";
            mcs_two                     = "Dos engranajes";
            mcs_three                   = "Tres engranajes";
            mcs_purify_mode             = "modo de purificar";
            mcs_video_list              = "lista vídeo";
            mcs_wifi_cfg_restore_factory_settings = "Sostenga el teléfono móvil cerca de dispositivo, si el dispositivo se ha configurado WiFi, presionar RESET durante un segundo y luego suelte, el dispositivo va a restaurar la configuración de fábrica y reiniciar automáticamente";
            mcs_mask_settings           = "configuración de Máscara";
            mcs_notification_settings   = "configuración de las notificaciones";
            mcs_alarm_settings          = "Los ajustes de alarma";
            mcs_motion_detection        = "Detección De Movimiento";
            mcs_io_alarm                = "E/S de alarma";
            mcs_connect_status          = "Estado de la conexión";
            mcs_motion_notification     = "Alertas y notificaciones";
            mcs_device_connected        = "El dispositivo está conectado";
            mcs_start_spray             = "Empiece a rociar?";
            mcs_available_network       = "La red no está disponible";
            mcs_select_wifi_wizard      = "Por favor, seleccione la red Wi-Fi en primer lugar";
            mcs_input_wifi_password     = "Introducir la contraseña de WiFi";
            mcs_device_admin_password   = "Dispositivo contraseña de administrador";
            mcs_device_guest_password   = "Dispositivo contraseña de invitado";
            mcs_user_admin_password     = "Usuario admin contraseña";
            mcs_user_guest_password     = "Usuario contraseña de invitado";
            mcs_save_network_set        = "Guardar conjunto de la red y la contraseña";
            mcs_nickname_not_set        = "Apodo de la cámara no está establecida";
            mcs_current_wifi            = "Actual Wi-Fi";
            mcs_current_password_strength = "La fortaleza de la contrase?a actual";
            mcs_new_password_strength   = "Nueva fuerza contrase?a";
            mcs_needs_to_open_the_DHCP  = "El router tiene que abrir el DHCP (obtener automáticamente IP) la función, si el intento no tiene éxito, por favor póngase en contacto con el administrador.";
            mcs_picture                 = "imagen";
            mcs_quality                 = "calidad";
            mcs_size                    = "tama?o";
            mcs_guest_login             = "Invitado Entrar";
            mcs_audio_and_video         = "Audio / Video";
            mcs_volume                  = "El volumen";
            mcs_smooth                  = "liso";
            mcs_clear                   = "claro";
            mcs_handsfree               = "Manos libres";
            mcs_headphone               = "auricular";
            mcs_my                      = "mi";
            mcs_customer_service        = "servicio al cliente";
            mcs_firefox_flash_uninstall = "Tu lector Flash no está disponible, la solución consulte https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Widget";
            mcs_plug_load               = "plugins de carga";
            mcs_plug_load_refuse        = "No cargue plugins";
            mcs_plug_load_auto          = "automático";
            mcs_option                  = "Opciones";
            mcs_option_ok               = "determinar";
            mcs_voice_call_fails        = "Llamada de voz falla, compruebe la red";
            mcs_umounted_prompt         = "Si para desmontar?";
            mcs_signup_prompt           = "De nuevo por aqui?";
            mcs_wifi_connect_sucess_prompt = "Nota: el trabajo normal de WiFi, ahora puedes desconectar de la red.?";
            mcs_manual_input_prompt     = "Manual de identificación de dispositivos de entrada";
            mcs_qrscan_prompt           = "Usted no ha permitido el acceso a esta aplicación, por favor, en función de su cámara en el iPhone \'preferencias\' -\' privacidad \'-\' cámara \',\' Vimtag \'para encontrar el nombre de la aplicación del procedimiento de revisión.";
            mcs_select_network_style    = "Seleccione el modo de conexión de red:";
            mcs_push                    = "annuncio";
            mcs_connect_power_prompt    = "Nota: asegúrese de que el equipo en el que se ha relacionado con el suministro de energía";
            mcs_fail_microphone         = "No se puede acceder a un micrófono";
            mcs_microphone_prompt       = "Usted no es para permitir que esta aplicación para acceder a su micrófono, en el \'set\' iPhone - la \'privacidad\' - función \'micrófono\', encontrar el nombre de la aplicación \'Vimtag\' ser modificado";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Borrar...";
            mcs_event                   = "Los acontecimientos";
            mcs_one_hour                = "Una hora";
            mcs_half_hour               = "Hora y media";
            mcs_five_min                = "Cinco minutos";
            mcs_category                = "Las categorías de";
            mcs_time_length             = "El tiempo";
            mcs_new                     = "Nuevo";
            mcs_week_setting_prompt     = "El no puede estar vacío";
            mcs_time_setting_prompt     = "El tiempo no puede estar vacío";
            mcs_today                   = "Hoy.";
            mcs_wifi_config_prepare     = "wifi Requisitos";
            mcs_wifi_password           = "conexión wifi contraseña";
            mcs_register_prompt         = "Por favor, número de registro.";
            mcs_click_login             = "Haga clic en iniciar sesion";
            mcs_not_login_prompt        = "No estás registrado, por favor, haga clic en login.";
            mcs_product_presentation    = "La";
            mcs_help_feedback           = "Ayuda";
            mcs_help_information        = "Ayuda";
            mcs_feedback                = "La retroalimentación";
            mcs_connect_wifi_prompt     = "La conexión wifi";
            mcs_cloud                   = "actualizar más adelante";
            mcs_demo                    = "Demo";
            mcs_shortest                = "Más corto";
            mcs_no_history              = "No hay historial";
            mcs_download_pc_client      = "Haz clic aquí para descargar el cliente de PC";
            mcs_accounts_bind_email_exist = "Esta cuenta se une un buzón de correo";
            mcs_accounts_bind_email_busy = "La cuenta de correo ha sido vinculado.";
        }/* es */
        else if(lang == "pt")
        {
            mcs_name                    = "Nome";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Nome";
            mcs_old_nick                = "Utilizador ";
            mcs_linked                  = "Ligado";
            mcs_sign_in                 = "Entrar";
            mcs_back                    = "Voltar";
            mcs_add                     = "Adicionar";
            mcs_add_device              = "Adicionar dispositivo";
            mcs_device_existed          = "Dispositivo já existe";
            mcs_cancel                  = "Cancelar";
            mcs_exit                    = "Sair";
            mcs_remember_password       = "Recordar senha";
            mcs_password_remembered     = "Senha guardada";
            mcs_sign_ining              = "A registar...";
            mcs_cloud_server            = "Servidor cloud";
            mcs_input_device_id         = "Entrar o ID do dispositivo";
            mcs_input_username          = "Entrar o nome de utilizador";
            mcs_input_email_addr        = "Digite o endereço de e-mail";
            mcs_email_address           = "E-mail";
            mcs_email                   = "caixa de correio";
            mcs_binding                 = "obrigatório";
            mcs_binding_email           = "caixa de ligação";
            mcs_binding_send_prompt     = "caixa de ligação";
            mcs_binding_email_prompt    = "caixa de ligação";
            mcs_input_password          = "Inserir o código";
            mcs_access_server_failed    = "Sem acesso ao servidor";
            mcs_device_offline          = "O dispositivo não está online";
            mcs_invalid_password        = "Código errado";
            mcs_invalid_dev             = "Dispositivo não existe";
            mcs_login_faided            = "Erro de acesso";
            mcs_invalid_qrcode          = "Código QR inválido";
            mcs_please_input_username   = "Insira o seu nome de utilizador";
            mcs_please_input_password   = "Inserir o código";
            mcs_qrcode_scan_hint        = "Manter a caixa na parte inferior do dispositivo está alinhado código bidimensional";
            mcs_device_list_empty       = "Lista de dispositivos vazia";
            mcs_record_list_is_empty    = "Lista de dispositivos vazia";
            mcs_password_expired        = "Código expirado";
            mcs_set_video_size          = "Definir a dimensão do vídeo";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Automático";
            mcs_normal_640x360          = "Normal [640x360]";
            mcs_half_320x180            = "Medio [320x180]";
            mcs_small_160x90            = "Pequena [160x90]";
            mcs_play                    = "Ver";
            mcs_settings                = "Definições";
            mcs_messages                = "Mensagens";
            mcs_alarm                   = "Alarme";
            mcs_delete                  = "Apagar";
            mcs_delete_camera           = "Apagar ";
            mcs_apply                   = "Aplicar";
            mcs_speed                   = "Velocidade";
            mcs_others                  = "Outros";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Alto-falante";
            mcs_mic                     = "Microfone";
            mcs_power_frequency         = "Frequência de alimentação";
            mcs_online_upgrade          = "Atualizar on-line";
            mcs_restore_the_factory_settings = "Restaurar configurações de fábrica";
            mcs_restore                 = "Restaurar";
            mcs_restore_camera          = "dispositivo Restart";
            mcs_start_upgrade           = "Começar actualização";
            mcs_system                  = "Sistema";
            mcs_system_settings         = "Configurações do sistema";
            mcs_online                  = "Dispositivo está online";
            mcs_offline                 = "Dispositivo está offline";
            mcs_query                   = "Pesquisar";
            mcs_begin_time              = "Tempo de início";
            mcs_end_time                = "Tempo fim";
            mcs_mode                    = "Modo";
            mcs_opened                  = "Aberto";
            mcs_high                    = "Alto";
            mcs_middle                  = "Médio";
            mcs_low                     = "Baixo";
            mcs_io_alert_input          = "I/O entrada de Alarme";
            mcs_io_alert_output         = "I/O saída de alarme";
            mcs_normally_open           = "Normalmente Aberto";
            mcs_normally_close          = "Fechado normalmente";
            mcs_motion_detection_sensitivity = "Sensibilidade de detecção de movimento";
            mcs_daytime                 = "Dia";
            mcs_night                   = "Noite";
            mcs_sdcord                  = "Cartão SD";
            mcs_storage_device          = "Os dispositivos de armazenamento";
            mcs_set_mask                = "Set máscara";
            mcs_status                  = "Estado";
            mcs_capacity                = "Capacidade";
            mcs_usage                   = "Usado";
            mcs_format                  = "Formatar";
            mcs_repair                  = "Reparar";
            mcs_formating               = "Formatação em curso";
            mcs_repairing               = "Em processo de reparação";
            mcs_mounted                 = "Carregado";
            mcs_unmounted               = "Ejectar";
            mcs_mount                   = "Carregar";
            mcs_unmount                 = "Ejectar";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Ativado";
            mcs_mac_address             = "Endereço MAC";
            mcs_network_status          = "Estado da conexão";
            mcs_wifi_mode               = "Modo WI-FI";
            mcs_client                  = "Cliente";
            mcs_ap                      = "Hot spot";
            mcs_start_address           = "Endereço inicial";
            mcs_end_address             = "Endereço final";
            mcs_gateway                 = "Gateway";
            mcs_select_network          = "Seleccione a Rede";
            mcs_dhcp_ip                 = "Obter IP automaticamente";
            mcs_dhcp_dns                = "Obter DNS automaticamente";
            mcs_ip_address              = "Endereço IP";
            mcs_network_mask            = "Máscara de sub-rede";
            mcs_input_secondary_dns     = "Inserir o DNS secundário";
            mcs_secondary_dns           = "DNS secundário";
            mcs_input_dns               = "Entrar DNS";
            mcs_input_alternate_dns     = "Inserir DNS secundário";
            mcs_input_ip                = "Inserir o endereço IP";
            mcs_input_gateway           = "Inserir Gateway";
            mcs_input_network_mask      = "Entrar a máscara de sub-rede";
            mcs_wifi_list               = "Lista de Wi-Fi";
            mcs_display_date            = "Mostrar data";
            mcs_date_format             = "Formato de data";
            mcs_display_time            = "Tempo de mostra";
            mcs_time_format             = "Formato da hora";
            mcs_24_hour                 = "24 Horas";
            mcs_12_hour                 = "12 Horas";
            mcs_display_weeks           = "Mostrar semanas";
            mcs_date_time               = "Data/Hora";
            mcs_set_time                = "Definição da Hora";
            mcs_set_week                = "Estabelecer a semana";
            mcs_stream                  = "Stream";
            mcs_encode                  = "Codificação";
            mcs_resolution              = "Resolução";
            mcs_frame_fate              = "Frame Rate";
            mcs_maximum_bitrate         = "Taxa máxima de bits";
            mcs_minimum_bitrate         = "Taxa mínima de bits";
            mcs_i_frame_interval        = "Intervalo de frame";
            mcs_video                   = "Vídeo";
            mcs_sampling_rate           = "Taxa de amostragem (kHz)";
            mcs_nickname                = "Nickname";
            mcs_old_password            = "Código antigo";
            mcs_confirm_password        = "Confirmar o código";
            mcs_modify_password         = "Alterar o código";
            mcs_password                = "Código";
            mcs_admin_password          = "Codigo Admin";
            mcs_guest_password          = "Guest Senha";
            mcs_product_info            = "Informações sobre o produto";
            mcs_software_version        = "Versão do software";
            mcs_device_id               = "ID do dispositivo";
            mcs_operation               = "Operação";
            mcs_record                  = "Gravar";
            mcs_record_2                = "Gravar";
            mcs_upgrade_now             = "Atualizar agora";
            mcs_upgrading               = "Está a atualizar.";
            mcs_already_latest_version  = "Versão mais recente instalada";
            mcs_sensitivty              = "Sensibilidade";
            mcs_user_defined            = "Definição pelo utilizador";
            mcs_time                    = "Tempo";
            mcs_date                    = "Data";
            mcs_finish                  = "Terminado";
            mcs_fail                    = "Falhou";
            mcs_motion                  = "Detecção de movimento";
            mcs_start                   = "Iniciar";
            mcs_talk                    = "Falar";
            mcs_password_input_inconsistent = "Código inconsistente";
            mcs_input_6_to_20_litters   = "Entrada 6-20 letras (a-z, A-Z) ou números (0-9)";
            mcs_user_letter_range_hint  = "Conta de 6 - 20 dígitos (0 - 9) ou Letra (a - Z, a - z), deve começar com UMA Letra";
            mcs_password_range_hint     = "Código consiste contém 6-20 números ou letras";
            mcs_begin_with_the_letters  = "Começar por uma letra";
            mcs_sign_up                 = "Registar";
            mcs_sign_up_failed          = "Falha ao registar";
            mcs_successful_sign_up      = "Registo bem sucedido";
            mcs_are_you_sure_delete     = "Deseja eliminar?";
            mcs_failed_to_set_the       = "Falha ao instalar";
            mcs_set_successfully        = "Instalação bem sucedida";
            mcs_downloading             = "A descarregar";
            mcs_wrote                   = "Escrito";
            mcs_visit_again_later       = "Por favor voltar mais tarde";
            mcs_restart_failed          = "Reinícialização falhou";
            mcs_upgrade_failed          = "Erro dd atualização";
            mcs_connnected              = "Está conectado";
            mcs_connnected_to           = "Conectado a";
            mcs_not_select              = "Não selecionado";
            mcs_message_list            = "Lista de mensagens";
            mcs_saved_password          = "Código guardado";
            mcs_alert                   = "Alerta";
            mcs_no_record               = "Não há vídeos";
            mcs_new_about               = "Novo : Sobre";
            mcs_device                  = "Dispositivo";
            mcs_config                  = "Configuração";
            mcs_change_password_failed  = "Falha ao alterar o código";
            mcs_do_you_want_restart     = "Deseja reiniciar?";
            mcs_do_you_want_restore     = "Deseja restaurar?";
            mcs_do_you_want_upgrade     = "Deseja atualizar?";
            mcs_load_end                = "Todos os dados foram carregados";
            mcs_loading                 = "A carregar...";
            mcs_down_refresh            = "Para baixo para atualizar";
            mcs_release_refresh         = "liberação de atualização";
            mcs_refreshing              = "refrescante";
            mcs_release_then_loading_data_hint = "Actualizar Download";
            mcs_pull_refresh_hint       = "Puxar para atualizar";
            mcs_restarting              = "Está a reiniciar";
            mcs_upgraded_time           = "Atualizado em : ";
            mcs_done                    = "Terminado";
            mcs_playback                = "Reprodução";
            mcs_i_o_alarm               = "Alarme I/O";
            mcs_alarm_action            = "Ação de alarme";
            mcs_alarm_sources           = "Fonte de alarme";
            mcs_io_output               = "E/S de saída";
            mcs_snapshots               = "Tirar foto";
            mcs_snapshot                = "Tirar foto";
            mcs_snapshot_interval       = "Fotos intervalo (min)";
            mcs_pre_record_length       = "Tempo de pré-gravação (min)";
            mcs_nick_range_hint         = "Erro nickname (máximo de 20 caracteres)";
            mcs_save                    = "Salvar";
            mcs_close                   = "Fechar";
            mcs_snapshoting             = "tirar fotos";
            mcs_snapshot_failed         = "Erro ao tirar foto";
            mcs_record_failed           = "Falha ao gravar vídeo";
            mcs_saved_successfully      = "Guardado com exito";
            mcs_save_failed             = "Falha ao guardar";
            mcs_restart_to_take_effect  = "Reiniciar para atualizar modificações ";
            mcs_please_allow_access_album = "Autorizar MIPC a aceder ao seu álbum.";
            mcs_ios_privacy_setting_for_photo_prompt = "Você pode modificar no iPhone \"Configurações -> Privacidade -> Foto \", localize o aplicativo \"MIPC \" para fazer mudanças.";
            mcs_please_allow_access_camera = "Autorizar o acesso de MIPC para aceder à camera";
            mcs_ios_privacy_setting_for_camera_prompt = "Você pode alterar no iPhone \"Configurações -> Privacidade -> Câmera\", localize o aplicativo \"MIPC \" para fazer mudanças";
            mcs_busy_when_write         = "Ocupado a gravar";
            mcs_unknown_error           = "Erro desconhecido";
            mcs_i_know                  = "Eu sei";
            mcs_segment                 = "Fragmento";
            mcs_please_relogin          = "Por favor, aceda novamente";
            mcs_change_password_succeed = "Código alterado com sucesso";
            mcs_upgrade_to_ver          = "Atualizar para uma nova versão";
            mcs_restore_failed          = "Falha na restauração";
            mcs_please_restart          = "Reiniciar";
            mcs_keep_network_settings   = "Configurações de rede Reservas e senha";
            mcs_not_connected           = "Não conectado";
            mcs_sdcard_not_ready        = "Cartão SD não está pronto!";
            mcs_device_not_exist        = "Dispositivo não existe";
            mcs_disable                 = "Desactivar";
            mcs_to_determine_the        = "Tem a certeza?";
            mcs_alert_on                = "Activar o alarme";
            mcs_alert_off               = "Desactivar o alarme";
            mcs_alert_onoff             = "Alerte on / off";
            mcs_monday                  = "Segunda-feira";
            mcs_tuesday                 = "Terça-feira";
            mcs_wednesday               = "Quarta-feira";
            mcs_thursday                = "Quinta-feira";
            mcs_friday                  = "Sexta-feira";
            mcs_saturday                = "Sábado";
            mcs_sunday                  = "Domingo";
            mcs_mon                     = "Seg";
            mcs_tue                     = "Ter";
            mcs_wed                     = "Qua";
            mcs_thu                     = "Qui";
            mcs_fri                     = "Sex";
            mcs_sat                     = "Sáb";
            mcs_sun                     = "Dia";
            mcs_scheduled_recording     = "Programar gravação video";
            mcs_schedule                = "Programar";
            mcs_scheduled_recording_status = "Estado da programaçao de gravação";
            mcs_folding                 = "Dobrar";
            mcs_unfolding               = "Desdobrar";
            mcs_end_time_should_lt_begin = "O tempo final deve ser maior do que o tempo de início";
            mcs_recording               = "Gravação em curso";
            mcs_prerecord_interval_range_hint = "O tempo de pré-gravação deve ser inferior a 6 segundos";
            mcs_snapshot_interval_range_hint = "O tempo do intervalo exigido é de 0 ou maior do que 60";
            mcs_not_ready               = "Não pronto";
            mcs_availablesize           = "Espaço disponível";
            mcs_reboot                  = "Reiniciar";
            mcs_alerter                 = "Abra o alarme";
            mcs_pir                     = "PIR";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Encoder";
            mcs_ok                      = "Ok";
            mcs_fault                   = "Erro";
            mcs_sensor_status           = "Estado do sensor";
            mcs_about                   = "Sobre";
            mcs_reset_now               = "Reiniciar agora";
            mcs_reset_later             = "Reiniciar depois";
            mcs_prompt                  = "Sugestão";
            mcs_select                  = "Selecionar";
            mcs_available_netword       = "A rede não está disponível, configurar a rede?";
            mcs_request_send            = "Está a enviar o pedido...";
            mcs_blank_device_id         = "Introduza o ID";
            mcs_blank_username          = "Introduza um nome de utilizador";
            mcs_blank_password          = "Introduza o código";
            mcs_exist_user              = "O nome de utilizador já existe";
            mcs_invalid_user            = "O nome de usuário inválido";
            mcs_invalid_email_addr      = "Endereço de e-mail inválido";
            mcs_system_err              = "Erro de sistema";
            mcs_exceed_device           = "Passou o limite de utilizadores ligados ";
            mcs_continue                = "Continuar";
            mcs_prompt_exit             = "Se sair?";
            mcs_device_list             = "lista de dispositivos";
            mcs_no_sdcard               = "Nenhum cartão SD";
            mcs_no_hard_disk            = "Nenhuma unidade de disco rígido";
            mcs_show_more               = "mais…";
            mcs_shotsnop_exists         = "Foto já existente";
            mcs_input_nick              = "Entrar o nome de utilizador";
            mcs_nick_not_empty          = "O apelido não pode estar vazio";
            mcs_input_new_pass          = "Entrar o novo código";
            mcs_input_new_pass_again    = "Entrar o novo código outra vez";
            mcs_new_password            = "O código novo";
            mcs_modify_network_prompt   = "Modificar os parâmetros de rede pode causar problemas de ligação, confirmar as modificações?";
            mcs_wifi_disable_prompt     = "Desativar Wi-Fi, continuar?";
            mcs_eth_disable_prompt      = "Desativar a placa Ethernet, continuar?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Obter automaticamente DHCP";
            mcs_manually_set            = "Configurar manualmente";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "DNS primario";
            mcs_client_mode             = "Modo de cliente";
            mcs_adhoc_mode              = "Modo de hotspot";
            mcs_connect_fail            = "Erro de conexão";
            mcs_dhcp_server             = "Servidor DHCP";
            mcs_display_text            = "Mostrar o texto";
            mcs_repair_prompt           = "Reparar o cartão SD pode resultar em alguma perda de dados, continua?";
            mcs_format_prompt           = "A formatação irá apagar todos os dados do cartão SD, continua?";
            mcs_mount_prompt            = "Carregar o cartão SD, continuar?";
            mcs_umount_prompt           = "Se descarregar o cartão SD não poderá guardar mais videos ou fotos, continuar?";
            mcs_sdcard_reset            = "Configuração  actualizada  com sucesso, você precisará de reiniciar a camera, continuar?";
            mcs_sdcard_repairing        = "Reparação em curso para reiniciar";
            mcs_sdcard_formating        = "Formatação em curso para reiniciar";
            mcs_sdcard_umount           = "Não carregado";
            mcs_valid                   = "Válido";
            mcs_io                      = "Alarme I/O";
            mcs_input                   = "Entrar";
            mcs_outinput                = "Saida";
            mcs_prompt_alert_on         = "Activar o alarme, continuar?";
            mcs_auto_sync_date_time     = "A sincronização automática";
            mcs_alarm_record            = "Gravação de alarme";
            mcs_username                = "Nome de usuário";
            mcs_re_enter_the_password   = "Entrar o código novamente";
            mcs_remember_me             = "Manter inscrito";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Instalar o plugin";
            mcs_install_the_video_plug  = "Instalar a ligação vídeo";
            mcs_install_now             = "Instalar agora";
            mcs_temporarily_installed_use_ordinary_video = "Não, instalar mais tarde";
            mcs_brightness              = "Luminosidade";
            mcs_contrast                = "Contraste";
            mcs_color_saturation        = "Saturação";
            mcs_sharpness               = "Agudeza";
            mcs_duration                = "Duração";
            mcs_index                   = "Índice";
            mcs_remark                  = "Observação";
            mcs_media_stream            = "Mídia";
            mcs_server                  = "Servidor";
            mcs_media_transfer          = "Transferir mídia";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Fabricante";
            mcs_model                   = "Modelo";
            mcs_plugin_version          = "A versão do plug-in";
            mcs_network_interface       = "Interface de rede";
            mcs_transfer_protocol       = "O protocolo de transmissão";
            mcs_year                    = "Ano";
            mcs_month                   = "Mês";
            mcs_day                     = "Dia";
            mcs_hour                    = "Hora";
            mcs_minute                  = "Minuto";
            mcs_second                  = "Segundo";
            mcs_millisec                = "Milisegundo";
            mcs_ntp                     = "O endereço do servidor NTP";
            mcs_upload_upgrade          = "Enviar o update";
            mcs_stop                    = "Parar";
            mcs_info_rewind             = "Rebobinar";
            mcs_fast_forward            = "Difundir rápido";
            mcs_previous_frame          = "Foto anterior";
            mcs_next_frame              = "Próxima imagem";
            mcs_record_audio            = "Gravação de áudio";
            mcs_week                    = "Semana";
            mcs_all                     = "Tudo";
            mcs_id                      = "ID";
            mcs_select_all              = "Selecionar tudo";
            mcs_call                    = "Chamar";
            mcs_activation              = "Ativação";
            mcs_caption                 = "Carregar arquivo";
            mcs_alarm_device            = "Equipamento de alarme";
            mcs_not_installed           = "Não instalado";
            mcs_join_us_now             = "Junte-se a nós";
            mcs_reconnect_please_wait   = "Está a ligar novamente, por favor aguarde";
            mcs_erasing                 = "Está a apagar";
            mcs_writing                 = "Está a escrever";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Existe uma nova versão disponível";
            mcs_equipment_flip          = "FLIP";
            mcs_device_status           = "O estado do dispositivo";
            mcs_audio_setting           = "Configurações de áudio";
            mcs_nick_modify             = "Alterar o nome de utilizador";
            mcs_ready                   = "Está pronto";
            mcs_full                    = "Cheio";
            mcs_connecting              = "Conexão em curso";
            mcs_message_buffering       = "Buffering de Mensagens";
            mcs_upgrade_finish          = "A atualização está concluida";
            mcs_image                   = "Imagem";
            mcs_bar                     = "Registos";
            mcs_init                    = "Inicialização";
            mcs_confirm_new_password    = "Confirmar o novo código";
            mcs_continue_switch_wireless_network = "Alterações na rede podem causar falhas, continuar?";
            mcs_restore_factory_settings_prompt = "Restaurar as configurações de fábrica, o sistema irá reiniciar, continuar?";
            mcs_username_does_not_exis  = "O nome de usuário não existe";
            mcs_username_already_exists = "O nome de usuário já existe";
            mcs_successful_whether_login = "O registo foi bem sucedido, entrar agora?";
            mcs_username_demand         = "Começa por letras com 6-20 letras ou números";
            mcs_the_password_is_empty   = "O código está vazio";
            mcs_password_demand         = "6-20 letras ou números";
            mcs_password_empty          = "O código de confirmação está vazio";
            mcs_two_password_input_inconsistent = "Entrada de códigos incompativeis";
            mcs_the_user_name_is_empty  = "O nome de usuário está vazio";
            mcs_upgrade_to_the_latest_version = "Atualizar para a versão mais recente";
            mcs_subnet_mask_wrong_format = "Erro no formato da máscara de sub-rede";
            mcs_upgrade_successful_restart_to_take_effect = "Atualização foi bem sucedida, você precisa reiniciar a equipamento.";
            mcs_need_to_restart_the_camera_to_take_effect = "Você precisa reiniciar a equipamento para as configurações tomarem efeito";
            mcs_not_allowed_close_two_network_cards = "Você não pode desativar a placa Ethernet e Wi-Fi ao mesmo tempo";
            mcs_modified_successfully   = "Modificado com exito";
            mcs_connection_successfully = "Conexão bem-sucedida";
            mcs_connection_is_interrupted = "Conexão interrompida";
            mcs_devices_in_the_account_overrun = "O número máximo de usuários foi atingido";
            mcs_format_error            = "Erro de formato";
            mcs_change                  = "Modificar";
            mcs_refresh                 = "Actualizar";
            mcs_connect                 = "Conetar";
            mcs_upgrade                 = "Atualizar";
            mcs_activate                = "Ativar";
            mcs_filter                  = "Filtro";
            mcs_reset                   = "Reset";
            mcs_prompt_alert_off        = "Alerta desligado, continuar?";
            mcs_invalid_server          = "O endereço do servidor NTP é inválido";
            mcs_upgrade_prompt          = "Atualizar o programa da equipamento, continua?";
            mcs_restart_prompt          = "Reiniciar a câmera, continua?";
            mcs_repeat                  = "Repetir";
            mcs_scheduled_one           = "Agenda de gravação 1";
            mcs_scheduled_two           = "Agenda de gravação 2";
            mcs_scheduled_three         = "Agendamento de gravação 3";
            mcs_scheduled_four          = "Agendamento de gravação 4";
            mcs_more                    = "Mais";
            mcs_leave                   = "Soltar a carregar mais";
            mcs_qrcode_scan             = "Scanear de código QR";
            mcs_inserted                = "Inserido";
            mcs_removed                 = "Eliminado";
            mcs_upgrade_init            = "Começar a atualização";
            mcs_upgrade_download        = "Descarregar o upgrade";
            mcs_check                   = "Verificar";
            mcs_audio_encoder_config    = "Configurações de codificação de áudio";
            mcs_video_codec             = "Codificação de vídeo";
            mcs_download                = "Descarregar";
            mcs_client_download         = "Baixar o cliente";
            mcs_for_more_clarity_smooth_video_experience = "Obter o vídeo mais nítido e fluido";
            mcs_network                 = "Rede";
            mcs_mobile_client_download  = "Descarregar em cliente móvel";
            mcs_readonly                = "Só ler";
            mcs_please_exit_and_relogin = "Por favor sair e entrar novamente";
            mcs_add_device_failed       = "Falha ao adicionar dispositivo";
            mcs_set_password            = "Alterar código";
            mcs_7x24_hours              = "7x24(hora)";
            mcs_motion_alert            = "Alera de Movimento";
            mcs_mtalt                   = "%@ : Alerta de movimento";
            mcs_io_alert                = "I/O alerta";
            mcs_ioalt                   = "%@ : I/O alerta";
            mcs_time_zone               = "Fuso horário";
            mcs_select_time             = "Selecionar o tempo";
            mcs_now                     = "Agora";
            mcs_mipc_have_alert_notification = "MIPC têm notificação de alerta";
            mcs_notification_center     = "Centro de Notificação";
            mcs_sound                   = "Som";
            mcs_vibration               = "Vibração";
            mcs_clear_cache             = "Limpar o cache";
            mcs_clear_cache_hint        = "Tem certeza de que deseja limpar o cache?";
            mcs_successfully_cleared_cache = "Esvaziado com êxito o cache";
            mcs_app_except_exit_hint    = "Lamentamos, mas o aplicação encontrou uma exceção e vai terminar.";
            mcs_rate_us                 = "Avalia-nos";
            mcs_password_too_simple_hint = "Senha é muito simples, modifique para melhorar a segurança.";
            mcs_check_for_new_version   = "Verifique se há uma nova versão";
            mcs_contact_us              = "Contate-nos";
            mcs_buffer_time             = "Buffer de tempo";
            mcs_default                 = "Omissão";
            mcs_alarmed_devices         = "Dispositivos de alarme activados";
            mcs_aec                     = "Cancelamento de eco";
            mcs_permission_denied       = "Permissão negada";
            mcs_full_screen             = "full Screen";
            mcs_forgot_your_password    = "Esqueceu sua senha";
            mcs_your_email              = "Seu e-mail";
            mcs_sign_up_confirmation    = "Um e-mail de confirmação é enviado para verificar o endereço de e-mail enviado. Ao visitar o link enviado neste e-mail irá ativar a conta.";
            mcs_recovery_prompt         = "Digite seu endereço de e-mail (nome de usuário), vamos enviar uma mensagem para dizer-lhe como redefinir a senha.";
            mcs_password_reset_confirmation = "Um e-mail está sendo enviado para o endereço de e-mail enviado, Ao visitar o link enviado neste e-mail para redefinir a senha.";
            mcs_recovery_fail_no_mail   = "Recuperação de senha falhar, esta conta não ligam e-mail";
            mcs_recovery_fail_invalid_link = "Recuperação de senha falhar, por favor, certifique-se o conteúdo do link ou recuperação novamente.";
            mcs_recovery_ok_login       = "Sucesso de recuperação de senha, entrar agora.";
            mcs_active_ok_login         = "Conta sucesso ativa. Entrar agora.";
            mcs_active_fail_invalid_link = "Conta ativa falhar. Por favor, certifique-se o conteúdo do link ou Registe-se novamente.";
            mcs_login_fail_inactive     = "A conta está inativa. Por favor, siga o conteúdo do e-mail ativo para ativo.";
            mcs_sign_up_again           = "Registe-se novamente";
            mcs_press_start_talk        = "Pressione para falar";
            mcs_release_stop_talk       = "Solte para parar";
            mcs_delete_device           = "excluir dispositivo";
            mcs_success_removed_equipment = "Excluir dispositivo com sucesso";
            mcs_remove_equipment_failure = "Remova a falha do equipamento";
            mcs_device_busy             = "O dispositivo está ocupado agora";
            mcs_keep_testing            = "continuar teste";
            mcs_notify_tone             = "toque de notificação";
            mcs_float_video             = "Ativar vídeo flutuante";
            mcs_float_position          = "Posição vídeo flutuante";
            mcs_video_resolution        = "resolução de vídeo";
            mcs_float_resolution        = "Resolução de vídeo flutuante";
            mcs_top_left                = "Top esquerda";
            mcs_top_right               = "Em cima à direita";
            mcs_bottom_left             = "Embaixo à esquerda";
            mcs_bottom_right            = "Em baixo à direita";
            mcs_action_next             = "próximo";
            mcs_action_cancel           = "cancelar";
            mcs_action_retry            = "tentar novamente";
            mcs_action_add              = "adicionar";
            mcs_action_apply            = "aplicação";
            mcs_action_config           = "configuração";
            mcs_action_skip             = "pular";
            mcs_action_ok               = "Ok";
            mcs_action_add_device       = "Adicionar dispositivo";
            mcs_action_modify_password  = "alterar senha";
            mcs_action_config_wifi      = "Definir Wi-Fi";
            mcs_state_connect_device    = "Conexão de dispositivos";
            mcs_state_connect_device_fail = "Ligue a falha de equipamento";
            mcs_state_wait_device_online = "À espera de dispositivo para estar on-line";
            mcs_state_device_online     = "On-line";
            mcs_state_success           = "sucesso";
            mcs_state_add_device_success = "Adicionar sucesso Dispositivo";
            mcs_state_add_device_fail   = "Adicionar uma falha do dispositivo";
            mcs_state_modify_pass_success = "Senha alterada com sucesso";
            mcs_state_modify_pass_fail  = "Alteração de senha falha";
            mcs_state_config_wifi_success = "Definir sucesso Wi-Fi";
            mcs_state_config_wifi_fail  = "Erro de conexão";
            mcs_state_connecting_to     = "Conectando-se a";
            mcs_network_connect_type    = "O dispositivo não está on-line, você garante que o dispositivo é ligado, e, em seguida, selecione Conexão de rede:";
            mcs_prompt_modify_passwd    = "Sua senha de dispositivo é muito simples, por favor modifique a senha. Nova senha não deve ser inferior a seis caracteres.";
            mcs_prompt_config_wifi      = "O dispositivo ainda não está conectado ao seu WiFi, configure sua rede Wi-Fi.";
            mcs_step1_check_connect     = "Passo 1 : Conecte o roteador e uso da câmera cabo de rede.";
            mcs_first_step_ethernet_connect = "Passo 1: Conecte uma extremidade de um cabo de rede para conectar ao roteador ea outra extremidade da porta de rede dispositivo de acesso.";
            mcs_step2_check_connect     = "Passo 2 : Ligue a câmera.";
            mcs_second_step_ethernet_connect = "Passo 2 : O poder em seu dispositivo, inicie o dispositivo.";
            mcs_hint_check_network      = "Nota : a câmera demora cerca de 50 segundos para iniciar, após a inicialização estiver concluída, LED acende três segundo a luz verde pisca três vezes, o que significa que todas as câmeras foi em linha, o assistente vai entrar automaticamente na próxima etapa.";
            mcs_the_end                 = "a extremidade";
            mcs_hint_password_expired   = "Senha expirou, por favor re-adicionar o dispositivo";
            mcs_hint_remove_ethernet    = "Observação : Wi-Fi funcionando corretamente, agora você pode desconectar o cabo de rede.";
            mcs_ip_format_incorrect     = "Formato de endereço IP está incorreto";
            mcs_login_sucess            = "login bem-sucedido";
            mcs_donot_remind            = "não lembrar";
            mcs_clear_cache_signout_hint = "Limpar o cache sairá entrar novamente para continuar?";
            mcs_devlist_adddev_hint     = "Clique aqui para adicionar equipamentos";
            mcs_devlist_menu_hint       = "Clique aqui para definir a resolução";
            mcs_update_failed           = "Atualização falhou";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Local";
            mcs_set_npapi               = "Se o plugin foi instalado, visite \'chrome://flags/#enable-npapi\', permitir NPAPI, ";
            mcs_set_win32k              = "visita \'chrome://flags/#enable-win32k-renderer-lockdown\', win32k deficientes renderizador lockdown,";
            mcs_restart_browser         = "Reinicie o navegador";
            mcs_download_location       = "Localização da transferência";
            mcs_Networking_mode         = "modo de rede";
            mcs_wifi_intelligent_configuration = "conexão Wi-Fi";
            mcs_ethernet_configuration  = "conexão Ethernet";
            mcs_wifi_connect            = "conexão";
            mcs_hard_disk               = "disco rígido";
            mcs_wifi_is_connection      = "Ligar Por favor, aguarde...";
            mcs_wifi_intelligent_configuration_setup_ailure = "falha de configuração de configuração inteligente wi-fi";
            mcs_box_list                = "caixa de listagem";
            mcs_repair_disk_prompt      = "Disco de reparação pode perder alguns dados, continuar?";
            mcs_format_disk_prompt      = "A formatação do disco irá eliminar todos os dados ,continuar?";
            mcs_scheduled_alerting      = "Programa de Armar";
            mcs_scheduled_alerting_one  = "Programa de Armar 1";
            mcs_scheduled_alerting_two  = "Programa de Armar 2";
            mcs_scheduled_alerting_three = "Programa de Armar 3";
            mcs_scheduled_alerting_four = "Programa de Armar 4";
            mcs_wifi_config_cancle      = "configuração de Wi-Fi cancelar";
            mcs_wifi_config_prepare     = "Pré-requisitos wi-fi";
            mcs_wifi_config_first       = "Os dispositivos e os telefones celulares e routers mantido na gama de 1 m";
            mcs_wifi_config_second      = "Ao configurar Wi-Fi, o dispositivo não pode conectar o cabo de rede";
            mcs_wifi_config_third       = "Pressione o orifício de reposição de RESET um segundo e solte";
            mcs_wifi_config_success     = "configuração de sucesso";
            mcs_wifi_config_failure     = "configuração falhou";
            mcs_failure_prompt          = "Por favor, tente novamente ou voltar a verificar WIFI senha é digitada corretamente";
            mcs_display_password        = "Mostrar senha";
            mcs_action_smart_config_wifi = "Assistente de Configuração";
            mcs_wifi_invalid            = "Sua rede está não WiFi, por favor conectar WiFi!";
            mcs_phone_not_connect_wifi  = "Rede Wi-Fi não está conectado";
            mcs_prompt_check_connection = "Sua câmera não é on-line, verifique a conexão de linha da câmera.";
            mcs_wifi_cfg_ready          = "Pronto";
            mcs_reset_complete          = "reposição está concluída";
            mcs_how_to_restore_factory_settings = "Como restaurar as configurações de fábrica: usar o pino de reset pressionando o orifício RESET na parte inferior da câmera por mais de 10 segundos";
            mcs_forgetpass_action_wizard = "Pressione RESET Repor buraco 10 segundos após o lançamento, o dispositivo será reiniciado automaticamente redefine a senha para o administrador";
            mcs_prompt_check_device_connection = "Seu aparelho não está on-line, verifique a fiação para conectar o dispositivo";
            mcs_input_wifi_name         = "Por favor coloque o nome wi-fi";
            mcs_action_previous         = "anterior";
            mcs_io_alert_range_hint     = "IO tempo de alerta deve ser menos de 60 segundos";
            mcs_io_alert_time           = "IO hora do alarme(min)";
            mcs_smart                   = "inteligente";
            mcs_plan                    = "plano";
            mcs_mute                    = "mudo";
            mcs_wind_speed              = "velocidade do vento";
            mcs_one                     = "uma engrenagem";
            mcs_two                     = "dois engrenagem";
            mcs_three                   = "Three gear";
            mcs_purify_mode             = "modo de purificar";
            mcs_video_list              = "lista de vídeos";
            mcs_wifi_cfg_restore_factory_settings = "Segure o telemóvel perto de dispositivo, se o dispositivo não configurou WiFi, pressionar o orifício RESET por um segundo, em seguida, liberar, o dispositivo irá restaurar as configurações de fábrica e reiniciar automaticamente";
            mcs_mask_settings           = "configurações de máscara";
            mcs_notification_settings   = "configurações de máscara";
            mcs_alarm_settings          = "Os ajustes de alarme";
            mcs_motion_detection        = "Detector De Movimento";
            mcs_io_alarm                = "S Alarme /";
            mcs_connect_status          = "status da conexão";
            mcs_motion_notification     = "Alertas e notificações";
            mcs_device_connected        = "Dispositivo está conectado";
            mcs_start_spray             = "Comece a pulverização?";
            mcs_available_network       = "A rede não está disponível";
            mcs_select_wifi_wizard      = "Por favor, selecione rede WiFi em primeiro lugar";
            mcs_input_wifi_password     = "Entrada de senha WiFi";
            mcs_device_admin_password   = "Dispositivo senha de administrador";
            mcs_device_guest_password   = "Dispositivo senha hóspede";
            mcs_user_admin_password     = "Senha de administrador do usuário";
            mcs_user_guest_password     = "Usuário convidado senha";
            mcs_save_network_set        = "Salve conjunto da rede ea senha";
            mcs_nickname_not_set        = "Camera apelido não está definido";
            mcs_current_wifi            = "Atual Wi-Fi";
            mcs_current_password_strength = "A força da senha atual";
            mcs_new_password_strength   = "Força nova senha";
            mcs_needs_to_open_the_DHCP  = "Seu roteador precisa abrir o DHCP (obter automaticamente IP) função, se a tentativa for bem-sucedida, entre em contato com o administrador.";
            mcs_picture                 = "quadro";
            mcs_quality                 = "qualidade";
            mcs_size                    = "tamanho";
            mcs_guest_login             = "Hóspede Login";
            mcs_audio_and_video         = "Áudio / Vídeo";
            mcs_volume                  = "O volume";
            mcs_smooth                  = "suave";
            mcs_clear                   = "claro";
            mcs_handsfree               = "Handsfree";
            mcs_headphone               = "Headphone";
            mcs_my                      = "meu";
            mcs_customer_service        = "atendimento ao Cliente";
            mcs_firefox_flash_uninstall = "Seu plugin flash não está disponível, a solução consulte https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "ferramenta";
            mcs_plug_load               = "plugins de carga";
            mcs_plug_load_refuse        = "No cargue plugins";
            mcs_plug_load_auto          = "automático";
            mcs_option                  = "Opciones";
            mcs_option_ok               = "determinar";
            mcs_voice_call_fails        = "Chamada de voz falhar, verifique a rede";
            mcs_umounted_prompt         = "Se desmontar?";
            mcs_signup_prompt           = "De novo aqui?";
            mcs_wifi_connect_sucess_prompt = "Nota: O WiFi funciona normalmente, Agora você Pode desligar a rede.";
            mcs_manual_input_prompt     = "Dispositivo de Entrada manual.";
            mcs_qrscan_prompt           = "Você não permite que o aplicativo acesse a câmera do iPhone, por favor, a configuração de privacidade ‘’ - ‘’ - \'\', a função de câmera para encontrar o Nome do aplicativo Vimtag \'\' FOI alterado.";
            mcs_select_network_style    = "Escolha o modo de conexão de rede:";
            mcs_push                    = "anúncio";
            mcs_connect_power_prompt    = "Nota: O dispositivo não online, certifique - se de que a ligação de Energia elétrica";
            mcs_fail_microphone         = "Não consigo acessar o microfone";
            mcs_microphone_prompt       = "Você não deve permitir que este aplicativo acesse seu microfone, no \'set\' iPhone - a \\’privacidade’ - recurso de \\’microfone’, encontrar o nome de aplicação »Vimtag \'a ser modificado";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Apagar...";
            mcs_event                   = "O evento";
            mcs_one_hour                = "UMA Hora";
            mcs_half_hour               = "De MEIA EM MEIA Hora";
            mcs_five_min                = "Cinco minutos";
            mcs_category                = "Categorias de";
            mcs_time_length             = "A Muito tempo";
            mcs_new                     = "Novo";
            mcs_week_setting_prompt     = "- não Pode ser vazio";
            mcs_time_setting_prompt     = "O tempo não Pode ser vazio";
            mcs_today                   = "Hoje";
            mcs_wifi_config_prepare     = "Pré-requisitos wi-fi";
            mcs_wifi_password           = "wifi senha";
            mcs_register_prompt         = "Por favor, primeiro registo de conta!";
            mcs_click_login             = "Clique EM login";
            mcs_not_login_prompt        = "Você não está logado, por favor clique EM Entrar!";
            mcs_product_presentation    = "Home page";
            mcs_help_feedback           = "Ajuda";
            mcs_help_information        = "Ajuda";
            mcs_feedback                = "Feedback";
            mcs_connect_wifi_prompt     = "A conexão wi-fi";
            mcs_cloud                   = "atualizar mais tarde";
            mcs_demo                    = "Demo";
            mcs_shortest                = "O Mais curto";
            mcs_no_history              = "Não há histórico";
            mcs_download_pc_client      = "Clique para baixar o cliente do PC";
            mcs_accounts_bind_email_exist = "A conta de caixa de correio está ligado";
            mcs_accounts_bind_email_busy = "A caixa de correio está ligado a conta";
        }/* pt */
        else if(lang == "it")
        {
            mcs_name                    = "Nome";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Nome";
            mcs_old_nick                = "Nickname";
            mcs_linked                  = "Collegato";
            mcs_sign_in                 = "Accedi";
            mcs_back                    = "Indietro";
            mcs_add                     = "Aggiungi";
            mcs_add_device              = "Aggiungi dispositivi";
            mcs_device_existed          = "Dispositivo già esistente";
            mcs_cancel                  = "Annulla";
            mcs_exit                    = "Esci";
            mcs_remember_password       = "Ricorda la password";
            mcs_password_remembered     = "Password salvata";
            mcs_sign_ining              = "Accesso in corso...";
            mcs_cloud_server            = "Cloud server";
            mcs_input_device_id         = "Inserire l’ID del dispositivo";
            mcs_input_username          = "Inserisci il nome utente";
            mcs_input_email_addr        = "Inserire l’indirizzo Email";
            mcs_email_address           = "indirizzo e-mail";
            mcs_email                   = "cassetta della posta";
            mcs_binding                 = "legame";
            mcs_binding_email           = "casella e-mail binding";
            mcs_binding_send_prompt     = "casella e-mail binding";
            mcs_binding_email_prompt    = "casella e-mail binding";
            mcs_input_password          = "Inserisci la password";
            mcs_access_server_failed    = "Accesso al server fallito";
            mcs_device_offline          = "Dispositivo disconnesso";
            mcs_invalid_password        = "Password non valida";
            mcs_invalid_dev             = "Dispositivo inesistente";
            mcs_login_faided            = "Accesso non riuscito";
            mcs_invalid_qrcode          = "Codice QR non valido";
            mcs_please_input_username   = "Inserire il nome utente";
            mcs_please_input_password   = "Inserisci la password";
            mcs_qrcode_scan_hint        = "Effettuare lo scan del codice QR";
            mcs_device_list_empty       = "Elenco dispositivi vuoto";
            mcs_record_list_is_empty    = "Elenco registrazioni vuoto";
            mcs_password_expired        = "Password scaduta";
            mcs_set_video_size          = "Imposta Risoluzione:";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Auto";
            mcs_normal_640x360          = "Normale [640x360]";
            mcs_half_320x180            = "Media [320x180]";
            mcs_small_160x90            = "Minima [160x90]";
            mcs_play                    = "Live";
            mcs_settings                = "Impostazioni";
            mcs_messages                = "Playback";
            mcs_alarm                   = "Allarme";
            mcs_delete                  = "Elimina";
            mcs_delete_camera           = "Elimina Dispositivo";
            mcs_apply                   = "Applica";
            mcs_speed                   = "Velocità";
            mcs_others                  = "Avanzate";
            mcs_audio                   = "Audio";
            mcs_speaker                 = "Altoparlante";
            mcs_mic                     = "Microfono";
            mcs_power_frequency         = "Frequenza di alimentazione";
            mcs_online_upgrade          = "Aggiornamento online";
            mcs_restore_the_factory_settings = "Ripristina impostazioni di fabbrica";
            mcs_restore                 = "Ripristino";
            mcs_restore_camera          = "Riavvio dispositivo";
            mcs_start_upgrade           = "Avvia l\'aggiornamento";
            mcs_system                  = "Sistema";
            mcs_system_settings         = "Impostazioni sistema";
            mcs_online                  = "Dispositivo OnLine";
            mcs_offline                 = "Dispositivo OffLine";
            mcs_query                   = "Consultazione";
            mcs_begin_time              = "Inizio Ora";
            mcs_end_time                = "Fine Ora";
            mcs_mode                    = "Modalità";
            mcs_opened                  = "Aperto";
            mcs_high                    = "Alto";
            mcs_middle                  = "Medio";
            mcs_low                     = "Basso";
            mcs_io_alert_input          = "Ingresso I/O";
            mcs_io_alert_output         = "Uscita I/O";
            mcs_normally_open           = "Normalmente Aperto";
            mcs_normally_close          = "Normalmente chiuso";
            mcs_motion_detection_sensitivity = "Sensibilità Motion";
            mcs_daytime                 = "Giorno";
            mcs_night                   = "Notte";
            mcs_sdcord                  = "Memoria SD";
            mcs_storage_device          = "Dispositivo di archiviazione";
            mcs_set_mask                = "Imposta maschera";
            mcs_status                  = "Stato";
            mcs_capacity                = "Capacità";
            mcs_usage                   = "Spazio Utilizzato";
            mcs_format                  = "Formatta";
            mcs_repair                  = "Correggi";
            mcs_formating               = "Formattazione in corso";
            mcs_repairing               = "Correzione in corso";
            mcs_mounted                 = "Inserita";
            mcs_unmounted               = "Disinserita";
            mcs_mount                   = "Inserire";
            mcs_unmount                 = "Disinserire";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Attivato";
            mcs_mac_address             = "Indirizzo MAC";
            mcs_network_status          = "Stato della Rete";
            mcs_wifi_mode               = "Modalità Wi-Fi";
            mcs_client                  = "Client";
            mcs_ap                      = "Access Point";
            mcs_start_address           = "Indirizzo Iniziale";
            mcs_end_address             = "Indirizzo Finale";
            mcs_gateway                 = "Gateway";
            mcs_select_network          = "Seleziona Rete";
            mcs_dhcp_ip                 = "Usa IP DHCP";
            mcs_dhcp_dns                = "Usa DNS DHCP";
            mcs_ip_address              = "Indirizzo IP";
            mcs_network_mask            = "Maschera Rete";
            mcs_input_secondary_dns     = "Inserire un DNS secondario";
            mcs_secondary_dns           = "DNS secondario";
            mcs_input_dns               = "Inserire il DNS";
            mcs_input_alternate_dns     = "Inserire DNS alternativo";
            mcs_input_ip                = "Inserire Indirizzo IP";
            mcs_input_gateway           = "Inserire Gateway";
            mcs_input_network_mask      = "Inserire Maschera di rete";
            mcs_wifi_list               = "Lista delle reti WiFi";
            mcs_display_date            = "Visualizza data";
            mcs_date_format             = "Formato data";
            mcs_display_time            = "Visualizza Ora";
            mcs_time_format             = "Formato Ora";
            mcs_24_hour                 = "24 ore";
            mcs_12_hour                 = "12 ore";
            mcs_display_weeks           = "Visualizza settimana";
            mcs_date_time               = "Data/Ora";
            mcs_set_time                = "Imposta Ora";
            mcs_set_week                = "Imposta settimana";
            mcs_stream                  = "Flusso dati";
            mcs_encode                  = "Codifica";
            mcs_resolution              = "Risoluzione";
            mcs_frame_fate              = "Frame Rate (FPS)";
            mcs_maximum_bitrate         = "Bit rate massimo";
            mcs_minimum_bitrate         = "Bit rate minimo";
            mcs_i_frame_interval        = "Intervallo I-Frame";
            mcs_video                   = "Video";
            mcs_sampling_rate           = "Frequenza di campionamento(kHz)";
            mcs_nickname                = "Nickname";
            mcs_old_password            = "Vecchia password";
            mcs_confirm_password        = "Conferma la password";
            mcs_modify_password         = "Modifica Password";
            mcs_password                = "Password";
            mcs_admin_password          = "Password Admin";
            mcs_guest_password          = "Inserisci la password";
            mcs_product_info            = "Info. prodotto";
            mcs_software_version        = "Versione software";
            mcs_device_id               = "ID Dispositivo";
            mcs_operation               = "Operazione";
            mcs_record                  = "Registra";
            mcs_record_2                = "Playback";
            mcs_upgrade_now             = "Aggiorna ora";
            mcs_upgrading               = "Aggiornamento in corso";
            mcs_already_latest_version  = "Versione già aggiornata";
            mcs_sensitivty              = "Sensibilità";
            mcs_user_defined            = "Utente-definito";
            mcs_time                    = "Ora";
            mcs_date                    = "Data";
            mcs_finish                  = "Terminato";
            mcs_fail                    = "Fallito";
            mcs_motion                  = "Motion";
            mcs_start                   = "Iniziare";
            mcs_talk                    = "Parla";
            mcs_password_input_inconsistent = "Password inserita non compatibile";
            mcs_input_6_to_20_litters   = "Inserire 6-20 tra lettere (a-z, A-Z) o numeri (0-9)";
            mcs_user_letter_range_hint  = "Il nome utente deve essere di 6-20 lettere (a - z, A - Z) o numeri (0-9)";
            mcs_password_range_hint     = "La password deve essere 6-20 numeri e lettere";
            mcs_begin_with_the_letters  = "Iniziare con le lettere";
            mcs_sign_up                 = "Registrati";
            mcs_sign_up_failed          = "Registrazione Fallita";
            mcs_successful_sign_up      = "Registrazione eseguita";
            mcs_are_you_sure_delete     = "Confermare l\\’eliminazione?";
            mcs_failed_to_set_the       = "Impostazione non riuscita";
            mcs_set_successfully        = "Impostazione eseguita";
            mcs_downloading             = "Scaricamento in corso";
            mcs_wrote                   = "Scritto";
            mcs_visit_again_later       = "Prego prova a rientrare successivamente";
            mcs_restart_failed          = "Riavvio fallito";
            mcs_upgrade_failed          = "Aggiornamento Fallito";
            mcs_connnected              = "Connesso";
            mcs_connnected_to           = "Connesso a";
            mcs_not_select              = "Non selezionato";
            mcs_message_list            = "Ricerca Registrazioni";
            mcs_saved_password          = "Password salvata";
            mcs_alert                   = "Allarme";
            mcs_no_record               = "No Registrazione";
            mcs_new_about               = "Nuovo : Info";
            mcs_device                  = "Dispositivo";
            mcs_config                  = "Configurazione";
            mcs_change_password_failed  = "Modifica della password Fallita";
            mcs_do_you_want_restart     = "Vuoi riavviare?";
            mcs_do_you_want_restore     = "Vuoi ripristinare le impostazioni di fabbrica?";
            mcs_do_you_want_upgrade     = "Vuoi aggiornare?";
            mcs_load_end                = "Termine caricamento video";
            mcs_loading                 = "Caricamento in corso...";
            mcs_down_refresh            = "Scorri in basso per aggiornare";
            mcs_release_refresh         = "Aggiorna Release";
            mcs_refreshing              = "Aggiornamento in corso…";
            mcs_release_then_loading_data_hint = "Release da caricare";
            mcs_pull_refresh_hint       = "Scorri per aggiornare";
            mcs_restarting              = "Riavvio in corso";
            mcs_upgraded_time           = "Tempo di aggiornamento : ";
            mcs_done                    = "Completato";
            mcs_playback                = "Playback";
            mcs_i_o_alarm               = "Allarme I/O";
            mcs_alarm_action            = "Azioni di Allarme";
            mcs_alarm_sources           = "Sorgenti di allarme";
            mcs_io_output               = "Uscita Allarme ";
            mcs_snapshots               = "Screenshots";
            mcs_snapshot                = "Screenshot";
            mcs_snapshot_interval       = "Intervallo (i) screenshot";
            mcs_pre_record_length       = "Tempo di Pre-rec(s)";
            mcs_nick_range_hint         = "Il nickname deve contenere non più di 20 numeri e lettere";
            mcs_save                    = "Salva";
            mcs_close                   = "Chiudi";
            mcs_snapshoting             = "Screenshot in corso";
            mcs_snapshot_failed         = "Screenshot non riuscita";
            mcs_record_failed           = "Registrazione Fallita";
            mcs_saved_successfully      = "Salvataggio eseguito";
            mcs_save_failed             = "Salvataggio Fallito";
            mcs_restart_to_take_effect  = "Riavviare per rendere effettive le modifiche";
            mcs_please_allow_access_album = "Autorizzare MIPC per accedere alla Galleria delle immagini catturate";
            mcs_ios_privacy_setting_for_photo_prompt = "Puoi trovare il software MIPC nell\'iPhone \"Impostazioni->Privacy->Foto\", e modificarne le impostazioni.";
            mcs_please_allow_access_camera = "Autorizzare MIPC per accedere alla tua fotocamera";
            mcs_ios_privacy_setting_for_camera_prompt = "Puoi trovare il software MIPC nell\'iPhone \"Impostazioni->Privacy->Fotocamera\", e modificarne le impostazioni";
            mcs_busy_when_write         = "Occupato in scrittura";
            mcs_unknown_error           = "Errore sconosciuto";
            mcs_i_know                  = "Sono Consapevole!";
            mcs_segment                 = "Segmento";
            mcs_please_relogin          = "Riaccedere, per favore";
            mcs_change_password_succeed = "Modifica della password effettuata";
            mcs_upgrade_to_ver          = "Aggiorna alla versione nuova";
            mcs_restore_failed          = "Ripristino Fallito";
            mcs_please_restart          = "Riavviare";
            mcs_keep_network_settings   = "Tenerere le correnti impostazioni di rete e la password";
            mcs_not_connected           = "Non connesso";
            mcs_sdcard_not_ready        = "Scheda SD non pronta!";
            mcs_device_not_exist        = "Dispositivo non esistente";
            mcs_disable                 = "Disabilita";
            mcs_to_determine_the        = "Per determinare il";
            mcs_alert_on                = "Attiva allarme";
            mcs_alert_off               = "Disabilita l\\’allarme";
            mcs_alert_onoff             = "Allarme on/off";
            mcs_monday                  = "Lunedì";
            mcs_tuesday                 = "Martedì";
            mcs_wednesday               = "Mercoledì";
            mcs_thursday                = "Giovedì";
            mcs_friday                  = "Venerdì";
            mcs_saturday                = "Sabato";
            mcs_sunday                  = "Domenica";
            mcs_mon                     = "Lun";
            mcs_tue                     = "Mar";
            mcs_wed                     = "Mer";
            mcs_thu                     = "Gio";
            mcs_fri                     = "Ven";
            mcs_sat                     = "Sab";
            mcs_sun                     = "Dom";
            mcs_scheduled_recording     = "Programma Registrazione";
            mcs_schedule                = "Programmazione";
            mcs_scheduled_recording_status = "Stato della registrazione programmata";
            mcs_folding                 = "Riduci";
            mcs_unfolding               = "Espandi";
            mcs_end_time_should_lt_begin = "Il tempo di fine deve essere superiore a quello di inizio";
            mcs_recording               = "In registrazione";
            mcs_prerecord_interval_range_hint = "L\\’intervallo di pre-rec deve essere meno 6 secondi";
            mcs_snapshot_interval_range_hint = "L\\’intervallo dell\\’immagine catturata deve essere 0 oppure maggiore di 60";
            mcs_not_ready               = "Non pronto";
            mcs_availablesize           = "Spazio disponibile";
            mcs_reboot                  = "Riavvia";
            mcs_alerter                 = "Abilita allarme";
            mcs_pir                     = "PIR";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Codificatore";
            mcs_ok                      = "OK";
            mcs_fault                   = "Errore";
            mcs_sensor_status           = "Stato del sensore";
            mcs_about                   = "Info";
            mcs_reset_now               = "Riavvia ora";
            mcs_reset_later             = "Riavvia più tardi";
            mcs_prompt                  = "Uscita";
            mcs_select                  = "Seleziona";
            mcs_available_netword       = "La rete non è disponibile, vuoi configurarla?";
            mcs_request_send            = "Richiesta in corso";
            mcs_blank_device_id         = "L\\’ID del dispositivo non può essere vuoto";
            mcs_blank_username          = "Il nome dell’utente non può essere vuoto";
            mcs_blank_password          = "La password non può essere vuota";
            mcs_exist_user              = "Utente già esistente";
            mcs_invalid_user            = "Nome dell’utente non valido";
            mcs_invalid_email_addr      = "Email non valida";
            mcs_system_err              = "Errore di sistema";
            mcs_exceed_device           = "Gli utenti del dispositivo sono superiori al limite consentito";
            mcs_continue                = "Continua";
            mcs_prompt_exit             = "Sei sicuro di voler uscire?";
            mcs_device_list             = "Elenco Dispositivi";
            mcs_no_sdcard               = "Nessuna scheda SD presente";
            mcs_no_hard_disk            = "Nessun Hard Disk";
            mcs_show_more               = "Mostra di più";
            mcs_shotsnop_exists         = "Immagine già esistente";
            mcs_input_nick              = "Inserire il nome del dispositivo";
            mcs_nick_not_empty          = "Il campo del nome dispositivo non può essere vuoto";
            mcs_input_new_pass          = "Inserisci la nuova password";
            mcs_input_new_pass_again    = "Conferma la nuova password";
            mcs_new_password            = "Nuova password";
            mcs_modify_network_prompt   = "La modifica dei parametri potrebbe causare la disconnessione della rete, continuare?";
            mcs_wifi_disable_prompt     = "Wi-Fi Disabilitato, continuare?";
            mcs_eth_disable_prompt      = "Ethernet Disabilitata, continuare?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "DHCP";
            mcs_manually_set            = "Statico";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "DNS primario";
            mcs_client_mode             = "Modalità Client";
            mcs_adhoc_mode              = "Modalita Ad Hoc";
            mcs_connect_fail            = "Connessione fallita";
            mcs_dhcp_server             = "Server DHCP";
            mcs_display_text            = "Visulizza testo";
            mcs_repair_prompt           = "La riparazione della scheda SD potrebbe causare la perdita di dati, continuare?";
            mcs_format_prompt           = "La formattazione cancellerà tutti i dati sulla scheda SD, continuare?";
            mcs_mount_prompt            = "Inserire la scheda SD, continuare?";
            mcs_umount_prompt           = "Il video e le foto non possono essere salvati dopo aver scollegato la scheda SD, continuare?";
            mcs_sdcard_reset            = "Impostazione effettuata. Riavvia la Telecamera per rendere effettive le modifiche, continuare?";
            mcs_sdcard_repairing        = "Riparazione in corso attendere il riavvio";
            mcs_sdcard_formating        = "Formattazione in corso attendere il riavvio";
            mcs_sdcard_umount           = "Non caricata";
            mcs_valid                   = "Valido";
            mcs_io                      = "Allarme I/O";
            mcs_input                   = "Ingresso";
            mcs_outinput                = "Uscita";
            mcs_prompt_alert_on         = "Avviso accesso, continuare？";
            mcs_auto_sync_date_time     = "Sincronizzazione automatica";
            mcs_alarm_record            = "Registrazioni di allarme";
            mcs_username                = "Nome utente";
            mcs_re_enter_the_password   = "Conferma la Password";
            mcs_remember_me             = "Rimani Connesso";
            mcs_home                    = "Home";
            mcs_install_the_plug        = "Installa plug in";
            mcs_install_the_video_plug  = "Installa il video plug in";
            mcs_install_now             = "Installare ora?";
            mcs_temporarily_installed_use_ordinary_video = "No, installa più tardi";
            mcs_brightness              = "Luminosità";
            mcs_contrast                = "Contrasto";
            mcs_color_saturation        = "Saturazione";
            mcs_sharpness               = "Nitidezza";
            mcs_duration                = "Durata";
            mcs_index                   = "Indice";
            mcs_remark                  = "Nota";
            mcs_media_stream            = "Media";
            mcs_server                  = "Server";
            mcs_media_transfer          = "Trasmissione Video";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Produttore";
            mcs_model                   = "Modello";
            mcs_plugin_version          = "Versione plug in";
            mcs_network_interface       = "Interfaccia di rete";
            mcs_transfer_protocol       = "Protocollo di trasmissione";
            mcs_year                    = "Anno";
            mcs_month                   = "Mese";
            mcs_day                     = "Giorno";
            mcs_hour                    = "Ora";
            mcs_minute                  = "Minuto";
            mcs_second                  = "Secondo";
            mcs_millisec                = "Millisecondo";
            mcs_ntp                     = "Server Orario";
            mcs_upload_upgrade          = "Carica aggiornamento";
            mcs_stop                    = "Stop";
            mcs_info_rewind             = "Riavvolgi";
            mcs_fast_forward            = "Avanzamento rapido";
            mcs_previous_frame          = "Frame precedente";
            mcs_next_frame              = "Frame successivo";
            mcs_record_audio            = "Registra Audio";
            mcs_week                    = "Settimana";
            mcs_all                     = "Tutto";
            mcs_id                      = "ID";
            mcs_select_all              = "Seleziona tutto";
            mcs_call                    = "Chiama";
            mcs_activation              = "Attivazione";
            mcs_caption                 = "Carica file";
            mcs_alarm_device            = "Sensibilità Motion";
            mcs_not_installed           = "Non installato";
            mcs_join_us_now             = "Unitevi a noi ora";
            mcs_reconnect_please_wait   = "Riconnessione in corso, attendere";
            mcs_erasing                 = "Eliminazione in corso";
            mcs_writing                 = "Scrittura in corso, attendere";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Nuova versione disponibile";
            mcs_equipment_flip          = "Capovolgi";
            mcs_device_status           = "Stato Dispositivo";
            mcs_audio_setting           = "Impostazione Audio";
            mcs_nick_modify             = "Modifica Nome Camera";
            mcs_ready                   = "Pronto";
            mcs_full                    = "Pieno";
            mcs_connecting              = "Connessione in corso, attendere";
            mcs_message_buffering       = "Buffering Messaggi in corso, attendere";
            mcs_upgrade_finish          = "Aggiornamento Completato";
            mcs_image                   = "Immagine";
            mcs_bar                     = "Registrazioni";
            mcs_init                    = "Inizializza";
            mcs_confirm_new_password    = "Conferma nuova password";
            mcs_continue_switch_wireless_network = "Il cambio rete potrebbe causare un\\’interruzione, continuare?";
            mcs_restore_factory_settings_prompt = "Il dispositivo si riavvierà dopo il ripristino dei parametri di fabbrica, continuare?";
            mcs_username_does_not_exis  = "Nome utente inesistente";
            mcs_username_already_exists = "Nome utente già esistente";
            mcs_successful_whether_login = "Registrazione effettuata correttamente, effettuare l\\’accesso ora?";
            mcs_username_demand         = "6-20 lettere o numeri con una lettera iniziale";
            mcs_the_password_is_empty   = "La password è vuota";
            mcs_password_demand         = "6-20 lettere o numeri con una lettera iniziale";
            mcs_password_empty          = "Ridigitare la Password";
            mcs_two_password_input_inconsistent = "Le password inserite non corrispondono";
            mcs_the_user_name_is_empty  = "Il nome utente è vuoto";
            mcs_upgrade_to_the_latest_version = "Aggiorna all\\’ultima versione";
            mcs_subnet_mask_wrong_format = "Errato il formato di maschera della rete";
            mcs_upgrade_successful_restart_to_take_effect = "Aggiornamento eseguito correttamente, riavviare il dispositivo.";
            mcs_need_to_restart_the_camera_to_take_effect = "Riavviare il dispositivo per rendere effettive le modifiche";
            mcs_not_allowed_close_two_network_cards = "La rete Ethernet e la rete Wi-Fi non possono essere disabilitate contemporaneamente";
            mcs_modified_successfully   = "Modifica eseguita correttamente";
            mcs_connection_successfully = "Connessione Eseguita";
            mcs_connection_is_interrupted = "Connessione interrotta";
            mcs_devices_in_the_account_overrun = "Il numero dei dispositivi è superiore al limite max. consentito";
            mcs_format_error            = "Errore Formattazione";
            mcs_change                  = "Cambia";
            mcs_refresh                 = "Aggiorna";
            mcs_connect                 = "Connetti";
            mcs_upgrade                 = "Aggiorna";
            mcs_activate                = "Attiva";
            mcs_filter                  = "Filtro";
            mcs_reset                   = "Reset";
            mcs_prompt_alert_off        = "Disabilitare l\\’allarme, continuare?";
            mcs_invalid_server          = "Server Orario non corretto";
            mcs_upgrade_prompt          = "Aggiornare il software del dispositivo?";
            mcs_restart_prompt          = "Riavviare il dispositivo?";
            mcs_repeat                  = "Ripeti";
            mcs_scheduled_one           = "Regist. Programmata 1";
            mcs_scheduled_two           = "Regist. Programmata 2";
            mcs_scheduled_three         = "Regist. Programmata 3";
            mcs_scheduled_four          = "Regist. Programmata 4";
            mcs_more                    = "Di più";
            mcs_leave                   = "Rilascia per caricare";
            mcs_qrcode_scan             = "Scansione del codice QR";
            mcs_inserted                = "Inserito";
            mcs_removed                 = "Rimosso";
            mcs_upgrade_init            = "Avvia Aggiornamento";
            mcs_upgrade_download        = "Scarica Aggiornamento";
            mcs_check                   = "Controlla Aggiornamento";
            mcs_audio_encoder_config    = "Codifica Audio";
            mcs_video_codec             = "Codifica Video";
            mcs_download                = "Download";
            mcs_client_download         = "Download Client";
            mcs_for_more_clarity_smooth_video_experience = "Per una esperienza di video brillante e nitida";
            mcs_network                 = "Rete";
            mcs_mobile_client_download  = "Download Client Mobile";
            mcs_readonly                = "Sola lettura";
            mcs_please_exit_and_relogin = "si prega di uscire e di rieffettuare l\\’accesso";
            mcs_add_device_failed       = "Aggiunta del dispositivo fallita";
            mcs_set_password            = "Imposta password";
            mcs_7x24_hours              = "7x24(ore)";
            mcs_motion_alert            = "Allarme Motion";
            mcs_mtalt                   = "%@ : Allarme Motion";
            mcs_io_alert                = "Allarme I/O";
            mcs_ioalt                   = "%@ : Allarme I/O";
            mcs_time_zone               = "Fuso orario";
            mcs_select_time             = "Selezionare ora";
            mcs_now                     = "Ora";
            mcs_mipc_have_alert_notification = "MIPC ottieni notifica di allarme";
            mcs_notification_center     = "Centro di notifica";
            mcs_sound                   = "Suono";
            mcs_vibration               = "Vibrazione";
            mcs_clear_cache             = "Pulisci la Cache";
            mcs_clear_cache_hint        = "Sei sicuro di voler pulire la cache?";
            mcs_successfully_cleared_cache = "Cache eliminata";
            mcs_app_except_exit_hint    = "Siamo spiacenti, si è verificato un errore e l\\’applicazione terminerà";
            mcs_rate_us                 = "Votaci";
            mcs_password_too_simple_hint = "La password è troppo semplice, modificarla per migliorare la sicurezza.";
            mcs_check_for_new_version   = "Controlla nuova versione disponibile";
            mcs_contact_us              = "Contattaci";
            mcs_buffer_time             = "Tempo di buffering";
            mcs_default                 = "Default";
            mcs_alarmed_devices         = "Dispositivo di allarme attivato";
            mcs_aec                     = "Elimina eco";
            mcs_permission_denied       = "Autorizzazione negata";
            mcs_full_screen             = "Schermo Intero";
            mcs_forgot_your_password    = "Password dimenticata";
            mcs_your_email              = "Il tuo indirizzo email";
            mcs_sign_up_confirmation    = "Una email di conferma sarà inviata per verificare l\\’indirizzo di posta elettronica inviato. Seleziona il link che troverai nella email inviata per attivare l\\’account.";
            mcs_recovery_prompt         = "Inserisci il tuo indirizzo e-mail (nome utente), invieremo un email con le istruizioni per resettare la password.";
            mcs_password_reset_confirmation = "Una Email viene inviata all\\’indirizzo e-mail registrato, Controlla il link inviato  via Email per resettare la password.";
            mcs_recovery_fail_no_mail   = "Recupero password fallito, nessun indirizzo Email associato a questo account";
            mcs_recovery_fail_invalid_link = "Recupero password fallito, si prega di seguire le istruzioni contenute nella Email inviata.";
            mcs_recovery_ok_login       = "Password recuperata correttamente, accedi ora.";
            mcs_active_ok_login         = "Account attivato correttamente. Accedi ora.";
            mcs_active_fail_invalid_link = "Attivazione account fallita. Si prega di riprovare.";
            mcs_login_fail_inactive     = "Account non attivo. Si prega di seguire le istruzioni nella Email per attivare un nuovo account.";
            mcs_sign_up_again           = "Registrati nuovamente";
            mcs_press_start_talk        = "Premi per parlare";
            mcs_release_stop_talk       = "Rilascia per chiudere l\\’audio";
            mcs_delete_device           = "Elimina dispositivo";
            mcs_success_removed_equipment = "Dispositivo eliminato correttamente";
            mcs_remove_equipment_failure = "Rimozione guasti non riuscita";
            mcs_device_busy             = "Dispositivo occupato";
            mcs_keep_testing            = "Continua il Test";
            mcs_notify_tone             = "Modifica tono";
            mcs_float_video             = "Attiva Video galleggiante";
            mcs_float_position          = "Posizione video galleggiante";
            mcs_video_resolution        = "Risoluzione video";
            mcs_float_resolution        = "Risoluzione video galleggiante";
            mcs_top_left                = "Sup. Sin.";
            mcs_top_right               = "Sup. Destro";
            mcs_bottom_left             = "Inf. Sin.";
            mcs_bottom_right            = "Inf. Destro";
            mcs_action_next             = "Successivo";
            mcs_action_cancel           = "Annulla";
            mcs_action_retry            = "Riprova";
            mcs_action_add              = "Aggiungi";
            mcs_action_apply            = "Applica";
            mcs_action_config           = "Configura";
            mcs_action_skip             = "Salta";
            mcs_action_ok               = "OK";
            mcs_action_add_device       = "Aggiungi dispositivo";
            mcs_action_modify_password  = "Modifica password";
            mcs_action_config_wifi      = "Configura WiFi";
            mcs_state_connect_device    = "Connessione dispositivo in corso";
            mcs_state_connect_device_fail = "Connessione al dispositivo non riuscita";
            mcs_state_wait_device_online = "Attendere che il dispositivo sia online";
            mcs_state_device_online     = "Online";
            mcs_state_success           = "Successo";
            mcs_state_add_device_success = "Dispositivo aggiunto correttamente";
            mcs_state_add_device_fail   = "Aggiunta del dispositivo fallita";
            mcs_state_modify_pass_success = "Password modificata correttamente";
            mcs_state_modify_pass_fail  = "Modifica della password fallita";
            mcs_state_config_wifi_success = "WiFi configurato correttamente";
            mcs_state_config_wifi_fail  = "Connessione fallita";
            mcs_state_connecting_to     = "Connessione in corso a:";
            mcs_network_connect_type    = "Il dispositivo non è in linea, assicurarsi che il dispositivo sia acceso, e selezionare il tipo di connessione di rete:";
            mcs_prompt_modify_passwd    = "La password del dispositivo è troppo semplice, si prega di modificare la password. La nuova password non potrà essere inferiore a sei caratteri.";
            mcs_prompt_config_wifi      = "Il tuo dispositivo non è ancora conesso alla tua rete WiFi, configurare la rete Wi-Fi.";
            mcs_step1_check_connect     = "Passo 1 : Collegare la Telecamera IP al Router con il cavo di rete in dotazione.";
            mcs_first_step_ethernet_connect = "Passo 1: Collegare un\\’estremità del cavo di rete al router e l\\’altra estremità del cavo di rete alla porta di rete del dispositivo";
            mcs_step2_check_connect     = "Passo 2 : Alimentare la Camera.";
            mcs_second_step_ethernet_connect = "Passo 2 : Alimentare il dispositivo.";
            mcs_hint_check_network      = "Nota : la Telecamera IP impiega circa 50 secondi per essere online. Dopo averla alimentata, il LED lampeggerà tre volte di colore verde ogni 3 secondi, a questo punto la telecamera IP è online. La procedura guidata sarà automaticamente disponibile alla fase successiva.";
            mcs_the_end                 = "Completato";
            mcs_hint_password_expired   = "La password è scaduta, aggiungere nuovamente il dispositivo";
            mcs_hint_remove_ethernet    = "Nota: il WiFi funziona correttamente, disconnettere il cavo Ethernet";
            mcs_ip_format_incorrect     = "Formato indirizzo IP non corretto";
            mcs_login_sucess            = "Accesso riuscito";
            mcs_donot_remind            = "Non ricordare";
            mcs_clear_cache_signout_hint = "Devi accedere nuovamente dopo aver pulito la cache, continuare?";
            mcs_devlist_adddev_hint     = "Clicca qui per aggiungere il dispositivo";
            mcs_devlist_menu_hint       = "Clicca qui per impostare la risoluzione";
            mcs_update_failed           = "L\\’aggiornamento è fallito";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Locale";
            mcs_set_npapi               = "Se il plugin è stato installato, si prega di visitare il sito \\’chrome://flags/#enable-npapi\\’, abilita NPAPI, ";
            mcs_set_win32k              = "Visita \'chrome://flags/#enable-win32k-renderer-lockdown\', disabili Win32k renderer blocco,";
            mcs_restart_browser         = "Riavvia il browser";
            mcs_download_location       = "Percorso di Download";
            mcs_Networking_mode         = "Modalità di Rete";
            mcs_wifi_intelligent_configuration = "Connessione Wi-Fi";
            mcs_ethernet_configuration  = "Connessione Ethernet";
            mcs_wifi_connect            = "Connessione";
            mcs_hard_disk               = "Hard Disk";
            mcs_wifi_is_connection      = "Connessione in corso, attendere prego...";
            mcs_wifi_intelligent_configuration_setup_ailure = "Configurazione WiFi fallita";
            mcs_box_list                = "Casella di riepilogo";
            mcs_repair_disk_prompt      = "La riparazione del disco potrebbe causare la perdita dei dati, continuare?";
            mcs_format_disk_prompt      = "La formattazione del disco eliminerà tutti i dati, continuare?";
            mcs_scheduled_alerting      = "Programma Allarmi";
            mcs_scheduled_alerting_one  = "Programma 1";
            mcs_scheduled_alerting_two  = "Programma 2";
            mcs_scheduled_alerting_three = "Programma 3";
            mcs_scheduled_alerting_four = "Programma 4";
            mcs_wifi_config_cancle      = "Annulla configurazione WiFi";
            mcs_wifi_config_prepare     = "Prerequisiti WiFi";
            mcs_wifi_config_first       = "I dispositivi, i telefoni cellulari e i router devono trovarsi nell\\’intervallo di 1m";
            mcs_wifi_config_second      = "Durante la configurazione della rete WiFi, il dispositivo non può collegare il cavo di rete";
            mcs_wifi_config_third       = "Tener premuto il tasto RESET per un secondo e poi rilasciarlo";
            mcs_wifi_config_success     = "Configurazione avvenuta correttamente";
            mcs_wifi_config_failure     = "Configurazione non riuscita";
            mcs_failure_prompt          = "Riprovare o controllare che la password WiFi inserita sia corretta";
            mcs_display_password        = "Mostra Password";
            mcs_action_smart_config_wifi = "Configurazione Guidata";
            mcs_wifi_invalid            = "E’ necessario prima collegare il telefono alla rete WiFi!";
            mcs_phone_not_connect_wifi  = "Rete WiFi non connessa";
            mcs_prompt_check_connection = "La Telecamera non è in linea, controllare la connessione della telecamera";
            mcs_wifi_cfg_ready          = "Pronto";
            mcs_reset_complete          = "Reset completato";
            mcs_how_to_restore_factory_settings = "Come ripristinare le impostazioni di fabbrica: utilizzare il pin di reset tenendo premuto il tasto RESET nella parte inferiore della telecamera per più di 10 secondi";
            mcs_forgetpass_action_wizard = "Tenere premuto il tasto RESET  per 10 secondi, dopo il rilascio il dispositivo si riavvierà automaticamente. Reimpostare la password per l\\’amministratore";
            mcs_prompt_check_device_connection = "Il tuo dispositivo non è in linea, controllare la connessione della linea del dispositivo";
            mcs_input_wifi_name         = "Inserire il nome della rete WiFi";
            mcs_action_previous         = "Precedente";
            mcs_io_alert_range_hint     = "Il tempo di Allarme I/O dovrebbe essere inferiore di 60 secondi";
            mcs_io_alert_time           = "Ora del tempo di Allarme IO";
            mcs_smart                   = "intelligente";
            mcs_plan                    = "piano";
            mcs_mute                    = "silenzioso";
            mcs_wind_speed              = "velocità del vento";
            mcs_one                     = "un ingranaggio";
            mcs_two                     = "Due attrezzi";
            mcs_three                   = "Tre attrezzi";
            mcs_purify_mode             = "Modalità purificatore";
            mcs_video_list              = "Lista Video";
            mcs_wifi_cfg_restore_factory_settings = "Tenere lo Smartphone vicino al dispositivo, se il dispositivo ha configurato la rete WiFi, premere il tasto RESET per un secondo quindi rilasciare, il dispositivo ripristinerà le impostazioni di fabbrica e si riavvierà automaticamente";
            mcs_mask_settings           = "Imposta Area";
            mcs_notification_settings   = "Impostazioni di Notifica";
            mcs_alarm_settings          = "Impostazioni Allarmi";
            mcs_motion_detection        = "Motion Detection";
            mcs_io_alarm                = "Allarme I/O";
            mcs_connect_status          = "Stato connessione";
            mcs_motion_notification     = "Motion e notifiche";
            mcs_device_connected        = "Il dispositivo è connesso";
            mcs_start_spray             = "Iniziare spruzzando?";
            mcs_available_network       = "La rete non è disponibile";
            mcs_select_wifi_wizard      = "Si prega di selezionare prima la rete WiFi";
            mcs_input_wifi_password     = "Inserire la password della rete WiFi";
            mcs_device_admin_password   = "Password amministratore";
            mcs_device_guest_password   = "Password utente";
            mcs_user_admin_password     = "Password amministratore";
            mcs_user_guest_password     = "Password utente";
            mcs_save_network_set        = "Salvare le impostazioni di rete e la password";
            mcs_nickname_not_set        = "Il nome della Telecamera non è impostato";
            mcs_current_wifi            = "Corrente Wi-Fi";
            mcs_current_password_strength = "Consistenza della password corrente";
            mcs_new_password_strength   = "Consistenza nuova password";
            mcs_needs_to_open_the_DHCP  = "Il router ha bisogno di aprire la funzione DHCP (ottenere automaticamente l\\’indirizzo IP), se il tentativo non ha successo, si prega di contattare l\\’amministratore.";
            mcs_picture                 = "Immagine";
            mcs_quality                 = "Qualità";
            mcs_size                    = "Dimensione";
            mcs_guest_login             = "Accesso Utente";
            mcs_audio_and_video         = "Audio / video";
            mcs_volume                  = "Volume";
            mcs_smooth                  = "Liscio";
            mcs_clear                   = "Pulisci";
            mcs_handsfree               = "Vivavoce";
            mcs_headphone               = "Auricolari";
            mcs_my                      = "Mio";
            mcs_customer_service        = "Assistenza Clienti";
            mcs_firefox_flash_uninstall = "Il flash del tuo plug-in non è disponibile, per la risoluzione del problema fare riferimento a https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Plugins";
            mcs_plug_load               = "Carica Plugins";
            mcs_plug_load_refuse        = "Non carica i plugins";
            mcs_plug_load_auto          = "Automatico";
            mcs_option                  = "Opzioni";
            mcs_option_ok               = "Determinare";
            mcs_voice_call_fails        = "Chiamata vocale fallita, controllare la rete";
            mcs_umounted_prompt         = "Smontarlo?";
            mcs_signup_prompt           = "Nuovo qui?";
            mcs_wifi_connect_sucess_prompt = "Nota: Il WiFi  funziona correttamente, ora puoi disconnettere la Rete";
            mcs_manual_input_prompt     = "Inserisci l’ID manualmente";
            mcs_qrscan_prompt           = "Questa applicazione non è ancora autorizzata ad accedere alla tua camera, puoi trovare l\'App Vimtag sulle impostazioni dell\'iPhone alla voce: \' Privacy \' - > \'Funzione Camera\'";
            mcs_select_network_style    = "Selezionare la modalità della connessione di Rete：";
            mcs_push                    = "Annuncio";
            mcs_connect_power_prompt    = "Nota: il dispositivo non è online, assicurarsi che l\\’alimentazione è collegata.";
            mcs_fail_microphone         = "Impossibile accedere al microfono.";
            mcs_microphone_prompt       = "Questa applicazione non è autorizzata per accedere al tuo microfono, nelle impostazioni dell\\’iPhone alla voce ’privacy’ -> ’funzione microfono’, trovare il nome dell\\’applicazione ’Vimtag’ da modificare";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Eliminazione in corso...";
            mcs_event                   = "Evento";
            mcs_one_hour                = "1 Ora";
            mcs_half_hour               = "30 Minuti";
            mcs_five_min                = "5 Minuti";
            mcs_category                = "Categoria";
            mcs_time_length             = "Durata";
            mcs_new                     = "La Nuova";
            mcs_week_setting_prompt     = "La settimana scorsa non è vuota.";
            mcs_time_setting_prompt     = "Il Tempo non è vuota.";
            mcs_today                   = "Oggi";
            mcs_wifi_config_prepare     = "wifi Prerequisiti";
            mcs_wifi_password           = "password wifi";
            mcs_register_prompt         = "Per favore, prima di Registrare il conto!";
            mcs_click_login             = "Clicca il Login";
            mcs_not_login_prompt        = "Puoi anche non registrato, per favore, clicca!";
            mcs_product_presentation    = "Home Page";
            mcs_help_feedback           = "Aiuto";
            mcs_help_information        = "Aiuto";
            mcs_feedback                = "Feedback";
            mcs_connect_wifi_prompt     = "Connessione Wi-Fi";
            mcs_cloud                   = "aggiornare in seguito";
            mcs_demo                    = "demo";
            mcs_shortest                = "La più breve";
            mcs_no_history              = "Nessuna cronologia";
            mcs_download_pc_client      = "Clicca per scaricare il client PC";
            mcs_accounts_bind_email_exist = "IL conto e \'Stato Legato una cassetta delle Lettere";
            mcs_accounts_bind_email_busy = "La cassetta della posta è già Legato troppo conto";
        }/* it */
        else if(lang == "ar")
        {
            mcs_name                    = "اسم";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "اسم";
            mcs_old_nick                = "اللقب";
            mcs_linked                  = "قد تم توصيله بشكل مباشر";
            mcs_sign_in                 = "تسجيل الدخول";
            mcs_back                    = "العودة";
            mcs_add                     = "إضافة";
            mcs_add_device              = "إضافة الأجهزة";
            mcs_device_existed          = "الجهاز موجود بالفعل";
            mcs_cancel                  = "إلغاء";
            mcs_exit                    = "الخروج";
            mcs_remember_password       = "تذكر كلمة المرور";
            mcs_password_remembered     = "تذكرت كلمة المرور";
            mcs_sign_ining              = "يتم تسجيل الدخول...";
            mcs_cloud_server            = "خادم السحابة";
            mcs_input_device_id         = "إدخال معرف الجهاز";
            mcs_input_username          = "أدخل اسم المستخدم";
            mcs_input_email_addr        = "ادخل عنوان البريد الإلكتروني";
            mcs_email_address           = "عنوان البريد الإلكتروني";
            mcs_email                   = "صندوق بريد";
            mcs_binding                 = "ملزم";
            mcs_binding_email           = "علبة ملزمة";
            mcs_binding_send_prompt     = "علبة ملزمة";
            mcs_binding_email_prompt    = "علبة ملزمة";
            mcs_input_password          = "أدخل كلمة المرور";
            mcs_access_server_failed    = "الوصول إلى الملقم فشل.";
            mcs_device_offline          = "جهاز غير متصل";
            mcs_invalid_password        = "كلمة المرور غير صحيحة.";
            mcs_invalid_dev             = "لا وجود جهاز";
            mcs_login_faided            = "فشل تسجيل الدخول.";
            mcs_invalid_qrcode          = "رمز الأبعاد غير صالح.";
            mcs_please_input_username   = "يرجى إدخال اسم المستخدم الخاص بك!";
            mcs_please_input_password   = "يرجي إدخال كلمة المرور!";
            mcs_qrcode_scan_hint        = "الاحتفاظ مربع في الجزء السفلي من الجهاز الانحياز رمز ثنائي الأبعاد";
            mcs_device_list_empty       = "قائمة الأجهزة تكون فارغة";
            mcs_record_list_is_empty    = "قائمة الفيديو تكون فارغة";
            mcs_password_expired        = "كلمة المرور  كنت غير صحيحة";
            mcs_set_video_size          = "اعداد حجم الفيديو";
            mcs_hd_1280x720             = "عالية الدقة [1280*720]";
            mcs_auto                    = "التلقائيا";
            mcs_normal_640x360          = "العادي [640*360]";
            mcs_half_320x180            = "لصغيرة [320*180]";
            mcs_small_160x90            = "الأصغر [160*90";
            mcs_play                    = "التشغيل";
            mcs_settings                = "الاعداد";
            mcs_messages                = "الرسائل";
            mcs_alarm                   = "الإنذار";
            mcs_delete                  = "الحذف";
            mcs_delete_camera           = "الحذف ";
            mcs_apply                   = "التطبيق";
            mcs_speed                   = "السرعة";
            mcs_others                  = "الأخري";
            mcs_audio                   = "الصوت";
            mcs_speaker                 = "مكبر الصوت";
            mcs_mic                     = "ميكروفون";
            mcs_power_frequency         = "تردد الطاقة";
            mcs_online_upgrade          = "الترقية على الانترنت";
            mcs_restore_the_factory_settings = "استعادة إعدادات المصنع";
            mcs_restore                 = "الاستعادة";
            mcs_restore_camera          = "جهاز إعادة التشغيل";
            mcs_start_upgrade           = "يمكن تحديث الإصدارات الجديدة";
            mcs_system                  = "النظام";
            mcs_system_settings         = "اعداد النظام";
            mcs_online                  = "الجهاز منتصل الإنترنت";
            mcs_offline                 = "الجهاز غير متواجد ";
            mcs_query                   = "الاستعلام";
            mcs_begin_time              = "وقت البدء";
            mcs_end_time                = "وقت الانتهاء";
            mcs_mode                    = "الوضع";
            mcs_opened                  = "فتح";
            mcs_high                    = "عالية";
            mcs_middle                  = "متوسطة";
            mcs_low                     = "منخفضة";
            mcs_io_alert_input          = "إدخال التنبيه O/I";
            mcs_io_alert_output         = "اخراج التنبيه O/I";
            mcs_normally_open           = "فتح عادة";
            mcs_normally_close          = "أغلق عادة";
            mcs_motion_detection_sensitivity = "حساسية الكشف المحمول";
            mcs_daytime                 = "النهار";
            mcs_night                   = "في الليل";
            mcs_sdcord                  = "SDبطاقة";
            mcs_storage_device          = "أجهزة التخزين";
            mcs_set_mask                = "مجموعة قناع";
            mcs_status                  = "أحوال";
            mcs_capacity                = "السعة";
            mcs_usage                   = "استخدم";
            mcs_format                  = "تنسيق";
            mcs_repair                  = "اصلاح";
            mcs_formating               = "يتم التنسيق";
            mcs_repairing               = "يتم الإصلاح";
            mcs_mounted                 = "تم التنزيل";
            mcs_unmounted               = "تم الإزالة";
            mcs_mount                   = "تنزيل";
            mcs_unmount                 = "إزالة";
            mcs_ethernet                = "الإيثرنت";
            mcs_wifi                    = "واي فاي";
            mcs_enabled                 = "حالة التمكين";
            mcs_mac_address             = "MAC عنوان";
            mcs_network_status          = "حالة الاتصال";
            mcs_wifi_mode               = "وضع لاسلكي";
            mcs_client                  = "وضع العملاء";
            mcs_ap                      = "نقطة ساخنة";
            mcs_start_address           = "عنوان البداية";
            mcs_end_address             = "عنوان الانتهاء";
            mcs_gateway                 = "بواب الإنترنت";
            mcs_select_network          = "اختيار شبكة الاتصال";
            mcs_dhcp_ip                 = "الحصول تلقائيا على IP";
            mcs_dhcp_dns                = "DNS : استخدام DHCP";
            mcs_ip_address              = "عنوان IP";
            mcs_network_mask            = "قناع الشبكة الفرعية";
            mcs_input_secondary_dns     = "إدخال DNS الثانوي";
            mcs_secondary_dns           = "DNS الثانوي";
            mcs_input_dns               = "يرجي ادخال DNS";
            mcs_input_alternate_dns     = "يرجي ادخال DNS الثانوي";
            mcs_input_ip                = "يرجي ادخال عنوان IP";
            mcs_input_gateway           = "يرجي ادخال البوابة";
            mcs_input_network_mask      = "يرجى إدخال قناع الشبكة الفرعية";
            mcs_wifi_list               = "قائمة شبكة الاتصال";
            mcs_display_date            = "عرض التاريخ";
            mcs_date_format             = "تنسيق التاريخ";
            mcs_display_time            = "عرض الوقت";
            mcs_time_format             = "تنسيق الوقت";
            mcs_24_hour                 = "على مدار 24 ساعة";
            mcs_12_hour                 = "12 ساعة";
            mcs_display_weeks           = "عرض الأسابيع";
            mcs_date_time               = "تاريخ / وقت";
            mcs_set_time                = "ضبط الوقت";
            mcs_set_week                = "اعداد الأسبوع";
            mcs_stream                  = "ستريم";
            mcs_encode                  = "نوع الترميز";
            mcs_resolution              = "القرار";
            mcs_frame_fate              = "معدل الإطارات";
            mcs_maximum_bitrate         = "الحد الأقصى من معدل البت";
            mcs_minimum_bitrate         = "الحد الأدني من معدل البت";
            mcs_i_frame_interval        = "فاصل الاطار I";
            mcs_video                   = "فيديو";
            mcs_sampling_rate           = "معدل أخذ العينات (كيلو هرتز)";
            mcs_nickname                = "لقب الجهاز";
            mcs_old_password            = "كلمة المرور القديمة";
            mcs_confirm_password        = "تأكيد كلمة المرور";
            mcs_modify_password         = "تغيير كلمة المرور";
            mcs_password                = "كلمة المرور";
            mcs_admin_password          = "المشرف كلمة السر";
            mcs_guest_password          = "ضيف كلمة المرور";
            mcs_product_info            = "معلومات المنتج";
            mcs_software_version        = "إصدار البرنامج";
            mcs_device_id               = "جهازID";
            mcs_operation               = "التشغيل";
            mcs_record                  = "فيديو";
            mcs_record_2                = "فيديو";
            mcs_upgrade_now             = "ترقية علي فور";
            mcs_upgrading               = "خلال الترقية";
            mcs_already_latest_version  = "هو أحدث الطبعة";
            mcs_sensitivty              = "الحساسية";
            mcs_user_defined            = "المخصصة";
            mcs_time                    = "الوقت";
            mcs_date                    = "التاريخ";
            mcs_finish                  = "إتمام";
            mcs_fail                    = "فشل";
            mcs_motion                  = "كشف المنتقل";
            mcs_start                   = "بدء";
            mcs_talk                    = "التعقيبات";
            mcs_password_input_inconsistent = "كلمة المرور المدخلة غير متناسقة";
            mcs_input_6_to_20_litters   = "المدخلات 20/06 الحروف (A-Z، A-Z) أو أرقام (0-9)";
            mcs_user_letter_range_hint  = "حساب  6-20  أرقام  (  0-9  )  أو حرف  (  الألف إلى الياء،  من الألف إلى الياء  )، يجب أن  تبدأ بحرف";
            mcs_password_range_hint     = "كلمة المرور هي 6-20 الأرقام والأحرف";
            mcs_begin_with_the_letters  = "تبدأ بحرف، يمكن أن تحتوي أبجدية رقمية فقط";
            mcs_sign_up                 = "التسجيل";
            mcs_sign_up_failed          = "فشل التسجيل";
            mcs_successful_sign_up      = "قم بالتسجيل الناجح";
            mcs_are_you_sure_delete     = "هل أنت متأكد من حذف؟";
            mcs_failed_to_set_the       = "فشل الإعداد";
            mcs_set_successfully        = "تم الاعداد بنجاح";
            mcs_downloading             = "يتم التحميل";
            mcs_wrote                   = "تم الكتابة";
            mcs_visit_again_later       = "يرجى تسجيل الدخول مرة أخرى في وقت لاحق";
            mcs_restart_failed          = "إعادة تشغيل فشل";
            mcs_upgrade_failed          = "فشل التحديث";
            mcs_connnected              = "تم التوصيل";
            mcs_connnected_to           = "متصلا";
            mcs_not_select              = "دون إختيار";
            mcs_message_list            = "قائمة الرسائل";
            mcs_saved_password          = "كلمة المرور محفوظة";
            mcs_alert                   = "إنذار";
            mcs_no_record               = "لا يوجد فيديو";
            mcs_new_about               = "جديد : حوالي";
            mcs_device                  = "الجهاز";
            mcs_config                  = "المكونات";
            mcs_change_password_failed  = "فشل تغيير كلمة المرور";
            mcs_do_you_want_restart     = "هل تريد إعادة تشغيل؟";
            mcs_do_you_want_restore     = "هل تريد استعادة؟?";
            mcs_do_you_want_upgrade     = "هل تريد الترقية؟";
            mcs_load_end                = "تم تحميل جميع البيانات";
            mcs_loading                 = "...تنزيل";
            mcs_down_refresh            = "إسحب الي تحت فيمكن تحديث";
            mcs_release_refresh         = "إطلاق تحديث";
            mcs_refreshing              = "منعش";
            mcs_release_then_loading_data_hint = "الإفراج لتحميل البيانات";
            mcs_pull_refresh_hint       = "إسحب الي فوق فيمكن تنزيل";
            mcs_restarting              = "يتم إعادة التشغيل";
            mcs_upgraded_time           = "تجديد الي : ";
            mcs_done                    = "فعلت";
            mcs_playback                = "اعادة التشغيل";
            mcs_i_o_alarm               = "الانذار I/O";
            mcs_alarm_action            = "عمل منبه";
            mcs_alarm_sources           = "مصدر الانذار";
            mcs_io_output               = "I/O إخراج";
            mcs_snapshots               = "لقطة";
            mcs_snapshot                = "لقطة";
            mcs_snapshot_interval       = "الفاصل الزمني للصور (ثانية)";
            mcs_pre_record_length       = "وقت التسجيل المسبق (ثواني)";
            mcs_nick_range_hint         = "الإسم المستعار أقل من 20  الأرقام و الأحرف";
            mcs_save                    = "حفظ";
            mcs_close                   = "أغلق";
            mcs_snapshoting             = "التقاط الصور";
            mcs_snapshot_failed         = "فشل تصوير";
            mcs_record_failed           = "فشل التسجيل";
            mcs_saved_successfully      = "حفظ بنجاح إلى الألبوم";
            mcs_save_failed             = "فشل الحفظ";
            mcs_restart_to_take_effect  = "المفعول بعد إعادة تشغيل";
            mcs_please_allow_access_album = "اسمحوا MIPC لزيارة ألبوم الصور الخاص بك.";
            mcs_ios_privacy_setting_for_photo_prompt = "يمكنك إجراء تغييرات في اي فون \" إعدادات - الخصوصية – الصور \" التطبيق \"MIPC\".";
            mcs_please_allow_access_camera = "اسمحوا MIPC لزيارة الكاميرا";
            mcs_ios_privacy_setting_for_camera_prompt = "يمكنك في اي فون \"إعدادات -> الخصوصية -> كاميرا \"، موقع التطبيق \"MIPC \" لإجراء تغييرات";
            mcs_busy_when_write         = "مشغول عند الكتابة";
            mcs_unknown_error           = "خطأ غير معروف";
            mcs_i_know                  = "أنا أعلم !";
            mcs_segment                 = "قطعة";
            mcs_please_relogin          = "يرجى إعادة تسجيل الدخول";
            mcs_change_password_succeed = "تغيير كلمة المرور بنجاح";
            mcs_upgrade_to_ver          = "الترقية إلى الإصدار الجديد";
            mcs_restore_failed          = "الاستعادة فشلت";
            mcs_please_restart          = "يرجى إعادة تشغيل ";
            mcs_keep_network_settings   = "ضبط الحجز شبكة وكلمة المرور";
            mcs_not_connected           = "غير متصل";
            mcs_sdcard_not_ready        = "بطاقة SD غير جاهزة!";
            mcs_device_not_exist        = "الجهاز غير موجودا";
            mcs_disable                 = "تعطيل";
            mcs_to_determine_the        = "هل أنت متأكد";
            mcs_alert_on                = "تسليح";
            mcs_alert_off               = "ايقاف تشغيل الانذار";
            mcs_alert_onoff             = "تنبيه على / قبالة";
            mcs_monday                  = "يوم الإثنين";
            mcs_tuesday                 = "يوم الثلاثاء";
            mcs_wednesday               = "يوم الأربعاء";
            mcs_thursday                = "يوم الخميس";
            mcs_friday                  = "يوم الجمعة";
            mcs_saturday                = "يوم السبت";
            mcs_sunday                  = "يوم الأحد";
            mcs_mon                     = "الإثنين";
            mcs_tue                     = "الثلاثاء";
            mcs_wed                     = "الأربعاء";
            mcs_thu                     = "الخميس";
            mcs_fri                     = "الجمعة";
            mcs_sat                     = "السبت";
            mcs_sun                     = "الأحد";
            mcs_scheduled_recording     = "تخطيط التصوير";
            mcs_schedule                = "جدول";
            mcs_scheduled_recording_status = "حالة التسجيل المقرر";
            mcs_folding                 = "الطي";
            mcs_unfolding               = "تتكشف";
            mcs_end_time_should_lt_begin = "يجب أن يكون وقت النهاية أكبر من وقت البدء";
            mcs_recording               = "يتم التصوير";
            mcs_prerecord_interval_range_hint = "وقت التصوير المتوقع تحتاج الي أقل من 6 ثوان";
            mcs_snapshot_interval_range_hint = "الفاصل الزمني للتصوير هو 0 أو أكبر من 60";
            mcs_not_ready               = "غير جاهز";
            mcs_availablesize           = "القدرات المتاحة";
            mcs_reboot                  = "إعادة التشغيل";
            mcs_alerter                 = "فتح ناقوس الخطر";
            mcs_pir                     = "تفاعل جسم الإنسان";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "جهاز الترميز";
            mcs_ok                      = "موافق";
            mcs_fault                   = "الخطأ";
            mcs_sensor_status           = "حالة جهاز الاستشعار";
            mcs_about                   = "حول";
            mcs_reset_now               = "قم بإعادة تشغيل الأن";
            mcs_reset_later             = "إعادة تعيين في وقت لاحق";
            mcs_prompt                  = "النصيحة";
            mcs_select                  = "يرجي الاختيار";
            mcs_available_netword       = "شبكة الاتصال غير متوفر، ويرجي ضبط الشبكة؟";
            mcs_request_send            = "قم بإرسال الطلب...";
            mcs_blank_device_id         = "الجهاز لا يمكن أن تكون فارغة ID";
            mcs_blank_username          = "اسم المستخدم لا يمكن أن يكون فارغا";
            mcs_blank_password          = "كلمة المرور لا يمكن أن تكون فارغة";
            mcs_exist_user              = "المستخدم موجودا بالفعل";
            mcs_invalid_user            = "اسم المستخدم غير صحيح";
            mcs_invalid_email_addr      = "عنوان البريد الإلكتروني غير صحيح";
            mcs_system_err              = "خطأ في النظام";
            mcs_exceed_device           = "عدد مستخدمي الجهاز يتجاوز الحد";
            mcs_continue                = "متواصل";
            mcs_prompt_exit             = "هل تريد الخروج؟";
            mcs_device_list             = "قائمة الأجهزة";
            mcs_no_sdcard               = "عدم وجود بطاقة SD";
            mcs_no_hard_disk            = "لا القرص الصلب";
            mcs_show_more               = "يعرض أكثر...";
            mcs_shotsnop_exists         = "الصورة موجودة بالفعل";
            mcs_input_nick              = "يرجي ادخال اللقب";
            mcs_nick_not_empty          = "اللقب لا يمكن أن يكون فارغا";
            mcs_input_new_pass          = "أدخل كلمة المرور الجديدة";
            mcs_input_new_pass_again    = "أدخل كلمة المرور الجديدة مرة أخرى";
            mcs_new_password            = "كلمة المرور الجديدة";
            mcs_modify_network_prompt   = "تعديل معلمات الشبكة قد يسبب انقطاع الشبكةيرجى تأكيد التعديلات?";
            mcs_wifi_disable_prompt     = "تعطيل خدمة الواي فاي، هل مواصلة؟";
            mcs_eth_disable_prompt      = "تعطيل بطاقة إيثرنت، هل مواصلة؟";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "الحصول تلقائيا";
            mcs_manually_set            = "الإعداد اليدوي";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "DNS المفضل";
            mcs_client_mode             = "وضع المحطة";
            mcs_adhoc_mode              = "وضع النقاط الساخنة";
            mcs_connect_fail            = "خطأ في الاتصال";
            mcs_dhcp_server             = "خادم DHCP";
            mcs_display_text            = "عرض الاسم";
            mcs_repair_prompt           = "إصلاح بطاقة الذاكرة الرقمية المؤمنة قد يؤدي إلى فقدان بعض البيانات، هل مواصلة؟";
            mcs_format_prompt           = "التنسيق يحذف كافة البيانات الموجودة على بطاقة الذاكرة الرقمية المؤمنة، هل مواصلة؟";
            mcs_mount_prompt            = "تحميل بطاقة الذاكرة الرقمية المؤمنة، هل  مواصلة؟";
            mcs_umount_prompt           = "إلغاء تحميل بطاقة الذاكرة الرقمية المؤمنة يؤدي الي عدم حفظ الفيديو والصور وغيرهامن البيانات ، هل مواصلة ؟";
            mcs_sdcard_reset            = "تم الاعداد بنجاح، تحتاج إلى إعادة تشغيل الكاميرا لالتقاط ، هل مواصلة ؟";
            mcs_sdcard_repairing        = "يتم الإصلاح لانتظار  إعادة التشغيل";
            mcs_sdcard_formating        = "يتم التنسيق لانتظار  إعادة التشغيل";
            mcs_sdcard_umount           = "دون تنزيل";
            mcs_valid                   = "متوفر";
            mcs_io                      = "انذار IO";
            mcs_input                   = "أدخل";
            mcs_outinput                = "أخرج";
            mcs_prompt_alert_on         = "إفتح التسليح ، متواصل؟";
            mcs_auto_sync_date_time     = "التزامن التلقائي";
            mcs_alarm_record            = "تسجيل الانذار";
            mcs_username                = "اسم المستخدم";
            mcs_re_enter_the_password   = "إعادة إدخال كلمة المرور";
            mcs_remember_me             = "الاحتفاظ بتسجيل الدخول";
            mcs_home                    = "منزل";
            mcs_install_the_plug        = "تركيب البرنامج المساعد";
            mcs_install_the_video_plug  = "تركيب البرنامج المساعد للفيديو";
            mcs_install_now             = "قم بالتركيب الآن";
            mcs_temporarily_installed_use_ordinary_video = "لا يتم التركيب مؤقتا ، يتم استخدام الشاشة العادية";
            mcs_brightness              = "السطوع";
            mcs_contrast                = "التباين";
            mcs_color_saturation        = "التشبع";
            mcs_sharpness               = "الحدة";
            mcs_duration                = "فترة الاستمرار";
            mcs_index                   = "المؤشر";
            mcs_remark                  = "الملاحظة";
            mcs_media_stream            = "وسائل الإعلام";
            mcs_server                  = "الخادم";
            mcs_media_transfer          = "نقل وسائل الإعلام";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "صانع";
            mcs_model                   = "النموذج";
            mcs_plugin_version          = "اصدار البرنامج المساعد";
            mcs_network_interface       = "واجهة الشبكة";
            mcs_transfer_protocol       = "بروتوكول النقل";
            mcs_year                    = "السنة";
            mcs_month                   = "الشهر";
            mcs_day                     = "اليوم";
            mcs_hour                    = "الساعة";
            mcs_minute                  = "الدقيقة";
            mcs_second                  = "الثانية";
            mcs_millisec                = "ميلي ثانية واحدة";
            mcs_ntp                     = "عنوان خادم الوقت";
            mcs_upload_upgrade          = "تحميل الترقية";
            mcs_stop                    = "إيقاف";
            mcs_info_rewind             = "الترجيع";
            mcs_fast_forward            = "التقديم السريع";
            mcs_previous_frame          = "الإطار السابق";
            mcs_next_frame              = "الإطار التالي";
            mcs_record_audio            = "تسجيل الصوت";
            mcs_week                    = "الأسبوع";
            mcs_all                     = "جميع";
            mcs_id                      = "الرقم";
            mcs_select_all              = "اختيار جميع";
            mcs_call                    = "الاتصال";
            mcs_activation              = "رمز التفعيل";
            mcs_caption                 = "تحميل الملف";
            mcs_alarm_device            = "جهاز الانذار";
            mcs_not_installed           = "غير مثبت";
            mcs_join_us_now             = "انضم إلينا الآن";
            mcs_reconnect_please_wait   = "إعادة الاتصال، يرجى الانتظار";
            mcs_erasing                 = "يتم المسح";
            mcs_writing                 = "يتم الكتابة";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "طبعة جديدة";
            mcs_equipment_flip          = "تلقب الجهاز";
            mcs_device_status           = "حالة الجهاز";
            mcs_audio_setting           = "إعدادات الصوت";
            mcs_nick_modify             = "تعديل اللقب";
            mcs_ready                   = "جاهزة";
            mcs_full                    = "أكتب كاملا";
            mcs_connecting              = "يتم الاتصال";
            mcs_message_buffering       = "التخزين المؤقت للرسالة";
            mcs_upgrade_finish          = "تم الترقية";
            mcs_image                   = "الصورة";
            mcs_bar                     = "مادة";
            mcs_init                    = "التهيئة";
            mcs_confirm_new_password    = "تأكيد كلمة المرور الجديدة";
            mcs_continue_switch_wireless_network = "تبديل الشبكة قد يسبب انقطاع الشبكة، هل مواصلة؟";
            mcs_restore_factory_settings_prompt = "عند استعادة ضبط المصنع، سيتم إعادة تشغيل النظام ، هل مواصلة؟";
            mcs_username_does_not_exis  = "اسم المستخدم لا يوجد";
            mcs_username_already_exists = "اسم المستخدم موجود بالفعل";
            mcs_successful_whether_login = "تم التسجيل، هل يتم تسجيل الدخول الآن؟";
            mcs_username_demand         = "6-20 حروف أو أرقام مع بداية الحرف";
            mcs_the_password_is_empty   = "كلمة المرور تكون فارغة";
            mcs_password_demand         = "حروف أو أرقام20الي6";
            mcs_password_empty          = "تأكيد كلمة المرور فارغة";
            mcs_two_password_input_inconsistent = "كلمة المرور المدخلة مرتين غير متناسقة";
            mcs_the_user_name_is_empty  = "اسم المستخدم يكون فارغا";
            mcs_upgrade_to_the_latest_version = "الترقية إلى أحدث الطبعة";
            mcs_subnet_mask_wrong_format = "خطأ تنسيق قناع الشبكة الفرعية";
            mcs_upgrade_successful_restart_to_take_effect = "ترقية ناجحا، تحتاج إلى إعادة تشغيل الجهاز حتى تصبح نافذة المفعول";
            mcs_need_to_restart_the_camera_to_take_effect = "تحتاج إلى إعادة تشغيل الجهاز حتى تصبح نافذة المفعول";
            mcs_not_allowed_close_two_network_cards = "لا يمكنك تعطيل بطاقة إيثرنت وواي فاي في نفس الوقت";
            mcs_modified_successfully   = "تم التعديل بنجاح";
            mcs_connection_successfully = "تم الاتصال بنجاح";
            mcs_connection_is_interrupted = "انقطع الاتصال";
            mcs_devices_in_the_account_overrun = "عدد أجهزة المستخدم يتجاوز الحد";
            mcs_format_error            = "خطأ التنسيق";
            mcs_change                  = "التعديل";
            mcs_refresh                 = "التحديث";
            mcs_connect                 = "ربط";
            mcs_upgrade                 = "ترقية";
            mcs_activate                = "تفعيل";
            mcs_filter                  = "تصفية";
            mcs_reset                   = "إعادة الوضع";
            mcs_prompt_alert_off        = "يتم ايقاف تشغيل الانذار ، هل موصلة؟";
            mcs_invalid_server          = "عنوان خادم الوقت غير صالح";
            mcs_upgrade_prompt          = "ترقية برنامج الجهاز. استمر";
            mcs_restart_prompt          = "جهاز إعادة التشغيل، ومواصلة?";
            mcs_repeat                  = "تكرار";
            mcs_scheduled_one           = "التسجيل المسبق 1";
            mcs_scheduled_two           = "التسجيل المسبق 2";
            mcs_scheduled_three         = "التسجيل المسبق 3";
            mcs_scheduled_four          = "التسجيل المسبق 4";
            mcs_more                    = "انظر المزيد من";
            mcs_leave                   = "يتم الافراج لتحميل الأكثر";
            mcs_qrcode_scan             = "مسح رمز الأبعاد";
            mcs_inserted                = "تم إدراج";
            mcs_removed                 = "تم إزالة";
            mcs_upgrade_init            = "تبدأ الترقية";
            mcs_upgrade_download        = "ترقية التنزيل";
            mcs_check                   = "ترقية الفحص";
            mcs_audio_encoder_config    = "إعدادات ترميز الصوت";
            mcs_video_codec             = "ترميز الفيديو";
            mcs_download                = "تحميل";
            mcs_client_download         = "تنزيل محطة العملاء";
            mcs_for_more_clarity_smooth_video_experience = "الحصول على تجربة الفيديو أكثر وضوحا و أكثر سلاسة";
            mcs_network                 = "إنترنت";
            mcs_mobile_client_download  = "تنزيل محطة العملاء للهاتف المحمول";
            mcs_readonly                = "قراءة فقط";
            mcs_please_exit_and_relogin = "يرجي قراءة بالدخول مرة أخرى بعد الخروج";
            mcs_add_device_failed       = "فشل من إضافة الجهااز";
            mcs_set_password            = "تغيير كلمة المرور";
            mcs_7x24_hours              = "7x24(ساعة)";
            mcs_motion_alert            = "الحركة في حالة تأهب";
            mcs_mtalt                   = "%@ : الحركة في حالة تأهب";
            mcs_io_alert                = "I/O حالة تأهب";
            mcs_ioalt                   = "%@ : I/O حالة تأهب";
            mcs_time_zone               = "منطقة زمنية";
            mcs_select_time             = "حدد وقت";
            mcs_now                     = "الآن";
            mcs_mipc_have_alert_notification = "MIPC يكون الإخطار التنبيه";
            mcs_notification_center     = "مركز إعلام";
            mcs_sound                   = "صوت";
            mcs_vibration               = "اهتزاز";
            mcs_clear_cache             = "مسح ذاكرة التخزين المؤقت";
            mcs_clear_cache_hint        = "هل أنت متأكد من أنك تريد مسح ذاكرة التخزين المؤقت؟";
            mcs_successfully_cleared_cache = "مسح ذاكرة التخزين المؤقت بنجاح";
            mcs_app_except_exit_hint    = "عذرا، التطبيق واجه استثناء وسيتم إنهاء.";
            mcs_rate_us                 = "معدل بنا";
            mcs_password_too_simple_hint = "كلمة السر هي بسيطة جدا، وتعديلها لتحسين الأمن.";
            mcs_check_for_new_version   = "التحقق من وجود إصدار جديد";
            mcs_contact_us              = "اتصل بنا";
            mcs_buffer_time             = "التخزين المؤقت الوقت";
            mcs_default                 = "الافتراضي";
            mcs_alarmed_devices         = "أجهزة المذعورة";
            mcs_aec                     = "إلغاء الصدى";
            mcs_permission_denied       = "تم رفض الإذن";
            mcs_full_screen             = "كامل الشاشة";
            mcs_forgot_your_password    = "نسيت كلمة السر";
            mcs_your_email              = "بريدك الإلكتروني";
            mcs_sign_up_confirmation    = "يتم إرسال رسالة تأكيد للتحقق من عنوان البريد الإلكتروني المقدمة. سوف زيارة الرابط أرسلت في هذا البريد الالكتروني تفعيل الحساب.";
            mcs_recovery_prompt         = "يرجى إدخال عنوان البريد الإلكتروني الخاص بك (اسم المستخدم)، وسوف نرسل رسالة لاقول لكم كيفية إعادة تعيين كلمة المرو.";
            mcs_password_reset_confirmation = "يتم إرسال رسالة بريد إلكتروني إلى عنوان البريد الإلكتروني المقدمة. زيارة الرابط أرسلت في هذا البريد الالكتروني لإعادة تعيين كلمة المرور";
            mcs_recovery_fail_no_mail   = "فشل استرداد كلمة المرور. وهذا الحساب لا ربط البريد الإلكتروني";
            mcs_recovery_fail_invalid_link = "فشل استرداد كلمة المرور. يرجى التأكد من محتوى رابط أو الانتعاش مرة أخرى";
            mcs_recovery_ok_login       = "نجاح استعادة كلمة السر. تسجيل الدخول الآن";
            mcs_active_ok_login         = "حساب نجاح نشطة. تسجيل الدخول الآن";
            mcs_active_fail_invalid_link = "حساب نشط تفشل. الرجاء التأكد من أن محتوى الرابط أو الاشتراك مرة أخرى";
            mcs_login_fail_inactive     = "حساب غير نشط. يرجى اتباع محتوى البريد الإلكتروني النشطة إلى نشطة";
            mcs_sign_up_again           = "الاشتراك مرة أخرى";
            mcs_press_start_talk        = "الصحافة في الكلام";
            mcs_release_stop_talk       = "إطلاق سراح لوقف";
            mcs_delete_device           = "حذف الجهاز";
            mcs_success_removed_equipment = "حذف الجهاز بنجاح";
            mcs_remove_equipment_failure = "إزالة تعطل المعدات";
            mcs_device_busy             = "الجهاز هو مشغول الآن";
            mcs_keep_testing            = "يستمر الاختبار";
            mcs_notify_tone             = "نغمة إعلام";
            mcs_float_video             = "تمكين العائمة الفيديو";
            mcs_float_position          = "العائمة موقف الفيديو";
            mcs_video_resolution        = "دقة الفيديو";
            mcs_float_resolution        = "العائمة دقة الفيديو";
            mcs_top_left                = "أعلى اليسار";
            mcs_top_right               = "أعلى اليمين";
            mcs_bottom_left             = "أسفل اليسار";
            mcs_bottom_right            = "أسفل اليمين";
            mcs_action_next             = "التالي";
            mcs_action_cancel           = "إلغاء";
            mcs_action_retry            = "إعادة المحاولة";
            mcs_action_add              = "إضافة";
            mcs_action_apply            = "تطبيق";
            mcs_action_config           = "ترتيب";
            mcs_action_skip             = "تخطى";
            mcs_action_ok               = "حسنا";
            mcs_action_add_device       = "إضافة جهاز";
            mcs_action_modify_password  = "تغيير كلمة المرور";
            mcs_action_config_wifi      = "تعيين واي فاي";
            mcs_state_connect_device    = "أجهزة الاتصال";
            mcs_state_connect_device_fail = "ربط فشل المعدات";
            mcs_state_wait_device_online = "ينتظر الجهاز لتكون على الانترنت";
            mcs_state_device_online     = "على الانترنت";
            mcs_state_success           = "نجاح";
            mcs_state_add_device_success = "إضافة جهاز النجاح";
            mcs_state_add_device_fail   = "إضافة فشل الجهاز";
            mcs_state_modify_pass_success = "تغيير كلمة المرور بنجاح";
            mcs_state_modify_pass_fail  = "فشل تغيير كلمة المرور";
            mcs_state_config_wifi_success = "تعيين نجاح Wi-Fi";
            mcs_state_config_wifi_fail  = "خطأ في الاتصال";
            mcs_state_connecting_to     = "الاتصال";
            mcs_network_connect_type    = "الجهاز غير متواجد، يمكنك التأكد من أن الجهاز هو مدعوم على، ثم حدد اتصال الشبكة:";
            mcs_prompt_modify_passwd    = "كلمة السر الخاصة بك من جهاز بسيط جدا، يرجى تعديل كلمة المرور. يجب المرور الجديدة لن تكون أقل من ستة أحرف";
            mcs_prompt_config_wifi      = "لا يزال غير جهازك متصلا واي فاي الخاص بك، يرجى تكوين خدمة الواي فاي الخاص بك.";
            mcs_step1_check_connect     = "فإن الخطوة الأولى تكون واحدة من نهاية كبل الشبكة للاتصال جهاز التوجيه الخاص بك وعلى الطرف الآخر من الوصول عبر منفذ إيثرنت الكاميرا";
            mcs_first_step_ethernet_connect = "الخطوة الأولى: قم بتوصيل أحد طرفي كبل شبكة للاتصال جهاز التوجيه الخاص بك وعلى الطرف الآخر من منفذ الشبكة وصول جهاز.";
            mcs_step2_check_connect     = "الخطوة الثانية ستكون على كاميرا الفيديو الخاصة بك الكهرباء، بدء تشغيل الكاميرا";
            mcs_second_step_ethernet_connect = "الخطوة الثانية: على جهازك، ثم قم بتشغيل الجهاز.";
            mcs_hint_check_network      = "ملاحظة: الكاميرا يستغرق حوالي 50 ثانية لتبدأ، بعد بدء التشغيل الكامل، LED أضواء ثلاث ثوان ومضات الضوء الأخضر ثلاث مرات، وهو ما يعني أن كل كاميرا كانت الانترنت، وسوف يدخل تلقائيا المعالج الخطوة التالية";
            mcs_the_end                 = "نهاية";
            mcs_hint_password_expired   = "انتهت صلاحية كلمة السر، يرجى إضافته الجهاز";
            mcs_hint_remove_ethernet    = "ملاحظة : Wi-Fi يعمل بشكل صحيح، يمكنك الآن افصل كابل الشبكة";
            mcs_ip_format_incorrect     = "تنسيق عنوان IP غير صحيح";
            mcs_login_sucess            = "نجاح تسجيل الدخول ";
            mcs_donot_remind            = "لا تذكرني مجددًا ";
            mcs_clear_cache_signout_hint = "مسح ذاكرة التخزين المؤقت وإنهاء تسجيل الدخول مرة أخرى إلى الاستمرار؟";
            mcs_devlist_adddev_hint     = "انقر هنا لإضافة معدات";
            mcs_devlist_menu_hint       = "انقر هنا لتهيئة هذا القرار";
            mcs_update_failed           = "فشل الترقية";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "محلي";
            mcs_set_npapi               = "إذا تم تثبيت البرنامج المساعد، يرجى زيارة \'chrome://flags/#enable-npapi\' تمكين NPAPI, ";
            mcs_set_win32k              = "زيارة \'chrome://flags/#enable-win32k-renderer-lockdown\', win32k تعطيل العارض تأمين,";
            mcs_restart_browser         = "إعادة تشغيل المتصفح";
            mcs_download_location       = "حفظ التزيلات في المجلد";
            mcs_Networking_mode         = "وضع الشبكات";
            mcs_wifi_intelligent_configuration = "اتصال WIFI";
            mcs_ethernet_configuration  = "اتصال إيثرنت";
            mcs_wifi_connect            = "صلة";
            mcs_hard_disk               = "القرص الصلب";
            mcs_wifi_is_connection      = "الاتصال، يرجى الانتظار...";
            mcs_wifi_intelligent_configuration_setup_ailure = "واي فاي فشل الإعداد التكوين الذكي";
            mcs_box_list                = "مربع القائمة";
            mcs_repair_disk_prompt      = "قرص الإصلاح قد فقد بعض  البيانات ، المتابعة؟";
            mcs_format_disk_prompt      = "و شكل القرص حذف جميع البيانات و المتابعة؟";
            mcs_scheduled_alerting      = " خطة  الدفاع ";
            mcs_scheduled_alerting_one  = " خطة  الدفاع 1";
            mcs_scheduled_alerting_two  = " خطة  الدفاع 2";
            mcs_scheduled_alerting_three = " خطة  الدفاع 3";
            mcs_scheduled_alerting_four = " خطة  الدفاع 4";
            mcs_wifi_config_cancle      = "التكوين واي فاي إلغاء";
            mcs_wifi_config_prepare     = "واي فاي المتطلبات الأساسية";
            mcs_wifi_config_first       = "الأجهزة والهواتف النقالة وأجهزة التوجيه تبقى في حدود 1 متر";
            mcs_wifi_config_second      = "عند تكوين واي فاي، ويمكن للجهاز تقم بتوصيل كابل الشبكة";
            mcs_wifi_config_third       = "اضغط على RESET إعادة تعيين حفرة ثانية واحدة ثم حرر";
            mcs_wifi_config_success     = "نجاح التكوين";
            mcs_wifi_config_failure     = "فشل التكوين";
            mcs_failure_prompt          = "يرجى المحاولة مرة أخرى أو العودة للتحقق WIFI كلمة المرور يتم إدخالها بشكل صحيح";
            mcs_display_password        = "عرض كلمة المرور";
            mcs_action_smart_config_wifi = "معالج التكوين";
            mcs_wifi_invalid            = "الشبكة لا واي فاي، يرجى الاتصال واي فاي!";
            mcs_phone_not_connect_wifi  = "شبكة واي فاي غير متصل";
            mcs_prompt_check_connection = "الكاميرا ليست على الانترنت، والتحقق من خط اتصال الكامير";
            mcs_wifi_cfg_ready          = "استعداد";
            mcs_reset_complete          = "إعادة تعيين اكتمال";
            mcs_how_to_restore_factory_settings = "كيفية استعادة ضبط المصنع: استخدام دبوس RESET الضغط على اعادة فتحه في أسفل الكاميرا لأكثر من 10 ثوان";
            mcs_forgetpass_action_wizard = "اضغط RESET ثقب إعادة تعيين 10 ثانية بعد الإفراج عنهم، الجهاز سيتم إعادة تشغيل تلقائيا إعادة تعيين كلمة المرور للمشرف";
            mcs_prompt_check_device_connection = "الجهاز لا غير متواجد، والتحقق من الأسلاك لتوصيل الجهاز";
            mcs_input_wifi_name         = "يرجى إدخال اسم واي فاي";
            mcs_action_previous         = "سابق";
            mcs_io_alert_range_hint     = "IO الوقت في حالة تأهب يجب أن تكون أقل من 60 ثانية";
            mcs_io_alert_time           = "الوقت IO إنذار (في ثواني)";
            mcs_smart                   = "ذكي";
            mcs_plan                    = "خطة";
            mcs_mute                    = "أخرس";
            mcs_wind_speed              = "سرعة الرياح";
            mcs_one                     = "والعتاد واحد";
            mcs_two                     = "اثنين من العتاد";
            mcs_three                   = "ثلاثة العتاد";
            mcs_purify_mode             = "وضع تنقية";
            mcs_video_list              = "قائمة الفيديو";
            mcs_wifi_cfg_restore_factory_settings = "عقد الهاتف المحمول بالقرب من الجهاز، إذا لم يقم جهاز واي فاي، واضغط على اعادة فتحه لثانية واحدة ثم الإفراج عنهم، الجهاز سوف استعادة لضبط المصنع وإعادة تشغيل تلقائيا";
            mcs_mask_settings           = "ضبط قناع";
            mcs_notification_settings   = "إعدادات الإشعار";
            mcs_alarm_settings          = "ضبط المنبه";
            mcs_motion_detection        = "تحسس الحركة";
            mcs_io_alarm                = "I/O إنذار";
            mcs_connect_status          = "حالة الاتصال";
            mcs_motion_notification     = "التنبيهات والإشعارات";
            mcs_device_connected        = "يتم توصيل الجهاز";
            mcs_start_spray             = "بدء الرش؟";
            mcs_available_network       = "شبكة غير متوفر";
            mcs_select_wifi_wizard      = "الرجاء اختيار شبكة واي فاي أولا";
            mcs_input_wifi_password     = "إدخال واي فاي كلمة المرور";
            mcs_device_admin_password   = "الجهاز المشرف كلمة السر";
            mcs_device_guest_password   = "جهاز كلمة ضيف";
            mcs_user_admin_password     = "المشرف المستخدم كلمة السر";
            mcs_user_guest_password     = "المستخدم كلمة السر ضيف";
            mcs_save_network_set        = "حفظ مجموعة شبكة وكلمة المرور";
            mcs_nickname_not_set        = "لم يتم تعيين الكاميرا كنية";
            mcs_current_wifi            = "واي فاي الحالي";
            mcs_current_password_strength = "قوة كلمة المرور الحالية";
            mcs_new_password_strength   = "قوة كلمة المرور الجديدة";
            mcs_needs_to_open_the_DHCP  = "يحتاج جهاز التوجيه الخاص بك لفتح DHCP (تلقائيا الحصول على IP) وظيفة، وإذا كانت محاولة غير ناجحة، يرجى الاتصال بمسؤول.";
            mcs_picture                 = "صورة";
            mcs_quality                 = "جودة";
            mcs_size                    = "حجم";
            mcs_guest_login             = "دخول النزيل";
            mcs_audio_and_video         = "الصوت / الفيديو";
            mcs_volume                  = "حجم ";
            mcs_smooth                  = "ناعم";
            mcs_clear                   = "واضح";
            mcs_handsfree               = "تكلم الحر";
            mcs_headphone               = "سماعة";
            mcs_my                      = "لي";
            mcs_customer_service        = "خدمة العملاء";
            mcs_firefox_flash_uninstall = "البرنامج المساعد فلاش الخاص بك هو غير متوفر، والحل يرجى الرجوع https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "القطعة";
            mcs_plug_load               = "الإضافات الحمل";
            mcs_plug_load_refuse        = "لا تقم بتحميل الإضافات";
            mcs_plug_load_auto          = "أوتوماتيكي";
            mcs_option                  = "خيارات";
            mcs_option_ok               = "حدد";
            mcs_voice_call_fails        = "فشلت المكالمة الصوتية، والتحقق من الشبكة";
            mcs_umounted_prompt         = "إذا كان إلغاء تحميل?";
            mcs_signup_prompt           = "الجديد هنا?";
            mcs_wifi_connect_sucess_prompt = " ملاحظة:  واي فاي  تعمل بشكل صحيح،  يمكنك الآن  قطع الشبكة ";
            mcs_manual_input_prompt     = " أجهزة الإدخال  معرف";
            mcs_qrscan_prompt           = "  أنت لم  يسمح  هذا التطبيق  الوصول إلى  الكاميرا الخاصة بك  في  اي فون  ، يرجى  وضع  \'  \'  \'-  \' -  \'  \'  الخصوصية  الكاميرا  في  العثور على  وظيفة  ،  Vimtag  \'  اسم  \'  تطبيق  تعديل. ";
            mcs_select_network_style    = " اختر شبكة  الاتصال: ";
            mcs_push                    = "إعلان";
            mcs_connect_power_prompt    = " ملاحظة:  الجهاز لا  على الانترنت،  يرجى  التأكد من  توصيل الطاقة ";
            mcs_fail_microphone         = " لا يمكن الوصول إلى  ميكروفون ";
            mcs_microphone_prompt       = "لم تكن للسماح لهذا التطبيق للوصول إلى الميكروفون، في \\’مجموعة’ اي فون - لخصوصية \\’- ميزة’ ميكروفون \\’، والعثور على اسم التطبيق’ Vimtag \\’إلى تعديل";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = " حذف ...";
            mcs_event                   = "الحدث";
            mcs_one_hour                = "ساعة";
            mcs_half_hour               = "نصف ساعة";
            mcs_five_min                = "خمس دقائق";
            mcs_category                = "الفئات";
            mcs_time_length             = "طول الوقت";
            mcs_new                     = "جديد";
            mcs_week_setting_prompt     = "يوم  لا يمكن أن تكون فارغة";
            mcs_time_setting_prompt     = "تحديد الوقت  لا يمكن أن تكون فارغة";
            mcs_today                   = "اليوم";
            mcs_wifi_config_prepare     = "واي فاي المتطلبات الأساسية";
            mcs_wifi_password           = "واي فاي كلمة المرور";
            mcs_register_prompt         = "يرجى  تسجيل حسابك  !";
            mcs_click_login             = "اضغط على تسجيل الدخول";
            mcs_not_login_prompt        = "كنت  لا  تسجيل الدخول  ، انقر فوق  تسجيل الدخول  !";
            mcs_product_presentation    = "الصفحة الرئيسية";
            mcs_help_feedback           = "مساعدة";
            mcs_help_information        = "مساعدة";
            mcs_feedback                = "ردود الفعل";
            mcs_connect_wifi_prompt     = "اتصال  واي فاي";
            mcs_cloud                   = "ترقية في وقت لاحق";
            mcs_demo                    = "عرض";
            mcs_shortest                = "أقصر";
            mcs_no_history              = "لا يوجد شئ";
            mcs_download_pc_client      = "اضغط هنا لتحميل العميل PC";
            mcs_accounts_bind_email_exist = " هذا الحساب  قد تم  ربط  أكثر من  بريد ";
            mcs_accounts_bind_email_busy = " هذا البريد  قد  تم  ربط  الحساب ";
        }/* ar */
        else if(lang == "ru")
        {
            mcs_name                    = "Имя";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Имя";
            mcs_old_nick                = "Имя пользователя";
            mcs_linked                  = "Подключено";
            mcs_sign_in                 = "Войти";
            mcs_back                    = "Назад";
            mcs_add                     = "Добавить";
            mcs_add_device              = "Добавить камеру";
            mcs_device_existed          = "Устройство уже добавлено";
            mcs_cancel                  = "Отмена";
            mcs_exit                    = "Выход";
            mcs_remember_password       = "Сохранить пароль";
            mcs_password_remembered     = "Пароль сохранен";
            mcs_sign_ining              = "Авторизация...";
            mcs_cloud_server            = "Облачный сервер";
            mcs_input_device_id         = "Введите ID номер камеры";
            mcs_input_username          = "Введите логин";
            mcs_input_email_addr        = "Введите адрес электронной почты";
            mcs_email_address           = "адрес электронной почты";
            mcs_email                   = "почтовый ящик";
            mcs_binding                 = "обязательный";
            mcs_binding_email           = "Связывание сообщения";
            mcs_binding_send_prompt     = "Связывание сообщения";
            mcs_binding_email_prompt    = "Связывание сообщения";
            mcs_input_password          = "Введите пароль";
            mcs_access_server_failed    = "Ошибка подключения к серверу";
            mcs_device_offline          = "Камера не в сети";
            mcs_invalid_password        = "Неверный пароль";
            mcs_invalid_dev             = "Устройство не существует";
            mcs_login_faided            = "Ошибка при входе";
            mcs_invalid_qrcode          = "Неверный QR-код ";
            mcs_please_input_username   = "Введите логин";
            mcs_please_input_password   = "Вводите пароль";
            mcs_qrcode_scan_hint        = "Держите окно в нижней части устройства выравнивается двумерный код";
            mcs_device_list_empty       = "Список оборудование пуст";
            mcs_record_list_is_empty    = "Список видиеозаписей пуст";
            mcs_password_expired        = "Истек срок действия пароля";
            mcs_set_video_size          = "Задать разрешение видеопотока";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Автоматически";
            mcs_normal_640x360          = "Стандартное [640x360]";
            mcs_half_320x180            = "Среднее [320x180]";
            mcs_small_160x90            = "Минимальное [160x90]";
            mcs_play                    = "Воспроизведение";
            mcs_settings                = "Настройки";
            mcs_messages                = "Сообщения";
            mcs_alarm                   = "Тревога";
            mcs_delete                  = "Удалить";
            mcs_delete_camera           = "Удалить ";
            mcs_apply                   = "Применить";
            mcs_speed                   = "Скорость";
            mcs_others                  = "Другие";
            mcs_audio                   = "Звук";
            mcs_speaker                 = "Динамик";
            mcs_mic                     = "Микрофон";
            mcs_power_frequency         = "Частота сети питания";
            mcs_online_upgrade          = "Обновить ПО через интернет";
            mcs_restore_the_factory_settings = "Восстановить заводские установки";
            mcs_restore                 = "Восстановить";
            mcs_restore_camera          = "Перезапуск устройства";
            mcs_start_upgrade           = "Начать обновление";
            mcs_system                  = "Системные";
            mcs_system_settings         = "Системные установки";
            mcs_online                  = "В сети";
            mcs_offline                 = "Не в сети";
            mcs_query                   = "Показать";
            mcs_begin_time              = "Начало интервала";
            mcs_end_time                = "Конец интервала";
            mcs_mode                    = "Режим";
            mcs_opened                  = "Открытый";
            mcs_high                    = "Высокий";
            mcs_middle                  = "Средний";
            mcs_low                     = "Низкий";
            mcs_io_alert_input          = "Вход I/O";
            mcs_io_alert_output         = "Выход I/O";
            mcs_normally_open           = "Н.О.";
            mcs_normally_close          = "Н.З.";
            mcs_motion_detection_sensitivity = "Чувствительность датчика движения";
            mcs_daytime                 = "День";
            mcs_night                   = "Ночь";
            mcs_sdcord                  = "SD карта";
            mcs_storage_device          = "Устройства хранения данных";
            mcs_set_mask                = "Маска";
            mcs_status                  = "Состояние";
            mcs_capacity                = "Объем";
            mcs_usage                   = "Занято";
            mcs_format                  = "Форматировать";
            mcs_repair                  = "Восстановить";
            mcs_formating               = "Форматирование";
            mcs_repairing               = "Восстановление";
            mcs_mounted                 = "Подключена";
            mcs_unmounted               = "Отключена";
            mcs_mount                   = "Подключить";
            mcs_unmount                 = "Отключить";
            mcs_ethernet                = "Проводная сеть";
            mcs_wifi                    = "Беспроводная сеть";
            mcs_enabled                 = "Включено";
            mcs_mac_address             = "MAC адрес";
            mcs_network_status          = "Состояние сети";
            mcs_wifi_mode               = "Режим Wi-Fi";
            mcs_client                  = "Клиент";
            mcs_ap                      = "ТД";
            mcs_start_address           = "Начальный адрес";
            mcs_end_address             = "Конечный адрес";
            mcs_gateway                 = "Шлюз";
            mcs_select_network          = "Выберите сеть";
            mcs_dhcp_ip                 = "Использовать DHCP для получения IP";
            mcs_dhcp_dns                = "Использовать DHCP для получения DNS";
            mcs_ip_address              = "IP адрес";
            mcs_network_mask            = "Маска подсети";
            mcs_input_secondary_dns     = "Введите вторичный DNS";
            mcs_secondary_dns           = "Вторичный DNS";
            mcs_input_dns               = "Введите DNS";
            mcs_input_alternate_dns     = "Введите запасной DNS";
            mcs_input_ip                = "Введите IP адрес";
            mcs_input_gateway           = "Введите шлюз";
            mcs_input_network_mask      = "Введите маску подсети";
            mcs_wifi_list               = "Wi-Fi сети";
            mcs_display_date            = "Отображать дату";
            mcs_date_format             = "Формат даты";
            mcs_display_time            = "Отображать время";
            mcs_time_format             = "Формат времени";
            mcs_24_hour                 = "24 часовой";
            mcs_12_hour                 = "12 часовой";
            mcs_display_weeks           = "Отображать день недели";
            mcs_date_time               = "Дата/время";
            mcs_set_time                = "Задать время";
            mcs_set_week                = "Задать неделю";
            mcs_stream                  = "Поток данных";
            mcs_encode                  = "Тип кодека";
            mcs_resolution              = "Разрешение";
            mcs_frame_fate              = "Кадров в секунду";
            mcs_maximum_bitrate         = "Максимальный битрейт";
            mcs_minimum_bitrate         = "Минимальный битрейт";
            mcs_i_frame_interval        = "Интервал I-Frame";
            mcs_video                   = "Видео";
            mcs_sampling_rate           = "Частота отбора(kHz)";
            mcs_nickname                = "Никнейм";
            mcs_old_password            = "Старый пароль";
            mcs_confirm_password        = "Подтвердить пароль";
            mcs_modify_password         = "Изменить пароль";
            mcs_password                = "Пароль";
            mcs_admin_password          = "Пароль администратора";
            mcs_guest_password          = "Гостевой Пароль";
            mcs_product_info            = "Информация о камере";
            mcs_software_version        = "Версия ПО";
            mcs_device_id               = "Код камеры";
            mcs_operation               = "Операция";
            mcs_record                  = "Видеозапись";
            mcs_record_2                = "Видеозапись";
            mcs_upgrade_now             = "Обновить сейчас";
            mcs_upgrading               = "Идет обновление";
            mcs_already_latest_version  = "Установлена последняя версия";
            mcs_sensitivty              = "Чувствительность";
            mcs_user_defined            = "Пользовтельский";
            mcs_time                    = "Время";
            mcs_date                    = "Дата";
            mcs_finish                  = "Закончить";
            mcs_fail                    = "Произошла ошибка";
            mcs_motion                  = "По движению";
            mcs_start                   = "Начать";
            mcs_talk                    = "Говорите";
            mcs_password_input_inconsistent = "Пароли не совпадают";
            mcs_input_6_to_20_litters   = "Входные 6-20 буквы (A-Z, Z-) или цифры (0-9)";
            mcs_user_letter_range_hint  = "счета  для  20  цифр  или  букв  (  0 - 9  )  (  a - z  ,  должны  начинаться с буквы  a - z  )";
            mcs_password_range_hint     = "Пароль должен быть 6-20 букв или цифр";
            mcs_begin_with_the_letters  = "Должен начинаться с буквы";
            mcs_sign_up                 = "Войти";
            mcs_sign_up_failed          = "Ошибка входа";
            mcs_successful_sign_up      = "Выполнен вход";
            mcs_are_you_sure_delete     = "Вы уверены, что хотите удалить?";
            mcs_failed_to_set_the       = "Ошибка сохранения настроек";
            mcs_set_successfully        = "Настройки сохранены";
            mcs_downloading             = "Скачивание";
            mcs_wrote                   = "Записано";
            mcs_visit_again_later       = "Пожалуйста, попробуйте зайти позже";
            mcs_restart_failed          = "Ошибка перезапуска";
            mcs_upgrade_failed          = "Ошибка при обновлении";
            mcs_connnected              = "Соединено";
            mcs_connnected_to           = "Подключение к";
            mcs_not_select              = "Не выбрано";
            mcs_message_list            = "Список тревог";
            mcs_saved_password          = "Пароль сохранен";
            mcs_alert                   = "Тревога";
            mcs_no_record               = "Нет видеозаписи";
            mcs_new_about               = "Новый : об устройстве";
            mcs_device                  = "Камера";
            mcs_config                  = "Настройка";
            mcs_change_password_failed  = "Ошибка при смене пароля";
            mcs_do_you_want_restart     = "Перезапустить камеру?";
            mcs_do_you_want_restore     = "Восстановить заводские настройки?";
            mcs_do_you_want_upgrade     = "Обновить версию ПО?";
            mcs_load_end                = "Данные загружены";
            mcs_loading                 = "Загружаю...";
            mcs_down_refresh            = "Потяните вниз для обновления";
            mcs_release_refresh         = "Обновить релиз";
            mcs_refreshing              = "освежающий";
            mcs_release_then_loading_data_hint = "Очистить загруженные данные";
            mcs_pull_refresh_hint       = "Потяните вверх для обновления";
            mcs_restarting              = "Перезапускаю";
            mcs_upgraded_time           = "Время обновления : ";
            mcs_done                    = "Готово";
            mcs_playback                = "Повтор видео";
            mcs_i_o_alarm               = "Тревожный вход";
            mcs_alarm_action            = "Действие при тревоге";
            mcs_alarm_sources           = "Тип тревоги";
            mcs_io_output               = "Тревожный выход";
            mcs_snapshots               = "Скриншот";
            mcs_snapshot                = "Скриншот";
            mcs_snapshot_interval       = "Интервал снятия скриншотов (сек.)";
            mcs_pre_record_length       = "Длительность предварительной записи (сек.)";
            mcs_nick_range_hint         = "Никнейм должен быть менше 20 букв или цифр";
            mcs_save                    = "Сохранить";
            mcs_close                   = "Закрыть";
            mcs_snapshoting             = "Фотосъемка";
            mcs_snapshot_failed         = "Ошибка скриншота";
            mcs_record_failed           = "Ошибка видеозаписи";
            mcs_saved_successfully      = "Сохранен в фотоальбоме";
            mcs_save_failed             = "Ошибка сохранения";
            mcs_restart_to_take_effect  = "Необходим перезапуск";
            mcs_please_allow_access_album = "Пожалуйста, разрешите программе доступ к Вашему фотоальбому.";
            mcs_ios_privacy_setting_for_photo_prompt = "Вы можете изменить настройки доступа программы в меню Настройки->Приватность->Фотографии.";
            mcs_please_allow_access_camera = "Пожалуйста, разрешите доступ программе к вашей камере";
            mcs_ios_privacy_setting_for_camera_prompt = "Вы можете изменить настройки доступа программы в меню Настройки->Приватность->Kамера";
            mcs_busy_when_write         = "Недоступно для записи";
            mcs_unknown_error           = "Неизвестная ошибка";
            mcs_i_know                  = "Да, я знаю";
            mcs_segment                 = "Сегмент";
            mcs_please_relogin          = "Пожалуйста, зайдите заново";
            mcs_change_password_succeed = "Пароль изменен";
            mcs_upgrade_to_ver          = "Обновить версию";
            mcs_restore_failed          = "Ошибка восстановления";
            mcs_please_restart          = "Пожалуйста, перезапустите ";
            mcs_keep_network_settings   = "Настройки Бронирование сети и пароль";
            mcs_not_connected           = "Нет соединения";
            mcs_sdcard_not_ready        = "SD карта не готова";
            mcs_device_not_exist        = "Устройство недоступно";
            mcs_disable                 = "Отключено";
            mcs_to_determine_the        = "Для определения";
            mcs_alert_on                = "Включить тревогу";
            mcs_alert_off               = "Выключить тревогу";
            mcs_alert_onoff             = "Оповещать вкл / выкл";
            mcs_monday                  = "Понедельник";
            mcs_tuesday                 = "Вторник";
            mcs_wednesday               = "Среда";
            mcs_thursday                = "Четверг";
            mcs_friday                  = "Пятница";
            mcs_saturday                = "Суббота";
            mcs_sunday                  = "Воскресенье";
            mcs_mon                     = "Понедельник";
            mcs_tue                     = "Вторник";
            mcs_wed                     = "Среда";
            mcs_thu                     = "Четверг";
            mcs_fri                     = "Пятница";
            mcs_sat                     = "Суббота";
            mcs_sun                     = "Воскресенье";
            mcs_scheduled_recording     = "Видеозапись по расписанию";
            mcs_schedule                = "Видеозапись по расписанию";
            mcs_scheduled_recording_status = "Состояние видеозаписи по расписанию ";
            mcs_folding                 = "Сворачивать";
            mcs_unfolding               = "Разворачивать";
            mcs_end_time_should_lt_begin = "Время окончания должно быть больше времени начала";
            mcs_recording               = "Идет видеозапись";
            mcs_prerecord_interval_range_hint = "Интервал предварительной записи должен быть меньше 6 секунд";
            mcs_snapshot_interval_range_hint = "Интервал снапшота должен быть от 0 до 60";
            mcs_not_ready               = "Не готово";
            mcs_availablesize           = "Доступное место";
            mcs_reboot                  = "Перезапустить";
            mcs_alerter                 = "Тревога";
            mcs_pir                     = "Пассивный ИК-датчик";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Кодек";
            mcs_ok                      = "ОК";
            mcs_fault                   = "Ошибка";
            mcs_sensor_status           = "Статус датчика";
            mcs_about                   = "О программе";
            mcs_reset_now               = "Перезапустить сейчас";
            mcs_reset_later             = "Перезапустить позже";
            mcs_prompt                  = "Напоминание";
            mcs_select                  = "Выбор";
            mcs_available_netword       = "Сеть недоступна, запустить настройки сети?";
            mcs_request_send            = "Загрузка...";
            mcs_blank_device_id         = "Задайте код(ID) камеры";
            mcs_blank_username          = "Задайте имя пользователя ";
            mcs_blank_password          = "Задайте пароль";
            mcs_exist_user              = "Такой пользователь уже существует";
            mcs_invalid_user            = "Имя пользователя недействительно";
            mcs_invalid_email_addr      = "Неверный адрес электронной почты";
            mcs_system_err              = "Ошибка системы";
            mcs_exceed_device           = "Достигнуто предельное количсевто одновременных пользователей";
            mcs_continue                = "Продолжить";
            mcs_prompt_exit             = " ли  выход  ?";
            mcs_device_list             = "список устройств";
            mcs_no_sdcard               = "Нет SD карты";
            mcs_no_hard_disk            = "нет жесткого диска";
            mcs_show_more               = "Показать еще...";
            mcs_shotsnop_exists         = "Снапшот уже создан";
            mcs_input_nick              = "Введите имя";
            mcs_nick_not_empty          = "Задайте имя";
            mcs_input_new_pass          = "Введите новый пароль";
            mcs_input_new_pass_again    = "Введите новый пароль еще раз";
            mcs_new_password            = "Новый пароль";
            mcs_modify_network_prompt   = "Изменения настроек сети может привести к ошибке подключения. Пожалуйста, подтвердите свои изменения?";
            mcs_wifi_disable_prompt     = "Отключить Wi-Fi?";
            mcs_eth_disable_prompt      = "Отключить Ethernet?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Получать автоматически";
            mcs_manually_set            = "Задать в ручную";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "Первичный DNS";
            mcs_client_mode             = "Пользовательский";
            mcs_adhoc_mode              = "Ad-Hoc";
            mcs_connect_fail            = "Ошибка cоединения";
            mcs_dhcp_server             = "DHCP сервер";
            mcs_display_text            = "Отобразить текст";
            mcs_repair_prompt           = "Восстановление может привести к потере некоторых данных на SD-карте. Продолжить?";
            mcs_format_prompt           = "Форматирование удалит все данные на SD-карте. Продолжить?";
            mcs_mount_prompt            = "Загрузить SD карточку, продолжить?";
            mcs_umount_prompt           = "После отключение SD-карты сохранение видеозаписей и скриншотов будет невозможно. Продолжить?";
            mcs_sdcard_reset            = "Настройки сохранены. Перезапустите камеру, чтобы применить настройки.";
            mcs_sdcard_repairing        = "Идет восстановление, ожидайте перезапуска";
            mcs_sdcard_formating        = "Идет форматирование, ожидайте перезапуска";
            mcs_sdcard_umount           = "Отключена";
            mcs_valid                   = "Корректно";
            mcs_io                      = "Тревога внешнего датчика";
            mcs_input                   = "Ввод";
            mcs_outinput                = "Вывод";
            mcs_prompt_alert_on         = "Тревоги включены, продолжить?";
            mcs_auto_sync_date_time     = "автоматическая синхронизация";
            mcs_alarm_record            = "Видеозапись тревоги";
            mcs_username                = "Имя пользователя";
            mcs_re_enter_the_password   = "Введите пароль еще раз";
            mcs_remember_me             = "Запомнить меня";
            mcs_home                    = "Домой";
            mcs_install_the_plug        = "Установить плагин";
            mcs_install_the_video_plug  = "Установиь плагин видео";
            mcs_install_now             = "Установить сейчас";
            mcs_temporarily_installed_use_ordinary_video = "Установить позже";
            mcs_brightness              = "Яркость";
            mcs_contrast                = "Контрастность";
            mcs_color_saturation        = "Насыщенность";
            mcs_sharpness               = "Резкость";
            mcs_duration                = "Продолжительность";
            mcs_index                   = "Индекс";
            mcs_remark                  = "Примечания";
            mcs_media_stream            = "Данные";
            mcs_server                  = "Сервер";
            mcs_media_transfer          = "Передача данных";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Изготовитель";
            mcs_model                   = "Модель";
            mcs_plugin_version          = "Версия плагина";
            mcs_network_interface       = "Сетевой протокол";
            mcs_transfer_protocol       = "Протокол передачи";
            mcs_year                    = "Год";
            mcs_month                   = "Месяц";
            mcs_day                     = "день";
            mcs_hour                    = "Час";
            mcs_minute                  = "Минута";
            mcs_second                  = "Секунда";
            mcs_millisec                = "Mиллисекунды";
            mcs_ntp                     = "Адрес сервера времени";
            mcs_upload_upgrade          = "Скачать и обновить";
            mcs_stop                    = "Остановить";
            mcs_info_rewind             = "Перемотать назад";
            mcs_fast_forward            = "Перемотать вперед";
            mcs_previous_frame          = "Предыдущий кадр";
            mcs_next_frame              = "Следующий кадр";
            mcs_record_audio            = "Запись звука";
            mcs_week                    = "Неделя";
            mcs_all                     = "Все";
            mcs_id                      = "Номер";
            mcs_select_all              = "Выбрать все";
            mcs_call                    = "Вызвать";
            mcs_activation              = "Код активации";
            mcs_caption                 = "Загрузить файл";
            mcs_alarm_device            = "Тревога устройства";
            mcs_not_installed           = "Не установлено";
            mcs_join_us_now             = "Присоединяйтесь к нам";
            mcs_reconnect_please_wait   = "Идет соединение, подождите";
            mcs_erasing                 = "Удаление";
            mcs_writing                 = "Идет запись";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Доступна новая версия";
            mcs_equipment_flip          = "Перевернуть камеру";
            mcs_device_status           = "Состояние камеры";
            mcs_audio_setting           = "Настройка звука";
            mcs_nick_modify             = "Изменить никнейм";
            mcs_ready                   = "Готово";
            mcs_full                    = "Заполнено";
            mcs_connecting              = "Соединяюсь";
            mcs_message_buffering       = "Буферизация сообщений";
            mcs_upgrade_finish          = "Завершить обновление";
            mcs_image                   = "Картинка";
            mcs_bar                     = "Записи";
            mcs_init                    = "Инициализация";
            mcs_confirm_new_password    = "Подтвердите новый пароль";
            mcs_continue_switch_wireless_network = "Переключение сети может вызывать неполадки сети. Продолжить?";
            mcs_restore_factory_settings_prompt = "Восстановление заводских настроек. После восстнаволения настроек оборудование перезапустится. Продолжить?";
            mcs_username_does_not_exis  = "Имя пользователя не существует";
            mcs_username_already_exists = "Имя пользователя уже существует";
            mcs_successful_whether_login = "Регистрация выполнена. Войти?";
            mcs_username_demand         = "Должен начинаться с буквы и содержать 6-20 букв или цифр.";
            mcs_the_password_is_empty   = "Пароль не задан";
            mcs_password_demand         = "Должен начинаться с буквы и содержать 6-20 букв или цифр.";
            mcs_password_empty          = "Пароль не задан";
            mcs_two_password_input_inconsistent = "Введенные пароли не совпадают";
            mcs_the_user_name_is_empty  = "Имя пользователя не задано";
            mcs_upgrade_to_the_latest_version = "Обновить до последней версии";
            mcs_subnet_mask_wrong_format = "Неправильная маска подсети";
            mcs_upgrade_successful_restart_to_take_effect = "Обновление успешно, необходимо перезапустить оборудование для принятия настроек.";
            mcs_need_to_restart_the_camera_to_take_effect = "Необходимо перезапустить оборудование для принятия настроек.";
            mcs_not_allowed_close_two_network_cards = "Нельзя одновременно отключить Ethernet и Wi-Fi";
            mcs_modified_successfully   = "Изменение сохранено";
            mcs_connection_successfully = "Соединение установлено.";
            mcs_connection_is_interrupted = "Соединение разорвано.";
            mcs_devices_in_the_account_overrun = "Достигнуто максимальное количество подключенных камер для пользователя";
            mcs_format_error            = "Формат не верен";
            mcs_change                  = "Изменить";
            mcs_refresh                 = "Обновить";
            mcs_connect                 = "Соединить";
            mcs_upgrade                 = "Обновить ПО";
            mcs_activate                = "Активировать";
            mcs_filter                  = "Фильтровать";
            mcs_reset                   = "Сбросить";
            mcs_prompt_alert_off        = "Отключить тревогу?";
            mcs_invalid_server          = "Адрес сервера времени недействителен";
            mcs_upgrade_prompt          = "Обновить ПО оборудование?";
            mcs_restart_prompt          = "Перезапуск устройства, продолжают?";
            mcs_repeat                  = "Повторить";
            mcs_scheduled_one           = "Вариант расписание записи №1";
            mcs_scheduled_two           = "Вариант расписание записи №2";
            mcs_scheduled_three         = "Вариант расписание записи №3";
            mcs_scheduled_four          = "Вариант расписание записи №4";
            mcs_more                    = "Посмотреть больше";
            mcs_leave                   = "Отпустить для загрузки еще";
            mcs_qrcode_scan             = "Сканирование QR-кода";
            mcs_inserted                = "Установлено";
            mcs_removed                 = "Извлечено";
            mcs_upgrade_init            = "Начать обновление";
            mcs_upgrade_download        = "Скачать обновление";
            mcs_check                   = "Проверить обновление";
            mcs_audio_encoder_config    = "Аудио кодек";
            mcs_video_codec             = "Видео кодек";
            mcs_download                = "Скачать";
            mcs_client_download         = "Скачать клиент";
            mcs_for_more_clarity_smooth_video_experience = "Для более четкого и плавного видео";
            mcs_network                 = "Сеть";
            mcs_mobile_client_download  = "Скачать мобильное приложение";
            mcs_readonly                = "Только для чтения";
            mcs_please_exit_and_relogin = "Пожалуйста, выйдите и войдите еще раз.";
            mcs_add_device_failed       = "Ошибка добавления устройсва";
            mcs_set_password            = "Установить пароль";
            mcs_7x24_hours              = "Круглосуточно";
            mcs_motion_alert            = "Тревога по движению";
            mcs_mtalt                   = "%@ : Тревога по движению";
            mcs_io_alert                = "I/O оповещения";
            mcs_ioalt                   = "%@ : I/O оповещения";
            mcs_time_zone               = "Часовой пояс";
            mcs_select_time             = "Выберите время";
            mcs_now                     = "Сейчас";
            mcs_mipc_have_alert_notification = "Уведомление о тревогах";
            mcs_notification_center     = "Центр уведомлений";
            mcs_sound                   = "Звук";
            mcs_vibration               = "Вибро";
            mcs_clear_cache             = "Очистить кэш";
            mcs_clear_cache_hint        = "Вы уверены, что хотите очистить кэш?";
            mcs_successfully_cleared_cache = "Успешная очистка кэш";
            mcs_app_except_exit_hint    = "Ошибка приложения, программа будет закрыта.";
            mcs_rate_us                 = "Оцените программу";
            mcs_password_too_simple_hint = "Пароль слишком простой, рекомендуем изменить его для улучшения безопасности.";
            mcs_check_for_new_version   = "Проверка наличия новой версии";
            mcs_contact_us              = "Связаться с нами";
            mcs_buffer_time             = "Время буферизации";
            mcs_default                 = "По умолчанию";
            mcs_alarmed_devices         = "Тревога с устройств";
            mcs_aec                     = "Подавление эхо";
            mcs_permission_denied       = "Доступ запрещен";
            mcs_full_screen             = "Во весь экран";
            mcs_forgot_your_password    = "Забыли пароль";
            mcs_your_email              = "Ваш адрес электронной почты";
            mcs_sign_up_confirmation    = "Для подтверждения регистрации пройдите по ссылке, высланной в письме на ваш электронный адрес.";
            mcs_recovery_prompt         = "Пожалуйста, введите адрес электронной почты (имя пользователя), на него будет отправлено сообщение с инструкцией по изменению пароля .";
            mcs_password_reset_confirmation = "Для изменения пароля следуйте инструкциям в письме, высланным на ваш электронный адрес.";
            mcs_recovery_fail_no_mail   = "Не удалось восстановить пароль, введенный адрес электронной почты не найден.";
            mcs_recovery_fail_invalid_link = "Не удалось восстановить пароль, пожалуйста, следуйте инструкции, высланной на ваш электронный адрес";
            mcs_recovery_ok_login       = "Восстановление пароля успешно завершено. Вход в систему.";
            mcs_active_ok_login         = "Успешная активация аккаунта. Вход в систему.";
            mcs_active_fail_invalid_link = "Ошибка активации аккаунта, пожалуйста, попробуйте снова.";
            mcs_login_fail_inactive     = "Аккаунт не активирован. Для активации, пожалуйста, следуйте инструкции, высланной на ваш электронный адрес.";
            mcs_sign_up_again           = "Зарегистрироваться снова";
            mcs_press_start_talk        = "Нажмите, чтобы говорить";
            mcs_release_stop_talk       = "Отпустите, чтобы остановить";
            mcs_delete_device           = "Удалить устройство";
            mcs_success_removed_equipment = "Удалить устройство успешно";
            mcs_remove_equipment_failure = "Удалить отказа оборудования";
            mcs_device_busy             = "Устройство сейчас занято";
            mcs_keep_testing            = "Продолжить тест";
            mcs_notify_tone             = "Мелодия уведомления";
            mcs_float_video             = "Включить всплывающее видео";
            mcs_float_position          = "Плавающее положение видео";
            mcs_video_resolution        = "Разрешение видео";
            mcs_float_resolution        = "Плавающие разрешение видео";
            mcs_top_left                = "Вверху слева";
            mcs_top_right               = "Вверху справа";
            mcs_bottom_left             = "Внизу слева";
            mcs_bottom_right            = "Внизу справа";
            mcs_action_next             = "Следующий";
            mcs_action_cancel           = "Отменить";
            mcs_action_retry            = "Повторите";
            mcs_action_add              = "Добавить";
            mcs_action_apply            = "Применить";
            mcs_action_config           = "Конфигурация";
            mcs_action_skip             = "Пропустить";
            mcs_action_ok               = "Ок";
            mcs_action_add_device       = "Добавить устройство";
            mcs_action_modify_password  = "Изменить пароль";
            mcs_action_config_wifi      = "Настройки Wi-Fi";
            mcs_state_connect_device    = "Подключение устройства";
            mcs_state_connect_device_fail = "Ошибка подключения к устройству.";
            mcs_state_wait_device_online = "В ожидании когда устройство появится онлайн";
            mcs_state_device_online     = "Онлайн";
            mcs_state_success           = "Онлайн";
            mcs_state_add_device_success = "Устройство успешно добавлено";
            mcs_state_add_device_fail   = "Ошибка добавления устройства";
            mcs_state_modify_pass_success = "Пароль успешно изменен";
            mcs_state_modify_pass_fail  = "Ошибка изменения пароля";
            mcs_state_config_wifi_success = "Успешная настройка Wi-Fi";
            mcs_state_config_wifi_fail  = "Ошибка cоединения";
            mcs_state_connecting_to     = "Подключение к";
            mcs_network_connect_type    = "Устройство не в сети, вы убедитесь, что устройство работает-на, а затем выберите Подключение к сети:";
            mcs_prompt_modify_passwd    = "Ваш пароль устройства слишком прост, измените пароль. Новый пароль должен быть не менее, чем из шести символов.";
            mcs_prompt_config_wifi      = "Ваше устройство по-прежнему не подключен к WiFi, пожалуйста, настроить Wi-Fi.";
            mcs_step1_check_connect     = "Шаг 1 : Подключите камеру к роутеру/маршрутизатору сетевым кабелем(он идет в комплекте с камерой).";
            mcs_first_step_ethernet_connect = "Шаг 1: Подключите один конец сетевого кабеля для подключения к маршрутизатору, а другой конец к сетевому порту устройства доступа.";
            mcs_step2_check_connect     = "Шаг 2: Включите  питание камеры.";
            mcs_second_step_ethernet_connect = "Шаг 2: Мощность на вашем устройстве, запустить устройство.";
            mcs_hint_check_network      = "Примечание : Камере Zodikam нужно около 50 секунд для подключения к сети после того, как вы присоединили ее сетевым кабелем к роутеру/маршрутизатору. Если индикатор State2(на корпусе камеры) мигает зеленым, это значит, что соединение произошло успешно, камера онлайн и вы можете перейти к следующему шагу настройки.";
            mcs_the_end                 = "Конец";
            mcs_hint_password_expired   = "Срок действия пароля истек, пожалуйста, повторно добавьте камеру";
            mcs_hint_remove_ethernet    = "Примечание : Соединение по Wi-Fi работает корректно, теперь вы можете отключить сетевой кабель от камеры.";
            mcs_ip_format_incorrect     = "Формат IP-адреса введен неверно";
            mcs_login_sucess            = "Успешный вход";
            mcs_donot_remind            = "Отключить напоминание";
            mcs_clear_cache_signout_hint = "После очистки кэш-памяти вам нужно будет заново войти в систему.Продолжить?";
            mcs_devlist_adddev_hint     = "Нажмите здесь, чтобы добавить оборудование";
            mcs_devlist_menu_hint       = "Нажмите здесь, чтобы установить разрешение";
            mcs_update_failed           = "Ошибка обновления";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "Локальный";
            mcs_set_npapi               = "Если был установлен плагин, пожалуйста посетите \'chrome://flags/#enable-npapi\', Включить NPAPI, ";
            mcs_set_win32k              = "визит \'chrome://flags/#enable-win32k-renderer-lockdown\', инвалидов win32k визуализации блокировки,";
            mcs_restart_browser         = "Перезапустите браузер";
            mcs_download_location       = "Расположение скачиваемых файлов";
            mcs_Networking_mode         = "режим сети";
            mcs_wifi_intelligent_configuration = "подключение Wi-Fi";
            mcs_ethernet_configuration  = "подключение Ethernet";
            mcs_wifi_connect            = "подключение";
            mcs_hard_disk               = "жесткий диск";
            mcs_wifi_is_connection      = "Подключение, пожалуйста, подождите...";
            mcs_wifi_intelligent_configuration_setup_ailure = "WiFi умный конфигурации отказ установки";
            mcs_box_list                = "Список окно";
            mcs_repair_disk_prompt      = "Ремонт диска может потерял некоторые данные, продолжать?";
            mcs_format_disk_prompt      = "Формат диска будут удалены все данные, продолжать?";
            mcs_scheduled_alerting      = "Постановка Программа";
            mcs_scheduled_alerting_one  = "Постановка Программа 1";
            mcs_scheduled_alerting_two  = "Постановка Программа 2";
            mcs_scheduled_alerting_three = "Постановка Программа 3";
            mcs_scheduled_alerting_four = "Постановка Программа 4";
            mcs_wifi_config_cancle      = "Конфигурация WiFi отменить";
            mcs_wifi_config_prepare     = "WiFi Предпосылки";
            mcs_wifi_config_first       = "Устройства и мобильные телефоны и маршрутизаторы поддерживают в интервале 1 м";
            mcs_wifi_config_second      = "При настройке WiFi, устройство не может подключить сетевой кабель";
            mcs_wifi_config_third       = "Нажмите RESET, отверстие сброса один второй и затем отпустите";
            mcs_wifi_config_success     = "успех конфигурации";
            mcs_wifi_config_failure     = "Конфигурация не удалось";
            mcs_failure_prompt          = "Пожалуйста, попробуйте еще раз или вернуться, чтобы проверить WIFI пароль введен правильно";
            mcs_display_password        = "показать пароль";
            mcs_action_smart_config_wifi = "Мастер настройки";
            mcs_wifi_invalid            = "Ваша сеть не Wi-Fi, подключите WiFi!";
            mcs_phone_not_connect_wifi  = "Wi-Fi сеть не подключены";
            mcs_prompt_check_connection = "Камера не в сети, проверьте подключение камеры.";
            mcs_wifi_cfg_ready          = "Готовы";
            mcs_reset_complete          = "Сброс полная";
            mcs_how_to_restore_factory_settings = "Как восстановить заводские настройки: используйте сброса ПИН нажав RESET, отверстие в нижней части камеры в течение более 10 секунд";
            mcs_forgetpass_action_wizard = "Нажмите кнопку RESET Сброс отверстие 10 секунд после выхода, устройство автоматически перезагрузится сбрасывает пароль для администратора";
            mcs_prompt_check_device_connection = "Ваше устройство не в сети, проверить проводку для подключения устройства";
            mcs_input_wifi_name         = "Пожалуйста, название входа WiFi";
            mcs_action_previous         = "предыдущий";
            mcs_io_alert_range_hint     = "IO оповещения время должно быть меньше, чем 60 секунд";
            mcs_io_alert_time           = "IO время сигнала(cek.)";
            mcs_smart                   = "умный";
            mcs_plan                    = "план";
            mcs_mute                    = "mute";
            mcs_wind_speed              = "скорость ветра";
            mcs_one                     = "одна передача";
            mcs_two                     = "Два передач";
            mcs_three                   = "Три передач";
            mcs_purify_mode             = "режим очистки";
            mcs_video_list              = "список видео";
            mcs_wifi_cfg_restore_factory_settings = "Halten Sie das Mobiltelefon in der Nähe von Gerät, wenn Gerät ist WiFi konfiguriert, drücken Sie die RESET-Öffnung für eine Sekunde dann los, wird das Gerät auf die Werkseinstellungen wiederherstellen und automatisch neu startet";
            mcs_mask_settings           = "настройки маски";
            mcs_notification_settings   = "настройки уведомлений";
            mcs_alarm_settings          = "настройки сигнализации";
            mcs_motion_detection        = "Определение Движения";
            mcs_io_alarm                = "О сигнализации I /";
            mcs_connect_status          = "Состояние подключения";
            mcs_motion_notification     = "Предупреждения и уведомления";
            mcs_device_connected        = "Устройство подключено";
            mcs_start_spray             = "Начните распыление?";
            mcs_available_network       = "Сеть недоступна";
            mcs_select_wifi_wizard      = "Пожалуйста, выберите WiFi сеть во-первых";
            mcs_input_wifi_password     = "Input WiFi jelszót";
            mcs_device_admin_password   = "Пароль администратора устройства";
            mcs_device_guest_password   = "Гостевой пароль устройства";
            mcs_user_admin_password     = "Пользователь Admin Password";
            mcs_user_guest_password     = "Гостевой пароль пользователя";
            mcs_save_network_set        = "Сохранить настройки сети и пароль";
            mcs_nickname_not_set        = "Ник камера не установлена";
            mcs_current_wifi            = "Текущий Wi-Fi";
            mcs_current_password_strength = "В настоящее время численность пароль";
            mcs_new_password_strength   = "Новая сила пароль";
            mcs_needs_to_open_the_DHCP  = "Маршрутизатор должен открыть DHCP (автоматическое получение IP) функцию, если попытка будет неудачной, обратитесь к администратору.";
            mcs_picture                 = "картина";
            mcs_quality                 = "качество";
            mcs_size                    = "размер";
            mcs_guest_login             = "Гость Войти";
            mcs_audio_and_video         = "Аудио / Видео";
            mcs_volume                  = " громкость ";
            mcs_smooth                  = "гладкий";
            mcs_clear                   = "ясно";
            mcs_handsfree               = "Громкая связь";
            mcs_headphone               = "наушники";
            mcs_my                      = "мой";
            mcs_customer_service        = "обслуживание клиентов";
            mcs_firefox_flash_uninstall = "Ваш флэш-плагин не доступен, пожалуйста, обратитесь решение https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Виджет";
            mcs_plug_load               = "плагины нагрузки";
            mcs_plug_load_refuse        = "Не загружать плагины";
            mcs_plug_load_auto          = "автоматическая";
            mcs_option                  = "опции";
            mcs_option_ok               = "определить";
            mcs_voice_call_fails        = "Голосовой вызов не удается, проверьте сеть";
            mcs_umounted_prompt         = "о том, чтобы отключить?";
            mcs_signup_prompt           = "здесь?";
            mcs_wifi_connect_sucess_prompt = " Примечание  :  WiFi  нормальной работы,  теперь вы можете  отключить  сети ";
            mcs_manual_input_prompt     = "ручной ввод оборудования id";
            mcs_qrscan_prompt           = " Вы еще не  позволяет  этого  приложения для доступа к  вашей  камеры,  пожалуйста,  в  iPhone  \'  Настройки  конфиденциальности  \'  -  \'  \'  -  \'  фотоаппарат  ‘  в  ‘  имя  функции  ,  найти  для  Vimtag  \\’  приложений  для пересмотра. ";
            mcs_select_network_style    = " режим  выбора  сети связи  : ";
            mcs_push                    = "объявление";
            mcs_connect_power_prompt    = " Примечание  :  оборудование  не онлайн  ,  пожалуйста,  убедитесь, что  уже  подключения электроснабжения ";
            mcs_fail_microphone         = " Невозможно получить доступ к  микрофон";
            mcs_microphone_prompt       = "Вы не позволяют это приложение, чтобы получить доступ к микрофон, в «набор» iPhone - СО «конфиденциальность» - функция ‘Микрофон’, найти имя приложения \\’Vimtag \'быть изменены";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "Удалить...";
            mcs_event                   = "Мероприятия";
            mcs_one_hour                = "час";
            mcs_half_hour               = "полчаса";
            mcs_five_min                = "пять  минут";
            mcs_category                = "категории";
            mcs_time_length             = "продолжительность";
            mcs_new                     = "новый";
            mcs_week_setting_prompt     = "недели  не может быть пустым";
            mcs_time_setting_prompt     = "время установки  не может быть пустым";
            mcs_today                   = "сегодня";
            mcs_wifi_config_prepare     = "WiFi Предпосылки";
            mcs_wifi_password           = "Wi-Fi пароль";
            mcs_register_prompt         = " Пожалуйста,  зарегистрируйтесь  счета  ! ";
            mcs_click_login             = "Нажмите кнопку  входа";
            mcs_not_login_prompt        = "Вы также  не  войти, пожалуйста,  нажмите на кнопку  войти  !";
            mcs_product_presentation    = "Домашняя страница";
            mcs_help_feedback           = "помочь";
            mcs_help_information        = "помочь";
            mcs_feedback                = "обратной связи";
            mcs_connect_wifi_prompt     = "соединение  WiFi";
            mcs_cloud                   = "обновить позже";
            mcs_demo                    = "демо -";
            mcs_shortest                = "кратчайший";
            mcs_no_history              = "Нет истории";
            mcs_download_pc_client      = "Нажмите, чтобы скачать клиент PC";
            mcs_accounts_bind_email_exist = " этот номер счета  уже  связывают с  почтовый ящик ";
            mcs_accounts_bind_email_busy = "этот ящик  уже  связывают с  счета ";
        }/* ru */
        else if(lang == "hu")
        {
            mcs_name                    = "Név";
            CFBundleDisplayName         = "MIPC";
            mcs_nick                    = "Név";
            mcs_old_nick                = "Becenév";
            mcs_linked                  = "Kapcsolódva";
            mcs_sign_in                 = "Belépés";
            mcs_back                    = "Vissza";
            mcs_add                     = "Hozzáadás";
            mcs_add_device              = "Eszköz hozzáadása";
            mcs_device_existed          = "Eszköz már létezik";
            mcs_cancel                  = "Törlés";
            mcs_exit                    = "Kilépés";
            mcs_remember_password       = "Emlékezzen a jelszóra";
            mcs_password_remembered     = "Jelszó megjegyezve";
            mcs_sign_ining              = "Belépés...";
            mcs_cloud_server            = "Cloud szerver";
            mcs_input_device_id         = "Adja meg az eszköz azonosítóját!";
            mcs_input_username          = "Adja meg a felhasználónevet!";
            mcs_input_email_addr        = "Adja meg e-mail címét";
            mcs_email_address           = "E-mail cím:";
            mcs_email                   = "Postafiók";
            mcs_binding                 = "Binding";
            mcs_binding_email           = "Binding postafiók";
            mcs_binding_send_prompt     = "Binding postafiók";
            mcs_binding_email_prompt    = "Binding postafiók";
            mcs_input_password          = "Adja meg a jelszót!";
            mcs_access_server_failed    = "A szerver nem elérhető.";
            mcs_device_offline          = "A kamera nem elérhető.";
            mcs_invalid_password        = "Hibás jelszó.";
            mcs_invalid_dev             = "Eszköz nem létezik";
            mcs_login_faided            = "Sikertelen bejelentkezés.";
            mcs_invalid_qrcode          = "Hibás QR kód.";
            mcs_please_input_username   = "Adja meg a felhasználónevet!";
            mcs_please_input_password   = "Adja meg a jelszót!";
            mcs_qrcode_scan_hint        = "Tartsa a doboz alján a készülék igazodik kétdimenziós kód";
            mcs_device_list_empty       = "Nincs beállítva berendezés";
            mcs_record_list_is_empty    = "Nincs rögzített felvétel.";
            mcs_password_expired        = "A jelszó lejárt.";
            mcs_set_video_size          = "Felbontás beállítása";
            mcs_hd_1280x720             = "HD [1280x720]";
            mcs_auto                    = "Automatikus";
            mcs_normal_640x360          = "Normál [640x360]";
            mcs_half_320x180            = "Közepes [320x180]";
            mcs_small_160x90            = "Alacsony [160x90]";
            mcs_play                    = "Lejátszás";
            mcs_settings                = "Beállítások";
            mcs_messages                = "Üzenetek";
            mcs_alarm                   = "Riasztás";
            mcs_delete                  = "Törlés";
            mcs_delete_camera           = "Törlés ";
            mcs_apply                   = "Alkalmaz";
            mcs_speed                   = "Sebesség";
            mcs_others                  = "Egyebek";
            mcs_audio                   = "Audió";
            mcs_speaker                 = "Hangszóró";
            mcs_mic                     = "Mikrofon";
            mcs_power_frequency         = "Táp frekvencia";
            mcs_online_upgrade          = "Online frissítés";
            mcs_restore_the_factory_settings = "Alapértelmezett beállítások";
            mcs_restore                 = "Visszaállítás";
            mcs_restore_camera          = "Újraindítás eszköz";
            mcs_start_upgrade           = "Frissítés elindítása";
            mcs_system                  = "Rendszer";
            mcs_system_settings         = "Rendszer beállítások";
            mcs_online                  = "Bekapcsolva";
            mcs_offline                 = "Kikapcsolva";
            mcs_query                   = "Keresés";
            mcs_begin_time              = "Felvétel kezdete";
            mcs_end_time                = "Felvétel vége";
            mcs_mode                    = "Mód";
            mcs_opened                  = "Megnyitva";
            mcs_high                    = "Magas";
            mcs_middle                  = "Közepes";
            mcs_low                     = "Alacsony";
            mcs_io_alert_input          = "I/O bemenet";
            mcs_io_alert_output         = "I/O kimenet";
            mcs_normally_open           = "Rendben megnyitva";
            mcs_normally_close          = "Rendben bezárva";
            mcs_motion_detection_sensitivity = "Mozgásérzékelő érzékenysége";
            mcs_daytime                 = "Nappal";
            mcs_night                   = "Éjszaka";
            mcs_sdcord                  = "SD kártya";
            mcs_storage_device          = "tárolóeszközök";
            mcs_set_mask                = "Set maszk";
            mcs_status                  = "Státusz";
            mcs_capacity                = "Kapacitás";
            mcs_usage                   = "Kihasználtság";
            mcs_format                  = "Formázás";
            mcs_repair                  = "Helyreállítás";
            mcs_formating               = "Formázás";
            mcs_repairing               = "Helyreállítás";
            mcs_mounted                 = "Hozzárendelve";
            mcs_unmounted               = "Leválasztva";
            mcs_mount                   = "Hozzárendelés";
            mcs_unmount                 = "Leválasztás";
            mcs_ethernet                = "Ethernet";
            mcs_wifi                    = "Wi-Fi";
            mcs_enabled                 = "Engedélyezett";
            mcs_mac_address             = "MAC address";
            mcs_network_status          = "Státusz";
            mcs_wifi_mode               = "Wi-Fi mód";
            mcs_client                  = "Kliens";
            mcs_ap                      = "Access Point";
            mcs_start_address           = "Kezdő IP cím";
            mcs_end_address             = "Záró IP cím";
            mcs_gateway                 = "Átjáró";
            mcs_select_network          = "Hálózat kiválasztása";
            mcs_dhcp_ip                 = "IP : DHCP engedélyezése";
            mcs_dhcp_dns                = "DNS : DHCP engedélyezése";
            mcs_ip_address              = "IP cím";
            mcs_network_mask            = "Hálózati maszk";
            mcs_input_secondary_dns     = "Másodlagos DNS megadása";
            mcs_secondary_dns           = "Másodlagos DNS";
            mcs_input_dns               = "DNS megadása";
            mcs_input_alternate_dns     = "Alternatív DNS megadása";
            mcs_input_ip                = "IP cím megadása";
            mcs_input_gateway           = "Átjáró megadása";
            mcs_input_network_mask      = "Hálózati maszk megadása";
            mcs_wifi_list               = "Wi-Fi lista";
            mcs_display_date            = "Dátum kijelzése";
            mcs_date_format             = "Dátum formátum";
            mcs_display_time            = "Idő kijelzése";
            mcs_time_format             = "Idő formátum";
            mcs_24_hour                 = "24 órás";
            mcs_12_hour                 = "12 órás";
            mcs_display_weeks           = "Hét kijelzése";
            mcs_date_time               = "Dátum/Idő";
            mcs_set_time                = "Idő beállítása";
            mcs_set_week                = "Hét beállítása";
            mcs_stream                  = "Adatátvitel";
            mcs_encode                  = "Kódolás";
            mcs_resolution              = "Felbontás";
            mcs_frame_fate              = "Képfrissítés (FPS)";
            mcs_maximum_bitrate         = "Мaximum bitráta";
            mcs_minimum_bitrate         = "Minimum bitráta";
            mcs_i_frame_interval        = "I-Frame időköz";
            mcs_video                   = "Videó";
            mcs_sampling_rate           = "Mintavételezési frekvencia(kHz)";
            mcs_nickname                = "Becenév";
            mcs_old_password            = "Régi jelszó";
            mcs_confirm_password        = "Jelszó megerősítése";
            mcs_modify_password         = "Jelszó módosítása";
            mcs_password                = "Jelszó";
            mcs_admin_password          = "Admin jelszó";
            mcs_guest_password          = "Vendég jelszó";
            mcs_product_info            = "Termék infó";
            mcs_software_version        = "Szoftver verzió";
            mcs_device_id               = "Eszköz azonosító";
            mcs_operation               = "Művelet";
            mcs_record                  = "Felvétel";
            mcs_record_2                = "Felvétel";
            mcs_upgrade_now             = "Frissítés most";
            mcs_upgrading               = "Frissítés";
            mcs_already_latest_version  = "Legfrissebb verzió";
            mcs_sensitivty              = "Érzékenység";
            mcs_user_defined            = "Egyedi";
            mcs_time                    = "Idő";
            mcs_date                    = "Dátum";
            mcs_finish                  = "Befejezés";
            mcs_fail                    = "Sikertelen";
            mcs_motion                  = "Mozgás";
            mcs_start                   = "Indítás";
            mcs_talk                    = "Beszéd";
            mcs_password_input_inconsistent = "A jelszó nem megfelelő";
            mcs_input_6_to_20_litters   = "Input 6-20 betű (a-z, A-Z) vagy számokat (0-9)";
            mcs_user_letter_range_hint  = "a számlaszám a 20 szám (0 - 9) (a-z, vagy abc betűvel kezdődik, szükséges A-Z)";
            mcs_password_range_hint     = "Jelszó : 6-20 betű vagy szám";
            mcs_begin_with_the_letters  = "Betűvel kezdődjön!";
            mcs_sign_up                 = "Regisztráció";
            mcs_sign_up_failed          = "Hibás regisztáció";
            mcs_successful_sign_up      = "Sikeres regisztáció";
            mcs_are_you_sure_delete     = "Valóban törölni akarja?";
            mcs_failed_to_set_the       = "Sikertelen beállítás";
            mcs_set_successfully        = "Sikeres beállítás";
            mcs_downloading             = "Letöltés";
            mcs_wrote                   = "Kiírás befejzve";
            mcs_visit_again_later       = "Kérem látogasson vissza később!";
            mcs_restart_failed          = "Az újraindítás nem sikerült";
            mcs_upgrade_failed          = "A firssítés nem sikerült";
            mcs_connnected              = "Kapcsolódva";
            mcs_connnected_to           = "Kapcsolódva";
            mcs_not_select              = "Nincs kiválasztva";
            mcs_message_list            = "Üzenetlista";
            mcs_saved_password          = "Jelszó elmentve";
            mcs_alert                   = "Riasztás";
            mcs_no_record               = "Nincs felvétel";
            mcs_new_about               = "Új : A készülék";
            mcs_device                  = "Eszköz";
            mcs_config                  = "Konfiguráció";
            mcs_change_password_failed  = "A jelszó megváltoztatása nem sikerült";
            mcs_do_you_want_restart     = "Szeretné újraindítani?";
            mcs_do_you_want_restore     = "Szeretné visszaállítani?";
            mcs_do_you_want_upgrade     = "Szeretné frissíteni";
            mcs_load_end                = "Betöltés vége";
            mcs_loading                 = "Betöltés...";
            mcs_down_refresh            = "Léptessen le a frissítéshez!";
            mcs_release_refresh         = "Frissítés kiadás";
            mcs_refreshing              = "üdítő";
            mcs_release_then_loading_data_hint = "A betöltött adatok törlése";
            mcs_pull_refresh_hint       = "Léptessen fel a frissítéshez!";
            mcs_restarting              = "Újraindítás";
            mcs_upgraded_time           = "Frissítési idő : ";
            mcs_done                    = "Befejezve";
            mcs_playback                = "Lejátszás";
            mcs_i_o_alarm               = "I/O riasztás";
            mcs_alarm_action            = "Esemény riasztáskor";
            mcs_alarm_sources           = "Riasztási források";
            mcs_io_output               = "I/O bemenet";
            mcs_snapshots               = "Fénykép";
            mcs_snapshot                = "Fénykép";
            mcs_snapshot_interval       = "Fénykép időköz";
            mcs_pre_record_length       = "az előre rögzített felvétel hossza";
            mcs_nick_range_hint         = "a név nem lehet több 20 karakternél";
            mcs_save                    = "Mentés";
            mcs_close                   = "Bezár";
            mcs_snapshoting             = "fényképezett";
            mcs_snapshot_failed         = "Sikertelen képfelvétel";
            mcs_record_failed           = "Sikertelen videófelvétel";
            mcs_saved_successfully      = "Sikeresen elmentve";
            mcs_save_failed             = "A mentés nem sikerült";
            mcs_restart_to_take_effect  = "Az érvényesítéshez indítson újra!";
            mcs_please_allow_access_album = "Engedélyezze a hozzáférést a MIPC részére a fotóalbumához!";
            mcs_ios_privacy_setting_for_photo_prompt = "A hozzáférést Iphonon a \"Beállítások->Privát->Fotók\", menüpontban a \"MIPC\" alkalmazásnál tudja megváltoztatni.";
            mcs_please_allow_access_camera = "Engedélyezze a hozzáférést a MIPC részére a kamerához!";
            mcs_ios_privacy_setting_for_camera_prompt = "A hozzáférést Iphonon a \"Beállítások->Privát->Kamera\", menüpontban a \"MIPC\" alkalmazásnál tudja megváltoztatni";
            mcs_busy_when_write         = "Nem tud rögzíteni";
            mcs_unknown_error           = "Ismeretlen hiba";
            mcs_i_know                  = "Igen, tudom";
            mcs_segment                 = "Szegmens";
            mcs_please_relogin          = "Kérem, jelentkezzen be újra!";
            mcs_change_password_succeed = "A jelszót sikeresen megváltoztatta";
            mcs_upgrade_to_ver          = "Verzió frissítés";
            mcs_restore_failed          = "Sikertelen visszaállítás";
            mcs_please_restart          = "Kérem, indítsa újra!";
            mcs_keep_network_settings   = "Fenntartások hálózati beállítások és jelszó";
            mcs_not_connected           = "Nincs kapcsolatban";
            mcs_sdcard_not_ready        = "Az SD kártya nem üzemkész";
            mcs_device_not_exist        = "Nem létező eszköz";
            mcs_disable                 = "Nem aktiv";
            mcs_to_determine_the        = "Meghatározni a";
            mcs_alert_on                = "Riasztás bekapcsolása";
            mcs_alert_off               = "Riasztás kikapcsolása";
            mcs_alert_onoff             = "Alert on / off";
            mcs_monday                  = "hétfő";
            mcs_tuesday                 = "kedd";
            mcs_wednesday               = "szerda";
            mcs_thursday                = "csütörtök";
            mcs_friday                  = "péntek";
            mcs_saturday                = "szombat";
            mcs_sunday                  = "vasárnap";
            mcs_mon                     = "hétfő";
            mcs_tue                     = "kedd";
            mcs_wed                     = "szerda";
            mcs_thu                     = "csütörtök";
            mcs_fri                     = "péntek";
            mcs_sat                     = "szombat";
            mcs_sun                     = "vasárnap";
            mcs_scheduled_recording     = "Programozott felvétel";
            mcs_schedule                = "Programozott felvétel";
            mcs_scheduled_recording_status = "Programozott felvétel állapota";
            mcs_folding                 = "Összecsomagolás";
            mcs_unfolding               = "Kibontás";
            mcs_end_time_should_lt_begin = "A befejezés ideje későbbi kell legyen, mint a kezdési idő!";
            mcs_recording               = "Felvétel";
            mcs_prerecord_interval_range_hint = "Az előfelvétel ideje 6 másodpercnél kevesebb kell legyen!";
            mcs_snapshot_interval_range_hint = "A képfelvétel intervallumának 0 és 60 között kell lennie!";
            mcs_not_ready               = "Nem áll készen";
            mcs_availablesize           = "Rendekezésre álló hely";
            mcs_reboot                  = "Újraindítás";
            mcs_alerter                 = "Figyelmeztetés jelző";
            mcs_pir                     = "IR érzékelő";
            mcs_isp                     = "ISP";
            mcs_encoder                 = "Kodolás";
            mcs_ok                      = "OK";
            mcs_fault                   = "Hiba";
            mcs_sensor_status           = "Az érzékelő állapota";
            mcs_about                   = "Az alkalmazásról";
            mcs_reset_now               = "Újraindítás most";
            mcs_reset_later             = "Újraindítás később";
            mcs_prompt                  = "Súgó";
            mcs_select                  = "Kiválasztás";
            mcs_available_netword       = "A hálózat nem elérhető, szeretné beállítani?";
            mcs_request_send            = "Kérés küldése...";
            mcs_blank_device_id         = "Az eszközazonosító megadása kötelező!";
            mcs_blank_username          = "A felhasználónév megadása kötelező!";
            mcs_blank_password          = "A jelszó megadása kötelező";
            mcs_exist_user              = "A felhasználó már létezik";
            mcs_invalid_user            = "Hibás felhasználónév";
            mcs_invalid_email_addr      = "Hibás e-mail cím";
            mcs_system_err              = "Rendszerhiba";
            mcs_exceed_device           = "Elérte az egyidejű felhasználók maximális számát";
            mcs_continue                = "Folytatás";
            mcs_prompt_exit             = "- felmondott?";
            mcs_device_list             = "eszköz lista";
            mcs_no_sdcard               = "SD kártya nem található";
            mcs_no_hard_disk            = "nem merevlemez";
            mcs_show_more               = "További lehetőségek";
            mcs_shotsnop_exists         = "A kép már létezik";
            mcs_input_nick              = "Adja meg a becenevet";
            mcs_nick_not_empty          = "A becenév megadása kötelező!";
            mcs_input_new_pass          = "Adjon meg egy új jelszót!";
            mcs_input_new_pass_again    = "Adja meg az új jelszót újra!";
            mcs_new_password            = "Új jelszó";
            mcs_modify_network_prompt   = "A hálózati beállítás megváltoztatása kapcsolódási hibát okozhat. Kívánja folytatni?";
            mcs_wifi_disable_prompt     = "Kikapcsola a Wi-Fi-t?";
            mcs_eth_disable_prompt      = "Kikapcsolja az Ethernet-et?";
            mcs_ip                      = "IP";
            mcs_auto_obtain             = "Automatikus DHCP használata";
            mcs_manually_set            = "Manuális megadás";
            mcs_dns                     = "DNS";
            mcs_dns_prim                = "Elsődleges DNS";
            mcs_client_mode             = "Kliens";
            mcs_adhoc_mode              = "Ad-hoc";
            mcs_connect_fail            = "Kapcsolódási hiba";
            mcs_dhcp_server             = "DHCP szerver";
            mcs_display_text            = "Szöveg megjelenítése";
            mcs_repair_prompt           = "A helyreállítás adatvesztést okozhat. Kívánja folytatni?";
            mcs_format_prompt           = "A formazás minden adatot törölni fog az SD kártyán, kívánja folytatni?";
            mcs_mount_prompt            = "Az SD kártya hozzárendelése. Kívánja folytatni?";
            mcs_umount_prompt           = "Az SD kártya leválasztása után a felvételek mentése nem lehetséges. Kívánja folytatni?";
            mcs_sdcard_reset            = "A beállítások elmentve. Indítsa újra a kamerát!";
            mcs_sdcard_repairing        = "A helyreállítás folyamatban, várjon az újraindulásig!";
            mcs_sdcard_formating        = "Formázás, várjon az újraindításra!";
            mcs_sdcard_umount           = "SD kártya leválasztása";
            mcs_valid                   = "Érvényes";
            mcs_io                      = "IO riasztás";
            mcs_input                   = "Bemenet";
            mcs_outinput                = "Kimenet";
            mcs_prompt_alert_on         = "A riasztás bekapcsolva. Kívánja folytatni?";
            mcs_auto_sync_date_time     = "automatikus fordítás";
            mcs_alarm_record            = "Viedófelvétel riasztás";
            mcs_username                = "Felhasználó név";
            mcs_re_enter_the_password   = "Adja meg a jelszót újra!";
            mcs_remember_me             = "Maradjon bejelentkezve";
            mcs_home                    = "Vissza a kezdéshez";
            mcs_install_the_plug        = "Telepítse a csatlakozót!";
            mcs_install_the_video_plug  = "Telepítse a videó csatlakozót!";
            mcs_install_now             = "Telepítés most";
            mcs_temporarily_installed_use_ordinary_video = "Telepítés később";
            mcs_brightness              = "Fényerő";
            mcs_contrast                = "Kontraszt";
            mcs_color_saturation        = "Színtelítettség";
            mcs_sharpness               = "Élesség";
            mcs_duration                = "Időtartam";
            mcs_index                   = "Index";
            mcs_remark                  = "Megjegyzés";
            mcs_media_stream            = "Adathordozó";
            mcs_server                  = "Szerver";
            mcs_media_transfer          = "Adatok átvitele";
            mcs_osd                     = "OSD";
            mcs_manufacturer            = "Gyártó";
            mcs_model                   = "Modell";
            mcs_plugin_version          = "Plug-in verziószám";
            mcs_network_interface       = "Hálózati csatlakozás";
            mcs_transfer_protocol       = "Adatátviteli protokol";
            mcs_year                    = "Év";
            mcs_month                   = "Hónap";
            mcs_day                     = "nap";
            mcs_hour                    = "Óra";
            mcs_minute                  = "Perc";
            mcs_second                  = "Másodperc";
            mcs_millisec                = "Tizedmásodperc";
            mcs_ntp                     = "Idő-szerver címe";
            mcs_upload_upgrade          = "A frissítés feltöltése ";
            mcs_stop                    = "STOP";
            mcs_info_rewind             = "Visszatekerés";
            mcs_fast_forward            = "Előretekerés";
            mcs_previous_frame          = "Előző képkocka";
            mcs_next_frame              = "Következő képkocka";
            mcs_record_audio            = "Hangfelvétel";
            mcs_week                    = "Hét";
            mcs_all                     = "Minden";
            mcs_id                      = "Azonosító";
            mcs_select_all              = "Összes kiválasztása";
            mcs_call                    = "Hívás";
            mcs_activation              = "Aktiválás";
            mcs_caption                 = "File feltöltése";
            mcs_alarm_device            = "Eszközriasztás";
            mcs_not_installed           = "Nincs telepítve";
            mcs_join_us_now             = "Csatlakozzon hozzánk!";
            mcs_reconnect_please_wait   = "Újra csatlakozás, kérem várjon!";
            mcs_erasing                 = "Törlés";
            mcs_writing                 = "Írás";
            mcs_dhcp                    = "DHCP";
            mcs_new_version             = "Elérhető frissebb verzió";
            mcs_equipment_flip          = "Forgatás";
            mcs_device_status           = "AZ eszköz állapota";
            mcs_audio_setting           = "Hangbeállítás";
            mcs_nick_modify             = "Becenév megváltoztatása";
            mcs_ready                   = "Kész";
            mcs_full                    = "Megtelt";
            mcs_connecting              = "Csatlakozás";
            mcs_message_buffering       = "Üzenet pufferelés";
            mcs_upgrade_finish          = "A frissítés kész";
            mcs_image                   = "Kép";
            mcs_bar                     = "Felvétel";
            mcs_init                    = "Inicializálás";
            mcs_confirm_new_password    = "Új jelszó megerősítése";
            mcs_continue_switch_wireless_network = "A hálózat váltás a kapcsolat megszakadását eredményezheti. Kívánja folytatni?";
            mcs_restore_factory_settings_prompt = "Gyári beállítások visszaállítása. A berendezés újraindul a visszaállítás után. Kívánja folytatni?";
            mcs_username_does_not_exis  = "A felhasználónév nem létezik";
            mcs_username_already_exists = "A felhasználónév már létezik";
            mcs_successful_whether_login = "Sikeres regisztráció, szeretne belépni?";
            mcs_username_demand         = "6-20 karakter, betűvel kezdve";
            mcs_the_password_is_empty   = "A jelszó üres";
            mcs_password_demand         = "6-20 karakter, betűvel kezdve";
            mcs_password_empty          = "Nincs jelszó megerősítés";
            mcs_two_password_input_inconsistent = "A jelszavak nem egyeznek";
            mcs_the_user_name_is_empty  = "A felhasználónév nincs megadva";
            mcs_upgrade_to_the_latest_version = "Frissítés a legutóbbi verzióra";
            mcs_subnet_mask_wrong_format = "A hálózati maszk hibás formátumú";
            mcs_upgrade_successful_restart_to_take_effect = "Sikeresen frissítve, indítsa újra a berendezés!";
            mcs_need_to_restart_the_camera_to_take_effect = "Az érvényesítéshez indítsa újra a berendezés";
            mcs_not_allowed_close_two_network_cards = "A Wi-Fi és az Ethernet egyidejűleg nem választható le";
            mcs_modified_successfully   = "Sikeresen megváltoztatva";
            mcs_connection_successfully = "Sikeres csatlakozás";
            mcs_connection_is_interrupted = "A kapcsolat megszakadt";
            mcs_devices_in_the_account_overrun = "Elérte az egy felhasználóhoz rendelhető maximális kamerák számát";
            mcs_format_error            = "Formázási hiba";
            mcs_change                  = "Megváltoztatás";
            mcs_refresh                 = "Frissítés";
            mcs_connect                 = "Csatlakozás";
            mcs_upgrade                 = "Frissítés";
            mcs_activate                = "Aktiválás";
            mcs_filter                  = "Szűrés";
            mcs_reset                   = "Újraindítás";
            mcs_prompt_alert_off        = "A riasztás kikapcsolása. Kívánja folytatni?";
            mcs_invalid_server          = "Hibás időszerver";
            mcs_upgrade_prompt          = "A berendezés szoftver frissítése. Kívánja folytatni?";
            mcs_restart_prompt          = "Újraindítás eszköz, továbbra is?";
            mcs_repeat                  = "Ismétlés";
            mcs_scheduled_one           = "Időzített felvétel 1";
            mcs_scheduled_two           = "Időzített felvétel 2";
            mcs_scheduled_three         = "Időzített felvétel 3";
            mcs_scheduled_four          = "Időzített felvétel 4";
            mcs_more                    = "Több";
            mcs_leave                   = "Még több betöltése";
            mcs_qrcode_scan             = "QR kód beolvasása";
            mcs_inserted                = "Beillesztve";
            mcs_removed                 = "Eltávolítva";
            mcs_upgrade_init            = "A frissítés indítása";
            mcs_upgrade_download        = "A frissítés letöltése";
            mcs_check                   = "Ellenőrzés";
            mcs_audio_encoder_config    = "Audió kodek";
            mcs_video_codec             = "Videó kodek";
            mcs_download                = "Letöltés";
            mcs_client_download         = "Kliens letöltése";
            mcs_for_more_clarity_smooth_video_experience = "A tiszta és még élvezhetőbb képért";
            mcs_network                 = "Hálózat";
            mcs_mobile_client_download  = "Mobil kliens letöltése";
            mcs_readonly                = "Csak olvasható";
            mcs_please_exit_and_relogin = "Lépjen ki és lépjen be újra!";
            mcs_add_device_failed       = "Az eszköz hozzáadása sikertelen volt";
            mcs_set_password            = "Jelszó beállítása";
            mcs_7x24_hours              = "7x24 órás";
            mcs_motion_alert            = "Mozgás riasztás";
            mcs_mtalt                   = "%@ : Mozgás riasztás";
            mcs_io_alert                = "I/O riasztás";
            mcs_ioalt                   = "%@ : I/O riasztás";
            mcs_time_zone               = "Időzóna";
            mcs_select_time             = "Adja meg az időt!";
            mcs_now                     = "Most";
            mcs_mipc_have_alert_notification = "MIPC risztási értesítés";
            mcs_notification_center     = "Értesítési központ";
            mcs_sound                   = "Hang";
            mcs_vibration               = "Vibráció";
            mcs_clear_cache             = "A cache kiürítése";
            mcs_clear_cache_hint        = "Biztos, hogy ki szeretné üríteni a cachet?";
            mcs_successfully_cleared_cache = "A cache sikeresen kiürítve";
            mcs_app_except_exit_hint    = "Elnézést, az alkalmazás kritikus hiba miatt leáll.";
            mcs_rate_us                 = "Kérem, értékelje az alkalmazást!";
            mcs_password_too_simple_hint = "A jelszó túl egyszerű, változtasson rajta a nagyobb biztonságért!";
            mcs_check_for_new_version   = "Frissítések keresése";
            mcs_contact_us              = "Lépjen velünk kapcsolatba!";
            mcs_buffer_time             = "Pufferelési idő";
            mcs_default                 = "Alapértelmezett";
            mcs_alarmed_devices         = "Beélesített eszköz";
            mcs_aec                     = "Visszhang törlése";
            mcs_permission_denied       = "A hozzáférés megtagadva";
            mcs_full_screen             = "Teljes képernyő";
            mcs_forgot_your_password    = "Elfelejtett jelszó";
            mcs_your_email              = "E-mail cím";
            mcs_sign_up_confirmation    = "A visszaigazoló e-mailt küldött, hogy ellenőrizze a benyújtott e-mail címét. Látogatás a linket küldött e-mailben található aktiválja a fiókot.";
            mcs_recovery_prompt         = "Kérjük, adja meg e-mail címét (felhasználói név), akkor küldjön egy üzenetet, hogy megmondja, hogyan kell a jelszót.";
            mcs_password_reset_confirmation = "Egy e-mailt küldött a benyújtott e-mail címre, Látogatás a linket küldött e-mail, hogy a jelszót.";
            mcs_recovery_fail_no_mail   = "Jelszó visszaállítás nem, ez a számla nem kötelező az e-mail";
            mcs_recovery_fail_invalid_link = "Jelszó visszaállítás nem, kérjük, ellenőrizze, hogy a tartalmat a kapcsolat vagy hasznosítás újra.";
            mcs_recovery_ok_login       = "Jelszó visszaállítás sikerét, jelentkezzen be most.";
            mcs_active_ok_login         = "Számla aktív siker. Jelentkezzen be most.";
            mcs_active_fail_invalid_link = "Fiók aktív nem. Kérjük, ellenőrizze, hogy a tartalmat a kapcsolat vagy Regisztráció újra.";
            mcs_login_fail_inactive     = "Fiók inaktív. Kérjük, kövesse a tartalom aktív e-mail, hogy aktív.";
            mcs_sign_up_again           = "Regisztrálj újra";
            mcs_press_start_talk        = "Nyomja meg beszélni";
            mcs_release_stop_talk       = "Engedje, hogy hagyja abba";
            mcs_delete_device           = "törlése eszköz";
            mcs_success_removed_equipment = "Eszköz törlése sikeresen";
            mcs_remove_equipment_failure = "Távolítsuk el a berendezés meghibásodását";
            mcs_device_busy             = "A készülék most elfoglalt";
            mcs_keep_testing            = "Folytatás teszt";
            mcs_notify_tone             = "Értesítési csengőhang";
            mcs_float_video             = "Engedélyezze a lebegő video";
            mcs_float_position          = "Lebegő video pozíció";
            mcs_video_resolution        = "Videó felbontás";
            mcs_float_resolution        = "Lebegő videó felbontás";
            mcs_top_left                = "balra fent";
            mcs_top_right               = "jobb felső";
            mcs_bottom_left             = "bal alsó";
            mcs_bottom_right            = "jobb alsó";
            mcs_action_next             = "következő";
            mcs_action_cancel           = "Mégsem";
            mcs_action_retry            = "Próbálja újra";
            mcs_action_add              = "hozzáad";
            mcs_action_apply            = "alkalmaz";
            mcs_action_config           = "Config";
            mcs_action_skip             = "Ugrás";
            mcs_action_ok               = "Rendben";
            mcs_action_add_device       = "eszköz hozzáadása";
            mcs_action_modify_password  = "Jelszó módosítása";
            mcs_action_config_wifi      = "Config Wi-Fi";
            mcs_state_connect_device    = "Csatlakoztatása eszközök";
            mcs_state_connect_device_fail = "Csatlakoztassa a berendezés meghibásodása";
            mcs_state_wait_device_online = "Várja meg, amíg a készülék on-line";
            mcs_state_device_online     = "Online";
            mcs_state_success           = "Sikeres";
            mcs_state_add_device_success = "Az eszköz hozzáadása sikerült";
            mcs_state_add_device_fail   = "Az eszköz hozzáadása sikertelen";
            mcs_state_modify_pass_success = "A jelszót sikeresen megváltoztatta";
            mcs_state_modify_pass_fail  = "A jelszó megváltoztatása sikertelen";
            mcs_state_config_wifi_success = "Set Wi-Fi siker";
            mcs_state_config_wifi_fail  = "Kapcsolódási hiba";
            mcs_state_connecting_to     = "Csatlakozás";
            mcs_network_connect_type    = "Az eszköz nem online, akkor arról, hogy a készülék be van-e kapcsolva, majd válasszuk a Hálózati kapcsolat:";
            mcs_prompt_modify_passwd    = "A jelszó a készülék túl egyszerű, kérjük, módosítsa a jelszót. Új jelszó nem lehet kevesebb, mint hat karakter!";
            mcs_prompt_config_wifi      = "A készülék még nem csatlakozik a WiFi, kérjük, állítsa be a Wi-Fi.";
            mcs_step1_check_connect     = "1. lépés : Csatlakoztassa a kamerát a routerhez, az Ethernet kábel segítségével! ";
            mcs_first_step_ethernet_connect = "1. lépés: egyik végét csatlakoztassa a hálózati kábelt a router és a másik végén a hozzáférési hálózati eszköz port.";
            mcs_step2_check_connect     = "2. lépés : Kapcsolja be a kamerát!";
            mcs_second_step_ethernet_connect = "2. lépés : Az eszköz bekapcsolása, indítsa el a készüléket.";
            mcs_hint_check_network      = "Megjegyzés : a kamera kb. 1 perc alatt indul el, ezután a LED zöld státusz led 3 másodpercenként háromszor felvillan, ami azt jelenti, hogy a kamera sikeresen kapcsolódott az internethez. A telepítés varázsló automatikusan a következő lépésre ugrik.";
            mcs_the_end                 = "vége";
            mcs_hint_password_expired   = "A jelszó lejárt, kérjük újra hozzá az eszköz";
            mcs_hint_remove_ethernet    = "Megjegyzés : Wi-Fi működik megfelelően, akkor most húzza ki a hálózati kábelt.";
            mcs_ip_format_incorrect     = "IP cím formátuma nem megfelelő";
            mcs_login_sucess            = "sikeres bejelentkezés";
            mcs_donot_remind            = "ne emlékeztessen";
            mcs_clear_cache_signout_hint = "Törölje a cache kilép jelentkezzen be újra, hogy továbbra is?";
            mcs_devlist_adddev_hint     = "Kattintson ide, hogy eszközök";
            mcs_devlist_menu_hint       = "Kattintson ide, hogy a felbontást";
            mcs_update_failed           = "Frissítés sikertelen";
            mcs_new_small_160x90        = "160x90";
            mcs_new_half_320x180        = "320x180";
            mcs_new_normal_640x360      = "640x360";
            mcs_new_hd_1280x720         = "1280x720";
            mcs_local                   = "helyi";
            mcs_set_npapi               = "Ha a plugin telepítése, Kérjük, látogasson el \'chrome://flags/#enable-npapi\', engedélyezze NPAPI, ";
            mcs_set_win32k              = "látogatás \'chrome://flags/#enable-win32k-renderer-lockdown\', fogyatékkal Win32k renderelő zárlatot,";
            mcs_restart_browser         = "Indítsa újra a böngészőt";
            mcs_download_location       = "Letöltés helye";
            mcs_Networking_mode         = "hálózati módot";
            mcs_wifi_intelligent_configuration = "WIFI kapcsolat";
            mcs_ethernet_configuration  = "Ethernet csatlakozás";
            mcs_wifi_connect            = "kapcsolat";
            mcs_hard_disk               = "merevlemez";
            mcs_wifi_is_connection      = "Csatlakozó, kérem várjon...";
            mcs_wifi_intelligent_configuration_setup_ailure = "wifi intelligens konfigurációs beállítási hiba";
            mcs_box_list                = "lista box";
            mcs_repair_disk_prompt      = "Lemezt is veszített, folytatás?";
            mcs_format_disk_prompt      = "Lemez formázása törli az összes adatot, folytatás?";
            mcs_scheduled_alerting      = "élesítés Program";
            mcs_scheduled_alerting_one  = "élesítés Program 1";
            mcs_scheduled_alerting_two  = "élesítés Program 2";
            mcs_scheduled_alerting_three = "élesítés Program 3";
            mcs_scheduled_alerting_four = "élesítés Program 4";
            mcs_wifi_config_cancle      = "wifi konfiguráció törléséhez";
            mcs_wifi_config_prepare     = "wifi előfeltételek";
            mcs_wifi_config_first       = "Az eszközök és a mobiltelefonok és routerek tartományban tartjuk 1 m";
            mcs_wifi_config_second      = "Amikor konfigurálja a wifi, a készülék nem dugja a hálózati kábelt";
            mcs_wifi_config_third       = "Nyomja meg a reset lyuk egy másodpercig, majd engedje";
            mcs_wifi_config_success     = "Configuration siker";
            mcs_wifi_config_failure     = "Configuration nem sikerült";
            mcs_failure_prompt          = "Próbálja újra, vagy visszatér, hogy ellenőrizze WIFI jelszó helyes";
            mcs_display_password        = "Mutasd a jelszót";
            mcs_action_smart_config_wifi = "Configuration Wizard";
            mcs_wifi_invalid            = "A hálózat nincs WiFi, csatlakoztassa WiFi!";
            mcs_phone_not_connect_wifi  = "WiFi hálózat nem csatlakozik";
            mcs_prompt_check_connection = "A kamera nem elérhető, ellenőrizze a kapcsolatot!";
            mcs_wifi_cfg_ready          = "Kész";
            mcs_reset_complete          = "Reset befejeződött";
            mcs_how_to_restore_factory_settings = "Hogyan lehet visszaállítani a gyári beállításokat: használhatja a RESET láb megnyomja a RESET alján kamera több mint 10 másodperc";
            mcs_forgetpass_action_wizard = "Nyomja meg a RESET Reset 10 másodperc megjelenése után, a készülék automatikusan újraindul visszaállítja a jelszót az admin";
            mcs_prompt_check_device_connection = "A készülék nem elérhető, ellenőrizze a vezetékeket csatlakoztatni az eszközt";
            mcs_input_wifi_name         = "Írja be wifi név";
            mcs_action_previous         = "előző";
            mcs_io_alert_range_hint     = "IO riasztási időt kell kevesebb, mint 60 másodperc";
            mcs_io_alert_time           = "IO riasztás idő(másodpercben)";
            mcs_smart                   = "okos";
            mcs_plan                    = "terv";
            mcs_mute                    = "néma";
            mcs_wind_speed              = "szélsebesség";
            mcs_one                     = "egy fogaskerék";
            mcs_two                     = "két sebességfokozat";
            mcs_three                   = "három fokozatban";
            mcs_purify_mode             = "megtisztítani mód";
            mcs_video_list              = "videó lista";
            mcs_wifi_cfg_restore_factory_settings = "Tartsa a mobiltelefon közel készüléket, ha az eszköz már konfigurálva WiFi, nyomja meg a RESET lyukat egy másodpercig, majd engedje, a készülék visszaállítja a gyári beállításokat, és automatikusan újraindul";
            mcs_mask_settings           = "Mask beállítások";
            mcs_notification_settings   = "értesítési beállítások";
            mcs_alarm_settings          = "riasztás beállítások";
            mcs_motion_detection        = "Motion Detection";
            mcs_io_alarm                = "I/O Alarm";
            mcs_connect_status          = "Connection Status";
            mcs_motion_notification     = "Riasztások és értesítések";
            mcs_device_connected        = "Készülék csatlakozik";
            mcs_start_spray             = "Kezdje permetezés?";
            mcs_available_network       = "A hálózat nem elérhető";
            mcs_select_wifi_wizard      = "Kérjük, válasszon WiFi hálózatot először";
            mcs_input_wifi_password     = "Kérjük, válasszon WiFi hálózatot először";
            mcs_device_admin_password   = "Készülék admin jelszó";
            mcs_device_guest_password   = "Device vendég jelszót";
            mcs_user_admin_password     = "Felhasználó admin jelszó";
            mcs_user_guest_password     = "Felhasználói vendég jelszót";
            mcs_save_network_set        = "Mentsd hálózati készlet és jelszó";
            mcs_nickname_not_set        = "Kamera becenév nincs megadva";
            mcs_current_wifi            = "A jelenlegi Wi-Fi";
            mcs_current_password_strength = "A jelenlegi jelszó erőssége";
            mcs_new_password_strength   = "Új jelszó erőssége";
            mcs_needs_to_open_the_DHCP  = "A router kell megnyitni a DHCP (automatikusan az IP) funkció, ha a kísérlet sikertelen, kérjük, vegye fel a kapcsolatot a rendszergazdával.";
            mcs_picture                 = "kép";
            mcs_quality                 = "minőség";
            mcs_size                    = "méret";
            mcs_guest_login             = "Vendég Bejelentkezés";
            mcs_audio_and_video         = "Audio / Videó";
            mcs_volume                  = "hangerő";
            mcs_smooth                  = "sima";
            mcs_clear                   = "tiszta";
            mcs_handsfree               = "kihangosító";
            mcs_headphone               = "fejhallgató";
            mcs_my                      = "My";
            mcs_customer_service        = "Ügyfélszolgálat";
            mcs_firefox_flash_uninstall = "A flash plugin nem elérhető, az oldat olvassa https://support.mozilla.org/en-US/products/firefox/fix-problems/videos-sound-pictures-and-animations-dont-work";
            mcs_plug                    = "Widget";
            mcs_plug_load               = "Load plugins";
            mcs_plug_load_refuse        = "Ne töltsön plugins";
            mcs_plug_load_auto          = "automatikus";
            mcs_option                  = "Beállítások";
            mcs_option_ok               = "Határozza";
            mcs_voice_call_fails        = "Hang hívás sikertelen, ellenőrizze a hálózati";
            mcs_umounted_prompt         = "Akár lecsatolni?";
            mcs_signup_prompt           = "új itt.?";
            mcs_wifi_connect_sucess_prompt = "Nota: O WiFi funciona normalmente, Agora você Pode desligar a rede.";
            mcs_manual_input_prompt     = "kézi bevitel berendezés azonosítója";
            mcs_qrscan_prompt           = "- még nem teszi lehetővé a kérelem hozzáférni a kamerát, kérem az iphone \\’kész\\’ - \\’privát\\’ - \\’a\\’ funkció, meg Vimtag neve ‘’ kérelmek felülvizsgálatát.";
            mcs_select_network_style    = "alternatív hálózati összekapcsolhatóság:";
            mcs_push                    = "Hirdetmény";
            mcs_connect_power_prompt    = "megjegyzés: a berendezés nem online, kérem, először, hogy már indulhat";
            mcs_fail_microphone         = "Nem sikerült elérni a mikrofont";
            mcs_microphone_prompt       = "Ön ne engedjék, hogy az alkalmazás hozzáférjen a mikrofon, a \\’set’ iPhone - a \\’magánélet’ - \\’mikrofon’ funkció, keresse meg a nevét \\’Vimtag’ alkalmazás módosítani kell";
            mcs_super_clear             = "720P";
            mcs_high_clear              = "360P";
            mcs_standard_clear          = "180P";
            mcs_fluent_clear            = "90P";
            mcs_deleting                = "most el kell hagyni...";
            mcs_event                   = "események";
            mcs_one_hour                = "egy óra";
            mcs_half_hour               = "fél óra";
            mcs_five_min                = "öt perc";
            mcs_category                = "kategória";
            mcs_time_length             = "ha a hosszú";
            mcs_new                     = "új";
            mcs_week_setting_prompt     = "a héten nem.";
            mcs_time_setting_prompt     = "időegyeztetés nem maradhat üresen";
            mcs_today                   = "ma";
            mcs_wifi_config_prepare     = "wifi előfeltételek";
            mcs_wifi_password           = "wifi jelszót";
            mcs_register_prompt         = "kérem, előbb regisztrált számlaszámot!";
            mcs_click_login             = "a bejelentkezés";
            mcs_not_login_prompt        = "- hogy be nem írja alá, kérem!";
            mcs_product_presentation    = "homepage";
            mcs_help_feedback           = "segíts";
            mcs_help_information        = "segíts";
            mcs_feedback                = "a visszajelzés";
            mcs_connect_wifi_prompt     = "kapcsolat a wifi";
            mcs_cloud                   = "később frissíteni";
            mcs_demo                    = "demo";
            mcs_shortest                = "a legrövidebb";
            mcs_no_history              = "Nem története";
            mcs_download_pc_client      = "Ide kattintva letöltheti a PC kliens";
            mcs_accounts_bind_email_exist = "a számla kötelező postaládát is.";
            mcs_accounts_bind_email_busy = "az a postaláda már kötelező erejű volt.";
        }/* hu */
    }/* mcs_init_langs */

    /* ----------------mining.lang.strings.end-------do-not-change-this-line------------------- */

    //invariant parameter
    g_client_min_w = 800;
    g_client_min_all_w = 800 + 100;
    g_client_min_h = 450;
    g_client_min_all_h = 450 + 115;
    g_client_division_w = 800 + 420;
    g_client_division_h=450 + 115;
    g_panel_box_w=180;
    g_panel_box_max_w=190;
    g_menu_box_h=35;
    g_control_box_h=52;
    g_status_bar_h=15;

    //variable parameter
    g_cntr_content_w=0;
    g_cntr_content_h=0;
    g_panel_box_all_w=0;
    g_panel_box_offset=3;
    g_panel_box_inner_h=0;
    g_panel_box_h=0;
    g_panel_box_all_h=0;

    g_device_list_inner_h=0;
    g_main_window_w=0;
    g_main_window_h=0;

    //mark
    g_now_lang="ch";//表示当前语言
    g_old_browser_version=0;//表示是否是老版本浏览器 IE7-IE8
    g_browser_IE6_version=0;//表示是不是IE6浏览器
    g_browser_IE7_version=0;//表示是不是IE7浏览器
    g_browser_IE67_version=0;//表示是不是IE6-IE7浏览器
    g_input_read_only="disabled";
    g_login_waiting_flag=0;
    g_is_auto_login=mlocal_storage.get("remember_msg_info")?1:0;//表示是否自动登录
    g_register_waiting_flag=1;
    g_view_split_count=1;
    g_playback_split_count=1;
    g_view_pages=1;
    g_playback_pages=1;
    g_now_view_page=1;
    g_now_playback_page=1;
    g_now_page="home";//表示当前界面 首页、回放、信息
    g_device_list_switch="open";//设备列表显示开关
    g_ptz_control_switch="open";//首页设备控制面板显示开关
    g_select_inner_window="none";
    g_select_inner_ipc="";
    g_select_device_ipc = "";//当前选择的设备sn
    g_login_status="";//用来保存是ipc登录还是账户登录
    g_plug_is_missing=0;
    g_is_playing=0;//表示首页是否正在播放
    g_is_play_back=0;//表示回放界面是否正在回放
    g_is_play_back_download=0;//表示回放界面是否正在下载
    g_m_speaker_is_mute=1;
    g_network_environ="";//表示是内网访问还是外网访问 直连 与非直连的区别
    g_device_list_obj={};                             //存储所有节点数据(包括MS父节点);作查询具体设备内容用
    g_device_list_link=createLinkList();              //存储所有列表显示的节点;作生成设备列表用
    g_notif_info={};                                  //存储motify的相关信息
    g_view_link=createLinkList();
    g_playback_link=createLinkList();
    g_return_play_video_page = "";    //0表示从历史视频播放界面返回，1表示从设置界面返回，2表示从历史界面返回设备列表界面,3表示从BOX设备列表界面返回，4表示从BOX设备列表历史界面返回，5表示从BOX设备列表历史播放界面返回, 6表示从BOX设置页面返回
    g_distance_to_edge = 12;  //到边的距离
    g_devices_list_box_width = 314; //设备列表框的宽度
    g_player_width = 640; //视频播放器的宽度
    g_player_height = 360; //视频播放器的高度
    g_player_width_nine_hundred = 900;
    g_nine_hundred_side = 0;
    g_body_width = 900;
    g_is_in_play_page = 0;
    g_is_in_playback_page = 0;
    g_play_flash_video= 0;
    g_is_plug_load = 0;
    g_is_plug_load_refuse = 0;
    g_is_plug_load_auto = 0;
    g_inland_server_ip_ok = 0; //判断信令服务器IP地址是否为国内地址
    g_is_in_box_ipc = 0; //表示不是从设备列表界面点击BOX，从而进入BOX中的IPC的
    g_select_incise_time = "30min";  //表示选择切割BOX中时间段的大小，1h表示按照每段1h切割，30min表示按照每段数据30minute切割，5min表示按照每段数据5分钟切割
    g_select_box_ipc = ""; //select the box ipc ID of now
    //function
    g_view_page_redraw=null;
    g_split_update=null;
    g_video_sources_slider_callback=null;
    g_playback_slider_callback=null;
    g_service_options="";//表示服务器是MS（服务器）还是ipc或box（设备）

    //system function
    g_system_prompt_box=null;
    g_system_wait_div=null;
    g_system_stop_wait=null;

    //style function
    g_standard_input_box_onfocus=null;
    g_standard_input_box_onblur=null;

    //temp mark
    g_video_stream_uri="";//视频播放路径
    g_audio_output_uri="";
    g_server_device=window.location.host;
    g_hostname = "";
    g_web_client_v="v1.2.3.1405291418";

    //oem客户
    g_domain_oems_ebit = 0;
    g_domain_oems_vimtag = 0;
    g_domain_oems_luxcamapp = 0;
    g_domain_oems_mommycam = 0;
    g_domain_oems_prolabcloud = 0;
    g_domain_oems_serenelifehome =0;
    g_domain_oems_testmipcm =0;
    g_domain_oems_mipcm =0;

    var g_domain_oems = new Array("www.luxcamapp.eu","luxcamapp.eu",
                                  "www.mommycam.us","mommycam.us",
                                  "www.ebit.com","ebit.com",
                                  "www.vimtag.com","vimtag.com",
                                  "www.prolabcloud.com","prolabcloud.com",
                                  "cloud.serenelifehome.com","serenelifehome.com",
                                  "test.mipcm.com",
                                  "test.vimtag.com",
                                  "v3.vimtag.com",
                                  "www.mipcm.com","mipcm.com");
    var oems = {
                "luxcamapp.eu":{
                    img:"./oem/luxcam/imgs/",
                    css:"./oem/luxcam/css/data.css",
                    download:[
                        {content:"Android Client", file:"app/luxsecurity_luxcam.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id695492422", win:1 }
                    ],
                    flag_enable_curise:true,
                    flag_enable_motion_mask:true
                },

                 "hentek.cc":{
                    img:"./oem/hentek/imgs/",
                    css:"./oem/hentek/css/mipc.min.css",
                    download:[
                        {content:"Android客户端", file:"app/hentek_hentekipcam.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id855719231", win:1 },
                        {content:"客户端使用手册", file:"oem/hentek/doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"oem/hentek/doc/ipc1.manual.zh.cn.zip"}
                    ]
                },

                "mipcm.com":{
                    img:"./imgs/",
                    css:"../css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/mipca.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Windows PC Client", file:"app/mipc_setup.exe?0.150826.exe"},
                        {content:"MAC Client", file:"app/mipc.pkg?0.151207.pkg"},
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/mipca.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Windows PC客户端", file:"app/mipc_setup.exe?0.150826.exe"},
                        {content:"MAC 客户端", file:"app/mipc.pkg?0.151207.pkg"},
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },
                "fujikamcloud.us":{
                    img:"./imgs/",
                    css:"../css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/mipca.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/mipca.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },
                "fujikamcloud.com":{
                    img:"./imgs/",
                    css:"../css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/mipca.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/mipca.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },

                "gtscn.cn":{
                    img:"./oem/gsdcn/imgs/",
                    css:"./oem/gsdcn/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/mipca.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/mipca.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },

                "mymobivue.com":{
                    img:"./oem/astak/imgs/",
                    css:"./oem/astak/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/teamresearch_astak.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id858972566", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/teamresearch_astak.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id858972566", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ],
                    flag_enable_email:true
                },

                "axiton360.com":{
                    img:"./oem/axiton/imgs/",
                    css:"./oem/axiton/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/axiton_axiton.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id846346002", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/axiton_axiton.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id846346002", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },

                "wanliyan.com":{
                    img:"./oem/wanliyan/imgs/",
                    css:"./oem/wanliyan/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/dongsys_wanliyan.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id854417504", win:1 },
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/dongsys_wanliyan.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id854417504", win:1 },
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },

                "joinlink.org":{
                    img:"./oem/icare/imgs/",
                    css:"./oem/icare/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/ruiyun_icare.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id858285719", win:1 }
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/ruiyun_icare.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id858285719", win:1 }
                    ]
                },

                "avuecam.com":{
                    img:"./oem/avuecam/imgs/",
                    css:"./oem/avuecam/css/mipc.min.css",
                    download:[
                        {content:"AVP561B Manual", file:"oem/avuecam/doc/AVP561B_MANUAL.pdf"},
                        {content:"Android App Manual", file:"oem/avuecam/doc/AV561B_ANDROID_APP_USERS_MANUAL.pdf"},
                        {content:"IOS App Manual", file:"oem/avuecam/doc/AV561B_IOS_APP_USERS_MANUAL.pdf"}
                    ],
                    flag_enable_email:true
                },

                "tpcc2014.com":{
                    img:"./oem/tungpo_tpcc/imgs/",
                    css:"./oem/tungpo_tpcc/css/mipc.min.css"
                },

                "chcvip.cn":{
                    img:"./oem/ruifeng_chcv/imgs/",
                    css:"./oem/ruifeng_chcv/css/mipc.min.css",
                    download:[
                        {content:"客户端使用手册", file:"oem/ruifeng_chcv/doc/client.manual.zh.cn.rar"},
                        {content:"IPC1使用手册 ", file:"oem/ruifeng_chcv/doc/ipc1.manual.zh.cn.rar"},
                        {content:"IPC2使用手册 ", file:"oem/ruifeng_chcv/doc/ipc2.manual.zh.cn.rar"}
                    ]
                },

                "jiayang.com":{
                    img:"./oem/jiayang_shixuntianxia/imgs/",
                    css:"./oem/jiayang_shixuntianxia/css/mipc.min.css"
                },

                "onevo.cn":{
                    img:"./oem/ovorange_weishi/imgs/",
                    css:"./oem/ovorange_weishi/css/mipc.min.css"
                },

                "eyedot.net":{
                    img:"./oem/keeper_eyedot/imgs/",
                    css:"./oem/keeper_eyedot/css/mipc.min.css"
                },
                "sztkaj.com":{
                    img:"./oem/sztekai_tekaianju/imgs/",
                    css:"./oem/sztekai_tekaianju/css/mipc.min.css"
                },
                "devele.com":{
                    img:"./oem/devele_ipc/imgs/",
                    css:"./oem/devele_ipc/css/mipc.min.css"
                },
                "itelland.com":{
                    img:"./oem/itelland_itelcamera/imgs/",
                    css:"./oem/itelland_itelcamera/css/mipc.min.css"
                },
                "macway.com":{
                    img:"./oem/macway_smartcam/imgs/",
                    css:"./oem/macway_smartcam/css/mipc.min.css"
                },
                "goolsee.com":{
                    img:"./oem/goolsee_goolsee/imgs/",
                    css:"./oem/goolsee_goolsee/css/mipc.min.css"
                },
                "cloudring.com":{
                    img:"./oem/cloudring/imgs/",
                    css:"./oem/cloudring/css/mipc.min.css"
                },

                "mommycam.us":{
                    img:"./oem/mommycam/imgs/",
                    css:"./oem/mommycam/css/mipc.min.css"
                },

                "myannke.com":{
                    img:"./oem/anni_annke/imgs/",
                    css:"./oem/anni_annke/css/mipc.min.css",
                    download:[
                        {content:"WEB Client Manual", file:"oem/anni_annke/doc/WEB_Client_Manual.zip"},
                        {content:"Android App Manual", file:"oem/anni_annke/doc/Android_App_Manual.zip"},
                        {content:"IOS App Manual", file:"oem/anni_annke/doc/iOS_App_Manual.zip"}
                    ]
                },

                "anylook.net":{
                    img:"./oem/yescctv_anylook/imgs/",
                    css:"./oem/yescctv_anylook/css/mipc.min.css"
                },

                "ebit.com":{
                    img:"./oem/ebit/imgs/",
                    css:"./oem/ebit/css/web_v3.css"
                },

                "vimtag.com":{
                    img:"./oem/vimtag_v2n/imgs/",
                    css:"./oem/vimtag_v2n/css/fuse.css"
                },

                "smartcamhd.com":{
                    img:"./oem/macway_smartcam/imgs/",
                    css:"./oem/macway_smartcam/css/mipc.min.css"
                },

                "konka.com":{
                    img:"./oem/konka/imgs/",
                    css:"./oem/konka/css/mipc.min.css"
                },

                "nmspay.cn":{
                    img:"./oem/sanlianhe_nms/imgs/",
                    css:"./oem/sanlianhe_nms/css/mipc.min.css"
                },

                "prolabcloud.com":{
                    img:"./oem/prolab_cloud/imgs/",
                    css:"./oem/prolab_cloud/css/mipc.min.css"
                },

                "jointem.com":{
                    img:"./oem/jointem/imgs/",
                    css:"./oem/jointem/css/mipc.min.css"
                },

                "serenelifehome.com":{
                    img:"./oem/serenelifehome/imgs/",
                    css:"./oem/serenelifehome/css/mipc.min.css"
                },

                "testvimtag.com":{
                	  img:"./oem/testvimtag/imgs/",
                    css:"./oem/testvimtag/css/vimtag.css"
                },

                "testmipcm.com":{
                    img:"./oem/testmipcm/imgs/",
                    css:"./oem/testmipcm/css/mipc.min.css",
                    download:[
                        {content:"Android Client", file:"app/vimtag.apk" },
                        {content:"IOS Client", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Windows PC Client", file:"app/test/mipc_setup.exe?0.150826.exe"},
                        {content:"MAC Client", file:"app/test/mipc.pkg?0.151207.pkg"},
                        {content:"Client Manual", file:"doc/client.manual.en.zip"},
                        {content:"IPC1 Manual", file:"doc/ipc1.manual.en.zip"},
                        {content:"IPC2 Manual", file:"doc/ipc2.manual.en.zip"}
                    ],
                    download_zh:[
                        {content:"Android客户端", file:"app/vimtag.apk" },
                        {content:"IOS客户端", url:"https://itunes.apple.com/app/id550958838", win:1 },
                        {content:"Windows PC客户端", file:"app/test/mipc_setup.exe?0.150826.exe"},
                        {content:"MAC 客户端", file:"app/test/mipc.pkg?0.151207.pkg"},
                        {content:"客户端使用手册", file:"doc/client.manual.zh.cn.zip"},
                        {content:"IPC1使用手册", file:"doc/ipc1.manual.zh.cn.zip"},
                        {content:"IPC2使用手册", file:"doc/ipc2.manual.zh.cn.zip"}
                    ]
                },
                
                "itacamapp.com":{
                    img:"./oem/itacam/imgs/",
                    css:"./oem/itacam/css/mipc.min.css" 
                }
                
    }
    g_domain = {
               "www.luxcamapp.eu":oems["luxcamapp.eu"],
               "luxcamapp.eu":oems["luxcamapp.eu"],
               "www.tpcc2014.com":oems["tpcc2014.com"],
               "tpcc2014.com":oems["tpcc2014.com"],
               "www.chcvip.cn":oems["chcvip.cn"],
               "chcvip.cn":oems["chcvip.cn"],
               "www.jiayang.com":oems["jiayang.com"],
               "jiayang.com":oems["jiayang.com"],
               "v.onevo.cn":oems["onevo.cn"],
               "onevo.cn":oems["onevo.cn"],
               "www.eyedot.net":oems["eyedot.net"],
               "eyedot.net":oems["eyedot.net"],
               "www.anylook.net":oems["anylook.net"],
               "anylook.net":oems["anylook.net"],
               "www.sztkaj.com":oems["sztkaj.com"],
               "sztkaj.com":oems["sztkaj.com"],
               "www.devele.com":oems["devele.com"],
               "devele.com":oems["devele.com"],
               "www.itelland.com":oems["itelland.com"],
               "itelland.com":oems["itelland.com"],
               "www.macway.com":oems["macway.com"],
               "macway.com":oems["macway.com"],
               "www.goolsee.com":oems["goolsee.com"],
               "goolsee.com":oems["goolsee.com"],
               "www.myannke.com":oems["myannke.com"],
               "myannke.com":oems["myannke.com"],
               "www.mommycam.us":oems["mommycam.us"],
               "mommycam.us":oems["mommycam.us"],
               "www.cloudring.com":oems["cloudring.com"],
               "cloudring.com":oems["cloudring.com"],
               "www.fujikamcloud.us":oems["fujikamcloud.us"],
               "fujikamcloud.us":oems["fujikamcloud.us"],
               "www.fujikamcloud.com":oems["fujikamcloud.com"],
               "fujikamcloud.com":oems["fujikamcloud.com"],
               "www.hentek.cc":oems["hentek.cc"],
               "hentek.cc":oems["hentek.cc"],
               "www.mipcm.com":oems["mipcm.com"],
               "mipcm.com":oems["mipcm.com"],
               "www.avuecam.com":oems["avuecam.com"],
               "avuecam.com":oems["avuecam.com"],
               "kh.gtscn.cn":oems["gtscn.cn"],
               "gtscn.cn":oems["gtscn.cn"],
               "www.mymobivue.com":oems["mymobivue.com"],
               "mymobivue.com":oems["mymobivue.com"],
               "www.axiton360.com":oems["axiton360.com"],
               "axiton360.com":oems["axiton360.com"],
               "1999.wanliyan.com":oems["wanliyan.com"],
               "wanliyan.com":oems["wanliyan.com"],
               "www.joinlink.org":oems["joinlink.org"],
               "joinlink.org":oems["joinlink.org"],
               "www.ebit.com":oems["ebit.com"],
               "ebit.com":oems["ebit.com"],
               "www.vimtag.com":oems["vimtag.com"],
               "vimtag.com":oems["vimtag.com"],

               "1clic.smartcamhd.com":oems["smartcamhd.com"],
               "smartcamhd.com":oems["smartcamhd.com"],
               "ipcam.konka.com":oems["konka.com"],
               "konka.com":oems["konka.com"],
               "www.nmspay.cn":oems["nmspay.cn"],
               "nmspay.cn":oems["nmspay.cn"],
               "www.prolabcloud.com":oems["prolabcloud.com"],
               "prolabcloud.com":oems["prolabcloud.com"],
               "zygj.jointem.com":oems["jointem.com"],
               "jointem.com":oems["jointem.com"],
               "cloud.serenelifehome.com":oems["serenelifehome.com"],
               "serenelifehome.com":oems["serenelifehome.com"],
               "test.vimtag.com":oems["testvimtag.com"],
               "test.mipcm.com":oems["testmipcm.com"],
               "v2.mipcm.com":oems["mipcm.com"],
               "v3.vimtag.com":oems["testvimtag.com"],
               "www.itacamapp.com":oems["itacamapp.com"],
               "itacamapp.com":oems["itacamapp.com"]
    };//储存所有用户的域名路径等信息

    //获取语言
    (function(){
       var nav_lang;
       //先从本地存储获取
       var lang_choice =mlocal_storage.get("language_choice_info");
       if(lang_choice)
       {
          switch(lang_choice)
          {
            case "en":
              {
                 mcs_init_langs("en");
                 g_now_lang = "en";
                 break;
              }
            case "zh":
              {
                 mcs_init_langs("zh");
                 g_now_lang = "zh";
                 break;
              }
           case "tw":
             {
                mcs_init_langs("tw");
                g_now_lang = "tw";
                break;
             }
           case "ja":
             {
                mcs_init_langs("ja");
                g_now_lang = "ja";
                break;
             }
           case "ko":
             {
                mcs_init_langs("ko");
                g_now_lang = "ko";
                break;
             }
           case "de":
             {
                mcs_init_langs("de");
                g_now_lang = "de";
                break;
             }
           case "fr":
             {
                mcs_init_langs("fr");
                g_now_lang = "fr";
               break;
             }
           case "es":
             {
               mcs_init_langs("es");
               g_now_lang = "es";
               break;
             }
           case "pt":
             {
                mcs_init_langs("pt");
                g_now_lang = "pt";
               break;
             }
           case "it":
             {
                mcs_init_langs("it");
                g_now_lang = "it";
               break
             }
           case "ar":
             {
                mcs_init_langs("ar");
                g_now_lang = "ar";
               break
             }
           case "ru":
             {
                mcs_init_langs("ru");
                g_now_lang = "ru";
                break
             }
           default:
             {
                mcs_init_langs("en");
                g_now_lang = "en";
                jQuery.datepicker.setDefaults(jQuery.datepicker.regional['zh-CN']);
             }
          }
       }else{
       	 //再从浏览器获取
       	 nav_lang = navigator.language || navigator.browserLanguage || navigator.userLanguage || navigator.systemLanguage || "",
         nav_lang=nav_lang.toLowerCase();
       	 if(nav_lang){
           if(nav_lang== "ja")
             {
                mcs_init_langs("ja");
                g_now_lang = "ja";
             }
           else if(nav_lang== "ko")
             {
                mcs_init_langs("ko");
                g_now_lang = "ko";
             }
           else if(nav_lang.indexOf("de")>= 0)
             {
                mcs_init_langs("de");
                g_now_lang = "de";
             }
           else if(nav_lang.indexOf("en")>= 0)
             {
                 mcs_init_langs("en");
                 g_now_lang = "en";
             }
           else if(nav_lang== "zh")
             {
                 mcs_init_langs("zh");
                 g_now_lang = "zh";
             }
           else if(nav_lang== "zh-cn")
             {
                 mcs_init_langs("zh");
                 g_now_lang = "zh";
             }
           else if(nav_lang== "tw")
             {
                mcs_init_langs("tw");
                g_now_lang = "tw";
             }
           else if(nav_lang== "zh-tw")
             {
                mcs_init_langs("tw");
                g_now_lang = "tw";
             }
           else if(nav_lang.indexOf("fr")>= 0)
             {
                mcs_init_langs("fr");
                g_now_lang = "fr";
             }
           else if(nav_lang== "es")
             {
               mcs_init_langs("es");
               g_now_lang = "es";
             }
           else if (nav_lang.indexOf("pt")>= 0)
             {
                mcs_init_langs("pt");
                g_now_lang = "pt";
             }
           else if(nav_lang== "it")
             {
                mcs_init_langs("it");
                g_now_lang = "it";
             }
           else if(nav_lang== "ar")
             {
                mcs_init_langs("ar");
                g_now_lang = "ar";
             }
           else if(nav_lang== "ru")
             {
                mcs_init_langs("ru");
                g_now_lang = "ru";
             }
           else
             {
                mcs_init_langs("en");
                g_now_lang = "en";
             }
         }else{//实在获取不到，默认为英文
             mcs_init_langs("en");
             g_now_lang = "en";
         }
       }
    })();

    var log_comparison_table = {
        config:           mcs_config,
        video:            mcs_video,
        audio:            mcs_audio_setting,
        network:          mcs_network,
        osd:              mcs_osd,
        CcmSetUser:       mcs_modify_password,
        isp:              mcs_isp,
        mic:              mcs_mic,
        speaker:          mcs_speaker,
        nick:             mcs_nick_modify,
        snapshot:         mcs_snapshot,
        alert:            mcs_alarm,
        segment:          "",
        sdcard:           mcs_sdcord,
        storage_device:   mcs_storage_device,
        insert:           mcs_ready,
        remove:           mcs_removed,
        full:             mcs_fault,
        failure:          mcs_fault,
        reboot:           mcs_reboot,
        upgrade:          mcs_upgrade,
        finish:           mcs_upgrade_finish,
        fail:             mcs_fail,
        device:           mcs_device_status,
        online:           mcs_online,
        offline:          mcs_offline,
        "":               "",
        io_alert:         mcs_i_o_alarm,
        motion:           mcs_motion,
        mount:            mcs_mount,
        umount:           mcs_unmount,
        io:               "IO",
        pir:              mcs_pir,
        motion_alert:     mcs_motion,
        talk:             mcs_talk,
        record:           mcs_record,
        play:             mcs_play,
        start:            mcs_start,
        stop:             mcs_start,
        info:             mcs_messages,
        alerter:          mcs_alerter,
        encoder:          mcs_encoder,
        free:             mcs_finish,
        init:             mcs_init,
        download:         mcs_upgrade_download,
        apply:            mcs_apply,
        erase:            mcs_erasing,
        write:            mcs_writing
    };

    window.version_Category = {
         Basic_version:           "1",
         Snapshot_version:        "2",
         Info_version:            "3",
         Version_recording:       "4",
         Schedule_recording:      "5",
         guest_version:           "6",
         wifi_guide_version:      "7",
         curise_motion_version:   "8",
         Schedule_alerting:       "9",
         box_add_version:         "10"
    };

    Date.prototype.format = function(format)
    {
        var o = {
            "M+" : this.getMonth()+1, //month
            "d+" : this.getDate(),    //day
            "h+" : this.getHours(),   //hour
            "m+" : this.getMinutes(), //minute
            "s+" : this.getSeconds(), //second
            "q+" : Math.floor((this.getMonth()+3)/3),  //quarter
            "S" : this.getMilliseconds() //millisecond
        }
        if(/(y+)/.test(format)) format=format.replace(RegExp.$1,
                (this.getFullYear()+"").substr(4 - RegExp.$1.length));
        for(var k in o)if(new RegExp("("+ k +")").test(format))
            format = format.replace(RegExp.$1,
                    RegExp.$1.length==1 ? o[k] :
                    ("00"+ o[k]).substr((""+ o[k]).length));
        return format;
    }
    //提示框函数
    function msg_tips(options)
    {
		   var defaults = {
			    timeout : 3000,				//提示层显示的时间
			    msg : "消息提示框",			//显示的消息
			    speed : 300,				//滑动速度
			    type : "success"			//提示类型（1、success 2、error 3、warning）
		   };
		   var bid = parseInt(Math.random()*100000);
		   jQuery("body").prepend('<div id="tip_container'+bid+'" class="container tip_container"><div id="tip'+bid+'" class="mtip"><i class="micon"></i><span id="tsc'+bid+'"></span><i id="mclose'+bid+'" class="mclose"></i></div></div>');
		   var $this = jQuery(this);
		   var $tip_container = jQuery("#tip_container"+bid)
		   var $tip = jQuery("#tip"+bid);
		   var $tipSpan = jQuery("#tsc"+bid);
		   var $colse = jQuery("#mclose"+bid);
		   //先清楚定时器
		   clearTimeout(window.timer);

			 $tip.attr("class", options.type).addClass("mtip");
			 $tipSpan.html(options.msg);
			 $tip_container.slideDown(300);
			 //提示层隐藏定时器
			 window.timer = setTimeout(function (){
				     $tip_container.slideUp(300);
			 }, options.timeout);
		   //鼠标移到提示层时清除定时器
		   $tip_container.live("mouseover",function(){
			    clearTimeout(window.timer);
		   });
		   //鼠标移出提示层时启动定时器
		   $tip_container.live("mouseout",function(){
			    window.timer = setTimeout(function (){
				     $tip_container.slideUp(300);
			    }, options.timeout);
		   });
		   //关闭按钮绑定事件
		   $colse.live("click",function(){
			    $tip_container.slideUp(300);
		   });
	  }
	  
	  function getLeft(e)
    {
        var offset = e.offsetLeft;
        if(e.offsetParent != null) offset += getLeft(e.offsetParent);
        return offset;
    }

    var log_dev, log_status, log_span, l_log_list = createLinkList(), log_flag;
    //添加log
    function log(info, level)
    {
        var status_content = mx("#status_content");
        if(null == log_dev)
        {
            //if(0 <= (location.search || location.hash || "").indexOf("debug=1"))
            if(status_content)
            {
                log_dev = dom_create_child(status_content, "div");
                log_status = dom_create_child(log_dev, "div", "log_status");
                log_span = dom_create_child(log_dev, "div");

                log_dev.style.cssText = "color:#c92641;font-weight:bold";
                log_span.style.cssText = "padding-left:10px";
            }
        }
        if(info)
        {
            if(mx("#status_bar"))
            {
                log_flag = jQuery("#status_bar").queue("log_list").length == 0 ? 1 : 0;
                jQuery("#status_bar").queue("log_list", function(next){
                                jQuery(this).animate({height:0, marginTop:"8"}, {duration:500, queue:false, complete:function(){
                                    next();
                                }})
                            })
                            .queue("log_list", function(next){
                                status_content.style.cssText =
                                    "background-image:-moz-linear-gradient(center top , #141819 0px, #37383A 100%);"
                                    +"background:-webkit-gradient(linear, 0 0, 0 bottom, from(#141819), to(#37383A));"
                                    +"background:-o-linear-gradient(top, #141819, #37383A);"
                                    +"filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#141819', endColorstr='#37383A');*background:url(about:blank);";
                                    log_span.innerHTML = info;
                                    next();
                            })
                            .queue("log_list", function(next){
                                jQuery(this).animate({height:g_status_bar_h, marginTop:"0"}, {duration:500, queue:false, complete:function(){
                                    next();
                                }});
                            })
                            .delay(4500, "log_list")
                            .queue("log_list", function(next){
                                jQuery(this).animate({height:0, marginTop:"8"}, {duration:500, queue:false, complete:function(){
                                    if(jQuery("#status_bar").queue("log_list").length == 0)
                                    {
                                        jQuery("#status_bar").queue("log_list", function(next){
                                            status_content.style.cssText = "";
                                            log_span.innerHTML = "";
                                            jQuery(this).animate({height:g_status_bar_h, marginTop:"0"}, {duration:500, queue:false, complete:function(){
                                                next();
                                            }});
                                        });
                                    }
                                    next();
                                }});
                            });
                    if(log_flag)
                        jQuery("#status_bar").dequeue("log_list");
            }

            var date  = new Date().format("yyyy-MM-dd hh:mm:ss");
            //如果log的数量等于10，则删除第一个
            if(l_log_list.length == 10)
            {
                l_log_list.del(l_log_list.get_first().data);
            }
            l_log_list.add({date:date, info:info});
        }
        else
        {
            return l_log_list;
        }
        return 0;
    }

    window.get_version_Category=function(){
        var dev = mcloud_agent.devs.get(g_select_device_ipc);
        if(dev && dev.img_ver){
          if(dev.img_ver >= "v2.5.1.1505211702")
            return version_Category.box_add_version;
          if(dev.img_ver >= "v1.6.2.1501281808")
            return version_Category.curise_motion_version;
          if(dev.img_ver >= "14.01.23.12.30")
            return version_Category.wifi_guide_version;
          if(dev.img_ver >= "13.09.14.12.30")
            return version_Category.guest_version;
          if(dev.img_ver >= "13.05.20.17.57")
            return version_Category.Schedule_recording;
          if(dev.img_ver >= "13.05.09.17.57")
            return version_Category.Version_recording;
          if(dev.img_ver > "13.04.01.01.35")
            return version_Category.Info_version;
          if(dev.img_ver <= "13.04.01.01.35" && dev.bimg_ver > "13.01.01.01.35")
            return version_Category.Snapshot_version;
          return version_Category.Basic_version;
        }
    };

    window.determine_the_version = function(obj){
    	if(obj.type=="Positive")
        {
           if(get_version_Category()>=obj.version)
           {
               return true;
           }else
           {
              return false;
           }
        }
        else if(obj.type=="Anti")
        {
           if(get_version_Category()<=obj.version)
           {
              return true;
           }else
           {
              return false;
           }
        }
        else
        {
            if(get_version_Category()==obj.version)
            {
                return true;
            }else
            {
               return false;
            }
        }
    };

    function sub_img_build(left ,top, width, height, src, p_width, p_height)
    {
        return {src:src, left:left, top:top, width:width, height:height, p_width:p_width, p_height:p_height};
    }

    var urlparms =(function(){
    	   var args=new Object();
         var query=location.search.substring(1);//获取查询串
         var pairs=query.split("&");//在逗号处断开
         for(var i=0;i<pairs.length;i++)
         {
           var pos=pairs[i].indexOf('=');//查找name=value
           if(pos==-1)   continue;//如果没有找到就跳过
           var argname=pairs[i].substring(0,pos);//提取name
           var value=pairs[i].substring(pos+1);//提取value
           args[argname]=unescape(value);//存为属性
         }
         return args;
    })();

    // g_hostname=(urlparms&&urlparms.m!=null)?urlparms.m:window.location.hostname;
    g_hostname = "www.vimtag.com"

    var client_name;//liu 20130930
    var Istest=(urlparms&&urlparms.t!=null)?urlparms.t:null;
    if(Istest && g_domain[g_hostname])
    {
             client_name=g_domain[g_hostname].img;
             create_css("../css/slider.css");
             create_css("../css/jquery.mCustomScrollbar.css");
             create_css("../css/date-timepicker.css");
             create_css("../css/jquery.ibutton.css");
             create_css("../css/jquery.tzSelect.css");
             create_css("../css/web_v4.css");
            // create_css("./oem/luxcam/css/data.css");
    }
    else if(g_domain[g_hostname])
    {
             client_name=g_domain[g_hostname].img;
             create_css(g_domain[g_hostname].css);
    }
    else
    {
             /*create_css("../css/mipc.min.css?20130909110617");*/
             client_name="./imgs/";
    }
    function create_css(cssName){ //liu
         if(document.createStyleSheet){//IE
             document.createStyleSheet(cssName,1);
         }
         else{//FF
             var my_link = document.createElement("link");
             my_link.setAttribute("type","text/css");
             my_link.setAttribute("rel","stylesheet");
             my_link.setAttribute("href",cssName);
             document.getElementsByTagName("head")[0].appendChild(my_link);
         }
    }
    //IE8和IE7不支持数组的indexOf方法时执行下面的程序
    if (!Array.prototype.indexOf)
    {
         Array.prototype.indexOf = function(g_hostname)
         {
             var len = this.length >>> 0;
             var from = Number(arguments[1]) || 0;
             from = (from < 0)? Math.ceil(from) : Math.floor(from);
             if (from < 0)
             from += len;
             for (; from < len; from++)
             {
               if (from in this && this[from] === g_hostname)
               return from;
             }
             return -1;
         };
    }
    //获取数组中是否有该域名，并将相应的值设置为1
    if(g_domain_oems.indexOf(g_hostname)>=0)
    {
    	  switch(g_hostname)
    	  {
    	  	 case "vimtag.com":
    	  	 case "v3.vimtag.com":
    	  	 case "test.vimtag.com":
    	  	 case "www.vimtag.com":
    	  	 {
    	  	 	  g_domain_oems_vimtag = 1;
    	  	 	  break;
    	  	 }
    	  	 case "luxcamapp.eu":
    	  	 case "www.luxcamapp.eu":
    	  	 {
    	  	 	  g_domain_oems_luxcamapp = 1;
    	  	 	  break;
    	  	 }
    	  	 case "ebit.com":
    	  	 case "www.ebit.com":
    	  	 {
    	  	 	  g_domain_oems_ebit = 1;
    	  	 	  break;
    	  	 }
    	  	 case "mommycam.us":
    	  	 case "www.mommycam.us":
    	  	 {
    	  	 	  g_domain_oems_mommycam = 1;
    	  	 	  break;
    	  	 }
    	  	 case "prolabcloud.com":
    	  	 case "www.prolabcloud.com":
    	  	 {
    	  	 	  g_domain_oems_prolabcloud = 1;
    	  	 	  break;
    	  	 }
    	  	 case "serenelifehome.com":
    	  	 case "cloud.serenelifehome.com":
    	  	 {
    	  	 	  g_domain_oems_serenelifehome = 1;
    	  	 	  break;
    	  	 }
    	  	 case "mipcm.com":
    	  	 case "www.mipcm.com":
    	  	 {
    	  	 		g_domain_oems_mipcm = 1;
    	  	 		break;
    	  	 }
    	  	 default:
    	  	 {
    	  	 	  log("there have no this domain!");
    	  	 }
    	  }
    }

    if (!Array.prototype.indexOf)
    {
         Array.prototype.indexOf = function(g_server_ip)
         {
             var len = this.length >>> 0;
             var from = Number(arguments[1]) || 0;
             from = (from < 0)? Math.ceil(from) : Math.floor(from);
             if (from < 0)
             from += len;
             for (; from < len; from++)
             {
               if (from in this && this[from] === g_server_ip)
               return from;
             }
             return -1;
         };
    }
    var g_server_ip = g_server_device.substring(0,g_server_device.lastIndexOf(":"));
    var g_inland_server_ip = new Array("218.14.146.199","61.147.109.92","222.186.3.5");

    if(g_inland_server_ip.indexOf(g_server_ip)>= 0)
    {
    	  g_inland_server_ip_ok = 1;
    }
        
    mipc_img_src_date=client_name+"mipc_img.png";
    var mipc_img_src = mipc_img_src_date,
        sub_img_logo0           = sub_img_build(    0,185,   75,   75,  mipc_img_src, 744, 335),
        sub_img_logo1           = sub_img_build(    0,260,   75,   75,  mipc_img_src, 744, 335),
        sub_img_signin_name     = sub_img_build(  351,205,   33,   29,  mipc_img_src, 744, 335),
        sub_img_signin_psw      = sub_img_build(  384,205,   33,   29,  mipc_img_src, 744, 335),
        sub_img_signin          = sub_img_build(  417,205,   33,   29,  mipc_img_src, 744, 335),
        sub_img_column          = sub_img_build(   75,300,    1,   27,  mipc_img_src, 744, 335),
        sub_img_view_logo       = sub_img_build(   75,205,  236,   34,  mipc_img_src, 744, 335),
        sub_img_view_bg0        = sub_img_build(  360,124,   25,   22,  mipc_img_src, 744, 335),
        sub_img_view_bg1        = sub_img_build(  385,124,   25,   22,  mipc_img_src, 744, 335),
        sub_img_view_bg2        = sub_img_build(  410,124,   25,   10,  mipc_img_src, 744, 335),
        sub_img_view_bg3        = sub_img_build(  410,134,   25,   12,  mipc_img_src, 744, 335),
        sub_img_view_bg4        = sub_img_build(  435,124,   25,   10,  mipc_img_src, 744, 335),
        sub_img_view_bg5        = sub_img_build(  435,134,   25,   12,  mipc_img_src, 744, 335),
        sub_img_device_switch   = sub_img_build(  402,185,   20,   20,  mipc_img_src, 744, 335),
        sub_img_ptz_switch      = sub_img_build(  422,185,   20,   20,  mipc_img_src, 744, 335),
        sub_img_device_edit     = sub_img_build(  360,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_device_search   = sub_img_build(  374,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_device_add      = sub_img_build(  388,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_PTZ0            = sub_img_build(    0,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_PTZ1            = sub_img_build(  124,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_PTZ2            = sub_img_build(  248,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_PTZ3            = sub_img_build(  372,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_PTZ4            = sub_img_build(  496,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_PTZ5            = sub_img_build(  620,  0,  124,  124,  mipc_img_src, 744, 335),
        sub_img_play0           = sub_img_build(    0,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_play1           = sub_img_build(    0,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_stop0           = sub_img_build(   30,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_stop1           = sub_img_build(   30,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_recording0      = sub_img_build(   60,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_recording1      = sub_img_build(   60,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_on_recording0   = sub_img_build(  300,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_on_recording1   = sub_img_build(  300,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_snapshot0       = sub_img_build(   90,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_snapshot1       = sub_img_build(   90,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_snapshot2       = sub_img_build(  548,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_call0           = sub_img_build(  120,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_call1           = sub_img_build(  120,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_call2           = sub_img_build(  330,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_rewind0         = sub_img_build(  150,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_rewind1         = sub_img_build(  150,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_previous0       = sub_img_build(  180,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_previous1       = sub_img_build(  180,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_pause0          = sub_img_build(  210,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_pause1          = sub_img_build(  210,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_next0           = sub_img_build(  240,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_next1           = sub_img_build(  240,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_forward0        = sub_img_build(  270,124,   30,   30,  mipc_img_src, 744, 335),
        sub_img_forward1        = sub_img_build(  270,154,   30,   30,  mipc_img_src, 744, 335),
        sub_img_status0         = sub_img_build(  161,184,    8,    8,  mipc_img_src, 744, 335),
        sub_img_status1         = sub_img_build(  169,184,    8,    8,  mipc_img_src, 744, 335),
        sub_img_status2         = sub_img_build(  177,184,    8,    8,  mipc_img_src, 744, 335),
        sub_img_page_state0     = sub_img_build(  152,185,    9,    9,  mipc_img_src, 744, 335),
        sub_img_page_state1     = sub_img_build(  152,195,    9,    9,  mipc_img_src, 744, 335),
        sub_img_delete          = sub_img_build(  213,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_close0          = sub_img_build(  390,146,   30,   30,  mipc_img_src, 744, 335),
        sub_img_close1          = sub_img_build(  360,146,   30,   30,  mipc_img_src, 744, 335),
        sub_img_profile_token0  = sub_img_build(  185,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_profile_token1  = sub_img_build(  199,185,   14,   14,  mipc_img_src, 744, 335),
        sub_img_arrow           = sub_img_build(  161,196,    8,    8,  mipc_img_src, 744, 335),
        sub_img_sound_close     = sub_img_build(  328,264,   30,   30,  mipc_img_src, 744, 335),
        sub_img_sound_close_over= sub_img_build(  356,264,   30,   30,  mipc_img_src, 744, 335),
        sub_img_sound_open      = sub_img_build(  385,264,   30,   30,  mipc_img_src, 744, 335),
        sub_img_sound_open_over = sub_img_build(  415,264,   30,   30,  mipc_img_src, 744, 335),
        sub_img_mobile0         = sub_img_build(  460,124,   20,   24,  mipc_img_src, 744, 335),
        sub_img_mobile1         = sub_img_build(  480,124,   20,   24,  mipc_img_src, 744, 335),
        sub_img_android         = sub_img_build(  500,124,   24,   24,  mipc_img_src, 744, 335),
        sub_img_ios             = sub_img_build(  524,124,   24,   24,  mipc_img_src, 744, 335);
        sub_img_broadcast1      = sub_img_build(    0,338,  125,  125,  mipc_img_src, 744, 475);
        sub_img_broadcast2      = sub_img_build(  125,338,  125,  125,  mipc_img_src, 744, 475);
        sub_img_renovate        = sub_img_build(  250,338,  120,  120,  mipc_img_src, 744, 475);

    function background_img_set(parent, sub_img)
    {
        parent.style.background = "url(" + sub_img.src + ") no-repeat -" + sub_img.left + "px -" + sub_img.top + "px";
        parent.style.width = sub_img.width + "px";
        parent.style.height = sub_img.height + "px";
    }

    function background_img_change_pos(parent, sub_img)
    {
        parent.style.backgroundPosition = "-" + sub_img.left + "px -" + sub_img.top + "px";
    }

    window.dom_create_child=function(child_parent, child_type, child_id, child_class, insert_mode){
    		var child = document.createElement(child_type);
        if(child_id){child[s_setAttribute]("id", child_id);}
        if(child_class){
        	child[s_setAttribute]("className", child_class); //for IE
        	child[s_setAttribute]("class", child_class);
        }
        if(child_parent)
        {
            if(insert_mode) child_parent[insert_mode.type](child, insert_mode.node?insert_mode.node:null);
            else child_parent.appendChild(child);
        }
        return child;
    };

    function trigger_click(el)
    {
        if(el.click) el.click();
        else
        {
            try{
                var evt = document.createEvent('Event');
                evt.initEvent('click',true,true);
                el.dispatchEvent(evt);
            }catch(e){system_pop_confirm_box({alert:true, str:e})};
        }
    }

    function img_fade_effect(parent_dom, ori_src, target_src)
    {
        var j_parent_dom;

        parent_dom.innerHTML =
            "<a class='thumb' href='javascript:void(0)'>"
            +   "<span><div></div>"
            +"</a>";
        j_parent_dom = jQuery(parent_dom);
        background_img_set(j_parent_dom.find("div")[0], ori_src);

        j_parent_dom.hover(function() {
            background_img_set(jQuery(this).find("a.thumb")[0], target_src);
            jQuery(this).find("span").stop().fadeTo('normal', 0 , function() {
                jQuery(this).hide()
            });
        } , function() {
            jQuery(this).find("span").stop().fadeTo('normal', 1).show();
        });
    }

    function class_system_signal_trans()
    {
        var l_me = this,
            l_signal_trans_count = 0,
            l_dom_signal_trans = mx("#system_signal_trans");
        l_me.create = function()
        {
            var menu_signal_dom = mx("#main_menu_center") ? mx("#main_menu_center") : mx("#login_menu_center");

            if(!l_dom_signal_trans && menu_signal_dom)
            {
                l_dom_signal_trans = dom_create_child(menu_signal_dom, "div", "system_signal_trans");
                l_dom_signal_trans[s_innerHTML] = "<img src='"+client_name+"/loading.gif' style='float:right'></img>";

                l_dom_signal_trans[s_style].paddingTop = 5 + "px";
            }
            ++ l_signal_trans_count;
        }
        l_me.destroy = function()
        {
            -- l_signal_trans_count;
            setTimeout(function() {
                if(l_signal_trans_count == 0 && l_dom_signal_trans)
                {
                    jQuery(l_dom_signal_trans).fadeOut(200);
                    l_dom_signal_trans[s_innerHTML] = null;
                    if(l_dom_signal_trans.parentNode)l_dom_signal_trans.parentNode.removeChild(l_dom_signal_trans);
                    l_dom_signal_trans = null;
                }
            }, 300);
        }
    }
    window.system_signal_trans=new class_system_signal_trans();

    function system_pop_confirm_box(obj)
    {
        var pop_confirm_box = mx("#system_pop_confirm_box"),
            pop_confirm_content, pop_confirm_div,
            l_client_w, l_client_h,
            button_left = obj.button_left || mcs_ok, button_right = obj.button_right || mcs_cancel;

        if(!pop_confirm_box)
        {
            l_client_h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            l_client_w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            if(l_client_h < g_client_division_h)
            {
                l_client_h = g_client_division_h;
            }
            if(l_client_w < g_client_division_w)
            {
                l_client_w = g_client_division_w;
            }
            document.documentElement.onkeydown = function(e) {var evt = e || window.event; if(evt.keyCode != 116) return false;};
            pop_confirm_box = document.createElement("div");
            pop_confirm_box[s_setAttribute]("id", "system_pop_confirm_box");
            g_page.parentNode.insertBefore(pop_confirm_box, g_page);

            pop_confirm_content = dom_create_child(pop_confirm_box, "div", "system_pop_confirm_cotent");
            pop_confirm_div = dom_create_child(pop_confirm_box, "div", "system_pop_confirm_div");



            pop_confirm_div[s_style][s_cssText] = "position:absolute;width:" + l_client_w + "px;height:" + l_client_h + "px;background-color:#fff;opacity:0.1;"
                + "filter:alpha(opacity=10);z-index:100";
            if(g_domain_oems_vimtag)
            {
            	  pop_confirm_content[s_style][s_cssText] = "position:absolute;top:" + ((l_client_h - 168) / 3) + "px;left:" + ((l_client_w - 286) / 2) + "px;z-index:101;"
                + "background-color:#ffffff;border-radius:4px;width:286px;height:168px;";
            }
            if(obj.alert)
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	  	  pop_confirm_content[s_innerHTML] =
		                     "<div style='padding-left:15px;padding-top:20px;font-weight:900;font-size:16px;color:#ff4136;'>" + obj.str + "</div>"
		                    +"<div style='position:absolute;bottom:15px'>"
		                    +   "<button class='vimtag_standard_buttons_green' style='margin-left:100px'>" + button_left + "</button>"
		                    +"</div>";

		                mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = function() {
		                    var pop_confirm_box = mx("#system_pop_confirm_box"),
		                        pop_confirm_content = mx("#system_pop_confirm_content"),
		                        pop_confirm_div = mx("#system_pop_confirm_div");

		                    document.documentElement.onkeydown = null;
		                    mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = null;

		                    pop_confirm_box[s_innerHTML] = "";
		                    pop_confirm_box.parentNode[s_removeChild](pop_confirm_box);
		                    pop_confirm_box = null;

		                     obj.callback_func(obj.param);
		                };
            	  }
            }
            else
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	  	  pop_confirm_content[s_innerHTML] =
		                     "<div style='padding-left:15px;padding-top:20px;font-weight:900;font-size:16px;color:#ff4136;'>" + obj.str + "</div>"
		                    +"<div style='position:absolute;bottom:15px'>"
		                    +   "<button class='vimtag_standard_buttons_green' style='margin-left:25px'>" + button_left + "</button>"
		                    +   "<button class='vimtag_standard_buttons_red' style='margin-left:45px'>" + button_right + "</button>"
		                    +"</div>";

		                mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = function() {
		                    var pop_confirm_box = mx("#system_pop_confirm_box"),
		                        pop_confirm_content = mx("#system_pop_confirm_content"),
		                        pop_confirm_div = mx("#system_pop_confirm_div");

		                    document.documentElement.onkeydown = null;
		                    mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = null;
		                    mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = null;

		                    pop_confirm_box[s_innerHTML] = "";
		                    pop_confirm_box.parentNode[s_removeChild](pop_confirm_box);
		                    pop_confirm_box = null;

		                    obj.callback_func(obj.param);
		                };
		                mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = function() {
		                    var pop_confirm_box = mx("#system_pop_confirm_box"),
		                        pop_confirm_content = mx("#system_pop_confirm_content"),
		                        pop_confirm_div = mx("#system_pop_confirm_div");

		                    document.documentElement.onkeydown = null;
		                    mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = null;
		                    mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = null;

		                    pop_confirm_box[s_innerHTML] = "";
		                    pop_confirm_box.parentNode[s_removeChild](pop_confirm_box);
		                    pop_confirm_box = null;
		                };
            	  }
            }
        }
    }

    function system_tooltip(obj)       //parent, offset_w, offset_h, type, position, disappear_way, str
    {
        var origin_left = 0, origin_top = 0, p = obj.parent,
            tooltip_div_dom,
            tooltip_content_dom,
            tooltip_arrow_dom,
            j_tooltip_content_dom,
            j_tooltip_arrow_dom;

        tooltip_div_dom = dom_create_child(g_page, "div", "system_tooltip");
        tooltip_content_dom = dom_create_child(tooltip_div_dom, "div", "system_tooltip_content");
        tooltip_arrow_dom = dom_create_child(tooltip_div_dom, "span", "system_tooltip_arrow");
        j_tooltip_div_dom = jQuery(tooltip_div_dom);
        j_tooltip_content_dom = jQuery(tooltip_content_dom);
        j_tooltip_arrow_dom = jQuery(tooltip_arrow_dom);

        tooltip_div_dom.style.width = (obj.str.length > 10 ? 10 : obj.str.length) * 25 + "px";

        function destroy_system_tooltip()
        {
            if(!tooltip_div_dom)return;
            tooltip_div_dom[s_innerHTML] = "";
            tooltip_div_dom.parentNode[s_removeChild](tooltip_div_dom);
            tooltip_div_dom = null;
            return 0;
        }

        if(obj.parent)
        {
            while(p !== null)
            {
                origin_left += p.offsetLeft;
                origin_top += p.offsetTop;
                p = p.offsetParent;
            }
        }

        if(obj.color == "red")
        {
            j_tooltip_content_dom.addClass("system_red_content");
            tooltip_content_dom[s_innerHTML] = obj.str;
            if(obj.position && obj.position == "right")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left + obj.parent.offsetWidth) + "px";
                tooltip_arrow_dom.style.left = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.left = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_red_content_left");
                j_tooltip_arrow_dom.addClass("system_red_arrow_left");
            }
            else if(obj.position == "left")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left - tooltip_div_dom.offsetWidth) + "px";
                tooltip_arrow_dom.style.right = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.right = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_red_content_right");
                j_tooltip_arrow_dom.addClass("system_red_arrow_right");
            }
        }
        else if(obj.color == "green")
        {
            j_tooltip_content_dom.addClass("system_green_content");
            tooltip_content_dom[s_innerHTML] = obj.str;
            if(obj.position == "right")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left + obj.parent.offsetWidth) + "px";
                tooltip_arrow_dom.style.left = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.left = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_green_content_left");
                j_tooltip_arrow_dom.addClass("system_green_arrow_left");
            }
            else if(obj.position == "left")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left - tooltip_div_dom.offsetWidth) + "px";
                tooltip_arrow_dom.style.right = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.right = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_green_content_right");
                j_tooltip_arrow_dom.addClass("system_green_arrow_right");
            }
        }
        else if(obj.color == "white")
        {
            j_tooltip_content_dom.addClass("system_white_content");
            tooltip_content_dom[s_innerHTML] = obj.str;
            if(obj.position && obj.position == "right")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left + obj.parent.offsetWidth) + "px";
                tooltip_arrow_dom.style.left = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.left = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_white_content_left");
                j_tooltip_arrow_dom.addClass("system_white_arrow_left");
            }
        }
        else if(obj.color == "gray")
        {
            j_tooltip_content_dom.addClass("system_gray_content");
            tooltip_content_dom[s_innerHTML] = obj.str;
            if(obj.position == "right")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left + (obj.parent?obj.parent.offsetWidth:0)) + "px";
                tooltip_arrow_dom.style.left = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.left = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_gray_content_left");
                j_tooltip_arrow_dom.addClass("system_gray_arrow_left");
            }
            else if(obj.position == "left")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left - tooltip_div_dom.offsetWidth) + "px";
                tooltip_arrow_dom.style.right = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.right = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_gray_content_right");
                j_tooltip_arrow_dom.addClass("system_gray_arrow_right");
            }
        }
        else if(obj.color == "black")
        {
            j_tooltip_content_dom.addClass("system_black_content");
            tooltip_content_dom[s_innerHTML] = obj.str;
            if(obj.position && obj.position == "right")
            {
                tooltip_div_dom.style.top = origin_top + "px";
                tooltip_div_dom.style.left = (origin_left + obj.parent.offsetWidth) + "px";
                tooltip_arrow_dom.style.left = "0px";
                tooltip_arrow_dom.style.top = (tooltip_content_dom.offsetHeight - tooltip_arrow_dom.offsetHeight) / 2 + "px";
                tooltip_content_dom.style.left = tooltip_arrow_dom.offsetWidth + "px";
                j_tooltip_content_dom.addClass("system_black_content_left");
                j_tooltip_arrow_dom.addClass("system_black_arrow_left");
            }
        }
        j_tooltip_div_dom.hide();
        j_tooltip_div_dom.fadeIn(500, function() {
            g_j_page.one("mousedown", function(e) {
                if(tooltip_div_dom)
                {
                    j_tooltip_div_dom.fadeOut(300, function() {
                        destroy_system_tooltip();
                    });
                }
            });
            g_j_page.one("keydown", function(e) {
                if(tooltip_div_dom)
                {
                    j_tooltip_div_dom.fadeOut(300, function() {
                        destroy_system_tooltip();
                    });
                }
            });
        });
    }

    function createLinkList(obj)
    {
        var _this = {}, first = null, temp;
        _this.length = 0;

        _this.get_first = function() {return first;}
        _this.add = function(val, priority)
        {
            var flag = priority ? priority : 0;
            var node = priority_pos(flag), prev_temp;

            for(temp = first, prev_temp = null; temp; prev_temp = temp, temp = temp.next)
            {
                if(temp.data == val)
                {
                    if(temp.priority == flag) return 1;                       //already exists
                    else
                    {
                        if(node && node.data == temp.data)
                           node = node.pre;
                        _this.del(val);
                    }
                }
            }
            if(!node)
                first = {data:val, pre:null, next:first || null, priority:flag};
            else
            {
                if(node.next)
                    node.next = (node.next.pre = {data:val, pre:node, next:node.next, priority:flag});
                else
                    node.next = {data:val, pre:node, next:node.next, priority:flag};
            }
            ++_this.length;
            return 0;
        }
        _this.del = function(val)
        {
            if(first == null) return null;
            if(first.data == val)
            {
                temp = first;
                first = first.next;
                --_this.length;
                return temp;
            }
            else
            {
                var ptemp = temp = first;
                for( ; temp; ptemp = temp, temp = temp.next)
                {
                    if(temp.data == val)
                    {
                        if(temp.next)
                            temp.next.pre = ptemp;
                        ptemp.next = temp.next;
                        --_this.length;
                        return temp;
                    }
                }
            }
        }
        function priority_pos(priority)
        {
            var prev_temp = null;
            if(!first) return first;

            for(temp = first; temp; prev_temp = temp, temp = temp.next)
            {
                if(priority > temp.priority) return prev_temp;
            }
            return prev_temp;
        }
        _this.pos = function(val)
        {
            var i = 0;
            for(temp = first; temp; temp = temp.next, ++i)
            {
                if(temp.data == val || temp.data == val.toLowerCase() || temp.data == val.toUpperCase()){
                    return i;
                }
            }
            return null;
        }
        _this.empty = function()
        {
            first = null;
            _this.length = 0;
        }
        return _this;
    }
    window.createLinkList = createLinkList;

    function class_mining_software()
    {
        g_web = mx("#web");
        g_page = mx("#page");
        g_j_page = jQuery("#page");

        var l_me = this,
            l_me_parent = g_page,
            l_client_w, l_client_h,
            
            l_dom_login_page_top = dom_create_child(l_me_parent, "div", "login_page_top"),
            l_dom_login_page = dom_create_child(l_me_parent, "div", "login_page"),
            l_login_page_obj;
            l_dom_main_page = dom_create_child(l_me_parent, "div", "main_page");
            l_main_page_obj='';l_server_type='';l_server_sn='';
            l_dom_login_page_top.innerHTML = "<div id='slideDown1'></div><div id='top'></div>";
            main_top();



        //----------------------ToolTip---------------------------------
        var TT = l_me.TT = new function(obj) {
            var l_me = this, handle, hide_timer,
                tooltip, tooltipInner,
                tooltip_ex, tooltipInner_ex;

            l_me.init = function(cbObj)
            {
                // Grab a reference to the slider handle
                var handle  = mx("#fd-slider-handle-" + cbObj.elem.id);

                // If something has gone wrong then bail out...
                if(!handle) { return; };

                // Create the tooltip if needs be...
                if(!mx('#tooltip'))
                {
                    var tt = dom_create_child(l_me_parent, "div", "tooltip");
                    var TTinner1 = dom_create_child(tt, "div", "tooltipInner1");
                    var TTinner2 = dom_create_child(TTinner1, "div", "tooltipInner2");

                    // Cache a reference to the tooltip and tooltip inner
                    tooltip      = tt;
                    tooltipInner = TTinner2;
                };

                fdSliderController.addEvent(handle, "focus", l_me.show);
                fdSliderController.addEvent(handle, "mouseover", l_me.show);
                fdSliderController.addEvent(handle, "blur",  l_me.hide);
                fdSliderController.addEvent(handle, "mouseout",  function(){
                    var elem = mx("#fd-slider-" + this.id.replace(/fd-slider-handle-|fd-slider-/, ""));
                    if(elem.className.search("focused") != -1) { return; };
                    hide_timer = setTimeout(l_me.hide, 500);
                });

                // Internet Explorer fills the input's value attribute _after_ the
                // onload event fires so we need to set a timeout of 200ms in order
                // to be able to read this "delayed" value and correctly reset
                // the toolTip position.
                tooltip.style.display = "block";
                tooltip.style.visibility = "hidden";
                /*@cc_on
                /*@if(@_win32)
                setTimeout(function() { l_me.update(cbObj); tooltip.style.display = "none"; tooltip.style.visibility = "hidden"; }, 800);
                @else @*/
                l_me.update(cbObj);
                tooltip.style.display = "none";
                tooltip.style.visibility = "hidden";
                /*@end
                  @*/

            };
            l_me.init_ex = function(cbObj)
            {
                var inner = mx(".fd-slider-inner", mx("#fd-slider-" + cbObj.elem.id))[0],
                    bar = mx(".fd-slider-bar", mx("#fd-slider-" + cbObj.elem.id))[0],
                    cover = mx(".fd-slider-cover", mx("#fd-slider-" + cbObj.elem.id))[0],
                    block = mx(".playback_slider_block", mx("#fd-slider-" + cbObj.elem.id))[0];

                // If something has gone wrong then bail out...
                if(!inner) { return; };

                // Create the tooltip if needs be...
                if(!mx('#tooltip_ex')) {
                    var tt = dom_create_child(l_me_parent, "div", "tooltip_ex");
                    var TTinner1 = dom_create_child(tt, "div", "tooltipInner1");
                    var TTinner2 = dom_create_child(TTinner1, "div", "tooltipInner2");

                    // Cache a reference to the tooltip and tooltip inner
                    tooltip_ex      = tt;
                    tooltipInner_ex = TTinner2;
                };

                fdSliderController.addEvent(inner, "mouseover", l_me.show_ex);
                fdSliderController.addEvent(inner, "mouseout",  function()  {hide_timer = setTimeout(l_me.hide_ex, 100);});

                // Internet Explorer fills the input's value attribute _after_ the
                // onload event fires so we need to set a timeout of 200ms in order
                // to be able to read this "delayed" value and correctly reset
                // the toolTip position.
                tooltip_ex.style.display = "block";
                tooltip_ex.style.visibility = "hidden";
                /*@cc_on
                /*@if(@_win32)
                setTimeout(function() { l_me.update(cbObj); tooltip.style.display = "none"; tooltip.style.visibility = "hidden"; }, 800);
                @else @*/
                tooltip_ex.style.display = "none";
                tooltip_ex.style.visibility = "hidden";
                /*@end
                  @*/
            };
            // A function that positions the tooltip and updates it's value
            // This is also used as the callback function for the slider
            l_me.update = function(cbObj)
            {
                clearTimeout(hide_timer);

                var curleft = 0,
                    curtop  = 0,
                    obj     = mx("#fd-slider-handle-" + cbObj.elem.id),
                    osw     = obj?obj.offsetWidth:0;

                // Try catch for IE's benefit
                try {
                    while (obj.offsetParent) {
                        curleft += obj.offsetLeft;
                        curtop  += obj.offsetTop;
                        obj      = obj.offsetParent;
                    };
                } catch(err) { };

                tooltip.style.left = Math.round((curleft - ((tooltip.offsetWidth - osw) / 2))) + "px";
                tooltip.style.top = (curtop - 30)  + "px";

                while(tooltipInner.firstChild) { tooltipInner[s_removeChild](tooltipInner.firstChild); };

                var txt = cbObj.elem.tagName.toLowerCase() == "select" ? cbObj.elem.options[cbObj.elem.selectedIndex].text : cbObj.elem.value;
                tooltipInner.appendChild(document.createTextNode(txt));
            };
            l_me.update_ex = function(cbObj)
            {
                clearTimeout(hide_timer);

                var curleft = cbObj.mou_x, curtop = 0,
                    obj     = mx(".fd-slider-handle", cbObj.elem)[0],
                    osw     = obj.offsetWidth,
                    inner   = mx(".fd-slider-inner", cbObj.elem)[0],
                    p       = mx(".fd-slider-bar", cbObj.elem)[0],
                    oswleft = 0;

                while (p.offsetParent) {
                    oswleft += p.offsetLeft;
                    curtop  += p.offsetTop;
                    p        = p.offsetParent;
                }

                tooltip_ex.style.left = Math.round((curleft - (tooltip_ex.offsetWidth / 2))) + "px";
                tooltip_ex.style.top = (curtop - 30)  + "px";

                while(tooltipInner_ex.firstChild) { tooltipInner_ex[s_removeChild](tooltipInner_ex.firstChild); };

                var index = Math.round((curleft - oswleft) * 1000 / inner.clientWidth);
                if(index < 0 || index > 999)
                {
                    tooltip_ex.style.display = "none";
                    tooltip_ex.style.visibility = "hidden";
                    return;
                }
                var txt = mx("#playback_slider").options[index].text;
                tooltipInner_ex.appendChild(document.createTextNode(txt));
            };
            l_me.show = function(e)
            {
                clearTimeout(hide_timer);
                e = e || window.event;
                if(e && e.type && (e.type != "focus" && e.type != "mouseover")) return;
                tooltip.style.display = "block";
                tooltip.style.visibility = "visible";
                l_me.update({"elem":mx("#" + this.id.replace(/fd-slider-handle-|fd-slider-/, ""))});
            };
            l_me.show_ex = function(e)
            {
                clearTimeout(hide_timer);
                e = e || window.event;
                if(e && e.type && (e.type != "focus" && e.type != "mouseover" && e.type != "mousemove")) return;
                tooltip_ex.style.display = "block";
                tooltip_ex.style.visibility = "visible";
                var mou_x = e.pageX || e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                var mou_y = e.pageY || e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                var bar = mx(".fd-slider-bar", mx("#fd-slider-playback_slider"))[0];
                var cover = mx(".fd-slider-cover", mx("#fd-slider-playback_slider"))[0];
                var block = mx(".playback_slider_block", mx("#fd-slider-playback_slider"))[0];
                l_me.update_ex({"elem":mx("#fd-slider-playback_slider"), mou_x:mou_x, mou_y:mou_y});
                if(!this.onmousemove)
                {
                    this.onmousemove = l_me.show_ex;
                    bar.onmousemove = l_me.show_ex;
                    cover.onmousemove = l_me.show_ex;
                    if(block)
                        block.onmousemove = l_me.show_ex;
                }
            };
            l_me.hide = function(e)
            {
                e = e || window.event;
                if(e && e.type && (e.type != "blur" && e.type != "mouseout")) return;
                tooltip.style.display = "none";
                tooltip.style.visibility = "hidden";
            };
            l_me.hide_ex = function(e)
            {
                e = e || window.event;
                if(e && e.type && (e.type != "blur" && e.type != "mouseout" && e.type != "mousemove")) return;
                tooltip_ex.style.display = "none";
                tooltip_ex.style.visibility = "hidden";
                var inner = mx(".fd-slider-inner", mx("#fd-slider-playback_slider"))[0];
                var bar = mx(".fd-slider-bar", mx("#fd-slider-playback_slider"))[0];
                var cover = mx(".fd-slider-cover", mx("#fd-slider-playback_slider"))[0];
                var block = mx(".playback_slider_block", mx("#fd-slider-playback_slider"))[0];
                inner.onmousemove = "";
                bar.onmousemove = "";
                cover.onmousemove = "";
                if(block)
                    block.onmousemove = "";
            };
        }
        //--------------------------------------------------------------

        function get_client_size()
        {
            var temp_w, temp_h, temp_p;
            l_client_h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            l_client_w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            if(l_client_w < g_client_min_all_w)
            {
                l_client_w = g_client_min_all_w;
            }
            if(l_client_h < g_client_min_all_h)
            {
                l_client_h = g_client_min_all_h;
            }
            if(l_client_w < g_client_division_w)
            {
                g_panel_box_all_w = Math.floor((l_client_w - g_client_min_w - 20) / 2);
                g_panel_box_offset = -(g_panel_box_max_w - g_panel_box_all_w);
            }
            else
            {
                g_panel_box_all_w = g_panel_box_max_w;
                g_panel_box_offset = 3;
            }
            temp_w = l_client_w - g_panel_box_all_w * 2 - 20;                                             //2 * 10 (left and right border);
            temp_h = l_client_h - g_menu_box_h - g_control_box_h - g_status_bar_h - 12;           //12(margin-top)
            temp_p = temp_w / temp_h;
            if(temp_p < 16/9)
            {
                temp_h = temp_w * 9 / 16;
            }
            else
            {
                temp_w = temp_h * 16 / 9;
            }
            g_main_window_w = Math.floor(temp_w);
            g_main_window_h = g_panel_box_h = Math.floor(temp_h);
            g_panel_box_all_h = g_main_window_h + 12;                                               //12(margin-top)
            g_device_list_inner_h = g_panel_box_inner_h = g_panel_box_h - 18;
            g_cntr_content_w = g_main_window_w + g_panel_box_all_w * 2 + 20;                    //2 * 10 (left and right border);
            g_cntr_content_h = g_panel_box_all_h + g_control_box_h + g_status_bar_h;
        }
        //初始化一些全局函数
        function add_event()
        {
            if(null == g_system_prompt_box)
            {
                g_system_prompt_box = function(str, offsetX, offsetY) {
                    var prompt_div = mx("#system_prompt_div"),
                        div_left, div_top;

                    if(!prompt_div)
                    {
                        prompt_div = dom_create_child(g_page, "div", "system_prompt_div");
                        div_left = g_web.offsetWidth, div_top = g_web.offsetHeight;
                        if(offsetX)
                            div_left += offsetX;
                        if(offsetY)
                            div_top += offsetY;
                        prompt_div.style[s_cssText] = "position:absolute;left:" + (div_left / 2) + "px; top:" + (div_top / 2) + "px;font-size:18px;font-weight:900;color:#EEE;background:transparent";
                        prompt_div[s_innerHTML] = str + "!";
                        jQuery(prompt_div).hide().fadeIn(500).delay(1000).fadeOut(400, function(){
                            prompt_div[s_innerHTML] = "";
                            prompt_div.parentNode[s_removeChild](prompt_div);
                            prompt_div = null;
                        });
                    }
                };
            }
            if(null == g_system_wait_div)
            {
                g_system_wait_div = function(str) {
                    var wait_div = mx("#system_wait_div"),
                        wait_display_div;

                    if(!wait_div)
                    {
                        document.documentElement.onkeydown = function(e) {var evt = e || window.event; if(evt.keyCode != 116) return false;};
                        wait_div = document.createElement("div");
                        wait_div.setAttribute("id", "system_wait_div");
                        g_page.parentNode.insertBefore(wait_div, g_page);
                        wait_display_div = document.createElement("div")
                            wait_display_div.setAttribute("id", "system_wait_display_div");
                        g_page.parentNode.insertBefore(wait_display_div, wait_div);
                        wait_div[s_style][s_cssText] = "position:absolute;width:" + l_client_w + "px;height:" + l_client_h + "px;background-color:#fff;opacity:0.1;"
                            + "filter:alpha(opacity=10);z-index:100";
                        wait_display_div[s_style][s_cssText] = "position:absolute;top:" + (l_client_h / 3) + "px;left:" + (l_client_w / 2) + "px";
                        wait_display_div[s_innerHTML] =
                            "<div id='cl_wait_div' style='text-align:center'></div>"
                            +"<div id='cl_str_div' style='padding-left:10px;padding-top:10px;font-weight:900;font-size:18px;color:#EEE'>" + str + "</div>";

                        var cl = new CanvasLoader("cl_wait_div", {id: "canvasLoader", safeVML: true});
                        cl.setColor('#8bb238');
                        cl.setDiameter(36);
                        cl.setDensity(43);
                        cl.setRange(1.1);
                        cl.show();
                    }
                };
            }
            if(null == g_system_stop_wait)
            {
                g_system_stop_wait = function(str) {
                    var wait_div = mx("#system_wait_div"),
                        wait_display_div = mx("#system_wait_display_div");

                    document.documentElement.onkeydown = null;
                    if(wait_div)
                    {
                        wait_div[s_innerHTML] = "";
                        wait_div.parentNode[s_removeChild](wait_div);
                        wait_div = null;
                    }
                    if(wait_display_div)
                    {
                        wait_display_div[s_innerHTML] = "";
                        wait_display_div.parentNode[s_removeChild](wait_display_div);
                        wait_display_div = null;
                    }
                }
            }
        }
        function remove_event()
        {
            g_system_prompt_box = null;
            g_system_wait_div = null;
            g_system_stop_wait = null;
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        get_client_size();
                        //g_web[s_style][s_height] = l_me_parent.style.height = l_dom_login_page.style.height = l_dom_main_page.style.height = l_client_h + "px";
                       // g_web[s_style][s_width] = l_dom_login_page.style.width = l_dom_main_page.style.width = l_client_w + "px";

                        l_login_page_obj.ctrl(obj);
                        l_main_page_obj.ctrl(obj);
                        break;
                    }
                case "logout"://退出登录
                	{
                	    g_is_auto_login = 0;
                	    //创建登录界面
                        ms.ctrl({type:"create_login_interface", data:{type:obj.data.type,sn:obj.data.sn}});
                        //销毁main_page
                        setTimeout(function(){
                            g_j_page.animate({marginLeft:"0"}, 600, function(){
                                l_main_page_obj.ctrl({type:"destroy"});
                            });
                        },300);
                        //销毁mmq
                        mcloud_agent.dev_msg_listener_del(null,function(msg ,ref){});
                	    break;
                	}
                case "create_login_interface":
                    {
                        l_login_page_obj.ctrl({type:"create", data:obj.data});
                        break;
                    }
                case "destroy":
                    {
                        l_login_page_obj.ctrl(obj);
                        l_main_page_obj.ctrl(obj);
                        l_me_parent[s_removeChild](l_dom_login_page);
                        l_me_parent[s_removeChild](l_dom_main_page);
                        l_dom_login_page = null;
                        l_dom_main_page = null;
                        remove_event();
                        break;
                    }
                 case "register":
                    {
                       obj.type = "account_create";
                       obj.data.pass = mcloud_agent.pwd_encrypt(obj.data.password);
                       l_me.send_msg(obj);
                 	  }
                 default:
                    log("error:ctrl's obj.type is not  exist in class_mining_software.");
            }
        }
        //统一的调用sdk函数
        l_me.send_msg=function(type,data,ref,callback) {
            //不是mmq的话创建 旋转进度条
        	if(type != "dev_msg_listener_add" && type != "dev_msg_listener_del")
        	    system_signal_trans.create();
            var on_ack=function(msg,ref)
            {
                 //不是mmq的话删除 旋转进度条
                 if( type != "dev_msg_listener_add" && type != "dev_msg_listener_del" )
        	          system_signal_trans.destroy();

        	     switch( msg.result )
        	     {
        	         case "mcs_connection_is_interrupted":
        	            system_pop_confirm_box({alert:true, str:mcs_connection_is_interrupted,callback_func:function(obj){window.location.reload(true);}});
                 	    return;
                 	 case "DeviceOffline":
                 	 case "InvalidAuth":
                 	    //l_device_list_box_obj.ctrl({type:"refresh"});
                 	    break;
                 	 case "permission.denied":
                 	    if( type != "sd_set" && g_now_page != "login_page" )
                 	        g_system_prompt_box(mcs_permission_denied);
                 	    break;
                 	 //case "accounts.user.offline":
                 	 //   g_system_prompt_box(mcs_device_offline);
                 	 //   break;
                 	 case "SdIsNotReady":
                 	    g_system_prompt_box(mcs_sdcard_not_ready);
                 	    break;
                 	 case "":
                 	    break;
        	     }

                 if(callback)
                 {
                     callback(msg,ref);
                 }
            }
            mcloud_agent[type](data,ref,on_ack);
        }
        function on_event(obj) {
            switch(obj.type)
            {
                case "destroy_login_interface":
                    {
                        l_login_page_obj.ctrl({type:"destroy"});
                        break;
                    }
                case "logined":
                case "ccm_get_devices_info":
                    {
                            l_main_page_obj.ctrl({type:"create", data:{type:l_server_type,sn:l_server_sn}});
                            
                        
                        break;
                    }
                case "ccm_get_sub_dvices":
                    {
                       break;
                    }
                case "destroy_main_interface":
                    {
                        l_main_page_obj.ctrl({type:"destroy"});
                        break;
                    }
                case "mmq_destroy":
                    {
                        break;
                    }
                case "main_page_create":
                    {
                        l_main_page_obj.ctrl({type:"create", data:{type:obj.data.type,sn:obj.data.sn}});
                        break;
                    }
                case "login_page_create":
                    {
                        l_login_page_obj.ctrl({type:"create", data:{type:obj.data.type,sn:obj.data.sn}});
                        break;
                    }
                case "Refresh_devs"://设备列表刷新
                    {
                       ms.send_msg("devs_refresh",{},null,refresh_devices_ack);
                       break;
                    }
                case "refresh_notif_latest":
                case "refresh_device_list":
                case "refresh_notif":
                case "update_imaging":
                case "refresh_alarm":
                    {
                        l_main_page_obj.ctrl(obj);
                        break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_mining_software.");
            }
        }
        //判断是否IE浏览器
        var isIE = !!window.ActiveXObject;
        var isIE6 = isIE && !window.XMLHttpRequest;
        var isIE8 = isIE && !!document.documentMode;
        var isIE7 = isIE && !isIE6 && !isIE8;
        if(isIE6)
            g_browser_IE6_version = 1;
        if(isIE7)
            g_browser_IE7_version = 1;
        if(isIE6 || isIE7)
            g_browser_IE67_version = 1;
        if(isIE7 || isIE8 || isIE6)
            g_old_browser_version = 1;

        var userAgent = navigator.userAgent,
            is_ios45 = ((userAgent.match(/iPhone/i) || userAgent.match(/iPod/i) || userAgent.match(/iPad/i)))
                        && Boolean(userAgent.match(/OS [4-5]_\d[_\d]* like Mac OS X/i));
        if(is_ios45)
            g_input_read_only = "readonly";

        if( !g_old_browser_version && !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
            g_avc = new Avc();
            g_avc.configure(g_avc_conf);
         }
        add_event();
        get_client_size();
        //l_me_parent[s_style][s_height] = l_client_h + "px";
        //g_web[s_style][s_cssText] = "width:" + l_client_w + "px;height:" + l_client_h + "px;";
        //l_dom_login_page[s_style][s_cssText] = "width:" + l_client_w + "px;height:" + l_client_h + "px;";
        if(g_domain_oems_vimtag)
        {  //如果是vimtag就修改main_page的背景颜色
           //l_dom_main_page[s_style][s_cssText] = "width:" + l_client_w + "px;height:" + l_client_h + "px;background-color:#efeff4;"; 
        }
        l_login_page_obj = new class_login_page({parent:l_dom_login_page, on_event:on_event});
        l_main_page_obj = new class_main_page({parent:l_dom_main_page, on_event:on_event});
        //更新设备列表
        function refresh_devices_ack(msg)
        {
            if(msg.result != "")return;
            var old_sn,device_change;
            //如果 没有以选择设备 或者 已选设备已经被删除 或者 已选设备已下线 则设置已选设备
            if(g_select_device_ipc == "" || (null == mcloud_agent.devs.get(g_select_device_ipc))|| mcloud_agent.devs.get(g_select_device_ipc).stat != "Online"){
            	for(var length = mcloud_agent.devs.list.length,i=0;i< length;i++){
               	if(mcloud_agent.devs.list[i].stat == "Online"){
               		old_sn = g_select_device_ipc;
               		device_change = 1;
                  g_select_device_ipc = mcloud_agent.devs.list[i].sn;
                  break;
               	}
            	}
            }
            l_main_page_obj.ctrl({type:"refresh_device_list",data:{old_sn:old_sn,change:device_change}});
        }
        function ccm_get_device_ack(msg, ref)
        {
           if(msg.result != "")return;
           //访问的是服务器
           if(msg.type == "MS")
           {
                g_service_options = msg.type;
                g_network_environ = "public";
           }
           else if(msg.type == "IPC" || msg.type == "BOX")//访问的是IPC或box设备
           {
                g_service_options = msg.type;
                g_network_environ = "private";
           }
           l_server_type = msg.type;
           l_server_sn   = msg.sn;
           l_login_page_obj.ctrl({type:"create", data:{type:l_server_type,sn:l_server_sn}});
        }
        //用来判断是直连（内网）还是 普通连接（外网）
        mcloud_agent.svr_dev_get(null,ccm_get_device_ack);
    }
    window.class_mining_software = class_mining_software;

    function class_login_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_menu_box, l_menu_box_obj,
            l_dom_login_box, l_login_box_obj,
            l_dom_top_box, l_top_box_obj,
            l_dom_register_page, l_register_page_obj;

        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        if(l_dom_menu_box)
                        {
                            l_dom_menu_box[s_style][s_width] = l_me_parent[s_offsetWidth] + "px";
                            l_menu_box_obj.ctrl(obj);
                        }
                        if(l_dom_login_box)
                        {
                            // l_dom_login_box[s_style][s_width] = l_me_parent[s_offsetWidth] + "px";
                            // l_dom_login_box[s_style][s_height] = (l_me_parent[s_offsetHeight] - g_menu_box_h) + "px";
                            // if(!g_domain_oems_vimtag)  l_dom_register_page[s_style][s_right] = ((l_me_parent.offsetWidth - g_cntr_content_w) / 2 + 25) + "px";
                            // l_login_box_obj.ctrl(obj);
                        }
                        break;
                    }
                case "create":
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	  l_dom_login_box = dom_create_child(l_me_parent, "div", "login_box");
                    	  	 // l_dom_login_box[s_style][s_cssText] = "width:" + l_me_parent[s_offsetWidth] + "px;height:" + l_me_parent[s_offsetHeight] + "px;";
                    	  	  l_login_box_obj = new class_login_box({parent:l_dom_login_box, type:obj.data.type, sn:obj.data.sn,on_event: on_event});
                    	  }
                        break;
                    }
                case "destroy":
                    {
                        if(l_dom_menu_box && l_menu_box_obj)
                            l_menu_box_obj.ctrl(obj);
                        if(l_dom_login_box && l_login_box_obj )
                            l_login_box_obj.ctrl(obj);
                        l_dom_menu_box = null;
                        l_dom_login_box = null;
                        l_dom_register_page = null;
                        l_me_parent[s_innerHTML] = "";
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_login_page.");
            }
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "logined":
                   {
                      l_parent_callback(obj);
                      break;
                   }
                case "login":
                   {
                   	  l_login_box_obj.ctrl(obj);
                   	  break;
                   }
                default:
                    log("error:on_event's obj.type is not exist in class_login_page.");
            }
        }
    }

    function class_login_box(obj)
    {
        l_dom_register_account='';
        var l_me = this,
            l_me_parent = obj.parent,
            l_dom_signin_inner,
            l_dom_sign_in,
            l_parent_callback = obj.on_event,
            l_dom_username,
            l_dom_show_password,
            l_dom_net_setting,
            l_dom_password_eye,
            l_dom_sign_in_words,
            l_dom_show_password_again,
            l_dom_password_again,
            l_dom_register_username,
            l_dom_register_show_password_again,
            l_dom_register_password_again,
            l_dom_register_password,
            
            l_dom_register_btn,
            l_dom_register_account_btn,
            l_dom_download_client_ico,
            l_dom_download_client_warn,
            l_dom_register_password_eye,
            l_dom_register_password_eye_again,
            l_dom_password, l_remember_data, l_remember_data_obj,l_dom_forget_pass;
        if(g_domain_oems_vimtag)
        {
        	l_me_parent[s_innerHTML] ="<div id='main'><div id='main_content'><div id='banner' align='center'><div id='banner_content'></div></div><div id='shop_main'><div id='shop'></div></div></div></div>"+"<div style='display:none'><div id='signin_name'></div><div id='register_signin_name'></div><div id='signin_show_pw'></div><div id='signin_pw'></div><div id='register_signin_show_pw_again'></div><div id='register_signin_pw_again'></div><div id='register_signin_show_pw'></div><div id='register_signin_pw'></div><div id='register_account'></div><div id='register_btn'></div><div id='password_eye'></div><div id='register_password_eye'></div><div id='register_password_eye_again'></div><div id='register_account'></div><div id='sign_account'></div><div id='register_btn'></div><div id='vimtag_select_language'></div><div id='sign_in'></div><div id=''></div>"+"</div>";
                home_page();
                jQuery("#ipc_list").click(function(){
                  var do_user = localStorage.getItem("remember_msg_info");
                  localStorage.setItem("ipc_list_action","1");
                  if(do_user){
                    is_ipc_list=1;
                    var ipc_list_click = this;
                    // setTimeout(function(){
                        // if(mx("#v_login").style.display=="none"){
                            l_main_page_obj.ctrl({type:"create", data:{type:l_server_type,sn:l_server_sn}});
                        // }else{
                            // ipc_list_click.click();
                        // }
                    // },300)
                  }else{
                    jQuery("#menu_text_login").click();
                  }     
                })
          l_dom_vimtag_select_language = mx("#vimtag_select_language");
        	l_dom_signin_inner = mx("#vimtag_signin_inner");
          l_dom_username = mx("#signin_name");
          l_dom_register_username = mx("#register_signin_name");
          l_dom_show_password = mx("#signin_show_pw");
          l_dom_password = mx("#signin_pw");
          l_dom_register_show_password_again = mx("#register_signin_show_pw_again");
          l_dom_register_password_again = mx("#register_signin_pw_again");
          l_dom_register_show_password = mx("#register_signin_show_pw");
          l_dom_register_password = mx("#register_signin_pw");
          l_dom_register_account = mx("#register_account");
          l_dom_sign_account = mx("#sign_account");
          l_dom_register_btn = mx("#register_btn");
          l_dom_sign_in = mx("#sign_in");
          l_dom_password_eye = mx("#password_eye");
          l_dom_register_password_eye = mx("#register_password_eye");
          l_dom_register_password_eye_again = mx("#register_password_eye_again");

          jQuery("#register_username").hide();
          jQuery("#register_account_pwd").hide();
          jQuery("#register_account_pwd_again").hide();
          jQuery("#register_btn").hide();
          jQuery("#sign_account").hide();
        }
        //oem客户修改登录背景
        if(g_domain_oems_vimtag)
        {
        	if(g_hostname == "test.vimtag.com")
        	{
        		  mx("#login_box").style.backgroundImage = "url(./oem/testvimtag/imgs/vimtag_bg.png)";
        	}
        	else
        	{
        		 // mx("#login_box").style.backgroundColor = "#5AC2D0";
        	    //mx("#login_box").style.backgroundImage = "url(./oem/vimtag_v2n/imgs/vimtag_bg.png)";
          }
        }
        
        function add_event()
        {   //mipc中间logo
        	  if(!g_domain_oems_vimtag) img_fade_effect(mx("#signin_logo"), sub_img_logo0, sub_img_logo1);
            //登录按键事件
            l_dom_sign_in.onclick = function() { 
                // is_ipc_list=1; 
                if(is_ipc_list!=2) {is_ipc_list=1;}
                else{is_ipc_list=0}
                jQuery("#login_loading").append("#login_box");                
                if(mx("#system_tooltip"))
                {
                  mx("#system_tooltip")[s_innerHTML]="";
                }
                if(l_dom_password.value == "amdin")
                {
                     l_dom_password.value = "admin";
                }
                        username_value = l_dom_username.value.trim(),
                        password_value = l_dom_password.value.trim();
                        if(!username_value || username_value == mcs_username)
                        {
                              g_domain_oems_vimtag?msg_tips({msg:mcs_the_user_name_is_empty, type:"error", timeout:3000}):system_tooltip({parent:username, color:"red", position:"right", disappear_way:"time", str:mcs_the_user_name_is_empty + "."});
                          return;
                        }
                        if(!password_value || password_value == mcs_password)
                        {
                        g_domain_oems_vimtag?msg_tips({msg:mcs_the_password_is_empty, type:"error", timeout:3000}):system_tooltip({parent:this, color:"red", position:"right", disappear_way:"time", str:mcs_the_password_is_empty + "."});
                        return;
                        }
                        //判断是ipc登录还是用户登录
                        var reg = /^\d/;
                if(reg.exec(username_value))
                  g_login_status = "ipc";
                else
                  g_login_status = "register_user";
                //如果是vimtag,默认记住密码
                if(g_domain_oems_vimtag)
                {
                    // mlocal_storage.set("remember_msg_info",mcodec.obj_2_str({user:username_value,password:password_value}));
                }
                else
                {
                   if(mx("remember_me")[0].checked || g_domain_oems_vimtag)
                            mlocal_storage.set("remember_msg_info",mcodec.obj_2_str({user:username_value,password:password_value}));
                           else
                              mlocal_storage.set("remember_msg_info","");

                      }

                if(!g_login_waiting_flag)
                {
                    g_login_waiting_flag = 1;
                    ms.send_msg("sign_in",{srv:g_server_device,user:username_value, password:password_value},{user:username_value, password:password_value},login_ack);
                }               
            };
            l_dom_username.onfocus = function() {
                if(this.value == mcs_username)
                {
                    this.value = "";
                }
                this.style.color = "#404040";
                if(!g_domain_oems_vimtag) jQuery(this).addClass("standard_inputs_focus");
            };
            l_dom_username.onblur = function() {
            	  if(!g_domain_oems_vimtag) jQuery(this).removeClass("standard_inputs_focus");
                if(this.value == "")
                {
                    this.style.color = "#bdbdbd";
                    this.value = mcs_username;
                }
                else
                {
                    this.style.color = "#404040";
                }
            };
            l_dom_show_password.onfocus = function() {
                this.style.display = "none";
                mx("#signin_pw").style.display = "inline";
                mx("#signin_pw").focus();
            };
            l_dom_password.onfocus = function(){
            	  if(!g_domain_oems_vimtag) jQuery(this).addClass("standard_inputs_focus");
                this.select();
            };
            l_dom_password.onblur = function() {
            	  if(!g_domain_oems_vimtag) jQuery(this).removeClass("standard_inputs_focus");
                if(this.value == "")
                {
                    this.style.display = "none";
                    mx("#signin_show_pw").style.display = "inline";
                }
            };
            l_dom_username.onkeypress = function(e) {
                var evt = e || window.event;
                if((evt.which || evt.keyCode) == 13)
                {
                    mx("#signin_pw").focus();
                }
            };
            l_dom_password.onkeypress = function(e) {
                var evt = e || window.event;
                if((evt.which | evt.keyCode) == 13)
                {
                    jQuery("#sign_in").click();
                    evt.returnValue = false;
                }
            };
            if(g_domain_oems_mipcm)
            {
								l_dom_forget_pass.onclick = function(){
										var dom_forget_pass = 
										"<div id='forget_pass_inner'>"
		                +       "<div style='margin-top:25%;'>"
		                +         "<div style='margin-bottom:20px;'>"
		                +           "<input class='standard_inputs_normal' id='recovery_pass_email_addr' type='text' style='width:230px;float:none;' value='" + mcs_input_email_addr + "'>"
		                +           "<input class='standard_inputs_normal' id='recovery_pass_email' type='text' style='display:none;color:#404040;width:230px;float:none;'>"
		                +         "</div>"
		                +         "<div style='width:220px;margin:auto;'>"
		                +           "<input class='standard_buttons_green' id='recovery_pass_ok_btn' type='button' style='float:left;' value='"+ mcs_ok +"'>"
		                +           "<input class='standard_buttons_red' id='recovery_pass_cancel_btn' type='button' style='float:right;' value='"+mcs_cancel+"'>"                
		                +         "</div>"
		                +       "</div>"
										+"</div>";								
										    
										jQuery("#login_box").append(dom_forget_pass);
										
										mx("#forget_pass_inner").style.backgroundImage = "url('./imgs/flax_lines.jpg')";
										var l_dom_forget_pass_inner = mx("#forget_pass_inner"),
										    l_dom_recovery_pass_email_addr = mx("#recovery_pass_email_addr"),
										    l_dom_recovery_pass_email = mx("#recovery_pass_email"),
										    l_dom_recovery_pass_cancel_btn = mx("#recovery_pass_cancel_btn"),
										    l_dom_recovery_pass_ok_btn = mx("#recovery_pass_ok_btn");
										
										l_dom_recovery_pass_email_addr.onfocus = function() {
		                		this.style.display = "none";
		                    l_dom_recovery_pass_email.style.display = "inline";
		                    l_dom_recovery_pass_email.focus();
		                };
		                l_dom_recovery_pass_email.onfocus = function(){
		                		this.select();
		                };
		                l_dom_recovery_pass_email.onblur = function(){
		                		if(this.value == "")
		                    {
		                        this.style.display = "none";
		                        l_dom_recovery_pass_email_addr.style.display = "inline";
		                    }
		                };
		                l_dom_recovery_pass_ok_btn.onclick = function(){
		                		var reg;
		                		if(!l_dom_recovery_pass_email.value || l_dom_recovery_pass_email.value == mcs_input_email_addr)
		                		{
		                				system_tooltip({parent:l_dom_recovery_pass_email, color:"red", position:"left", disappear_way:"time", str:mcs_the_password_is_empty + "."});
		                        return;
		                		}
		                		else
		                		{
		                				reg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/;
		                				if(!reg.exec(l_dom_recovery_pass_email.value))
		                				{
		                						system_tooltip({parent:l_dom_recovery_pass_email, color:"red", position:"left", disappear_way:"time", str:mcs_invalid_email_addr + "."});
		                        		return;
		                				}
		                		}
		                		ms.send_msg("recovery_binding_email",{email:l_dom_recovery_pass_email.value, user:l_dom_username.value, lang:g_now_lang}, null, recovery_binding_email_ack);
		                };
		                l_dom_recovery_pass_cancel_btn.onclick = function(){
											  jQuery("#forget_pass_inner").remove();
		                };
								};
					  }
            //当为vimtag时的事件
            if(g_domain_oems_vimtag)
            {
            	  l_dom_register_username.onfocus = function() {
                   if(this.value == mcs_input_username)
                   {
                       this.value = "";
                   }
                   this.style.color = "#404040";
                };
                l_dom_register_username.onblur = function() {
                   if(this.value == "")
                   {
                       this.style.color = "#bdbdbd";
                       this.value = mcs_input_username;
                   }
                   else
                   {
                       this.style.color = "#404040";
                   }
                };
                l_dom_register_show_password_again.onfocus = function() {
                   this.style.display = "none";
                   mx("#register_signin_pw_again").style.display = "inline";
                   mx("#register_signin_pw_again").focus();
                };
                l_dom_register_show_password.onfocus = function() {
                   this.style.display = "none";
                   mx("#register_signin_pw").style.display = "inline";
                   mx("#register_signin_pw").focus();
                };
                l_dom_register_password_again.onfocus = function() {
                   this.select();
                };
                l_dom_register_password.onfocus = function() {
                   this.select();
                };
                l_dom_register_password_again.onblur = function() {
                   if(this.value == "")
                   {
                      this.style.display = "none";
                      mx("#register_signin_show_pw_again").style.display = "inline";
                   }
                };
                l_dom_register_password.onblur = function() {
                   if(this.value == "")
                   {
                      this.style.display = "none";
                      mx("#register_signin_show_pw").style.display = "inline";
                   }
                };
                l_dom_password_eye.onclick = function(){
                   if(l_dom_password_eye.className == "password_eye")
                   {
                	     l_dom_password_eye.className = "password_eye_gray";
                	     mx("#signin_pw").type = "text";
                   }
                   else
                   {
                	     l_dom_password_eye.className = "password_eye";
                	     mx("#signin_pw").type = "password";
                   }
                };
                l_dom_register_password_eye.onclick = function(){
                   if(l_dom_register_password_eye.className == "password_eye")
                   {
                	     l_dom_register_password_eye.className = "password_eye_gray";
                	     mx("#register_signin_pw").type = "text";
                   }
                   else
                   {
                	     l_dom_register_password_eye.className = "password_eye";
                	     mx("#register_signin_pw").type = "password";
                   }
                };
                l_dom_register_password_eye_again.onclick = function(){
                   if(l_dom_register_password_eye_again.className == "password_eye")
                   {
                	     l_dom_register_password_eye_again.className = "password_eye_gray";
                	     mx("#register_signin_pw_again").type = "text";
                   }
                   else
                   {
                	     l_dom_register_password_eye_again.className = "password_eye";
                	     mx("#register_signin_pw_again").type = "password";
                   }
                };
                l_dom_register_account.onclick = function(){
            	     jQuery("#sigin_in_username").hide();
            	     jQuery("#sigin_in_password").hide();
            	     jQuery("#sign_in").hide();
            	     jQuery("#register_account").hide();
                   jQuery("#register_username").show();
                   jQuery("#register_account_pwd").show();
                   jQuery("#register_account_pwd_again").show();
                   jQuery("#register_btn").show();
                   jQuery("#sign_account").show();
                };
                l_dom_sign_account.onclick = function(){
                   jQuery("#sigin_in_username").show();
            	     jQuery("#sigin_in_password").show();
            	     jQuery("#sign_in").show();
            	     jQuery("#register_account").show();
                   jQuery("#register_username").hide();
                   jQuery("#register_account_pwd").hide();
                   jQuery("#register_account_pwd_again").hide();
                   jQuery("#register_btn").hide();
                   jQuery("#sign_account").hide();
                };
                l_dom_register_btn.onclick = function() {
                    var reg,
                    username_value = l_dom_register_username.value,
                    password_value = l_dom_register_password.value,
                    pw_confirm_value = l_dom_register_password_again.value;

                    if(!username_value || username_value == mcs_input_username)
                    {
                       msg_tips({msg:mcs_the_user_name_is_empty, type:"error", timeout:3000});
                       return;
                    }
                    else
                    {
                       reg = /^([a-zA-Z][a-zA-Z0-9]{5,19})$/;
                       if(!reg.exec(username_value))
                       {
                          msg_tips({msg:mcs_username_demand, type:"warning", timeout:5000});
                          return;
                       }
                    }
                    if(!password_value || password_value == mcs_input_password)
                    {
                       msg_tips({msg:mcs_the_password_is_empty, type:"error", timeout:3000});
                       return;
                    }
                    else
                    {
                       reg = /^\S{6,20}$/;
                       if(!reg.exec(password_value))
                       {
                          msg_tips({msg:mcs_password_demand, type:"warning", timeout:5000});
                          return;
                       }
                    }
                    if(!pw_confirm_value || pw_confirm_value == mcs_confirm_password)
                    {
                       msg_tips({msg:mcs_password_empty, type:"error", timeout:3000});
                       return;
                    }
                    if(pw_confirm_value != password_value)
                    {
                       msg_tips({msg:mcs_two_password_input_inconsistent, type:"error", timeout:3000});
                       return;
                    }
                    if(g_register_waiting_flag)
                    {
                       g_register_waiting_flag = 0;
                       ms.send_msg("sign_up",{srv:g_server_device, user:username_value, password:password_value},null,function(msg,ref)
                       {
                          if(msg && msg.result=="")
                          {
                       	     jQuery("#register_page").toggle();
                             system_pop_confirm_box({str:mcs_successful_whether_login,
                             callback_func:function(){
                               l_parent_callback({type:"login",data:{user:username_value, password:password_value}});
                             }
                          })
                          }else if(msg.result == "accounts.user.existed"){
                       	     msg_tips({msg:mcs_username_already_exists, type:"error", timeout:3000});
                          }else{
                       	     msg_tips({msg:"error:sign up return error in class_register_page.", type:"error", timeout:3000});
                          }
                          g_register_waiting_flag = 1;
                       });
                    }
                };
                
                l_dom_vimtag_select_language.onchange = function(e) {
                    if(this[this.selectedIndex].text == "中文")
                    {
                        mlocal_storage.set("language_choice_info", this[this.selectedIndex].value);
                        window.location.reload(true);
                    }
                    else if(this[this.selectedIndex].text == "English")
                    {
                        mlocal_storage.set("language_choice_info", this[this.selectedIndex].value);
                        window.location.reload(true);
                    }else
                    {
                        mlocal_storage.set("language_choice_info", this[this.selectedIndex].value);
                        window.location.reload(true);
                    }
                };
                
                var i, length,
                lang_choice = mlocal_storage.get("language_choice_info");

		            length = l_dom_vimtag_select_language.length;
		            if(lang_choice)
		            {
		                for(i = 0; i < length; ++i)
		                {
		                    if(l_dom_vimtag_select_language[i].value == lang_choice)
		                        l_dom_vimtag_select_language[i].selected = true;
		                }
		            }
		            else
		            {
		                if(g_now_lang == "en")
		                {
		                    for(i = 0; i < length; ++i)
		                    {
		                        if(l_dom_vimtag_select_language[i].value == "en")
		                            l_dom_vimtag_select_language[i].selected = true;
		                    }
		                }
		
		                else if(g_now_lang == "ch")
		                {
		                    for(i = 0; i < length; ++i)
		                    {
		                        if(l_dom_vimtag_select_language[i].value == "chinese")
		                            l_dom_vimtag_select_language[i].selected = true;
		                    }
		                }else
		                {
		
		                   for(i = 0; i < length; ++i)
		                    {
		                        if(l_dom_vimtag_select_language[i].value == g_now_lang)
		                            l_dom_vimtag_select_language[i].selected = true;
		                    }
		                }
		
		            }
            }
        }
        function recovery_binding_email_ack(msg,ref){
        		if(msg&&msg.result == "")
        	  {
        	 			system_pop_confirm_box({alert:true,str:mcs_password_reset_confirmation, callback_func:function(){}});
        	  }
        	  else if(msg.result == "accounts.bind.email.exist")
        	  {
        	  		system_tooltip({parent:l_dom_email_address, color:"red", position:"left", disappear_way:"time", str:mcs_accounts_bind_email_exist + "."});
                return;
        	  }
        	  else if(msg.result == "accounts.bind.email.busy")
        	  {
        	  		system_tooltip({parent:l_dom_email_address, color:"red", position:"left", disappear_way:"time", str:mcs_accounts_bind_email_busy + "."});
                return;
        	  }
        }
        //登录返回
        function login_ack(obj,ref)
        {   //有问题才返回，无result则登录成功
            if(obj.result == "")
            {
                if(g_login_status == "ipc" && (!g_domain_oems_vimtag))
                {
                     if(!l_dom_net_setting)
                     {
                        l_dom_net_setting=new net_setting_class({parent:mx("#login_page"), on_event:function(obj){return l_parent_callback(obj);}});
                     }
                     l_dom_net_setting.ctrl({type:"ipc_pass_set",data:{user:ref.user,pass:ref.password}});

                }
                else
                {
                    // is_ipc_list=1;
                    l_parent_callback({type:"logined"});
                }
            }
            else
            {
            	  g_login_waiting_flag = 0;
		            if(obj.result=="accounts.user.offline")//当ipc登录时，才会出现这种情况
		            {
		                (g_domain_oems_vimtag)?msg_tips({msg:mcs_offline, type:"warning", timeout:3000}):system_tooltip({parent:mx("#signin_name"), color:"red", position:"right", disappear_way:"time", str:mcs_offline});
		            }
		            else if(obj.result=="accounts.user.unknown")
		            {
		                (g_domain_oems_vimtag)?msg_tips({msg:mcs_username_does_not_exis, type:"warning", timeout:3000}):system_tooltip({parent:mx("#sign_in"), color:"red", position:"right", disappear_way:"time", str:mcs_username_does_not_exis});
		            }
		            else if(obj.result=="accounts.pass.invalid")
		            {
		                (g_domain_oems_vimtag)?msg_tips({msg:mcs_invalid_password, type:"warning", timeout:3000}):system_tooltip({parent:mx("#sign_in"), color:"red", position:"right", disappear_way:"time", str:mcs_invalid_password});
		            }
		            else
		            {
		            	  (g_domain_oems_vimtag)?msg_tips({msg:"error:sign in return error in class_login_box.", type:"warning", timeout:3000}):log("error:sign in return error in class_login_box.");
		            }
            }
        }
        function remove_event()
        {
            l_dom_sign_in.onclick = "";
            l_dom_username.onfocus = "";
            l_dom_username.onblur = "";
            l_dom_username.onkeypress = "";
            l_dom_show_password.onfocus = "";
            l_dom_password.onfocus = "";
            l_dom_password.onblur = "";
            l_dom_password.onkeypress = "";
            l_dom_password.onkeypress = "";
            if(g_domain_oems_vimtag)
            {
            	 l_dom_register_username.onfocus = "";
               l_dom_register_username.onblur = "";
               l_dom_register_username.onkeypress = "";
               l_dom_register_show_password.onfocus = "";
               l_dom_register_show_password_again.onfocus = "";
               l_dom_register_password.onfocus = "";
               l_dom_register_password.onblur = "";
               l_dom_register_password_again.onfocus = "";
               l_dom_register_password_again.onblur = "";
               l_dom_vimtag_select_language.onchange = "";
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_signin_inner.style.paddingTop = l_me_parent.offsetHeight / 4 + "px";
                        break;
                    }
                case "destroy":
                    {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                case "login":
                    {
                    	  l_dom_username.value = obj.data.user;
                    	  l_dom_password.value = obj.data.password;
                          is_ipc_list=2;
                    	  l_dom_sign_in.click(); 
                    	  break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_login_box.");
            }
        }
        add_event();
        if(obj.type == "IPC" || obj.type == "BOX")
        {
            l_dom_username.disabled = true;
            l_dom_username.value = obj.sn;
            l_dom_username.style.color = "#555";
        }
        l_remember_data = mlocal_storage.get("remember_msg_info");
        l_remember_data_obj = l_remember_data?eval('('+l_remember_data+')'):null;
        if(l_remember_data_obj && l_remember_data_obj.user && l_remember_data_obj.password)
        {
           l_dom_username.value = l_remember_data_obj.user;
           l_dom_password.value = l_remember_data_obj.password;
           l_dom_show_password.style.display = "none";
           l_dom_password.style.display = "inline";
           // l_dom_password.focus();
           jQuery("#remember_me").click();
           // if(g_is_auto_login)
            if(localStorage.getItem("ipc_list_action")!=1)
                is_ipc_list=2;
              l_dom_sign_in.click();
        }
        jQuery("#remember_div").jNice();
    }

    function class_register_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback=obj.on_event,
            l_dom_username, l_dom_show_password, l_dom_password,
            l_dom_show_pw_confirm,
            l_dom_pw_confirm,
            l_dom_register_button;

        l_me_parent[s_innerHTML] =
            "<div id='register_page_inner'>"
            +   "<h2>" + mcs_join_us_now + ":</h2>"
            +   "<div class='placeholding_input'>"
            +       "<input class='standard_inputs_normal_ex pop_menu_first' id='register_name' type='text' value='" + mcs_username + "'>"
            +   "</div>"
            +   "<div class='placeholding_input'>"
            +       "<input class='standard_inputs_normal_ex pop_menu_mid' id='register_show_pw' type='text' value='" + mcs_password + "'>"
            +       "<input class='standard_inputs_normal_ex pop_menu_mid' id='register_pw' type='password' style='display:none;color:#404040'>"
            +   "</div>"
            +   "<div class='placeholding_input'>"
            +       "<input class='standard_inputs_normal_ex pop_menu_last' id='register_show_confirm' type='text' value='" + mcs_confirm_password+ "'>"
            +       "<input class='standard_inputs_normal_ex pop_menu_last' id='register_confirm' type='password' style='display:none;color:#404040'>"
            +   "</div>"
            +   "<button class='register_button'>" + mcs_sign_up + "</button>"
            +   "<span class='caret_arrow_up' style='position:absolute;top:-6px;left:100px;'></span>"
            +"</div>";

        l_dom_username = mx("#register_name");
        l_dom_show_password = mx("#register_show_pw");
        l_dom_password = mx("#register_pw");
        l_dom_show_pw_confirm = mx("#register_show_confirm");
        l_dom_pw_confirm = mx("#register_confirm");
        l_dom_register_button = mx(".register_button")[0];

        function add_event()
        {   //注册按键点击事件
            l_dom_register_button.onclick = function() {
                var reg,
                    username_value = l_dom_username.value,
                    password_value = l_dom_password.value,
                    pw_confirm_value = l_dom_pw_confirm.value;

                if(!username_value || username_value == mcs_username)
                {
                    system_tooltip({parent:l_dom_username, color:"red", position:"left", disappear_way:"time", str:mcs_the_user_name_is_empty + "."});
                    return;
                }
                else
                {
                    reg = /^([a-zA-Z][a-zA-Z0-9]{5,19})$/;
                    if(!reg.exec(username_value))
                    {
                        system_tooltip({parent:l_dom_username, color:"red", position:"left", disappear_way:"time", str:mcs_username_demand + "."});
                        return;
                    }
                }
                if(!password_value || password_value == mcs_password)
                {
                    system_tooltip({parent:l_dom_show_password, color:"red", position:"left", disappear_way:"time", str:mcs_the_password_is_empty + "."});
                    return;
                }
                else
                {
                    reg = /^\S{6,20}$/;
                    if(!reg.exec(password_value))
                    {
                        system_tooltip({parent:l_dom_password, color:"red", position:"left", disappear_way:"time", str:mcs_password_demand + "."});
                        return;
                    }
                }
                if(!pw_confirm_value || pw_confirm_value == mcs_confirm_password)
                {
                    system_tooltip({parent:l_dom_show_pw_confirm, color:"red", position:"left", disappear_way:"time", str:mcs_password_empty + "."});
                    return;
                }
                if(pw_confirm_value != password_value)
                {
                    system_tooltip({parent:l_dom_pw_confirm, color:"red", position:"left", disappear_way:"time", str:mcs_two_password_input_inconsistent + "."});
                    return;
                }
                if(g_register_waiting_flag)
                {
                    g_register_waiting_flag = 0;
                    ms.send_msg("sign_up",{srv:g_server_device, user:username_value, password:password_value},null,function(msg,ref)
                    {
                       if(msg && msg.result=="")
                       {
                       	 jQuery("#register_page").toggle();
                         system_pop_confirm_box({str:mcs_successful_whether_login,
                             callback_func:function(){
                               l_parent_callback({type:"login",data:{user:username_value, password:password_value}});
                             }
                         })
                       }else if(msg.result == "accounts.user.existed"){
                       	 system_tooltip({parent:mx("#register_name"), color:"red", position:"left", disappear_way:"time", str:mcs_username_already_exists});
                       }else{
                       	 log("error:sign up return error in class_register_page.");
                       }
                       g_register_waiting_flag = 1;
                    });
                }
            };
            l_dom_username.onfocus = function() {
                this.style.color = "#404040";
                if(this.value == mcs_username)
                {
                    this.value = "";
                }
                system_tooltip({parent:l_dom_username, color:"green", position:"left", disappear_way:"time", str:mcs_username_demand+ "."});
            };
            l_dom_username.onblur = function() {
                if(this.value == "")
                {
                    this.style.color = "#404040";
                    this.value = mcs_username;
                }
                else
                {
                    this.style.color = "#404040";
                }
            };
            l_dom_show_password.onfocus = function() {
                this.style.display = "none";
                l_dom_password.style.display = "inline";
                l_dom_password.focus();
            };
            l_dom_password.onfocus = function() {
                this.select();
                system_tooltip({parent:l_dom_password, color:"green", position:"left", disappear_way:"time", str:mcs_password_demand + "."});
            };
            l_dom_password.onblur = function() {
                if(this.value == "")
                {
                    this.style.display = "none";
                    l_dom_show_password.style.display = "inline";
                }
            };
            l_dom_show_pw_confirm.onfocus = function() {
                this.style.display = "none";
                l_dom_pw_confirm.style.display = "inline";
                l_dom_pw_confirm.focus();
            };
            l_dom_pw_confirm.onfocus = function() {
                this.select();
            };
            l_dom_pw_confirm.onblur = function() {
                if(this.value == "")
                {
                    this.style.display = "none";
                    l_dom_show_pw_confirm.style.display = "inline";
                }
            };
        }
        add_event();
    }

    function class_main_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_notif_count = 0,
            //dom
            l_dom_menu_box,
            l_dom_cntr_box,
            l_dom_top_box,
            // class obj
            l_menu_box_obj,
            l_cntr_box_obj,
            l_top_box_obj;


        //创建输入框的动画效果
        function add_standard_style()
        {
            if(null == g_standard_input_box_onfocus)
            {   //获取焦点事件动画效果
                g_standard_input_box_onfocus = function(obj)
                {
                    jQuery(obj).removeClass("standard_inputs");
                    jQuery(obj).addClass("standard_inputs_hover");
                };
            }
            if(null == g_standard_input_box_onblur)
            {   //失去焦点事件的动画效果
                g_standard_input_box_onblur = function(obj)
                {
                    jQuery(obj).removeClass("standard_inputs_hover");
                    jQuery(obj).addClass("standard_inputs");
                };
            }
        }
        //清除动画效果
        function remove_standard_style()
        {
            g_standard_input_box_onfocus = null;
            g_standard_input_box_onblur = null;
        }
        //处理mmq返回信息
        function dev_msg_listener_mmq(msg,ref)
				{
		        if(msg.result != "") return;
		      	var i,length =msg.items.length,old_count = l_notif_count,device_change = 0
		      	,old_sn;
		      	for(i=0;i< length;i++){
		      		  //如果消息所属设备不存在则直接返回
		      		  var device_list_obj = mcloud_agent.devs.get(msg.items[i].sn);
                if(!device_list_obj)return;
		      	    if(msg.items && msg.items[i].msg_id)//先创建红底字
                {
                   if((g_now_page != "alarm")||(g_select_device_ipc != msg.items[i].sn)){
                      if(device_list_obj.stat == "Online"){
                   	  	   l_me.ctrl({type:"refresh_notif_latest", data:{now_item:msg.items[i],sn:msg.items[i].msg_id}});
                   	  }
                   }
                }
                //返回的是设备信息
                if(msg.items[i].type == "device" && msg.items[i].code == "info")
                {
                    for(j=0;j<msg.items[i].p.length;j++)
                    {
                             if(msg.items[i].p[j].n == "status" &&  msg.items[i].p[j].v =="Online" )
                             {
                                device_list_obj.stat = "Online";
                                if(g_select_device_ipc == ""){
                                	g_select_device_ipc = msg.items[i].sn;
                                	device_change = 1;
                                	old_sn = "";
                                }
                             }
                             else if(msg.items[i].p[j].n == "status" &&  msg.items[i].p[j].v =="Offline")
                             {
                                device_list_obj.stat = "Offline";
                                if(g_select_device_ipc == msg.items[i].sn){
                                	   for(var length1 = mcloud_agent.devs.list.length,n=0;n< length1;n++){
               													if(mcloud_agent.devs.list[n].stat == "Online"){
               														  old_sn = g_select_device_ipc;
                  													g_select_device_ipc = mcloud_agent.devs.list[n].sn;
                  													device_change = 1;
                  													break;
               													}
            												 }
            												 if(n >= length1){
            												 	  old_sn = g_select_device_ipc;
                  											g_select_device_ipc = "";
                  										  device_change = 1;
            												 }
                                }
                             }
                             else if(msg.items[i].p[j].n == "status" &&  msg.items[i].p[j].v =="InvalidAuth")
                             {
                                device_list_obj.stat = "InvalidAuth";
                                if(g_select_device_ipc == msg.items[i].sn){
                                	 for(var length2 = mcloud_agent.devs.list.length,n=0;n< length2;n++){
               												if(mcloud_agent.devs.list[n].stat == "Online"){
                  											old_sn = g_select_device_ipc;
                  											g_select_device_ipc = mcloud_agent.devs.list[n].sn;
                  											device_change = 1;
                  											break;
               												}
            											 }
            											 if(n >= length1){
            												 	old_sn = g_select_device_ipc;
                  										g_select_device_ipc = "";
                  										device_change = 1;
            											 }
                                }
                             }
                             else if(msg.items[i].p[j].n == "nick")
                             {
                                device_list_obj.nick = msg.items[i].p[j].v ;
                             }
                             else if(msg.items[i].p[j].n == "firmware_version")
                             {
                                device_list_obj.img_ver=msg.items[i].p[j].v;
                             }
                             else if(msg.items[i].p[j].n == "s.wifs" && l_menu_box_obj)
                             {
                                if(!g_domain_oems_vimtag) l_menu_box_obj.ctrl({type:"wifs_replace", data:msg.items[i].p});
                             }
                    }
                    if(l_cntr_box_obj)
                    {  //刷新设备列表
                       if(!g_domain_oems_vimtag) l_cntr_box_obj.ctrl({type:"refresh_device_list",data:{change:device_change,old_sn:old_sn}});
                    }
                }
                else if(msg.items[i].type == "nick")//返回的是昵称信息
                {
                     for(j=0;j<msg.items[i].p.length;j++)
                     {
                         if(msg.items[i].p[j].n == "nick" && msg.items[i].p[j].v.trim() != "")
                         {
                             device_list_obj.nick = msg.items[i].p[j].v ;
                             //通知设备列表更改设备昵称
                             l_cntr_box_obj.ctrl({type:"change_device_name",sn:msg.items[i].sn});
                             break;
                         }
                     }
                }
                else if(msg.items[i].msg_id!=0)
                {
                       if(determine_the_version({type:"Anti",version:version_Category.Snapshot_version}))
                       {
                           return;
                       }
                       /*if(msg.items[i].p)
                       {
                           for(j=0;j<msg.items[i].p.length;j++)
                           {
                               if(msg.items[i].p[j].n =="content")
                               {
                                  var objs=eval("(" + msg.items[i].p[j].v + ")");
                                  if(objs.Extension){
                                    imagings={type:"update_imaging",brightness:"",contrast:"",colorsaturation:"", sharpness:""};
                                    imagings.brightness      = objs.Extension.Imaging.Brightness;
                                    imagings.contrast        = objs.Extension.Imaging.Contrast;
                                    imagings.colorsaturation = objs.Extension.Imaging.ColorSaturation;
                                    imagings.sharpness       = objs.Extension.Imaging.Sharpness;
                                    l_cntr_box_obj.ctrl(imagings);
                                  }
                                  return;
                               }
                           }
                       }*/
                       var msgs=new Object();
                       msgs.items=msg.items[i];
                       msg.items[i].display = 0;
                                                    //is not a good habit
                        l_notif_count = 0;
                        if(!g_notif_info["sn_" + msg.items[i].sn])
                        {
                            g_notif_info["sn_" + msg.items[i].sn] = createLinkList();
                        }
                        g_notif_info["sn_" + msg.items[i].sn].add(msgs);
                        if(msg.items[i].sn == g_select_device_ipc && g_now_page == "alarm")
                            l_cntr_box_obj.ctrl({type:"refresh_alarm", data:{item:msgs}});
                        else
                        {
                            if(old_count < 99 && !mx("#alarm_search_content_tb"+msg.items[i].msg_id))
                            {
                                for(var n in g_notif_info)
                                {
                                    if(g_notif_info.hasOwnProperty(n))
                                    {
                                        ++l_notif_count;
                                    }
                                }
                            }
                            else
                                l_notif_count = old_count;
                        }
                }
		      	}
	    	}
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	  if(l_me_parent[s_offsetWidth] - 1280 >0)
                         	  {
                         	  	 g_nine_hundred_side = (l_me_parent[s_offsetWidth] - 900)/2;
                         	  	 g_distance_to_edge = (l_me_parent[s_offsetWidth] - 1256)/2;
                         	  	 g_devices_list_box_width = 1256;
                         	  	 g_player_width = 990;
                           	   g_player_height = 558;
                           	   g_body_width = l_me_parent[s_offsetWidth];
                         	  }
                         	  else if(l_me_parent[s_offsetWidth] - 942 >0)
                         	  {
                         	  	 g_nine_hundred_side = (l_me_parent[s_offsetWidth] - 900)/2;
                         	  	 g_distance_to_edge = (l_me_parent[s_offsetWidth] - 942)/2;
                         	  	 g_devices_list_box_width = 942;
                         	  	 g_player_width = (l_me_parent[s_offsetWidth]/1440)*990;
                           	   g_player_height = (l_me_parent[s_offsetWidth]/1440)*558;
                           	   g_body_width = l_me_parent[s_offsetWidth];
                         	  }
	                     	  	else if(l_me_parent[s_offsetWidth] - 899 >0)
	                     	  	{
	                     	  	 	 g_nine_hundred_side = (l_me_parent[s_offsetWidth] - 900)/2;	                     	  	 
	                     	  	   g_distance_to_edge = (l_me_parent[s_offsetWidth] - 628)/2;
	                     	  	   g_devices_list_box_width = 628;
	                     	  	   g_player_width = 640;
	                       	     g_player_height = 360;
	                       	     g_body_width = l_me_parent[s_offsetWidth]; 
	                       	  }
                         	  else
                         	  {
                         	  	 g_distance_to_edge = 12;
                         	  	 g_devices_list_box_width = 314;
                         	  }
                         	  
                         	  if(l_dom_top_box && l_top_box_obj)
                         	  {
                         	     l_dom_top_box.style.width = l_me_parent[s_offsetWidth] + "px";
                         	     l_top_box_obj.ctrl(obj);
                         	  }
                         	  if(l_dom_menu_box && l_menu_box_obj)
                         	  {
                         	  	 l_dom_menu_box[s_style][s_width] = l_me_parent[s_offsetWidth] + "px";
                         	  	 l_menu_box_obj.ctrl(obj);
                         	  }
                         	  if(l_dom_cntr_box && l_cntr_box_obj)
                         	  {
                         	  	 l_dom_cntr_box[s_style][s_width] = l_me_parent[s_offsetWidth] + "px";
                         	  	 l_cntr_box_obj.ctrl(obj);
                         	  }
                    	  }
                        break;
                    }
                case "create"://创建main_page
                    {
                      //创建mmq
                      setTimeout(function(){
                        g_j_page.animate({/*marginLeft:"-100%"*/}, 0, function(){
                            mlocal_storage.set("remember_msg_info",mcodec.obj_2_str({user:username_value,password:password_value}));
                            publicTop("");
                            // jQuery("#v_login").hide();
                            // jQuery("#ipc_list").click(function(){
                            //     alert(1)
                            // })
                            
                            // l_parent_callback({type:"destroy_login_interface"});
                        
                      // mx("#ipc_list").onclick=function(){
                        if(is_ipc_list==1){
                        jQuery("#nav_right").css({"padding":"0"});
                        jQuery("#try").hide();
                        jQuery("#add_devices_menu").show();
                        jQuery("#login_page").hide();
                        jQuery("#main_page").show();
                        jQuery("#ipc_list").hide();
                        jQuery("#play_page_return").show();
        						  mcloud_agent.dev_msg_listener_add(null,dev_msg_listener_mmq);
        							setTimeout(function(){
                        //获取设备列表
                        ms.send_msg("devs_refresh",{},null,function(msg,ref){
                           if(msg.result != ""){
                           	   log("error:devs_refresh return error in class_main_page.");
                           	   return;
                            }
                           for(var length = mcloud_agent.devs.list.length,i=0;i< length;i++){
                              if(mcloud_agent.devs.list[i].stat == "Online"){
                                 g_select_device_ipc = mcloud_agent.devs.list[i].sn;
                                 break;
                               }
                           }                           
                           
                           if(g_domain_oems_vimtag)
                           {
                           	  //g_distance_to_edge =(l_me_parent[s_offsetWidth] - 1236)/2 + "px";
                           	  if(l_me_parent[s_offsetWidth] - 1280 >0)
                           	  {
                           	  	 g_distance_to_edge = (l_me_parent[s_offsetWidth] - 1256)/2;
                           	  	 g_devices_list_box_width = 1256;
                           	  	 g_player_width = 990;
                           	  	 g_player_height = 558;
                           	  	 g_body_width = l_me_parent[s_offsetWidth];
                           	  }
                           	  else if(l_me_parent[s_offsetWidth] - 942 >0)
                           	  {
                           	  	 g_distance_to_edge = (l_me_parent[s_offsetWidth] - 942)/2;
                           	  	 g_devices_list_box_width = 942;
                           	  	 g_player_width = (l_me_parent[s_offsetWidth]/1440)*990;
                           	  	 g_player_height = (l_me_parent[s_offsetWidth]/1440)*558;
                           	  	 g_body_width = l_me_parent[s_offsetWidth];
                           	  }
                           	  else if(l_me_parent[s_offsetWidth] - 899 >0)
		                     	  	{
		                     	  	 	 g_nine_hundred_side = (l_me_parent[s_offsetWidth] - 900)/2;	                     	  	 
		                     	  	   g_distance_to_edge = (l_me_parent[s_offsetWidth] - 628)/2;
		                     	  	   g_devices_list_box_width = 628;
		                     	  	   g_player_width = 640;
		                       	     g_player_height = 360;
		                       	     g_body_width = l_me_parent[s_offsetWidth]; 
		                       	  }
                           	  else
                           	  {
                           	  	 g_distance_to_edge = 12;
                           	  	 g_devices_list_box_width = 314;
                           	  }

                          	  l_dom_top_box = dom_create_child(l_me_parent, "div", "top_box");
                          	  l_dom_menu_box = dom_create_child(l_me_parent, "div", "vimtag_menu_box");
                          	  l_dom_cntr_box = dom_create_child(l_me_parent, "div", "vimtag_cntr_box");

                          	  l_dom_top_box[s_style][s_cssText] = "width:" + l_me_parent[s_offsetWidth] + "px;height:76px;position:fixed;z-index:13;";
                          	  l_dom_menu_box[s_style][s_cssText] = "width:" + l_me_parent[s_offsetWidth] + "px;height:44px;position:fixed;margin-top:0px;z-index:12;";
                          	  l_dom_cntr_box[s_style][s_cssText] = "width:" + l_me_parent[s_offsetWidth] + "px;margin-top:0px;z-index:10;position:absolute;";

                          	  l_top_box_obj = new class_top_box({parent:l_dom_top_box, on_event:on_event});
                          	  l_menu_box_obj = new class_vimtag_menu_box({parent:l_dom_menu_box, on_event:on_event});
                          	  l_cntr_box_obj = new class_vimtag_cntr_box({parent:l_dom_cntr_box, on_event:on_event});
                           }
                          //删除登录界面                        
                        });
                      },500);
                        }
                      });
                    }, 0);
                      break;
                    }
                case "refresh_notif_latest":
                case "refresh_alarm":
                case "refresh_device_list":
                case "update_imaging":
                    {
                       if(l_cntr_box_obj)
                       {
                          l_cntr_box_obj.ctrl(obj);
                       }
                       break;
                    }
                case "refresh_notif":
                    {
                        if(l_menu_box_obj)
                        {
                          l_menu_box_obj.ctrl(obj);
                        }
                        break;
                    }
                case "destroy":
                    {
                        remove_standard_style();
                        l_dom_menu_box = null;
                        l_dom_cntr_box = null;
                        l_me_parent[s_innerHTML] = "";

                        //all mark reset
                        g_old_browser_version = 0;
                        g_login_waiting_flag = 0;
                        g_register_waiting_flag = 1;
                        g_view_split_count = 1;
                        g_playback_split_count = 1;
                        g_view_pages = 1;
                        g_playback_pages = 1;
                        g_now_view_page = 1;
                        g_now_playback_page = 1;
                        g_now_page = "home";
                        g_device_list_switch = "open";
                        g_ptz_control_switch = "open";
                        g_select_inner_window = "none";
                        g_select_inner_ipc = "";
                        g_select_device_ipc = "";
                        g_login_status = "";
                        g_network_environ = "";
                        g_device_list_obj = {};
                        g_device_list_link = createLinkList();
                        g_view_link = createLinkList();
                        g_playback_link = createLinkList();
                        g_is_playing = 0;
                        g_is_play_back = 0;
                        break;
                    }
            }
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "exchange_page"://切换界面：首页、回放
                case "change_select_device_style":
                case "profiles_play":
                case "select_net":
                case "select_device":
                    {
                         l_cntr_box_obj.ctrl(obj);
                         break;
                    }
                case "Refresh_devs":
                    {
                       l_parent_callback(obj);
                       break;
                    }
                case "delete_notif_info":
                    {
                         l_menu_box_obj.ctrl({type:obj.type, data:{l_notif_count:--l_notif_count}});
                         break;
                    }
                case "get_profiles":
                    {
                         l_menu_box_obj.ctrl({type:"get_profiles",data:l_cntr_box_obj.ctrl(obj)});
                         break;
                    }
                case "refresh_menu":
                    {
                    	 l_menu_box_obj.ctrl(obj);
                    	 break;
                    }
                case "create":
                    {
                       l_cntr_box_obj.ctrl(obj);
                       break;
                    }
                case "create_setting_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "change_manager_content":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "create_messages_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_add_devices_box":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_play_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_history_play_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_setting_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_history_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_box_device_page":
                    {
                   	   l_cntr_box_obj.ctrl(obj);
                   	   break;  
                    }
                case "destroy_box_device_history_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_box_device_video_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "destroy_box_setting_page":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "select_video_base_select_date":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "return_devices_list_box":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "reload_box_video_list":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "get_alarm_video_list":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "get_all_video_list":
                    {
                    	 l_cntr_box_obj.ctrl(obj);
                    	 break;
                    }
                case "update":
                    {
                    	 l_me.ctrl(obj);
                    	 break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_main_page.");
            }
        }
    }
    function class_top_box(obj) {
        var l_dom_top_box = mx("#top_box");
        l_me = this;
        jQuery("#home").click(function(){
            jQuery("#main_page").hide();
            jQuery("#login_page").show();
            jQuery("#main_page").html("");           
            jQuery("#play_page_return").hide();
            jQuery("#return_devices_list").hide();
            jQuery("#history_return").hide();
            jQuery("#ipc_list").show();
            jQuery("#nav_right").children().hide();
            jQuery("#try").show();
            jQuery("#nav_right").css({"padding":"6px 0"});   
            if(mx("#box_title")){mx("#box_title").parentNode.removeChild(mx("#box_title"))}; 
            mx("#main_page").style.paddingTop="89px"; 
            localStorage.removeItem("ipc_list_action");
            is_ipc_list=0;     
        })
        
        // l_dom_top_box.style.backgroundColor = "#ffffff";
        // l_dom_top_box[s_innerHTML] =
        //     "<div>"
        //     +       "<div class='vimtag_logo_in' id='vimtag_logo_in' style='position:absolute;margin-top:11.5px;margin-left:"+g_distance_to_edge+"px;'></div>"
        //     +       "<div id='vimtag_set' style='position:absolute;right:0px;margin-top:45.5px;margin-right:"+g_distance_to_edge+"px;'>"
        //     +         "<a class='download_help'>" + mcs_download + "</a>"
        //     +         "<a class='download_help'>" + mcs_help_feedback + "</a>"
        //     +       "</div>"
        //     +"</div>";
            
        //     jQuery("#vimtag_set").hide();
            l_me.ctrl = function(obj)
            {
                switch(obj.type){
                     case "update":{
                        	 //mx("#vimtag_logo_in").style.marginLeft = g_distance_to_edge+ "px";
                        	 //mx("#vimtag_set").style.marginRight = g_distance_to_edge+ "px";
                        	 break;
                     }
                }
            }
    }
    function class_vimtag_menu_box(obj) {
        l_dom_enter_messages_img="";
        l_dom_history_return="";
        l_dom_vimtag_calendar_choice="";
        vimtag_calendar_input_calback = obj.on_event;
        var l_me_parent = obj.parent,
            l_me = this,
            l_parent_callback = obj.on_event,
            l_filter_condite_box,
            l_dom_add_devices_menu,
            l_dom_vimtag_menu_box = mx("#vimtag_menu_box"),
            l_dom_return_devices_list,
            l_dom_return_devices_list_from_play,
            
            l_dom_play_page_return,
            l_dom_enter_messages,
            l_dom_enter_setting,
            
            l_dom_menu_box_sidebar,
            l_dom_modify_account_admin_pwd,
            l_dom_modify_account_guset_pwd,
            l_dom_quit_account,
            l_dom_about_web_version,
            l_dom_set_menu_img,
            l_dom_modify_admin_pwd,
            l_dom_admin_show_pw,
            l_dom_admin_pw,
            l_dom_admin_show_pw1,
            l_dom_admin_pw1,
            l_dom_admin_show_pw2,
            l_dom_admin_pw2,
            l_dom_admin_pw_btn,
            l_dom_guest_show_pw,
            l_dom_guest_pw,
            l_dom_guest_show_pw1,
            l_dom_guest_pw1,
            l_dom_guest_show_pw2,
            l_dom_guest_pw2,
            l_dom_guest_pw_btn,
            l_dom_vimtag_load_plugs,
            l_dom_set_btn_menu,
            l_dom_vimtag_calendar_choice_img,
            
            l_dom_vimtag_calendar_input;

        l_dom_vimtag_menu_box[s_innerHTML] =
            "<div>"
            +     "<div id='add_devices_menu' class='add_devices_menu' style='cursor:pointer;position:absolute;margin-top:14px;left:"+g_distance_to_edge+"px;'></div>"
            +     "<div id='return_devices_list' style='font-size:16px;color:#ffffff;line-height:44px;position:absolute;left:"+g_distance_to_edge+"px;cursor:pointer;'><span>"+ mcs_back +"</span></div>"
            +     "<div id='play_page_menu' style='line-height:44px;position:absolute;left:"+g_distance_to_edge+"px;'>"
            +        "<div id='play_page_return' style='font-size:16px;color:#ffffff;float:left;margin-right:24px;cursor:pointer;'>"+ mcs_back +"</div>"
            +        "<div id='history_return' style='font-size:16px;color:#ffffff;float:left;margin-right:24px;cursor:pointer;'>"+ mcs_back +"</div>"
            +     "</div>"
            +     "<div id='set_btn_menu' style='line-height:44px;position:absolute;right:"+g_distance_to_edge+"px;'>"
            +        "<div id='enter_setting' style='font-size:16px;color:#ffffff;float:right;cursor:pointer;'>"+ mcs_settings +"</div>"
            +        "<div id='enter_setting_img' class='device_set_img' style='float:right;margin-top:13px;margin-right:3px;cursor:pointer;'></div>"            
            +        "<div id='setting_messages_gap' style='width:1px;height:18px;background-color:#ffffff;float:right;margin-right:24px;margin-top:13px;'></div>"
            +        "<div id='enter_messages' style='font-size:16px;color:#ffffff;float:right;margin-right:24px;cursor:pointer;'>"+ mcs_messages +"</div>" 
            +        "<div id='enter_messages_img' class='history_img' style='float:right;margin-top:13px;margin-right:3px;cursor:pointer;'></div>"
            +        "<div id='vimtag_filter' style='font-size:16px;color:#ffffff;float:right;cursor:pointer;'>"+ mcs_filter +"</div>" 
            +        "<div id='vimtag_filter_img' class='vimtag_filter_img' style='float:right;margin-top:12px;margin-right:3px;cursor:pointer;'></div>"
            +        "<div id='vimtag_filter_calendar_gap' style='width:1px;height:18px;background-color:#ffffff;float:right;margin-right:24px;margin-left:24px;margin-top:13px;'></div>"
            +        "<div id='vimtag_calendar_choice' style='font-size:16px;color:#ffffff;float:right;margin-left:3px;cursor:pointer;'>"+ mcs_date +"</div>" 
            +        "<input id='vimtag_calendar_input1' type='text'>"            
            +     "</div>"
            +     "<div id='set_menu_img' class='vimtag_set_menu' style='position:absolute;margin-top:13px;right:"+g_distance_to_edge+"px;cursor:pointer;'></div>"
            +     "<div id='device_list_character' style='text-align:center;font-size:16px;color:#ffffff;line-height:44px;'><span>"+ mcs_device_list +"</span></div>"
            +     "<div id='setting_wizard_character'style='text-align:center;font-size:16px;color:#ffffff;line-height:44px;'><span>"+ mcs_action_smart_config_wifi +"</span></div>"
            +     "<div id='menu_box_sidebar' style='margin-right:"+g_distance_to_edge+"px;'>"
            +        "<div id='user_password_img' class='vimtag_user_password_img' style='margin-left:10px;margin-top:8px;margin-right:10px;margin-bottom:8px;'>"
            +           "<div id='modify_account_admin_pwd' style='font-size:14px;color:#000000;position:absolute;margin-left:25px;cursor:pointer;'>"+mcs_user_admin_password+"</div>"
            +        "</div>"
            +        "<div style='width:120px;height:1px;background-color:#cccccc;margin:auto;'></div>"
            +        "<div id='guest_password_img' class='vimtag_guest_password_img' style='margin-left:10px;margin-top:8px;margin-right:10px;margin-bottom:8px;'>"
            +           "<div id='modify_account_guset_pwd' style='font-size:14px;color:#000000;position:absolute;margin-left:25px;cursor:pointer;'>"+mcs_user_guest_password+"</div>"
            +        "</div>"
            +        "<div style='width:120px;height:1px;background-color:#cccccc;margin:auto;'></div>"
            +        "<div id='vimtag_load_plugs' style='line-height:37px;text-align:center;font-size:14px;color:#000000;cursor:pointer;'>"+ mcs_option +"</div>"
            +        "<div style='width:120px;height:1px;background-color:#cccccc;margin:auto;'></div>"
            +        "<div id='quit_account' style='line-height:37px;text-align:center;font-size:14px;color:#000000;cursor:pointer;'>"+ mcs_exit +"</div>"
            +        "<div style='width:120px;height:1px;background-color:#cccccc;margin:auto;'></div>"
            +        "<div id='about_web_version' style='line-height:37px;text-align:center;font-size:14px;color:#000000;cursor:pointer;'>"+ mcs_about +"</div>"
            +     "</div>"
            +     "<div id='modify_admin_pwd' style='margin-right:"+g_distance_to_edge+"px;'>"
            +        "<div>"
            +           "<input class='vimtag_inputs_normal' id='admin_show_pw' type='text' value='" + mcs_old_password + "' style='margin-top:2px;'>"
        	  +           "<input class='vimtag_inputs_normal' id='admin_pw' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div>"
        	  +          "<input class='vimtag_inputs_normal' id='admin_show_pw1' type='text' value='" + mcs_new_password + "' style='margin-top:2px;'>"
        	  +          "<input class='vimtag_inputs_normal' id='admin_pw1' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div>"
        	  +           "<input class='vimtag_inputs_normal' id='admin_show_pw2' type='text' value='" + mcs_confirm_password + "' style='margin-top:2px;'>"
        	  +           "<input class='vimtag_inputs_normal' id='admin_pw2' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div id='admin_pw_btn' style='font-size:16px;color:#000000;line-height:37px;text-align:center;cursor:pointer;'>"+ mcs_apply +"</div>"
            +     "</div>"
            +     "<div id='modify_guest_pwd' style='margin-right:"+g_distance_to_edge+"px;'>"
            +        "<div>"
            +           "<input class='vimtag_inputs_normal' id='guest_show_pw' type='text' value='" + mcs_old_password + "' style='margin-top:2px;'>"
        	  +           "<input class='vimtag_inputs_normal' id='guest_pw' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div>"
        	  +          "<input class='vimtag_inputs_normal' id='guest_show_pw1' type='text' value='" + mcs_old_password + "' style='margin-top:2px;'>"
        	  +          "<input class='vimtag_inputs_normal' id='guest_pw1' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div>"
        	  +           "<input class='vimtag_inputs_normal' id='guest_show_pw2' type='text' value='" + mcs_confirm_password + "' style='margin-top:2px;'>"
        	  +           "<input class='vimtag_inputs_normal' id='guest_pw2' type='password' style='display:none;margin-top:2px;'>"
        	  +        "</div>"
        	  +        "<div style='width:200px;height:1px;background-color:#cccccc;margin:auto;'></div>"
        	  +        "<div id='guest_pw_btn' style='font-size:16px;color:#000000;line-height:37px;text-align:center;'>"+ mcs_apply +"</div>"
            +     "</div>"
            +"</div>";
            l_dom_add_devices_menu = mx("#add_devices_menu");
            l_dom_return_devices_list = mx("#return_devices_list");
            l_dom_return_devices_list_from_play = mx("#return_devices_list_from_play");
            l_dom_enter_setting = mx("#enter_setting");
            l_dom_enter_setting_img = mx("#enter_setting_img");
            l_dom_enter_setting = mx("#enter_setting");
            l_dom_enter_messages_img = mx("#enter_messages_img");
            l_dom_enter_messages = mx("#enter_messages");
            l_dom_play_page_return = mx("#play_page_return");
            l_dom_history_return = mx("#history_return");
            l_dom_menu_box_sidebar = mx("#menu_box_sidebar");
            l_dom_modify_account_admin_pwd = mx("#modify_account_admin_pwd");
            l_dom_modify_account_guset_pwd = mx("#modify_account_guset_pwd");
            l_dom_quit_account = mx("#quit_account");
            l_dom_about_web_version = mx("#about_web_version");
            l_dom_set_menu_img = mx("#set_menu_img");
            l_dom_modify_admin_pwd = mx("#modify_admin_pwd");
            l_dom_admin_show_pw = mx("#admin_show_pw");
            l_dom_admin_pw = mx("#admin_pw");
            l_dom_admin_show_pw1 = mx("#admin_show_pw1");
            l_dom_admin_pw1 = mx("#admin_pw1");
            l_dom_admin_show_pw2 = mx("#admin_show_pw2");
            l_dom_admin_pw2 = mx("#admin_pw2");
            l_dom_admin_pw_btn = mx("#admin_pw_btn");
            l_dom_guest_show_pw = mx("#guest_show_pw");
            l_dom_guest_pw = mx("#guest_pw");
            l_dom_guest_show_pw1 = mx("#guest_show_pw1");
            l_dom_guest_pw1 = mx("#guest_pw1");
            l_dom_guest_show_pw2 = mx("#guest_show_pw2");
            l_dom_guest_pw2 = mx("#guest_pw2");
            l_dom_guest_pw_btn = mx("#guest_pw_btn");
            l_dom_set_btn_menu = mx("#set_btn_menu");
            l_dom_vimtag_load_plugs = mx("#vimtag_load_plugs");
            l_dom_vimtag_calendar_choice_img = mx("#vimtag_calendar_choice_img");
            l_dom_vimtag_calendar_choice = mx("#vimtag_calendar_choice");
            l_dom_vimtag_calendar_input = mx("#vimtag_calendar_input");
            l_dom_vimtag_filter = mx("#vimtag_filter");
            l_dom_vimtag_filter_img = mx("#vimtag_filter_img");

            jQuery("#return_devices_list").hide();
            jQuery("#setting_wizard_character").hide();
            jQuery("#play_page_menu").hide();
            jQuery("#menu_box_sidebar").hide();
            jQuery("#modify_admin_pwd").hide();
            jQuery("#modify_guest_pwd").hide();
            jQuery("#set_btn_menu").hide();
            jQuery("#vimtag_calendar_input").hide(); //hide the calendar input
            jQuery("#vimtag_calendar_choice").hide();
            jQuery("#vimtag_filter_calendar_gap").hide();
            jQuery("#vimtag_filter").hide();
            jQuery("#vimtag_filter_img").hide();

            // jQuery("#vimtag_calendar_input").datepicker({showOn:'button', buttonImageOnly:true, onSelect:function(dateText, inst){l_parent_callback({type:"select_video_base_select_date", date:l_dom_vimtag_calendar_input.value})}});
            // jQuery(".ui-datepicker-trigger").css("display","none");	//hide the image of calendar        
		        function user_passwd_set_ack(msg,ref)
		        {
		            if(!msg.result)
		            {
		               system_pop_confirm_box({alert:true, str:mcs_modified_successfully,
		                 callback_func:function(obj){
		                    if(!ref.is_guest)
		                      jQuery("#modify_admin_pwd").hide();
		               }});
		            }
		            else if(msg.result == "accounts.pass.invalid")
		            {
		               if(ref.is_guest)
		               {
		               	   msg_tips({msg:mcs_invalid_password + ".", type:"error", timeout:3000});
		               }else
		               {
		               	   msg_tips({msg:mcs_invalid_password + ".", type:"error", timeout:3000});
		               }
		            }
		        }
            
            l_dom_vimtag_filter.onclick = function(){
               l_dom_vimtag_filter_img.click();
            };

            l_dom_vimtag_filter_img.onclick = function(){
            	 if(jQuery("#box_device_video_list").is(":hidden"))
            	 {
            	 	 jQuery("#box_device_video_list").show();
            	 }
                 else
            	 {
	               l_filter_condite_box = dom_create_child(mx("#box_device_video_list"), "div", "filter_condite_box");
	               mx("#filter_condite_box")[s_innerHTML] = 
	               "<div id='filter_box_border'>"
	               +  "<div style='margin-bottom:10px; margin-left:20px;line-height:26px;'>"
	               +    "<div class='filter_condite_character'>" + mcs_category + "</div>"
	               +    "<input id='event_button' type='button' value="+ mcs_event +" class='filter_condite_no_choice_border'>"
	               +    "<input id='everything_button' type='button' value="+ mcs_time_length +" class='filter_condite_choice_border'>"
	               +  "</div>"
	               +  "<div style='margin-left:20px;line-height:26px;'>"
	               +    "<div class='filter_condite_character'>" + mcs_time_length + "</div>"
	               +    "<input id='onehour_button' type='button' value="+ mcs_one_hour +" class='filter_condite_choice_border'>"
	               +    "<input id='halfhour_button' type='button' value="+ mcs_half_hour +" class='filter_condite_no_choice_border'>"
	               +    "<input id='fiveminute_button' type='button' value="+ mcs_five_min +" class='filter_condite_no_choice_border'>"    
	               +  "</div>"
	               +"</div>";
	               
	               var l_dom_event_button        = mx("#event_button"),
	                   l_dom_everything_button   = mx("#everything_button"),
	                   l_dom_onehour_button      = mx("#onehour_button"),
	                   l_dom_halfhour_button     = mx("#halfhour_button"),
	                   l_dom_fiveminute_button   = mx("#fiveminute_button");
	               
	               l_dom_event_button.onclick = function(){
	                  l_parent_callback({type:"get_alarm_video_list"});
	               };
	               
	               l_dom_everything_button.onclick = function(){
	                  l_parent_callback({type:"get_all_video_list"});
	               };
	               
	               l_dom_onehour_button.onclick = function(){
	               		g_select_incise_time = "1h";
	               		l_parent_callback({type:"reload_box_video_list"});
	               };
	               
	               l_dom_halfhour_button.onclick = function(){
	               		g_select_incise_time = "30min";
	               		l_parent_callback({type:"reload_box_video_list"});
	               };
	               
	               l_dom_fiveminute_button.onclick = function(){
	               		g_select_incise_time = "5min";
	               		l_parent_callback({type:"reload_box_video_list"});
	               };
               }
            };
            l_dom_vimtag_calendar_choice.onclick = function(){
               var day_box_display = mx("#ui-datepicker-div").style.display;
               if(day_box_display == "block"){
                jQuery("#ui-datepicker-div").hide();
               }else{
                jQuery(".ui-datepicker-trigger").click();
               }
            };
            
            l_dom_add_devices_menu.onclick = function(){
               l_parent_callback({type:"create"});
               jQuery("#return_devices_list").show();
               jQuery("#add_devices_menu").hide();
               jQuery("#play_page_return").hide();
               jQuery("#device_list_character").hide();
               jQuery("#setting_wizard_character").show();
               jQuery("#set_menu_img").hide();
            };

            l_dom_enter_messages.onclick = function(){
               l_dom_enter_messages_img.click();
               g_is_in_play_page = 0 ;
            };

            l_dom_enter_setting.onclick = function(){
               l_dom_enter_setting_img.click();
               g_is_in_play_page = 0 ;
            };

            l_dom_enter_setting_img.onclick = function(){
            	 if(g_return_play_video_page == 3)
            	 {
            	 	 g_return_play_video_page = 6;
            	 }
            	 else
            	 {
            	   g_return_play_video_page = 1; //表示现在处于设置界面
            	 }
            	 jQuery("#play_page_return").hide();
                 jQuery("#return_devices_list").hide();
            	 jQuery("#history_return").show();
               l_parent_callback({type:"create_setting_page"});
            };

            l_dom_enter_messages_img.onclick = function(){
            	 g_return_play_video_page = 2;  //表示现在处于历史界面
            	 jQuery("#play_page_return").hide();
            	 jQuery("#history_return").show();
               l_parent_callback({type:"create_messages_page", on_event:obj.on_event});
            };

            l_dom_return_devices_list.onclick = function(){
               // l_parent_callback({type:"destroy_add_devices_box"});
               // jQuery("#return_devices_list").hide();
               // jQuery("#play_page_return").show();
               // jQuery("#add_devices_menu").show();
               // jQuery("#device_list_character").show();
               // jQuery("#setting_wizard_character").hide();
               // jQuery("#set_menu_img").show();
               if(g_return_play_video_page == 5){
                l_parent_callback({type:"destroy_box_device_video_page"});
                g_is_in_playback_page = 0;
               }
               mx("#main_page").style.paddingTop="89px";
                       l_parent_callback({type:"destroy_box_device_page"});
                       jQuery("#enter_setting").hide();
                   jQuery("#enter_setting_img").hide();
                   jQuery("#history_return").hide();
                   jQuery("#return_devices_list").hide();
                   jQuery("#device_list_character").show();
                   jQuery("#add_devices_menu").show();
                   jQuery("#set_menu_img").show();
                   jQuery("#play_page_return").show();
                   mx("#box_title").parentNode.removeChild(mx("#box_title"));
                       g_return_play_video_page = "";
            };

            l_dom_play_page_return.onclick = function(){
            	 g_is_in_play_page = 0;
               l_parent_callback({type:"destroy_play_page"});
               jQuery("#play_page_menu").hide();
               jQuery("#set_btn_menu").hide();
               jQuery("#add_devices_menu").show();
               jQuery("#device_list_character").show();
               jQuery("#set_menu_img").show();
            };

            l_dom_history_return.onclick = function(){
            	 if(g_return_play_video_page == 0)
            	 {
            	 	   g_is_in_playback_page = 0;   
            	 	   g_return_play_video_page = 2;
		            	 l_parent_callback({type:"destroy_history_play_page"});
		            	 l_dom_enter_messages_img.click();
            	 }
            	 else if(g_return_play_video_page == 1)
            	 {
            	 	   g_is_in_play_page = 1;
            	 	   l_parent_callback({type:"destroy_setting_page"});
            	 	   g_return_play_video_page = "";
            	 	   jQuery("#play_page_return").show();
            	     jQuery("#history_return").hide();
            	 }
            	 else if(g_return_play_video_page == 2)
            	 {
            	 	   g_is_in_play_page = 1;
            	 	   l_parent_callback({type:"destroy_history_page"});
            	 	   g_return_play_video_page = "";
            	 	   jQuery("#play_page_return").show();
            	     jQuery("#history_return").hide();
            	 }
            	 else if(g_return_play_video_page == 3)
            	 {
                    mx("#main_page").style.paddingTop="89px";
            	 	   l_parent_callback({type:"destroy_box_device_page"});
            	 	   jQuery("#enter_setting").hide();
                   jQuery("#enter_setting_img").hide();
                   jQuery("#history_return").hide();
                   jQuery("#device_list_character").show();
                   jQuery("#add_devices_menu").show();
                   jQuery("#set_menu_img").show();
                   jQuery("#play_page_return").show();
                   mx("#box_title").parentNode.removeChild(mx("#box_title"));
            	 	   g_return_play_video_page = "";
            	 }
            	 else if(g_return_play_video_page == 4)
            	 {
            	 	   l_parent_callback({type:"destroy_box_device_history_page"});
            	 	   jQuery("#vimtag_calendar_choice").hide();
                   jQuery(".ui-datepicker-trigger").css("display","none");
                   jQuery("#vimtag_filter_calendar_gap").hide();
                   jQuery("#vimtag_filter").hide();
                   jQuery("#vimtag_filter_img").hide();
                   jQuery("#enter_setting").show(); 
                   jQuery("#enter_setting_img").show();
                   jQuery("#main_title_box_return").hide();
                   jQuery("#main_title_body_mid").hide();
                   jQuery("#main_title_body_left").show();

            	 	   g_return_play_video_page = 3;
            	 }
            	 else if(g_return_play_video_page == 5)
            	 {
            	 	   l_parent_callback({type:"destroy_box_device_video_page"});
            	 	   jQuery("#vimtag_calendar_choice").show();
                   jQuery(".ui-datepicker-trigger").css("display","block");
                   jQuery("#vimtag_filter_calendar_gap").show();
                   jQuery("#vimtag_filter").show();
                   jQuery("#vimtag_filter_img").show();
                   // jQuery("#main_title_body_mid").show();
            	 	   g_return_play_video_page = 4;
            	 	   g_is_in_playback_page = 0;
            	 }
            	 else if(g_return_play_video_page == 6)
            	 {
            	 	   l_parent_callback({type:"destroy_box_setting_page"});
            	 	   g_return_play_video_page = 3;
                       jQuery("#history_return").hide();
                       jQuery("#box_title").show();
                       jQuery("#return_devices_list").show();
            	 }
            };

            l_dom_set_menu_img.onclick = function(){
               jQuery("#menu_box_sidebar").toggle();
               jQuery("#modify_admin_pwd").hide();
               jQuery("#modify_guest_pwd").hide();
            };

            l_dom_about_web_version.onclick = function(){
            	 system_pop_confirm_box({alert:true,str:mcs_software_version+":"+g_web_client_v, callback_func:function(){}});
            };

            l_dom_modify_account_admin_pwd.onclick = function(){
               jQuery("#modify_admin_pwd").show();
               jQuery("#menu_box_sidebar").hide();
            };

            l_dom_modify_account_guset_pwd.onclick = function(){
               jQuery("#modify_guest_pwd").show();
               jQuery("#menu_box_sidebar").hide();
            };
            //账号管理员密码修改
            l_dom_admin_pw_btn.onclick = function(){
                var reg;
                if(!l_dom_admin_pw || l_dom_admin_pw.value == mcs_old_password)
                {
                	  msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
                    return;
                }
                if(!l_dom_admin_pw1.value || l_dom_admin_pw1.value == mcs_new_password)
                {
                	  msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
                    return;
                }
                else
                {
                    reg = /^\S{6,20}$/;
                    if(!reg.exec(l_dom_admin_pw1.value))
                    {
                    	  msg_tips({msg:mcs_password_demand + ".", type:"error", timeout:3000});
                        return;
                    }
                }
                if(!l_dom_admin_pw2.value || l_dom_admin_pw2.value == mcs_confirm_new_password)
                {
                	  msg_tips({msg:mcs_password_empty + ".", type:"error", timeout:3000});
                    return;
                }
                if(l_dom_admin_pw1.value != l_dom_admin_pw2.value)
                {
                	  msg_tips({msg:mcs_two_password_input_inconsistent + ".", type:"error", timeout:3000});
                    return;
                }
                ms.send_msg("account_passwd_set",{old_pass:l_dom_admin_pw.value,new_pass:l_dom_admin_pw1.value,is_guest:0},{is_guest:0},user_passwd_set_ack);
            };
            //账号访客密码修改
            l_dom_guest_pw_btn.onclick = function(){
                if(!l_dom_guest_pw1.value || l_dom_guest_pw1.value == mcs_old_password)
                {
                	  msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
                    return;
                }
                if(l_dom_guest_pw1.value != l_dom_guest_pw2.value)
                {
                	  msg_tips({msg:mcs_two_password_input_inconsistent + ".", type:"error", timeout:3000});
                    return;
                }
                ms.send_msg("account_passwd_set",{old_pass:l_dom_guest_pw1.value,new_pass:l_dom_guest_pw2.value,is_guest:1},{is_guest:1},user_passwd_set_ack);
            };
            
            l_dom_quit_account.onclick = function(){
                localStorage.removeItem("remember_msg_info");
                location.reload(); 
                // mcloud_agent.sign_out({type:obj.type, sn:g_select_device_ipc},function(msg,ref){
                //          if( msg.result == "" || msg.result == "accounts.lid.invalid")//当修改管理密码之后，退出到登陆界面
                //          {
                //             //没有判断返回
                //             ms.ctrl({type:"logout",data:ref});
                //          }
                // });
            };

            l_dom_admin_show_pw.onfocus = function() {
               this.style.display = "none";
               mx("#admin_pw").style.display = "inline";
               mx("#admin_pw").focus();
            };
            l_dom_admin_pw.onfocus = function() {
               this.select();
            };
            l_dom_admin_pw.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#admin_show_pw").style.display = "inline";
               }
            };

            l_dom_admin_show_pw1.onfocus = function() {
               this.style.display = "none";
               mx("#admin_pw1").style.display = "inline";
               mx("#admin_pw1").focus();
            };
            l_dom_admin_pw1.onfocus = function() {
               this.select();
            };
            l_dom_admin_pw1.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#admin_show_pw1").style.display = "inline";
               }
            };

            l_dom_admin_show_pw2.onfocus = function() {
               this.style.display = "none";
               mx("#admin_pw2").style.display = "inline";
               mx("#admin_pw2").focus();
            };
            l_dom_admin_pw2.onfocus = function() {
               this.select();
            };
            l_dom_admin_pw2.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#admin_show_pw2").style.display = "inline";
               }
            };

            l_dom_guest_show_pw.onfocus = function() {
               this.style.display = "none";
               mx("#guest_pw").style.display = "inline";
               mx("#guest_pw").focus();
            };
            l_dom_guest_pw.onfocus = function() {
               this.select();
            };
            l_dom_guest_pw.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#guest_show_pw").style.display = "inline";
               }
            };

            l_dom_guest_show_pw1.onfocus = function() {
               this.style.display = "none";
               mx("#guest_pw1").style.display = "inline";
               mx("#guest_pw1").focus();
            };
            l_dom_guest_pw1.onfocus = function() {
               this.select();
            };
            l_dom_guest_pw1.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#guest_show_pw1").style.display = "inline";
               }
            };

            l_dom_guest_show_pw2.onfocus = function() {
               this.style.display = "none";
               mx("#guest_pw2").style.display = "inline";
               mx("#guest_pw2").focus();
            };
            l_dom_guest_pw2.onfocus = function() {
               this.select();
            };
            l_dom_guest_pw2.onblur = function() {
               if(this.value == "")
               {
                  this.style.display = "none";
                  mx("#guest_show_pw2").style.display = "inline";
               }
            };
            l_dom_vimtag_load_plugs.onclick = function(){
               l_dom_net_setting.ctrl({type:"option_set"});
            };

            jQuery(document).bind("click", function(event){
            	 var e = event || window.event;
               var elem = e.srcElement||e.target;

               while(elem)
               {
                  if(elem.id=="set_menu_img"||elem.id=="modify_admin_pwd"||elem.id=="modify_account_admin_pwd"||elem.id=="modify_guest_pwd"||elem.id=="modify_account_guset_pwd"||
                  elem.id=="event_button"||elem.id=="everything_button"||elem.id=="onehour_button"||elem.id=="halfhour_button"||elem.id=="fiveminute_button"||elem.id=="filter_box_border"||
                  elem.id=="filter_condite_box"||elem.id=="box_device_video_list"||elem.id=="vimtag_filter"||elem.id=="vimtag_filter_img")
                  {
                      return;
                  }
                  elem = elem.parentNode;
               }
               jQuery("#menu_box_sidebar").hide();
               jQuery("#modify_admin_pwd").hide();
               jQuery("#modify_guest_pwd").hide();
               jQuery("#box_device_video_list").hide();
            });
            
            l_me.ctrl = function(obj){
               switch(obj.type){
                  case "update":
                     {
                     	  //mx("#add_devices_menu").style.left = g_distance_to_edge + "px";
                     	  mx("#return_devices_list").style.left = g_distance_to_edge + "px";
                     	  mx("#play_page_menu").style.left = g_distance_to_edge + "px";
                     	  mx("#set_menu_img").style.right = g_distance_to_edge + "px";
                     	  mx("#menu_box_sidebar").style.marginRight = g_distance_to_edge + "px";
                     	  mx("#modify_admin_pwd").style.marginRight = g_distance_to_edge + "px";
                     	  mx("#modify_guest_pwd").style.marginRight = g_distance_to_edge + "px";
                     	  mx("#set_btn_menu").style.right = g_distance_to_edge + "px";
                     	  break;
                     }
               }
            }
            
            l_dom_net_setting=new net_setting_class({parent:l_me_parent, on_event:function(obj){return on_event(obj);}});
    }
    function class_vimtag_cntr_box(obj) {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_device_list_box_obj,
            l_dom_vimtag_device_list_box,
            l_add_devices_box_obj,
            l_dom_create_setting_page,
            l_dom_device_setting_page,
            l_home_cntr_obj,
            l_dom_add_device_guide_finish,
            l_dom_change_password,
            l_dom_setting_wifi,
            l_dom_add_device_guide_finish,
            l_dom_device_setting_page_center;

            l_dom_vimtag_device_list_box = dom_create_child(l_me_parent, "div", "vimtag_device_list_box");

            l_dom_vimtag_device_list_box[s_style][s_cssText] ="margin-left:" + (l_me_parent[s_offsetWidth] - 1256)/2 + "px;margin-right:" + (l_me_parent[s_offsetWidth] - 1256)/2 + "px;";
           l_dom_vimtag_device_list_box[s_style][s_cssText] ="margin-left:" + g_distance_to_edge + "px;margin-right:" + g_distance_to_edge + "px;";

            l_device_list_box_obj = new class_vimtag_device_list_box({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetwidth:l_me_parent.offsetWidth});            

            var width = l_me_parent.offsetWidth, height = l_me_parent.offsetHeight;
            
		        function class_add_devices_box(obj) {
		    	    var l_me_parent = obj.parent,
		    	      l_me = this,
		    	      l_parent_callback = obj.on_event,
		    	      l_dom_add_devices_box,
		    	      l_dom_add_devices_box_body,
		    	      l_dom_add_devices_box_menu,
		    	      l_dom_devices_id,
		            l_dom_devices_show_pwd,
		            l_dom_devices_pwd,
		            l_dom_forgot_devices_password,
		            l_dom_reset_ipc,
		            l_dom_cancel_reset_page_button,
		            l_dom_forgot_devices_password,
		            l_dom_add_devices_button,
		            l_dom_setting_wifi,
		            l_dom_add_device_guide_finish,
		            l_dom_guide_begin_page,
		            l_dom_guide_modify_password_page,
		            l_dom_guide_config_wifi_page,
		            l_dom_guide_finish_page;
		
		            l_me_parent[s_innerHTML] = "";
		            l_dom_add_devices_box = dom_create_child(l_me_parent, "div", "add_devices_box");
		            l_dom_add_devices_box_menu = dom_create_child(l_dom_add_devices_box, "div", "add_devices_box_menu");
		            l_dom_add_devices_box_body = dom_create_child(l_dom_add_devices_box, "div", "add_devices_box_body");
		
		            var width = l_me_parent.offsetWidth, height = obj.offsetHeight;
		            l_dom_add_devices_box[s_style][s_cssText] = "width:" + width+ "px;height:556px;margin-top:10px;background:#ffffff;overflow:hidden;";
		            l_dom_add_devices_box_menu[s_style][s_cssText] = "width:" + width + "px;height:46px;";
		            l_dom_add_devices_box_body[s_style][s_cssText] = "width:" + width + "px;height:510px;";
		            
		            var guide_menu_width = (width -8)/4;
		            l_dom_add_devices_box_menu[s_innerHTML] =
		            "<div>"
		            +          "<div id='guide_begin_page' class='add_devices_box_menu_pitch'>"+ "1、" + mcs_add_device +"</div>"
		            +          "<div id='guide_modify_password_page' class='add_devices_box_menu'>"+ "2、" + mcs_modify_password +"</div>"
		            +          "<div id='guide_config_wifi_page' class='add_devices_box_menu'>"+ "3、" + mcs_action_config_wifi +"</div>"
		            +          "<div id='guide_finish_page' class='add_devices_box_menu'>"+ "4、" + mcs_finish +"</div>"
		            +"</div>";
		
		            l_dom_add_devices_box_body[s_innerHTML] =
		            "<div>"
		            +          "<div id='add_devices_id_pwd'>"
		            +             "<div id='add_devices_id'>"
		            +                "<div class='add_devices_id_img' style='margin-left:10px;margin-top:12px;margin-right:10px;position:absolute;'></div>"
		        	  +                "<input class='vimtag_standard_inputs_normal' id='devices_id' type='text' value='" + mcs_input_device_id + "' style='margin-top:2px;margin-left:41px;'>"
		        	  +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"
		        	  +             "</div>"
		        	  +             "<div id='add_devices_pwd'>"
		        	  +                "<div class='vimtag_password_img' style='margin-left:10px;margin-top:12px;margin-right:10px;position:absolute;'></div>"
		        	  +                "<input class='vimtag_standard_inputs_normal' id='devices_show_pwd' type='text' value='" + mcs_password + "' style='margin-top:2px;width:220px;margin-left:42px;'>"
		        	  +                "<input class='vimtag_standard_inputs_normal' id='devices_pwd' type='password' style='display:none;width:220px;margin-top:2px;margin-left:42px;'>"
		        	  +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"
		        	  +             "</div>"
		        	  +             "<button class='vimtag_btn' id='add_devices_button'>" + mcs_add + "</button>"
		        	  +             "<div>"
		        	  +                "<span id= 'forgot_devices_password' style='color:#00a6ba;font-size:14px;cursor:pointer;'>" + mcs_forgot_your_password + "?" + "</span>"
		        	  +             "</div>"
		            +          "</div>"
		            +       "<div id='reset_ipc'>"
		            +          "<div id='reset_ipc_img' style='margin-bottom:24px;'>"
		            +             "<img src='./oem/vimtag_v2n/imgs/reset_ipc.png'></img>"
		            +          "</div>"
		            +          "<div style='margin-bottom:44px'><span>" + mcs_wifi_config_third + "</span></div>"
		        	  +             "<button class='vimtag_btn' id='cancel_reset_page_button'>" + mcs_close + "</button>"
		            +       "</div>"
		            +"</div>";
		
		            l_dom_add_devices_id_pwd = mx("#add_devices_id_pwd");
		            l_dom_devices_id = mx("#devices_id");
		            l_dom_devices_show_pwd = mx("#devices_show_pwd");
		            l_dom_devices_pwd = mx("#devices_pwd");
		            l_dom_forgot_devices_password = mx("#forgot_devices_password");
		            l_dom_reset_ipc = mx("#reset_ipc");
		            l_dom_cancel_reset_page_button = mx("#cancel_reset_page_button");
		            l_dom_forgot_devices_password = mx("#forgot_devices_password");
		            l_dom_add_devices_button = mx("#add_devices_button");
		            l_dom_guide_begin_page = mx("#guide_begin_page");
		            l_dom_guide_modify_password_page = mx("#guide_modify_password_page");
		            l_dom_guide_config_wifi_page = mx("#guide_config_wifi_page");
		            l_dom_guide_finish_page = mx("#guide_finish_page");
		
		            l_dom_add_devices_id_pwd[s_style][s_cssText] = "width:290px;margin-left:" + (width-290)/2 + "px;margin-top:130px;text-align:center;";
		            l_dom_reset_ipc[s_style][s_cssText] = "width:350px;margin-left:" + (width-350)/2 + "px;margin-top:20px;";
		            l_dom_guide_begin_page[s_style][s_cssText] = "width:"+ guide_menu_width +"px;";	
		            l_dom_guide_modify_password_page[s_style][s_cssText] = "width:"+ guide_menu_width +"px;";	
		            l_dom_guide_config_wifi_page[s_style][s_cssText] = "width:"+ guide_menu_width +"px;";	
		            l_dom_guide_finish_page[s_style][s_cssText] = "width:"+ guide_menu_width +"px;";		            
		
		            jQuery("#reset_ipc").hide();
		            //修改密码界面
		            function class_change_password(obj){
		               var l_me_parent = obj.parent,
		                   l_me = this,		                 
		                   l_parent_callback,
		                   l_dom_device_change_pwd,
		                   l_dom_input_new_pwd,
		                   l_dom_input_devices_show_pwd,
		                   l_dom_input_devices_pwd,
		                   l_dom_input_new_pwd_again,
		                   l_dom_input_devices_show_pwd_again,
		                   l_dom_input_devices_pwd_again,
		                   l_dom_change_pwd_button,
		                   l_dom_change_pwd_btn;
		
		                   l_me_parent[s_innerHTML] =
		                   "<div id='device_change_pwd'>"
		                   +             "<div id='change_pwd_warn'>"
		                   +                "<div style='margin-bottom:16px;'><span>" + mcs_device_id + ":" + obj.sn + "</span></div>"
		                   +                "<div style='margin-bottom:16px;'><span>" + mcs_prompt_modify_passwd + "</span></div>"
		                   +             "</div>"
		                   +             "<div id='input_new_pwd'>"
		        	         +                "<div class='vimtag_password_img' style='margin-left:10px;margin-top:12px;margin-right:10px;float:left;'></div>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_devices_show_pwd' type='text' value='" + mcs_input_new_pass + "' style='margin-top:2px;width:220px;'>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_devices_pwd' type='password' style='display:none;width:220px;margin-top:2px;'>"
					        	   +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"
					        	   +             "</div>"
					        	   +             "<div id='input_new_pwd_again'>"
		        	         +                "<div class='vimtag_password_img' style='margin-left:10px;margin-top:12px;margin-right:10px;float:left;'></div>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_devices_show_pwd_again' type='text' value='" + mcs_input_new_pass_again + "' style='margin-top:2px;width:220px;'>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_devices_pwd_again' type='password' style='display:none;width:220px;margin-top:2px;'>"
					        	   +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"
					        	   +             "</div>"
					        	   +             "<button class='vimtag_btn' id='change_pwd_btn'>" + mcs_apply + "</button>"
		                   +"</div>";
		
		                   l_dom_device_change_pwd = mx("#device_change_pwd");
		                   l_dom_input_new_pwd = mx("#input_new_pwd");
		                   l_dom_input_devices_show_pwd = mx("#input_devices_show_pwd");
		                   l_dom_input_devices_pwd = mx("#input_devices_pwd");
		                   l_dom_input_new_pwd_again = mx("#input_new_pwd_again");
		                   l_dom_input_devices_show_pwd_again = mx("#input_devices_show_pwd_again");
		                   l_dom_input_devices_pwd_again = mx("#input_devices_pwd_again");
		                   //l_dom_change_pwd_button = mx("#change_pwd_button");
		                   l_dom_change_pwd_btn = mx("#change_pwd_btn");
		 
		                   mx("#guide_modify_password_page").className = "add_devices_box_menu_pitch";
		                   var width = l_me_parent.offsetWidth, height = l_me_parent.offsetHeight;
		                   l_dom_device_change_pwd[s_style][s_cssText] = "width:290px;margin-left:" + (width-290)/2 + "px;margin-top:30px;";
		                   
		                   function ccm_pwd_set()
				               {
				                       if(l_dom_input_devices_pwd.value =="")
				                       {
				                       	  msg_tips({msg:mcs_blank_password+ ".", type:"error", timeout:3000});		                          
				                          return -1;
				                       }
				                       else if(l_dom_input_devices_pwd.value.length<6)
				                       {
				                       	  msg_tips({msg:mcs_password_demand+ ".", type:"error", timeout:3000});				                         
				                          return -1;
				                       }
				                       else if(l_dom_input_devices_pwd_again.value=="")
				                       {
				                       	  msg_tips({msg:mcs_blank_password+ ".", type:"error", timeout:3000});				                        
				                          return-1;
				                       }
				                       else if(l_dom_input_devices_pwd.value!=l_dom_input_devices_pwd_again.value)
				                       {
				                       	  msg_tips({msg:mcs_two_password_input_inconsistent+ ".", type:"error", timeout:3000});
				                          return -1;
				                       }
				                       ms.send_msg("dev_passwd_set",{sn:obj.sn,old_pass:obj.pass,new_pass:l_dom_input_devices_pwd.value,is_guest:0},{sn:obj.sn,pass:l_dom_input_devices_pwd.value},ccm_pwd_set_ack);
				
				               }
				               function ccm_pwd_set_ack(msg,ref)
				               {
				                   if(!l_me_parent) return;			
				                   if(msg && msg.result == "")
				                   {
				                        ms.send_msg("dev_add",{sn:ref.sn,pass:ref.pass},{sn:ref.sn,pass:ref.pass},
				                              function(type, msg, ref){
				                              	     ms.send_msg("sign_in",{srv:g_server_device,user:msg.sn, password:msg.pass},{user:msg.sn, password:msg.pass},on_cacs_login_ack);
				                   											function on_cacs_login_ack(msg,ref)
				    			   														{
				                 													if(msg && msg.result=="")
				                 													{
				                 														remove_event();
				                 														mx("#guide_modify_password_page").className = "add_devices_box_menu";
				    				       													l_dom_setting_wifi = new class_setting_wifi({parent:l_dom_add_devices_box_body,on_event:obj.on_event});
				    					   													}
				    					   												}
				                              });
				                   }
				                   else if(msg.result == "accounts.pass.invalid")
				                   {
				                   	   msg_tips({msg:mcs_invalid_password+ ".", type:"error", timeout:3000});
				                   }
				                   else if(msg.result == "accounts.user.offline")
				                   {
				                   	   msg_tips({msg:mcs_offline+ ".", type:"error", timeout:3000});
				                   }
				               }
		                   
					             l_dom_input_devices_show_pwd.onfocus = function() {
					                 this.style.display = "none";
					                 mx("#input_devices_pwd").style.display = "inline";
					                 mx("#input_devices_pwd").focus();
					             };
					             l_dom_input_devices_pwd.onfocus = function() {
					                 this.select();
					             };
					             l_dom_input_devices_pwd.onblur = function() {
					                 if(this.value == "")
					                 {
					                     this.style.display = "none";
					                     mx("#input_devices_show_pwd").style.display = "inline";
					                 }
					             };
					             l_dom_input_devices_show_pwd_again.onfocus = function() {
					                 this.style.display = "none";
					                 mx("#input_devices_pwd_again").style.display = "inline";
					                 mx("#input_devices_pwd_again").focus();
					             };
					             l_dom_input_devices_pwd_again.onfocus = function() {
					                 this.select();
					             };
					             l_dom_input_devices_pwd_again.onblur = function() {
					                 if(this.value == "")
					                 {
					                     this.style.display = "none";
					                     mx("#input_devices_show_pwd_again").style.display = "inline";
					                 }
					             };
					             l_dom_change_pwd_btn.onclick = function(){
					             	   ccm_pwd_set();
					             };
					             
					             function remove_event(){
					                 l_dom_input_devices_show_pwd.onfocus = "";
					                 l_dom_input_devices_pwd.onfocus = "";
					                 l_dom_input_devices_pwd.onblur = "";
					                 l_dom_input_devices_show_pwd_again.onfocus = "";
					                 l_dom_input_devices_pwd_again.onfocus = "";
					                 l_dom_input_devices_pwd_again.onblur = "";
					                 l_dom_change_pwd_btn.onclick = "";
					                 l_me_parent[s_innerHTML] = "";
				                 	 l_me_parent = null;
					             }
					             
					             l_me.ctrl = function(obj)
					             {
					             		 switch(obj.type)
					             		 {
					             		 		case "update":
					             		 		   {
					             		 		   		var width = l_me_parent.offsetWidth;
					             		 		   		l_dom_device_change_pwd.style.marginLeft = (width-290)/2 + "px";
					             		 		   		break;
					             		 		   } 
					             		 }
					             }					           
		            }
		            //设置wifi界面
		            function class_setting_wifi(obj){
		               var l_me_parent = obj.parent,
		                   l_me = this,
		                   l_parent_callback = obj.on_event,
		                   l_dom_choice_wifi_list,
		                   l_dom_choice_wifi,
		                   l_dom_select_wifi_network,
		                   l_dom_wifi_refresh_btn,
		                   l_dom_input_wifi_pwd,
		                   l_dom_input_wifi_show_password,
		                   l_dom_input_wifi_password,
		                   l_dom_wifi_apply_btn,
		                   l_dom_wifi_skip_btn,
		                   now_ifs={},
		                   now_net_info={},
		                   l_dom_set_wifi;
		                   
		                   l_dom_set_wifi = dom_create_child(l_me_parent, "div", "set_wifi_guide");
		                   l_dom_set_wifi[s_innerHTML] =
		                   "<div id='choice_wifi_list'>"
		                   +             "<div id='choice_wifi'>"                  
		        	         +                "<div class='vimtag_password_img' style='margin-left:10px;margin-top:12px;margin-right:10px;float:left;'></div>"
		                   +                "<select id='select_wifi_network' style='float:left;width:220px;height:30px;border:0px;background-color:#f5f5f5;'></select>"
		                   +                "<div id='wifi_refresh_btn' style='line-height:44px;float:right;color:#000000;font-size:14px'>" + mcs_refresh + "</div>"
		                   +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"      
					        	   +             "</div>"
					        	   +             "<div id='input_wifi_pwd'>"
		        	         +                "<div class='vimtag_password_img' style='margin-left:10px;margin-top:12px;margin-right:10px;float:left;'></div>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_wifi_show_password' type='text' value='" + mcs_input_wifi_password + "' style='margin-top:2px;width:220px;'>"
		        	         +                "<input class='vimtag_standard_inputs_normal' id='input_wifi_password' type='password' style='display:none;width:220px;margin-top:2px;'>"
					        	   +                "<div class='vimtag_login_input' style='margin-bottom:16px;'></div>"
					        	   +             "</div>"
					        	   +             "<button class='vimtag_btn' id='wifi_apply_btn'>" + mcs_apply + "</button>"
					        	   +             "<button class='vimtag_btn' id='wifi_skip_btn'>" + mcs_action_skip + "</button>"
		                   +"</div>";
		
		                   l_dom_choice_wifi_list = mx("#choice_wifi_list");
		                   l_dom_choice_wifi = mx("#choice_wifi");
		                   l_dom_select_wifi_network = mx("#select_wifi_network");
		                   l_dom_wifi_refresh_btn = mx("#wifi_refresh_btn");
		                   l_dom_input_wifi_pwd = mx("#input_wifi_pwd");
		                   l_dom_input_wifi_show_password = mx("#input_wifi_show_password");
		                   l_dom_input_wifi_password = mx("#input_wifi_password");
		                   l_dom_wifi_apply_btn = mx("#wifi_apply_btn");
		                   l_dom_wifi_skip_btn = mx("#wifi_skip_btn");
				                  
		                   var width = l_me_parent.offsetWidth, height = l_me_parent.offsetHeight;
		                   l_dom_choice_wifi_list[s_style][s_cssText] = "width:350px;margin-left:" + (width-290)/2 + "px;margin-top:30px;";
		                   mx("#guide_config_wifi_page").className = "add_devices_box_menu_pitch";
		                   //wifi刷新 返回列表
								       function ccm_get_wifi_list_response(msg,ref)
								       {
								            if(!l_me_parent) return;
								            var i, length, inner_html = "";
								            if(msg && msg.result=="")
								            {
								            	  if(msg.networks)								            	
								                {
								                	  for(var i=0;i<msg.networks.length;i++)
				                    	      {
				                    	          if(msg.networks[i].token=="ra0")
				                    	          {
				                    	          	  now_ifs=msg.networks[i];
																            var msg_wifi_list=msg.networks[1].wifi_client.ap_list;
												                    inner_html += "<option>" + mcs_not_select + "</option>";
												                    length = msg_wifi_list.length;
												                    for(i = 0; i < length; ++i)
												                    {
												                    	  if(msg_wifi_list[i].ssid == "") continue;
												                        signal_level = Math.floor(msg_wifi_list[i].quality / 20);
												                        signal_level = (signal_level >= 4 ? 4 : signal_level);
												                        if(msg_wifi_list[i].connect)
												                        {
												                            inner_html += "<option value='"+ msg_wifi_list[i].ssid  +"' selected='selected' front_img='./imgs/device_status_green.png' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + msg_wifi_list[i].ssid + "</option>";
												                        }
												                        else
												                        {
												                            inner_html += "<option value='" + msg_wifi_list[i].ssid + "' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + msg_wifi_list[i].ssid + "</option>";
												                        }
												                    }
												                    jQuery(l_dom_select_wifi_network).html(inner_html);
												                }
												            }
								                }
								                else
								                {
								                    msg_tips({msg:"info:CcmGetWifiListResponse return WifiList is null in class_options_network.", type:"error", timeout:5000});
								                }
								            }
								       }
								       
											 function CcmSetNetworkInfoRequest()
						           {
						                now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
						           	    now_net_info.ifs["phy"] = {conf:{mode:"wificlient"}};
						    				    now_net_info.ifs["wifi_client"] ={conf:{enabled:1,ssid:mx("#select_wifi_network").value,key:l_dom_input_wifi_password.value}};
						    						ms.send_msg("net_set",{sn:obj.sn,networks:now_net_info.ifs,dns:now_net_info.dns},{sn:obj.sn},ccm_set_network_info_response);
						
						           }
						           function ccm_set_network_info_response(msg,ref)
						           {
						           	    if(msg && msg.result == "")
						                {
						                	 var wifi_con_time;
						                	    set_wifi_con=1;
						                	 	  ccm_get_network_info_request();
						
						                	 setTimeout(function(){
						                	  	set_wifi_con=0;   
						                	  	msg_tips({msg:mcs_failed_to_set_the, type:"error", timeout:3000});
						                	 },70000);
						                }
						                else if(msg.result == "accounts.user.offline")
						                {
						                     set_wifi_con=0;
						                	  	if(l_dom_Connecting_div)
						                	  	{ 
						                	  		   msg_tips({msg:mcs_failed_to_set_the, type:"error", timeout:3000});
						                	    }
						                }
						           }
		                   
		                   function ccm_get_network_info_request()
				               {
				
				                    ms.send_msg("net_get",{sn:obj.sn,force_scan:0,filter:"all"},{ip:g_server_device, sn:obj.sn},ccm_get_network_info_response);
				
				               }
				               function ccm_get_network_info_response(msg, ref)
				               {
				               	    if(msg && msg.result == "")
				                    {
				                    	  if(msg.networks )
				                    	  {
				                    	      for(var i=0;i<msg.networks.length;i++)
				                    	      {
				                    	          if(msg.networks[i].token=="ra0")
				                    	          {				                    	          	    
				                    	             	if(msg.networks[i].enabled==1 && msg.networks[i].wifi_client && msg.networks[i].wifi_client.info.stat=="ok")
				                    	             	{
				                    	             		  l_dom_add_devices_box_body[s_innerHTML] = "";
				                    	                  if(obj.old_page=="set_pass" &&set_wifi_con==1)
				                    	                  {
				                    	                  	  mx("#guide_config_wifi_page").className = "add_devices_box_menu";
				                    	                  	  l_dom_add_device_guide_finish = new  class_add_device_guide_finish({parent:l_dom_add_devices_box_body,on_event:obj.on_event, sn:ref.sn});
				                    	                      //net_cable_page({option:"is_configured_wifi",Completion_status:3});
				                    	                  }
				                    	                  else if(obj.old_page=="add_device" &&set_wifi_con==1)
				                    	                  {
				                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:4});
				                    	                  }
				                    	                  else if(obj.old_page=="set_pass" && set_wifi_con==0)
				                    	                  {
				                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:2});
				                    	                  }
				                    	                  else
				                    	                  {
				                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:1});
				                    	                  }				                    	                 
				                    	             	}
				                    	             	else if(msg.networks[i].wifi_client && msg.networks[i].wifi_client.ap_list && !set_wifi_con )
				                    	              {
				                    	                  var iner_htm="";
				                    	              	  for(var j=0;j<msg.networks[i].wifi_client.ap_list.length;j++)
				                    	              	  {
				                    	              	     iner_htm+="<option style='color:white;' value='"+msg.networks[i].wifi_client.ap_list[j].ssid+"'>"+msg.networks[i].wifi_client.ap_list[j].ssid+"</option>"	;
				                    	              	  }
				
				                										  jQuery("#select_ssid").html(iner_htm);
				                                      jQuery(l_me_parent).show();
				                										  jQuery(select_ssid).tzSelect(null,2);
				
				                										  l_dom_device_con[s_innerHTML]="";
				                    	              }
				                    	              else if(set_wifi_con==1)
				                    	              {
				                										    if(!l_me_parent) return;
				                											  setTimeout(function(){ccm_get_network_info_request("all");},3000);
				                    	              }
				                										else if(set_wifi_con==0)
				                										{
				                										  if(obj.old_page=="add_device")
				                										  {
				                										     net_cable_page({option:"is_configured_wifi",Completion_status:1});
				                										  }else if(obj.old_page=="set_pass")
				                										  {
				                                    	    net_cable_page({option:"is_configured_wifi",Completion_status:2});
				                										  }
				                									  }
				                    	          }
				                    	      }
				                    	  }
				                    }
				               }		                   
		                   
		                   l_dom_wifi_refresh_btn.onclick = function(){
		                       ms.send_msg("net_get",{sn:g_select_device_ipc,force_scan:0,filter:"wifi_client"},null,ccm_get_wifi_list_response);
		                   };
		
		                   l_dom_wifi_apply_btn.onclick = function(){
		                       CcmSetNetworkInfoRequest(obj);
		                   };
		
		                   l_dom_wifi_skip_btn.onclick = function(){
		                   	   l_dom_add_devices_box_body[s_innerHTML] = "";
		                   	   mx("#guide_config_wifi_page").className = "add_devices_box_menu";
		                   	   l_dom_add_device_guide_finish = new  class_add_device_guide_finish({parent:l_dom_add_devices_box_body,on_event:obj.on_event, sn:obj.sn});
		                   };
		
		                   l_dom_input_wifi_show_password.onfocus = function() {
					                 this.style.display = "none";
					                 mx("#input_wifi_password").style.display = "inline";
					                 mx("#input_wifi_password").focus();
					             };
					             l_dom_input_wifi_password.onfocus = function() {
					                 this.select();
					             };
					             l_dom_input_wifi_password.onblur = function() {
					                 if(this.value == "")
					                 {
					                     this.style.display = "none";
					                     mx("#input_wifi_show_password").style.display = "inline";
					                 }
					             };
		
					             function remove_event()
					             {
					             	   l_me_parent[s_innerHTML] = "";
					             	   l_dom_input_wifi_password.onblur = "";
					             	   l_dom_input_wifi_password.onfocus = "";
					             	   l_dom_input_wifi_show_password.onfocus = "";
					             	   l_dom_wifi_skip_btn.onclick = "";
					             	   l_dom_wifi_apply_btn.onclick = "";
					             	   l_dom_wifi_refresh_btn.onclick = "";
					             }
		                   l_dom_wifi_refresh_btn.click();
		                   
		                   l_me.ctrl = function(obj)
		                   {
		                   		 switch(obj.type)
		                   		 {
		                   		 		case "update":
		                   		 		   {
		                   		 		   		var width = l_me_parent.offsetWidth;
		                                l_dom_choice_wifi_list.style.marginLeft = (width-290)/2 + "px";
		                                break;
		                   		 		   }
		                   		 }
		                   }
		            }
		            //完成界面
		            function class_add_device_guide_finish(obj){
		               var l_me_parent = obj.parent,
		                   l_me = this,
		                   l_parent_callback = obj.on_event,
		                   l_dom_guide_finish_button,
		                   l_dom_guide_finish;
		
		                   l_me_parent[s_innerHTML] =
		                   "<div id='guide_finish'>"
		                   +       "<div style='margin-bottom:20px;'>" + mcs_device_id + ":"+ obj.sn +"</div>"
		                   +       "<div style='margin-bottom:20px;'>1、" + mcs_state_add_device_success + "</div>"
					             +       "<button class='vimtag_btn' id='guide_finish_btn'>" + mcs_action_ok + "</button>"
		                   +"</div>";
		                   
		                   l_dom_guide_finish = mx("#guide_finish");
		                   l_dom_guide_finish_button = mx("#guide_finish_btn");
		                   l_dom_guide_finish[s_style][s_cssText] = "margin-left:38%;margin-top:12%;";
		                   
		                   mx("#guide_finish_page").className = "add_devices_box_menu_pitch";
		                   l_dom_guide_finish_button.onclick = function(){
		                       jQuery("#return_devices_list").click();
		                   };
		                   
		                   l_me.ctrl = function(obj){
		                   		 switch(obj.type)
		                   		 {
		                   		 		 case "update":
		                   		 		    {
		                   		 		    	 l_dom_guide_finish.style.marginLeft = 38% + "px";
		                   		 		    	 l_dom_guide_finish.style.marginTop = 12% + "px";
		                   		 		    	 break;
		                   		 		    }
		                   		 }
		                   }
		            }
		            function ccm_add_sub_device_response(msg, ref)
		            {
		                   if(!l_me_parent) return;
		                   if((msg &&  msg.result == "") && (ref.pass !== ""))
		                   {
		                        CcmDiskCtrlRequest({sn:msg.info.sn,pass:ref.pass});
		                   }
		                   else if(msg.result)
		                   {
		                        if(msg.result=="accounts.user.offline")
		                        {
		                             msg_tips({msg:mcs_device_offline, type:"error", timeout:3000});
		                        }
		                        else if(msg.result=="accounts.pass.invalid")
		                        {
		                             msg_tips({msg:mcs_invalid_password + ".", type:"error", timeout:3000});
		                        }
		                        else if(msg.result=="accounts.user.invalid")
		                        {
		                        	   msg_tips({msg:mcs_device_not_exist + ".", type:"error", timeout:3000});
		                        }
		                        else if(msg.result=="ccms.system.err"){
		                             mag_tips({msg:msg.result + ".", type:"error", timeout:3000});
		                        }
		                        else if(msg.result == "subdev.exceed.device")
		                        {
		                        	   msg_tips({msg:mcs_devices_in_the_account_overrun, type:"warning", timeout:3000});
		                        }
		                        else if(msg.result == "subdev.exceed.user")
		                        {
		                        	   msg_tips({msg:mcs_exceed_device, type:"error", timeout:3000});
		                        }
		                        else if(msg.result == "permission.denied")
		                        {
		                        	   msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
		                        }
		                        return -1;
		                   }
		            }
		            function CcmDiskCtrlRequest(obj)
		            {
		                ms.send_msg("sd_set",{sn:g_select_device_ipc,ctrl_type:"",token:"sd",no_conf:1},{sn:obj.sn,pass:obj.pass},ccm_DiskCtrlResponse);
		
		            }
		            function ccm_DiskCtrlResponse(msg, ref)
		            {
		                   if(!l_me_parent) return;
		                   if((msg && msg.result == "")||(msg.result == "ccms.param.invalid") )
		                   {
		                     if(ref.pass.length > 5)
		                      {
		                      	  l_dom_add_devices_box_body[s_innerHTML] = "";
                              mx("#guide_begin_page").className = "add_devices_box_menu";
		                          l_dom_setting_wifi = new class_setting_wifi({parent:l_dom_add_devices_box_body,on_event:obj.on_event, sn:ref.sn});
		                      }
		                      else
		                      {
                              mx("#guide_begin_page").className = "add_devices_box_menu";
		                          l_dom_change_password = new class_change_password({parent:l_dom_add_devices_box_body,on_event:obj.on_event, sn:ref.sn, pass:ref.pass});
		                      }
		                   }
		                   else if(msg.result=="permission.denied")
		                   {
		                      mx("#guide_begin_page").className = "add_devices_box_menu";
		                      l_dom_add_device_guide_finish = new class_add_device_guide_finish({parent:l_dom_add_devices_box_body, on_event:obj.on_event, sn:l_dom_devices_id.value.trim()});
		                   }
		            }
		
		            l_dom_devices_id.onfocus = function() {
		               if(this.value == mcs_input_device_id)
		               {
		                   this.value = "";
		               }
		               this.style.color = "#404040";
		            };
		            l_dom_devices_id.onblur = function() {
		               if(this.value == "")
		               {
		                   this.style.color = "#bdbdbd";
		                   this.value = mcs_input_device_id;
		               }
		               else
		               {
		                   this.style.color = "#404040";
		               }
		            };
		            l_dom_devices_show_pwd.onfocus = function() {
		                this.style.display = "none";
		                mx("#devices_pwd").style.display = "inline";
		                mx("#devices_pwd").focus();
		            };
		            l_dom_devices_pwd.onfocus = function() {
		                this.select();
		            };
		            l_dom_devices_pwd.onblur = function() {
		                if(this.value == "")
		                {
		                    this.style.display = "none";
		                    mx("#devices_show_pwd").style.display = "inline";
		                }
		            };
		            l_dom_add_devices_button.onclick = function(){
		            	  if(l_dom_devices_pwd.value == "amdin")
		                {
		                	 l_dom_devices_pwd.value = "admin";
		                }
				        		var username_value = l_dom_devices_id.value.trim(),
				        		password_value = l_dom_devices_pwd.value.trim();
				       			if(!username_value || username_value == mcs_input_device_id)
				        		{
				         			  msg_tips({msg:mcs_the_user_name_is_empty, type:"error", timeout:3000});
				          		  return;
				        		}
				        		if(!password_value || password_value == mcs_password)
				        		{
				                msg_tips({msg:mcs_the_password_is_empty, type:"error", timeout:3000});
				                return;
				        		}
		                if(g_device_list_obj["sn_"+l_dom_devices_id.value])
										{
						            msg_tips({msg:mcs_device_existed, type:"warning", timeout:3000});
										}else{
		              	 	  ms.send_msg("dev_add",{sn:username_value,pass:password_value},{passlength:password_value.length,sn:username_value,pass:password_value},ccm_add_sub_device_response);
					    			}
		            };
		            l_dom_forgot_devices_password.onclick = function(){
		                jQuery("#add_devices_id_pwd").hide();
		                jQuery("#reset_ipc").show();
		            };
		            l_dom_cancel_reset_page_button.onclick = function(){
		                jQuery("#reset_ipc").hide();
		                jQuery("#add_devices_id_pwd").show();
		            };
		            //销毁添加设备界面
		            function remove_event(){
		                l_dom_cancel_reset_page_button.onclick = "";
		                l_dom_forgot_devices_password.onclick = "";
		                l_dom_add_devices_button.onclick = "";
		                l_dom_devices_pwd.onblur = "";
		                l_dom_devices_pwd.onfocus = "";
		                l_dom_devices_show_pwd.onfocus = "";
		                l_dom_devices_id.onblur = "";
		                l_dom_devices_id.onfocus = "";
		            	  l_dom_vimtag_device_list_box[s_innerHTML] = "";
		            }
		            
		            l_me.ctrl = function(obj)
		            {
		            	  switch(obj.type)
		            	  {
		            	  	  case "destroy":
		            	  	     {
		            	  	  	   remove_event();
		            	  	     }
		            	  	  case "update":
		            	  	     {
		            	  	     	 var width = l_me_parent.offsetWidth;
		            	  	     	 var guide_menu_width = (width -8)/4;
		            	  	     	 l_dom_add_devices_box[s_style][s_width] = width+ "px";
		                         l_dom_add_devices_box_menu[s_style][s_width] = width + "px";
		                         l_dom_add_devices_box_body[s_style][s_width] = width + "px";
		            	  	     	 l_dom_add_devices_id_pwd.style.marginLeft =(width-290)/2 + "px";
		                         l_dom_reset_ipc.style.marginLeft = (width-350)/2 + "px";
		                         l_dom_guide_begin_page[s_style][s_width] = guide_menu_width +"px";	
		                         l_dom_guide_modify_password_page[s_style][s_width] = guide_menu_width +"px";	
		                         l_dom_guide_config_wifi_page[s_style][s_width] = guide_menu_width +"px";	
		                         l_dom_guide_finish_page[s_style][s_width] = guide_menu_width +"px";
		                         if((l_dom_change_password) && (!l_dom_setting_wifi) && (!l_dom_add_device_guide_finish))
		                         {
		                         		l_dom_change_password.ctrl(obj);
		                         }
		                         
		                         if((l_dom_setting_wifi) && (!l_dom_add_device_guide_finish))
		                         {
		                         		l_dom_setting_wifi.ctrl(obj);
		                         }
		                         
		                         if(l_dom_add_device_guide_finish)
		                         {
		                         		l_dom_add_device_guide_finish.ctrl(obj);
		                         }	
		            	  	     }
		            	  }
		            }
		        }
		        
						function class_device_setting_page_center(obj){
				        var l_me_parent = obj.parent,
				            l_me = this,
				            l_parent_callback = obj.on_event,
				            l_dom_create_setting_page_left,
				            l_dom_create_setting_page_right,
				            l_dom_set_option_branch,
				            l_dom_about,
				            l_dom_dev_name,
				            l_dom_admin_pwd,
				            l_dom_visitor_pwd,
				            l_dom_dev_network,
				            l_dom_dev_osd,
				            l_dom_dev_sd_card,
				            l_dom_storage_device_box,
				            l_dom_alert_dev,
				            l_dom_alert_linkage,
				            l_dom_plan,
				            l_dom_dev_date,
				            l_dom_dev_system,
				            l_dom_dev_other,				            
				            l_select_manager_option = "none";
				
				            l_dom_create_setting_page_left = new dom_create_child(l_me_parent, "div", "create_setting_page_left");
				            l_dom_create_setting_page_right = new dom_create_child(l_me_parent, "div", "create_setting_page_right");
				
				            l_dom_create_setting_page_left[s_style][s_cssText] = "width:200px;float:left;margin-left:100px;";
				            l_dom_create_setting_page_right[s_style][s_cssText] = "float:right;margin-top:40px;margin-right:100px;width:480px;";
				
				            l_dom_set_option_branch = new class_device_manager_content({parent:l_dom_create_setting_page_right, on_event:obj.on_event});				            
				
				            l_dom_create_setting_page_left[s_innerHTML] =
				            "<div id='list_left'>"
				            +      "<div id='product_information' class ='list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_about'>"+mcs_about+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id ='device_nickname' class ='list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_name'>"+mcs_nickname+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'password_page' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_admin_pwd'>"+mcs_admin_password+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'guest_password_page' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_visitor_pwd'>"+mcs_guest_password+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'network' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_network'>"+mcs_network+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'OSD' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_osd'>"+mcs_osd+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'SD_card' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_sd_card'>"+mcs_sdcord+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'storage_device' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_storage_device_box'>"+mcs_storage_device+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'alarm' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_alert_dev'>"+mcs_alarm_device+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'alarm_linkage' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_alert_linkage'>"+mcs_alarm_action+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'record_setting' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_plan'>"+mcs_scheduled_recording+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'time_date' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_date'>"+mcs_date_time+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'system_maintain' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_system'>"+mcs_system+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'others' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text' id='lan_dev_other'>"+mcs_others+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +      "<div id = 'del_dev' class = 'list_idle_div'>"
				            +         "<span class = 'list_left_text'>"+mcs_delete_device+"</span>"
				            +         "<div class = 'list_img' ></div>"
				            +      "</div>"
				            +"</div>";
				
						        function change_manager_content(obj)
						        {
						            l_dom_set_option_branch.ctrl({type:"options_destroy", data:{option:l_select_manager_option}});
						            l_select_manager_option = obj.data.option;
						            l_dom_set_option_branch.ctrl({type:"change_manager_content", data:obj.data});
						        }
				
				            var list_items;
				            list_items = jQuery(".list_idle_div");
				            for(var i = 0;i<list_items.length;i++)
				            {
				                list_items[i].onclick = (function() {
				                    for (var i = 0; i < list_items.length; i++)
				                    {
				                        list_items[i].setAttribute("class", "list_idle_div");
				                        if(this == list_items[i])
				                        {
				                            //g_receive_flag = i;
				                        }
				                    }
				                    this.setAttribute("class", "list_active_div");
				                    var id = this.id;
				                    change_manager_content({data:{option:id}});
				                });
				            }
				            list_items[0].onclick();
				            
				            l_me.ctrl = function(obj){
				                switch(obj.type){
				                    case "destroy":
				                       {
				                       	  l_me_parent[s_innerHTML] = "";
				                       	  l_me_parent = null;
				                       	  l_dom_set_option_branch.ctrl({type:"destroy", data:{option:l_select_manager_option}});
				                       	  list_items[0].onclick = "";
				                       	  break;
				                       }
				                }
				            }
				    }
            //生成播放界面
            function create_play_page_box()
            {
            	  l_dom_vimtag_device_list_box = dom_create_child(l_me_parent, "div", "vimtag_device_list_box");
                l_dom_vimtag_device_list_box[s_style][s_cssText] ="margin-left:" + g_distance_to_edge + "px;margin-right:" + g_distance_to_edge + "px;";
                          
            	  l_home_cntr_obj = new class_home_cntr({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetwidth:l_me_parent.offsetWidth, sn:g_select_device_ipc});           	  	     
            }
            
            l_me.ctrl = function(obj)
            {
            	  switch(obj.type)
            	  {
            	  	 case "update":
            	  	     {
            	  	     	  if((!g_is_in_playback_page)&&(mx("#vimtag_device_list_box"))) mx("#vimtag_device_list_box").style.marginLeft = g_distance_to_edge + "px";
            	  	     	  if((!g_is_in_playback_page)&&(mx("#vimtag_device_list_box"))) mx("#vimtag_device_list_box").style.marginRight = g_distance_to_edge + "px";
            	  	     	  if(l_device_list_box_obj && l_device_list_box_obj.ctrl)
            	  	     	  {
            	  	     	  	 l_device_list_box_obj.ctrl(obj);
            	  	     	  }
            	  	     	  if(l_home_cntr_obj && g_is_in_play_page)
            	  	     	  {
            	  	     	  	 l_home_cntr_obj.ctrl(obj);
            	  	     	  }
            	  	     	  if(l_add_devices_box_obj)
            	  	     	  {
            	  	     	  	 l_add_devices_box_obj.ctrl(obj);
            	  	     	  }
            	  	     	  break;
            	  	     }
            	  	 case "create":
            	  	     {  //生成添加设备列表界面
            	  	     	  l_add_devices_box_obj = new class_add_devices_box({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetHeight:l_me_parent.offsetHeight});
            	  	 	      break;
            	  	     }
            	  	 case "create_setting_page":
            	  	     {  //生成设置界面
            	  	     	  if(g_is_playing) l_device_list_box_obj.ctrl({type:"delete_ipc", data:{node_sn:g_select_device_ipc}});
            	  	     	  l_me_parent[s_innerHTML] = "";

            	  	     	  l_dom_device_setting_page = new dom_create_child(l_me_parent, "div", "device_setting_page");

            	  	     	  l_dom_device_setting_page[s_style][s_cssText] = "width:1050px;height:615px;margin-left:" + (width-1050)/2 + "px;background-color:#efeff4;";
            	  	     	  l_dom_device_setting_page_center = new class_device_setting_page_center({parent:l_dom_device_setting_page, on_event:obj.on_event, offsetWidth:width});
            	  	     	  break;
            	  	     }
            	  	 case "change_manager_content":
            	  	     {
            	  	     	  l_dom_set_option_branch.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "create_messages_page":
            	  	     {  //生成历史信息界面
            	  	     	  if(g_is_playing) l_device_list_box_obj.ctrl({type:"delete_ipc", data:{node_sn:g_select_device_ipc}});//结束正在播放的视频
            	  	     	  l_me_parent[s_innerHTML] = "";
            	  	     	  l_dom_device_messages_page = new class_device_messages_page({parent:l_me_parent, on_event:obj.on_event});
            	  	     	  break;
            	  	     }
            	  	 case "destroy_play_page":
            	  	     { 

            	  	     	  if(g_is_playing) l_device_list_box_obj.ctrl({type:"delete_ipc", data:{node_sn:g_select_device_ipc}});//结束正在播放的视频
                            l_device_list_box_obj.ctrl(obj);
                            l_dom_vimtag_device_list_box[s_innerHTML] = ""; //销毁原来的设置或者历史界面
                            l_device_list_box_obj = new class_vimtag_device_list_box({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetwidth:l_me_parent.offsetWidth});
                            l_parent_callback({type:"update"});
                            break;
            	  	     }
            	  	 case "destroy_history_play_page":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "destroy_add_devices_box":
            	  	     {  
            	  	     	  l_add_devices_box_obj.ctrl({type:"destroy"});
            	  	     	  l_device_list_box_obj = new class_vimtag_device_list_box({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetwidth:l_me_parent.offsetWidth});
            	  	     	  break;
            	  	     }
            	  	 case "destroy_setting_page":
            	  	     {
            	  	     	  l_dom_device_setting_page_center.ctrl({type:"destroy"});
            	  	     	  l_me_parent[s_innerHTML] = "";            	  	     	          	  	     	  
            	  	     	  create_play_page_box(); 
            	  	     	  break;
            	  	     }
            	  	 case "destroy_history_page":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  l_me_parent[s_innerHTML] = "";           	  	     	  
            	  	     	  create_play_page_box();         	  	     
            	  	     	  break;
            	  	     }
            	  	 case "destroy_box_device_page":
            	  	     {
                          l_dom_vimtag_device_list_box[s_innerHTML] = ""; //destory the box device page
                          l_device_list_box_obj = new class_vimtag_device_list_box({parent:l_dom_vimtag_device_list_box, on_event:obj.on_event, offsetwidth:l_me_parent.offsetWidth});
            	  	     	  break;
            	  	     }
            	  	 case "destroy_box_device_history_page":
            	  	     {
            	  	     	  l_dom_vimtag_device_list_box[s_innerHTML] = "";
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "destroy_box_device_video_page":
            	  	     {
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "destroy_box_setting_page":
            	  	     {
            	  	     	  l_dom_device_setting_page_center.ctrl({type:"destroy"});
            	  	     	  l_me_parent[s_innerHTML] = "";
            	  	     	  l_dom_vimtag_device_list_box = dom_create_child(mx("#vimtag_cntr_box"), "div", "vimtag_device_list_box");
                          l_dom_vimtag_device_list_box[s_style][s_cssText] ="margin-left:" + g_distance_to_edge + "px;margin-right:" + g_distance_to_edge + "px;";
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "select_video_base_select_date":
            	  	     {
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "reload_box_video_list":
            	  	     {
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "get_alarm_video_list":
            	  	     {
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "get_all_video_list":
            	  	     {
            	  	     	  l_device_list_box_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	 case "refresh_notif_latest":
            	  	     {//mmq每次获取信息后刷新
            	  	     	  break;
            	  	     }
            	  	 default:
            	  	     msg_tips({mag:"error:create the page of add devices is failed.", type:"error", tiomeout:3000});
            	  }
            }
    }
    function class_vimtag_device_list_box(obj) {
    	  var l_dom_vimtag_device_list = mx("#vimtag_device_list_box"),images = new Array(),l_load_images = new Array(),
    	      l_dom_device_list_img,
    	      l_home_cntr_obj,
    	      l_me_parent = obj.parent,
            l_canvas_dom_array=[],
            l_b64_str_array=[],
            l_canvas_index=0,
            l_dom_device_messages_page,
    	      l_me = this;

    	      if(mcloud_agent.devs.list.length == 0) return;
    	      
    	      function load_imgs()
            {
            	  for(var length = mcloud_agent.devs.list.length, k = 0; k < length; k++)
            	  {
            	  	  images[k] = new Image();
                      images[k].src = mcloud_agent.pic_url_get({sn:mcloud_agent.devs.list[k].sn,token:"p2"});
                      images[k].onload = function(){
                            for(var j=0;j<length;j++){
                                if(!jQuery(".device_list_img")[j])return;
                                var dev_sn = jQuery(".device_list_img").eq(j).attr("sn");
                                if(this.src.indexOf(dev_sn)>-1){                                    
                                    break;
                                }
                            }
                            jQuery(".device_list_img")[j].childNodes[0].style.background ="url("+this.src+") no-repeat 0 0";
                            // for(var j = 0;j<length;j++)
                            // {    
                            //      if(this == images[j])
                            //      {
                            //          break;
                            //      }
                            // }
                            // if(!jQuery(".device_list_img")[j])
                            // {
                            // 	return;
                            // }
                            // else
                            // {
                            //   jQuery(".device_list_img")[j].childNodes[0].style.backgroundImage ="url("+this.src+")";
                            //   jQuery(".device_list_img").eq(j).attr("index",this.index);
                            // }
                      };
            	  }
            }            
            
            function ccm_ipcs_get_ack(msg, ref)
            {
                if(!l_me_parent) return;
                if( msg && !msg.result && msg.ipcs)
                {  
                                	 
                    for(var i=0;i<msg.ipcs.length;i++)
                    {   
                        if(msg.ipcs[i].online==0){
                            var recording="not-recording.png";
                        }else if(msg.ipcs[i].online==1){
                            var recording="recording.png";
                        }                    
                        mx("#vimtag_device_list_box")[s_innerHTML]+=
                            "<div class='box_device_list_img' >"
                                +"<img class='box_camera_sign_picture' src='./oem/vimtag_v2n/imgs/login_loading_266x144.gif' style='display:"+((g_old_browser_version||(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9."))?'none':'block')+"'></img>"
                                +"<div class='box_device_nick'>"
                                +   "<div style='float:left;margin-top:5px;width:22px;height:22px;background:url(imgs/"+recording+")'></div>"
                                +   "<span>"+msg.ipcs[i].sn+"</span>"
                                +"</div>"
                            +"</div>";
                    }
                    for(var i=0;i<msg.ipcs.length;i++)
                    {
                        mx(".box_device_list_img")[i].onclick=function()
                        {
                            var  sn = mx("/span", this)[0].innerHTML;
                            g_select_box_ipc = sn;
                            mx("#vimtag_device_list_box")[s_innerHTML] = "";
                            //l_dom_vimtag_device_list = null;
                            jQuery("#vimtag_calendar_choice").show();
                            jQuery(".ui-datepicker-trigger").css("display","block");
                            jQuery("#vimtag_filter_calendar_gap").show();
                            jQuery("#vimtag_filter").show();
                            jQuery("#vimtag_filter_img").show();
                            jQuery("#setting_messages_gap").hide();
                            jQuery("#enter_setting").hide();
                            jQuery("#enter_setting_img").hide();
                            l_dom_device_messages_page = new class_box_device_messages_page({parent:l_me_parent, on_event:obj.on_event, box_ipc_sn:sn});
                            g_return_play_video_page = 4;                                /*enter the history video page of BOX's device*/
                            jQuery("#enter_setting").hide();
                            jQuery("#set_btn_menu").show();
                            // jQuery("#main_title_body_left").hide();
                            // jQuery("#main_title_box_return").show();
                            // mx("#history_return")[s_innerHTML] = mcs_device_list ;
                            // mx("#main_title_box_return").onclick=function(){
                            //     l_dom_history_return.click();
                            //     jQuery("#main_title_box_return").hide();
                            //     jQuery("#main_title_body_left").show();
                            //     mx("#history_return")[s_innerHTML] = mcs_back;
                            // }
                        }
                    }
                    pic_base64_get(msg.ipcs);
                }
            }
            function pic_base64_get(obj)
            {
                l_b64_str_array=[];
                l_canvas_dom_array=[];
                l_canvas_index=0;
                var c_index=0;
                for(var i=0;i<obj.length;i++)
                {
                    var token=obj[i].sn+"_p3_"+Math.pow(2,31) +"_"+Math.pow(2,31);
                    ms.send_msg("pic_base64_get",{sn:g_select_device_ipc,token:token,flag:1},{index:i},
                        function(msg,ref)
                        {
                            if( msg && !msg.result && msg.frame)
                            {
                                l_b64_str_array[ref.index]=msg.frame;
                                c_index++;
                                if(c_index>=obj.length)
                                {
                                    l_canvas_dom_array=mx("/img",l_dom_vimtag_device_list);
                                    if( !g_old_browser_version&& !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
                                        mjme_init(l_b64_str_array[0],l_canvas_dom_array[0]);
                                    }

                                }
                            }

                        }
                    );
                }
            }
            function mjme_on_decode(buf, width, height,img_dom) {
                var sbuf="";
                for (var i = 0; i < buf.length; i++) {
                              sbuf+=buf[i];
                        }
                
                if (!buf /*|| sbuf == l_last_buffer*/) {
                  return;
                }
                function image(w, h) {
                            this.header = '';
                            this.data = Array();
                            this.width = w;
                            this.height = h;
                }

                // Convert a value to a little endian hexadecimal value
                function getLittleEndianHex(value) {
                    var result = [];

                    for (var bytes = 4; bytes > 0; bytes--) {
                        result.push(String.fromCharCode(value & 255));
                        value >>= 8;
                    }

                    return result.join('');
                }

                // Set the required bitmap header
                function setImageHeader(img)
                {
                    var numFileBytes = getLittleEndianHex(img.width * img.height);
                    var w = getLittleEndianHex(img.width);
                    var h = getLittleEndianHex(img.height);

                    img.header =
                        'BM' +                      // Signature
                        numFileBytes +              // size of the file (bytes)*
                       '\x00\x00' +                 // reserved
                       '\x00\x00' +                 // reserved
                       '\x36\x00\x00\x00' +         // offset of where BMP data lives (54 bytes)
                       '\x28\x00\x00\x00' +         // number of remaining bytes in header from here (40 bytes)
                       w +                          // the width of the bitmap in pixels*
                       h +                          // the height of the bitmap in pixels*
                       '\x01\x00' +                 // the number of color planes (1)
                       '\x20\x00' +                 // 32 bits / pixel
                       '\x00\x00\x00\x00' +         // No compression (0)
                       '\x00\x00\x00\x00' +         // size of the BMP data (bytes)*
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - horizontal resolution
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - the vertical resolution
                       '\x00\x00\x00\x00' +         // Number of colors in the palette (keep 0 for 32-bit)
                       '\x00\x00\x00\x00';          // 0 important colors (means all colors are important)
                }

                // Fill a rectangle
                function fillRectangle(img,color) {
                    /*for (var ny = y; ny < y + h; ny++) {
                        for (var nx = x; nx < x + w; nx++) {
                          var pix_data=String.fromCharCode(color[nx],color[nx],color[nx],255);
                            img.data[ny * img.width + nx] = pix_data;
                        }
                        }*/
                        for (var i = 0; i < color.length; i++) {
                          var pix_data=String.fromCharCode(color[i],color[i],color[i],255);
                            img.data[i] = pix_data;
                        }

                }

                // Flip image vertically
                function flipImage(img) {
                    var newImgData = new Array();

                    for(var x = 0; x < img.width; x++) {
                        for(var y = 0; y < img.height; y ++) {
                            var ny = img.height - 1 - y;
                            newImgData[(ny * img.width) + x] = img.data[(y * img.width) + x];
                        }
                    }

                    img.data = newImgData;
                }

                // Main draw function
                function drawImage() {
                    var img = new image(width, height);

                    setImageHeader(img);

                    fillRectangle(img,buf);

                    // Flip image vertically
                    flipImage(img);

                    // If window.btoa is supported, use it since it's often faster
                    if(window.btoa != undefined) {
                        return 'data:image/bmp;base64,' + btoa(img.header + img.data.join(""));
                    }
                    // If not, use our base64 library
                    else {
                        return 'data:image/bmp;base64,' + jQuery.base64.encode(img.header + img.data.join(""));
                    }
                }
                l_last_buffer = sbuf;
               img_dom.src=drawImage();
            }
            function mjme_init(b64_str,img_dom)
            { 
                l_nal = null;
                g_avc.clearBuffer();
                l_start=l_frame=l_loop_num=l_nal_len=0;
                g_avc.onPictureDecoded = mjme_on_decode;
                if(!typeof(l_timer)=="undefined"){ clearTimeout(l_timer); l_timer = null; };

                var m_data=mcodec.b64_2_binary(b64_str);
                if(!m_data) return;
                l_u8_data = new Uint8Array(m_data);
                l_nal = new Uint8Array(0x1000000);
                l_nal_len = 0;
                for(var i=0;i<3;i++)
                {
                    l_timer = setTimeout(mjme_frame(img_dom), 10);
                }
            }
            function mjme_frame(img_dom)  //will the H264 decorder to BMP
            {
                var i;
                l_frame = 0;
                l_loop_num++;
                
                if(!l_u8_data)return;
                for(i = l_start; i < l_u8_data.length;)
                {
                    if((0 != l_u8_data[i]) || (0 != l_u8_data[i+1]) || (0 != l_u8_data[i+2]) || (1 != l_u8_data[i+3]))
                    {
                        l_nal[l_nal_len++] = l_u8_data[i++];
                        continue;
                    }
                    if(l_nal_len)
                    {
                        g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    }
                    i += 4;
                    l_start = i;
                    l_nal_len = 0;
                    if(l_frame)
                    {
                        break;
                    }
                }
                if(l_nal_len)
                {
                    g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    if(l_loop_num>2)
                    {
                        if((l_canvas_index+1)<l_b64_str_array.length&&(l_canvas_index+1)<l_canvas_dom_array.length)
                        {
                            setTimeout(function(){
                                l_canvas_index++;
                                mjme_init(l_b64_str_array[l_canvas_index],l_canvas_dom_array[l_canvas_index]);
                            },600);
                        }
                    }
                }
                if((0 == l_frame) && (l_start < l_u8_data.length))
                {
                    l_start = 0;
                    l_nal_len = 0;
                }
            }

            function add_imgs_to_device()
            {
		            l_dom_vimtag_device_list[s_innerHTML] = "<div id='vimtag_device_list'>"
		            for(var length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
		            {
		              	 var data = mcloud_agent.devs.list[i],pic_url;
		              	 if(!data)  continue;
		              	 var sn = data.nick?data.nick:data.sn;
		              	 if((data.stat == "Online")&&(data.type == "BOX"))
		              	 {
		              	 	 l_dom_vimtag_device_list[s_innerHTML] += "<div class='device_list_img' state='online' sn="+data.sn+"><div id='box_sign_picture' class='box_sign_picture'></div><div class='device_nick'><span>"+ sn+"</span></div></div>";
		              	 	 continue;
		              	 }
		              	 else if(data.stat == "Online")
		              	 {
		                   l_dom_vimtag_device_list[s_innerHTML] += "<div class='device_list_img' state='online' sn="+data.sn+"><div id='camera_sign_picture' class='camera_sign_picture'></div><div class='device_nick'><span>"+ sn+"</span></div></div>";
		                   continue;
		              	 }
		              	 else if(data.stat == "Offline")
		              	 {
		                   l_dom_vimtag_device_list[s_innerHTML] += "<div class='device_list_img' state='offline' sn="+data.sn+"><div class='camera_offline_sign_picture'></div><div class='device_nick'><span>"+ sn+"</span></div></div>";
		              	 }
                         else if(data.stat == "InvalidAuth")
                         {
                           l_dom_vimtag_device_list[s_innerHTML] += "<div class='device_list_img' state='invalid_auth' sn="+data.sn+"><div class='camera_invalid_auth_picture'></div><div class='device_nick'><span>"+ sn+"</span></div></div>";
                         }
		            }
		            l_dom_vimtag_device_list[s_innerHTML] += "</div>";

		            load_imgs();
		            
				        l_dom_device_list_img = mx(".device_list_img");
		            for(var length= l_dom_device_list_img.length, i = 0; i < length; ++i)
		            {
		            	  //状态正常设备的事件
		                if(l_dom_device_list_img[i].getAttribute("state") == "online"||l_dom_device_list_img[i].getAttribute("sn"))
		                {   //状态正常设备的点击事件
		                    l_dom_device_list_img[i].onclick = function() {
		                    	   var old_sn = g_select_device_ipc;
		                         g_select_device_ipc = this.getAttribute("sn");
                             if(mcloud_agent.devs.get(g_select_device_ipc).type == "BOX")
                             {
                                mx("#main_page").style.paddingTop="134px";
                                l_dom_vimtag_device_list[s_innerHTML] = "";
                                ms.send_msg("box_get",{box_sn:g_select_device_ipc,flag:1},{flag:1},ccm_ipcs_get_ack);  
                                g_is_in_box_ipc = 1; 
                                g_return_play_video_page = 3;
                                jQuery("#top").append("<div id='box_title'>"
                                    +"<div id='main_title_body'>"
                                        +"<div id='main_title_body_left'>BOX:"+g_select_device_ipc.toUpperCase()+"</div>"
                                        +"<div id='main_title_box_return' style='display:none;float: left;line-height: 45px;cursor:pointer;'><div id='main_title_box_return_img'></div>&nbsp;"+mcs_back+"</div>"

                                        +"<div id='main_title_body_right'>"
                                            +"<div id='enter_setting' style='margin-top:12px;cursor: pointer;float:right;'><img src='images/pc/setting.png' style='float:left'> "+mcs_settings+"</div>"
                                            +     "<div id='set_btn_menu' style='line-height:45px;position:static;display:none;'>"         
                                            +        "<div id='vimtag_filter' style='font-size:16px;color:#000;float:right;cursor:pointer;'><img src='imgs/filter.png' style='float:left;margin-top:12px;'>"+ mcs_filter +"</div>" 
                                            +        "<div id='vimtag_calendar_choice' style='font-size:16px;color:#000;float:right;margin-left:3px;cursor:pointer;'><img src='imgs/calendar2.png' style='float:left;margin-top:12px;'>"+ mcs_date +"</div>" 
                                            +        "<input id='vimtag_calendar_input' type='text' style='display:none;'>"            
                                            +     "</div>"
                                        +"</div>"
                                        +"<div id='main_title_body_mid' style='display:none;'><div id='main_title_body_device'>"+mcs_device+"</div><div id='main_title_body_local'>"+mcs_local+"</div></div>"
                                    +"</div>"
                                +"</div>");
                                
                                mx("#enter_setting").onclick=function(){
                                    jQuery("#box_title").hide();
                                    l_dom_enter_setting_img.click();
                                }
                                mx("#vimtag_filter").onclick=function(){
                                    l_dom_vimtag_filter.click();
                                }
                                mx("#vimtag_calendar_choice").onclick=function(){
                                    // jQuery(".ui-datepicker-trigger").click();
                                    l_dom_vimtag_calendar_choice.click();
                                }
                                var l_parent_callback = vimtag_calendar_input_calback;
                                var l_dom_vimtag_calendar_input = mx("#vimtag_calendar_input");
                                // jQuery("#vimtag_calendar_input").datepicker({showOn:'button', buttonImageOnly:true, onSelect:function(dateText, inst){l_parent_callback({type:"select_video_base_select_date", date:mx("#vimtag_calendar_input").value})}});
                                // jQuery(".ui-datepicker-trigger").css("display","none"); //hide the image of calendar      
                             }
                             else
                             {
                                l_dom_vimtag_device_list[s_innerHTML] = "";
                                l_home_cntr_obj = new class_home_cntr({parent:l_me_parent,on_event:obj.on_event, offsetwidth:obj.offsetwidth, sn:g_select_device_ipc});
                                g_is_in_play_page = 1;
                             }
		                         jQuery("#set_menu_img").hide();
		                         jQuery("#add_devices_menu").hide();
		                         jQuery("#device_list_character").hide();
		                         jQuery("#play_page_menu").show();
		                         		                         
		                         if(mcloud_agent.devs.get(g_select_device_ipc).type == "BOX")
                             {
                                jQuery("#set_btn_menu").show();
                           	    jQuery("#vimtag_calendar_choice").hide();
						                    jQuery("#vimtag_calendar_choice_img").hide();
						                    jQuery("#vimtag_filter_calendar_gap").hide();
						                    jQuery("#vimtag_filter").hide();
						                    jQuery("#vimtag_filter_img").hide();
						                    jQuery("#setting_messages_gap").hide();
						                    jQuery("#enter_messages").hide();
						                    jQuery("#enter_messages_img").hide();
						                    jQuery("#history_return").hide();
						                    jQuery("#play_page_return").hide();
						                    jQuery("#enter_setting").show();   //show the box setting choice
						                    jQuery("#enter_setting_img").show();
                                            jQuery("#return_devices_list").show();
                             }
                             else
                             {
                             	  jQuery("#history_return").hide();
						                    jQuery("#play_page_return").show();
						                    // jQuery("#enter_messages").show();
						                    // jQuery("#enter_messages_img").show();
						                    // jQuery("#setting_messages_gap").show();
						                    // jQuery("#enter_setting").show();
						                    // jQuery("#enter_setting_img").show();
                             }                         
		                    };                    
		                }
		                //设备不在线的事件
		                else if(l_dom_device_list_img[i].getAttribute("state") == "offline")
		                {
		                	  l_dom_device_list_img[i].onclick = function() {
		                	      msg_tips({msg:mcs_prompt_check_device_connection, type:"error", timeout:3000});
		                	  };
		                }
		                //设备在线但是密码错误的设备事件
		                else if(l_dom_device_list_img[i].getAttribute("state") == "invalid_auth")
		                {
		                    l_dom_device_list_img[i].onclick = function() {
		                    	  //如果是ipc连接即使用设备ID登录，则退出系统
		                        if(g_login_status == "ipc"){
		                           system_pop_confirm_box({alert:true,str:mcs_password_expired, callback_func:function(){
		                              jQuery("#system_logout").click();
		                           }});
		                        }
		                        else
		                        {
		                           create_device_add_menu({parent:this, sn:this.getAttribute("sn"), type:"re_enter", direction:"bottom"});
		                        }
		                    };
		                }                                
		            }		           
            }
            add_imgs_to_device();
            for(var length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
            {
            	  var data = mcloud_agent.devs.list[i];
            	  g_device_list_obj["sn_" + data.sn] = {name:name,type:mcloud_agent.devs.get(data.sn).type, ip:mcloud_agent.devs.get(data.sn).addr, isParent:true,
		                         state:{online:"Online", view:0, recording:0, call:0, playback:0,playback_download:0}};
            }      
            
            function remove_event(){
                l_me_parent[s_innerHTML] = "";
                //l_dom_device_list_img.onclick = "";
            }

            l_me.ctrl = function(obj)
            {
            	  switch(obj.type)
            	  {
            	  	  case "destroy_play_page":
            	  	     {
            	  	     	  l_home_cntr_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "delete_ipc":
            	  	     {
            	  	     	  l_home_cntr_obj.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "update":
            	  	     {
            	  	     	  if((l_home_cntr_obj && g_is_in_play_page) || g_is_in_playback_page)
            	  	     	  {
            	  	     	  	 l_home_cntr_obj.ctrl(obj);
            	  	     	  	 break;
            	  	     	  }
            	  	     	  break;
            	  	     }
            	  	  case "destroy_box_device_history_page":
            	  	     {
            	  	     	  ms.send_msg("box_get",{box_sn:g_select_device_ipc,flag:1},{flag:1},ccm_ipcs_get_ack);
            	  	     	  break;
            	  	     }
            	  	  case "destroy_box_device_video_page":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "destroy_box_setting_page":
            	  	     {
            	  	     	  ms.send_msg("box_get",{box_sn:g_select_device_ipc,flag:1},{flag:1},ccm_ipcs_get_ack);
            	  	     	  break;
            	  	     }
            	  	  case "select_video_base_select_date":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "reload_box_video_list":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "get_alarm_video_list":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl(obj);
            	  	     	  break;
            	  	     }
            	  	  case "get_all_video_list":
            	  	     {
            	  	     	  l_dom_device_messages_page.ctrl({type:"reload_box_video_list"});
            	  	     	  break;
            	  	     }
            	  }
            }                       
    }
    function class_box_device_messages_page(obj){
        var l_me_parent = obj.parent,
            l_dom_vimtag_device_list = mx("#vimtag_device_list_box"),
            l_parent_callback = obj.on_event,
            l_me = this,
            l_local_segs= [],
            l_segs = [],
            l_local_alarm_segs=[],
            l_pic_token = [],
            images = new Array(),
            local_segs_index = 0,
            local_alarm_segs_index = 0,
            cut_video_time = 0,
            mark_video_segment_start_time = 0,
            local_cut_video_data_index = 0,
            local_cut_video_data = [],
            mark_video_segment_start_token = 0,
            mark_video_segment_start_pic_token = 0,
            mark_video_segment_start_flag =0,
            l_box_device_list_img,
            l_dom_playback_obj,
            l_dom_box_playback_video,
            mark_video_segment_start_time_format,
            start_time = 0,
            end_time = 0,
            local_cut_alarm_video_data = [],
            local_cut_alarm_video_data_index = 0,
            local_video_time_duration = [],
            local_video_time_duration_index = 0;
            
            function sdc_decode(pcomp,record_num)
		        {
		            var l_data=[],l_data_index=0,
		            l_pcomp=mcodec.b64_2_binary(pcomp),
		            l_sdc_len=l_pcomp.length,
		            l_record_num=record_num,
		            l_base,l_base_len,l_pcomp_index=0;
		            if (sdc_base_decode()) return ;
		            for(l_pcomp_index=l_base_len; l_pcomp_index<l_sdc_len;)
		            {
		                if (sdc_group_decode()) break;
		            }
		            return array_to_string();
		            function sdc_base_decode()  /*decode the base area data*/
		            {
		                var bytes,value;
		                var pbase=l_pcomp[0];
		                if (l_sdc_len < 1){
		                    return 1;
		                }
		                bytes = pbase & 0xf;
		                l_base_len = bytes + 1;
		                if (l_base_len > l_record_num){
		                    return 1;
		                }
		                l_base = pbase >> 4;
		                if(bytes>0)
		                {
		                    if((bytes*8+4)>32)
		                    {
		                        l_base=big_number_operation(l_base,bytes,0);		
		                    }
		                    else
		                    {
		                        for(i=1;i<l_base_len;i++)
		                        {		                        	
		                            l_base |= ((l_pcomp[i]) << ((i-1) * 8 + 4));
		                        }
		                    }
		
		                }
				
		                l_data[0]=l_base;
		                return 0;
		            }
		            function sdc_group_decode()   /*decode the group area data*/
		            {
		                var pdelta,is_compress,plen,i,pdata,value,plen_bytes;
		
		                if (l_sdc_len < 1){
		                    return 1;
		                }
		
		                is_compress=(l_pcomp[l_pcomp_index]>=128); /*judge the group's first number is 1 or 0;*/		                		                
		                for(i=0; i<4; i++)    /*get the item_num*/
		                {
		                	 if(i == 0)
		                	 {
		                	 	  plen = l_pcomp[l_pcomp_index] & 0x7f;
		                	 }
		                	 else
		                	 {
		                	 	  plen =(plen << 8) | (l_pcomp[l_pcomp_index + i]);
		                	 }		                	 
		                }
		                l_pcomp_index = l_pcomp_index +4;
		                if (plen > l_record_num){
		                    return 1;
		                }
		                if(is_compress)
		                { 
		                	 var compress_data_delta = "";
		                	 compress_data_delta = l_pcomp[l_pcomp_index]>> 4;
		                	 var delta_num = l_pcomp[l_pcomp_index] & 0xf;
		                	 var max_count = delta_num*8 +4;
	                     if(max_count>32)
	                     {
	                        var pdelta_array=big_number_operation(pdelta,delta_num,1);
	
	                     }
	                     else
	                     {
	                        for (i = 0; i < delta_num; i++){
	
	                            compress_data_delta |= ((l_pcomp[l_pcomp_index + 1 + i]) << (i * 8 + 4));
	                        }
	                     }
		                	 for(i=0;i<plen;i++)
		                	 {
			                	 l_data_index ++;
	                       if(l_data_index >= l_record_num) return 1;
			                	 l_data[l_data_index]=(typeof(l_data[l_data_index -1])=="number" && !pdelta_array)?
			                	   (l_data[l_data_index-1]+compress_data_delta):(big_number_add(l_data[l_data_index-1],pdelta_array?pdelta_array:compress_data_delta));
			                 }
			                 l_pcomp_index = l_pcomp_index + 1 +delta_num;
		                }
		                if(!is_compress && (plen != 0))
		                {
				                for(i=0;i<plen;i++)
				                {
				                	  pdelta=l_pcomp[l_pcomp_index]>> 4;
				                    var delta_num = l_pcomp[l_pcomp_index] & 0xf;
		
				                    var max_count = delta_num*8 +4;
				                    if(max_count>32)
				                    {
				                        var pdelta_array=big_number_operation(pdelta,delta_num,1);
				
				                    }
				                    else
				                    {
				                        for (var j = 0; j < delta_num; j++){
				
				                            pdelta |= ((l_pcomp[l_pcomp_index + 1 + j]) << (j * 8 + 4));
				                        }
				                    }
				                    
				                    l_data_index++;
				                    if(l_data_index>=l_record_num) return 1;
				
				                    l_data[l_data_index]=(typeof(l_data[l_data_index-1])=="number" && !pdelta_array)?
				                        (l_data[l_data_index-1]+pdelta):(big_number_add(l_data[l_data_index-1],pdelta_array?pdelta_array:pdelta));
				                    l_pcomp_index = l_pcomp_index + 1 + delta_num;
				                    pdelta = "";
				                }
                    }
		
		                return 0;
		            }
		            function array_to_string()
		            {
		                for(var i=0;i<l_data.length;i++)
		                {
		                    if(l_data[i] instanceof Array)
		                    {
		                        l_data[i]="0x"+(l_data[i][0].toString(16))+(int_to_string_4(l_data[i][1]))+(int_to_string_4(l_data[i][2]))+(int_to_string_4(l_data[i][3]));
		                    }
		                }
		                return l_data;
		            }
		            function int_to_string_4(data_int)
		            {
		                var ret_data=data_int.toString(16);
		                return ret_data=(ret_data.length==4)?ret_data:(ret_data.length==3)?("0"+ret_data):(ret_data.length==2)?("00"+ret_data):("000"+ret_data);
		            }
		            function big_number_add(num_a,num_b)
		            {
		                var num=[];
		                num_a=to_big_number(num_a);
		                num_b=to_big_number(num_b);
		                var a="0x"+(num_a[0].toString(16))+(int_to_string_4(num_a[1]))+(int_to_string_4(num_a[2]))+(int_to_string_4(num_a[3]));
		                var b="0x"+(num_b[0].toString(16))+(int_to_string_4(num_b[1]))+(int_to_string_4(num_b[2]))+(int_to_string_4(num_b[3]));
		                var sum=(parseInt(a,16)+parseInt(b,16)).toString(16);
		                for(var i=3;i>-1;i--)
		                {
		                    if(sum)
		                    {
		                        num[i]=parseInt(sum.substring((((sum.length-4)>0)?(sum.length-4):0),sum.length),16);
		                        sum=sum.substring(0,(((sum.length-4)>0)?(sum.length-4):0));
		                    }
		                    else num[i]=0;
		                }
		                return num;
		            }
		            function to_big_number(num)
		            {
		                var ret=[];
		                if(typeof(num)=="number")
		                {
		                    var tem_num=num.toString(2);
		                    if(tem_num.length<16)
		                    {
		                        return ret=[0,0,0,num];
		                    }
		                    else if(tem_num.length<32)
		                    {
		                        return ret=[0,0,num>>16,num&0xffff];
		                    }
		                }
		                else return num;
		            }
		            function big_number_operation(pdelta,delta_num,ptype)
		            {
		                var type_num=ptype?5:1;
		                var tdelta=[0,0,0,pdelta];
		                for (i = 0; i < delta_num; i++)
		                {
		                    var tcomp=l_pcomp[l_pcomp_index+type_num+i];
		                    var move_num=(i*8+4)+8;
		                    if(move_num<16)
		                    {
		                        tdelta[3] |= (tcomp << (move_num-8));
		                    }
		                    else if(move_num>16&&move_num<32)
		                    {
		                        if(move_num<24)
		                        {
		                            var digit=16-(32-move_num);
		                            var tcomp_2=tcomp.toString(2);
		                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
		                            for(var j=0;j<32-move_num;j++)
		                            {
		                                tcomp_2+="0";
		                            }
		                            tdelta[3] |=parseInt(tcomp_2,2);
		                            tdelta[2]|=tcomp>>(32-move_num-8);
		                        }
		                        else
		                        {
		                            tdelta[2] |= (tcomp << (move_num-16-8));
		                        }
		                    }
		                    else if (move_num>32&&move_num<48)
		                    {
		                        if(move_num<40)
		                        {
		                            var digit=16-(48-move_num);
		                            var tcomp_2=tcomp.toString(2);
		                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
		                            for(var j=0;j<48-move_num;j++)
		                            {
		                                tcomp_2+="0";
		                            }
		                            tdelta[2] |=parseInt(tcomp_2,2);
		                            tdelta[1]|=tcomp>>(48-move_num-8);
		                        }
		                        else
		                        {
		                            tdelta[1] |= (tcomp << (move_num-32-8));
		                        }
		                    }
		                    else if(move_num>48&&move_num<72)
		                    {
		                        if(move_num<56)
		                        {
		                            var digit=16-(64-move_num);
		                            var tcomp_2=tcomp.toString(2);
		                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
		                            for(var j=0;j<64-move_num;j++)
		                            {
		                                tcomp_2+="0";
		                            }
		                            tdelta[1] |=parseInt(tcomp_2,2);
		                            tdelta[0]|=tcomp>>(64-move_num-8);
		                        }
		                        else
		                        {
		                            tdelta[0] |= (tcomp << (move_num-48-8));
		                        }
		                    }
		
		                }
		                return tdelta;
		            }
		
		        } 
		        function create_video_list(obj){
		        	  var length = obj.length;
                      jQuery("#main_title_body_left").hide();
                      jQuery("#main_title_box_return").show();
                      // jQuery("#main_title_body_mid").show();
                      mx("#main_title_box_return").onclick = function () {l_dom_history_return.click();}
		        		mx("#vimtag_device_list_box")[s_innerHTML] = "<div id='box_device_video_list'>"
		        	  for (var i=length-1;i>=0;i--)
		        	  {                      
		        	  	 if(obj.alarm)
		        	  	 {
		        	  	   mx("#vimtag_device_list_box")[s_innerHTML] += "<div class='device_list_img' token="+ local_cut_alarm_video_data[i].token +"><div class='camera_sign_picture'></div><div class='device_nick'><span>"+ local_cut_alarm_video_data[i].pos_start +"</span></div></div>";
		        	  	 }
		        	  	 else
		        	  	 {
		        	  	   mx("#vimtag_device_list_box")[s_innerHTML] += "<div class='device_list_img' style='position:relative;' token="+ local_cut_video_data[i].token +"><div class='video_ico_show'></div><div class='video_duration_show'>"+ local_video_time_duration[i].time_duration +"</div><div class='camera_sign_picture'><img class='video_list_picture'></div><div class='device_nick'><span>"+ local_cut_video_data[i].pos_start +"</span></div></div>";
		        	     }
		        	  }
                      
		        	  mx("#vimtag_device_list_box")[s_innerHTML] += "</div>";
		        	  l_box_device_list_img = mx(".device_list_img");
		        	  for(var r=0;r< length;r++)
		        	  {
		        	  	 l_box_device_list_img[r].onclick = function(){
		        	  	 	  jQuery("#vimtag_calendar_choice").hide();
                      jQuery(".ui-datepicker-trigger").css("display","none"); /*hide the calendar*/
                      jQuery("#vimtag_filter_calendar_gap").hide();
                      jQuery("#vimtag_filter").hide();
                      jQuery("#vimtag_filter_img").hide();	
                      jQuery("#main_title_body_mid").hide();
                      	        	  	 	  
		        	  	    g_now_page = "playback";		        	  	    
                      jQuery("#vimtag_device_list_box").hide();  /*hide the page of video list page*/
                      l_dom_box_playback_video = new dom_create_child(mx("#vimtag_cntr_box"), "div", "box_playback_video");
                      // l_dom_playback_obj = new class_home_cntr({parent:l_dom_box_playback_video, on_event:obj.on_event, node_sn:g_select_box_ipc, playback:1});
                      l_dom_playback_obj = new class_home_cntr({parent:l_dom_box_playback_video, on_event:obj.on_event,token:this.getAttribute("token"),end_token:this.getAttribute("end_token"),node_sn:g_select_box_ipc, playback:1});
                      l_dom_playback_obj.ctrl({type:"playback_token_vimtag",token:this.getAttribute("token")});
                      l_dom_playback_obj.ctrl({type:"create_playback_vimtag",node_sn:g_select_box_ipc});
                      
                      g_return_play_video_page = 5; 
                      g_is_in_playback_page = 1;
		        	  	 };
		        	  }
                      pic_base64_get_one(local_cut_video_data);
		        }

                function pic_base64_get_one(obj){
                    l_b64_str_array=[];
                    l_canvas_dom_array=[];
                    l_canvas_index=0;
                    var c_index=0;
                    for(var i=obj.length-1;i>=0;i--)
                    {

                        // var token=obj.sn+"_p3_"+Math.pow(2,31) +"_"+Math.pow(2,31);
                        var token=obj[i].pic_token;
                        ms.send_msg("pic_base64_get",{sn:g_select_device_ipc,token:token,flag:1},{index:i},
                            function(msg,ref)
                            {
                                if( msg && !msg.result && msg.frame)
                                {
                                    l_b64_str_array[ref.index]=msg.frame;
                                    c_index++;
                                    if(c_index>=obj.length)
                                    {
                                        l_canvas_dom_array=mx("/img",l_dom_vimtag_device_list);
                                        if( !g_old_browser_version&& !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
                                            mjme_init(l_b64_str_array[0],l_canvas_dom_array[0]);
                                        }

                                    }
                                }

                            }
                        );
                    }
                }
                function mjme_on_decode(buf, width, height,img_dom) {
                var sbuf="";
                for (var i = 0; i < buf.length; i++) {
                              sbuf+=buf[i];
                        }
                
                if (!buf /*|| sbuf == l_last_buffer*/) {
                  return;
                }
                function image(w, h) {
                            this.header = '';
                            this.data = Array();
                            this.width = w;
                            this.height = h;
                }

                // Convert a value to a little endian hexadecimal value
                function getLittleEndianHex(value) {
                    var result = [];

                    for (var bytes = 4; bytes > 0; bytes--) {
                        result.push(String.fromCharCode(value & 255));
                        value >>= 8;
                    }

                    return result.join('');
                }

                // Set the required bitmap header
                function setImageHeader(img)
                {
                    var numFileBytes = getLittleEndianHex(img.width * img.height);
                    var w = getLittleEndianHex(img.width);
                    var h = getLittleEndianHex(img.height);

                    img.header =
                        'BM' +                      // Signature
                        numFileBytes +              // size of the file (bytes)*
                       '\x00\x00' +                 // reserved
                       '\x00\x00' +                 // reserved
                       '\x36\x00\x00\x00' +         // offset of where BMP data lives (54 bytes)
                       '\x28\x00\x00\x00' +         // number of remaining bytes in header from here (40 bytes)
                       w +                          // the width of the bitmap in pixels*
                       h +                          // the height of the bitmap in pixels*
                       '\x01\x00' +                 // the number of color planes (1)
                       '\x20\x00' +                 // 32 bits / pixel
                       '\x00\x00\x00\x00' +         // No compression (0)
                       '\x00\x00\x00\x00' +         // size of the BMP data (bytes)*
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - horizontal resolution
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - the vertical resolution
                       '\x00\x00\x00\x00' +         // Number of colors in the palette (keep 0 for 32-bit)
                       '\x00\x00\x00\x00';          // 0 important colors (means all colors are important)
                }

                // Fill a rectangle
                function fillRectangle(img,color) {
                    /*for (var ny = y; ny < y + h; ny++) {
                        for (var nx = x; nx < x + w; nx++) {
                          var pix_data=String.fromCharCode(color[nx],color[nx],color[nx],255);
                            img.data[ny * img.width + nx] = pix_data;
                        }
                        }*/
                        for (var i = 0; i < color.length; i++) {
                          var pix_data=String.fromCharCode(color[i],color[i],color[i],255);
                            img.data[i] = pix_data;
                        }

                }

                // Flip image vertically
                function flipImage(img) {
                    var newImgData = new Array();

                    for(var x = 0; x < img.width; x++) {
                        for(var y = 0; y < img.height; y ++) {
                            var ny = img.height - 1 - y;
                            newImgData[(ny * img.width) + x] = img.data[(y * img.width) + x];
                        }
                    }

                    img.data = newImgData;
                }

                // Main draw function
                function drawImage() {
                    var img = new image(width, height);

                    setImageHeader(img);

                    fillRectangle(img,buf);

                    // Flip image vertically
                    flipImage(img);

                    // If window.btoa is supported, use it since it's often faster
                    if(window.btoa != undefined) {
                        return 'data:image/bmp;base64,' + btoa(img.header + img.data.join(""));
                    }
                    // If not, use our base64 library
                    else {
                        return 'data:image/bmp;base64,' + jQuery.base64.encode(img.header + img.data.join(""));
                    }
                }
                l_last_buffer = sbuf;
               img_dom.src=drawImage();
            }
            function mjme_init(b64_str,img_dom)
            { 
                l_nal = null;
                g_avc.clearBuffer();
                l_start=l_frame=l_loop_num=l_nal_len=0;
                g_avc.onPictureDecoded = mjme_on_decode;
                if(!typeof(l_timer)=="undefined"){ clearTimeout(l_timer); l_timer = null; };

                var m_data=mcodec.b64_2_binary(b64_str);
                if(!m_data) return;
                l_u8_data = new Uint8Array(m_data);
                l_nal = new Uint8Array(0x1000000);
                l_nal_len = 0;
                for(var i=0;i<3;i++)
                {
                    l_timer = setTimeout(mjme_frame(img_dom), 10);
                }
            }
            function mjme_frame(img_dom)  //will the H264 decorder to BMP
            {
                var i;
                l_frame = 0;
                l_loop_num++;
                
                if(!l_u8_data)return;
                for(i = l_start; i < l_u8_data.length;)
                {
                    if((0 != l_u8_data[i]) || (0 != l_u8_data[i+1]) || (0 != l_u8_data[i+2]) || (1 != l_u8_data[i+3]))
                    {
                        l_nal[l_nal_len++] = l_u8_data[i++];
                        continue;
                    }
                    if(l_nal_len)
                    {
                        g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    }
                    i += 4;
                    l_start = i;
                    l_nal_len = 0;
                    if(l_frame)
                    {
                        break;
                    }
                }
                if(l_nal_len)
                {
                    g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    if(l_loop_num>2)
                    {
                        if((l_canvas_index+1)<l_b64_str_array.length&&(l_canvas_index+1)<l_canvas_dom_array.length)
                        {
                            setTimeout(function(){
                                l_canvas_index++;
                                mjme_init(l_b64_str_array[l_canvas_index],l_canvas_dom_array[l_canvas_index]);
                            },600);
                        }
                    }
                }
                if((0 == l_frame) && (l_start < l_u8_data.length))
                {
                    l_start = 0;
                    l_nal_len = 0;
                }
            }
		        /*format the seconds*/
		        function formatSeconds(value){
		        		var theTime = parseInt(value);
		        		var theTime1 = 0;
		        		if(theTime > 60){
		        			theTime1 = parseInt(theTime/60);
		        			theTime = parseInt(theTime%60);
		        		}
		        		var result = ":" + parseInt(theTime);
		        		if(theTime1 > 0){
		        			result = parseInt(theTime1) +result;
		        		}
		        		if(theTime1 == 0)
		        		{
		        			result = "00" + result;
		        		}
		        		return result;
		        }
		        function get_incise_time(){
		            if(g_select_incise_time == "1h")         /*select the length of every segment*/
		        	  {
		        	  	 cut_video_time = 1*60*60*1000;
		        	  }
		        	  else if(g_select_incise_time == "30min")
		        	  {
		        	  	 cut_video_time = 30*60*1000;
		        	  }
		        	  else if(g_select_incise_time == "5min")
		        	  {
		        	  	 cut_video_time = 5*60*1000;
		        	  }
		        }
		        function draw_data_rect(obj)
		        {   
                get_incise_time();
		        	  
		        	  for(var i=0;i<l_segs.length;i++)
		        	  {
		        	  	 var video_segment_start_time = parseInt((l_segs[i].stm),16);
		        	  	 var video_segment_end_time = parseInt((l_segs[i].etm),16);
		        	  	 
		        	  	 if(video_segment_start_time < obj.base_start_time) continue;

		        	  	 l_local_segs[local_segs_index]=
	                 {
	                    pos_start:video_segment_start_time,
	                    pos_end:video_segment_end_time,
	                    token:obj.dev_sn+"_"+l_segs[i].cid+"_"+l_segs[i].sid,
	                    pic_token:obj.dev_sn+"_p3_"+l_segs[i].cid+"_"+l_segs[i].sid,
	                    f:l_segs[i].f
	                 };
                   local_segs_index++;		        	  	 		        	  	 
		        	  }
                
                for(var j=0;j<local_segs_index-1;j++)
                {
                	 if(mark_video_segment_start_time == 0)
                	 {
                	 	 mark_video_segment_start_time = l_local_segs[0].pos_start,
                	 	 mark_video_segment_start_time_format = new Date(mark_video_segment_start_time).format("yyyy-MM-dd hh:mm:ss"),
                	 	 mark_video_segment_start_token = l_local_segs[0].token,
                	 	 mark_video_segment_start_pic_token = l_local_segs[0].pic_token,
                	 	 mark_video_segment_start_flag = l_local_segs[0].f
                	 }
                	 if((l_local_segs[j+1].pos_start - l_local_segs[j].pos_end <= 16*1000) && (l_local_segs[j+1].pos_end - mark_video_segment_start_time < cut_video_time))
                	 {
                	 	  if(l_local_segs[j].f !=0 ) mark_video_segment_start_flag = 1;
                	 	  continue;
                	 }
                   
                   local_cut_video_data[local_cut_video_data_index]=
                   {
                   	  pos_start:mark_video_segment_start_time_format,
	                    pos_end:l_local_segs[j].pos_end,
	                    pos_start_segs:mark_video_segment_start_time,
	                    token:mark_video_segment_start_token,
	                    pic_token:mark_video_segment_start_pic_token,
	                    f:mark_video_segment_start_flag
                   };
                   local_cut_video_data_index++;
                   
                   mark_video_segment_start_time = l_local_segs[j+1].pos_start;
                   mark_video_segment_start_time_format = new Date(mark_video_segment_start_time).format("yyyy-MM-dd hh:mm:ss");
                   mark_video_segment_start_token = l_local_segs[j+1].token;
                	 mark_video_segment_start_pic_token = l_local_segs[j+1].pic_token;
                	 //mark_video_segment_start_flag = l_local_segs[j+1].flag;
                }
                if(j == local_segs_index -1 )
                {
                	 local_cut_video_data[local_cut_video_data_index]=
                	 {
                	 	  pos_start:mark_video_segment_start_time_format,
                	 	  pos_end:l_local_segs[local_segs_index -1].pos_end,
                	 	  pos_start_segs:mark_video_segment_start_time,
                	 	  token:mark_video_segment_start_token,
                	 	  pic_token:mark_video_segment_start_pic_token,
                	 	  f:mark_video_segment_start_flag
                	 }
                	 local_cut_video_data_index ++;
                }
		        	  for(var k=0;k<local_cut_video_data.length;k++)
		        	  {
		        	  	 if(local_cut_video_data[k].f == 1)
		        	  	 {
		        	  	 	  local_cut_alarm_video_data[local_cut_alarm_video_data_index]=
		        	  	 	  {
			        	  	 	  pos_start:local_cut_video_data[k].pos_start,
			        	  	 	  pos_end:local_cut_video_data[k].pos_end,
			        	  	 	  token:local_cut_video_data[k].token,
			        	  	 	  pic_token:local_cut_video_data[k].pic_token,
			        	  	 	  f:local_cut_video_data[k].f
		        	  	 	  };
		        	  	 	  local_cut_alarm_video_data_index++;
		        	  	 }
		        	  }
		        	  for(var m=0;m<local_cut_video_data.length;m++)
		        	  {
		        	  	 //var video_time_duration_start = parseInt(new Date(local_cut_video_data[m].pos_start).getTime());
		        	  	 var video_time_duration_start = parseInt(new Date(local_cut_video_data[m].pos_start_segs).getTime());
		        	  	 var video_time_duration_end = parseInt(local_cut_video_data[m].pos_end);
		        	  	 var video_time_duration = (video_time_duration_end - video_time_duration_start)/1000;
		        	  	 local_video_time_duration[local_video_time_duration_index]=
		        	  	 {
		        	  	 	  time_duration:formatSeconds(video_time_duration)
		        	  	 };
		        	  	 local_video_time_duration_index++;		        	  	
		        	  }
		        	  create_video_list({length:local_cut_video_data_index,alarm:0});
		        }           
            function ccm_segs_get_ack(msg,ref)
			      {
			          if( msg && !msg.result && (msg.segs_sdc||msg.segs))
			          {
	                  var cid,sid,stm,etm,f;
	                  cid=sdc_decode(msg.segs_sdc.cid,msg.segs_sdc.record_num);
	                  sid=sdc_decode(msg.segs_sdc.sid,msg.segs_sdc.record_num);
	                  stm=sdc_decode(msg.segs_sdc.stm,msg.segs_sdc.record_num);
	                  etm=sdc_decode(msg.segs_sdc.etm,msg.segs_sdc.record_num);
	                  f=sdc_decode(msg.segs_sdc.f,msg.segs_sdc.record_num);
	                  if(!cid || !sid || !stm || !etm || !f)
	                  {
	                  	return;
	                  }
	                  else
	                  {
		                  for(var i=0;i<(cid?cid.length:0);i++)
		                  {
		                     l_segs[i]={cid:cid[i],sid:sid[i],stm:stm[i],etm:etm[i],f:f[i]};
		                  }
                    }
			              draw_data_rect({base_start_time:ref.base_start_time, dev_sn:ref.dev_sn});
			          }
			      }
			      /*to solve the IE and firefox can't support new Date()*/
			      function getDateForStringDate(strDate)
			      {
			      		var s = strDate.split(".");
			      		return new Date(s[0],s[1]-1,s[2],s[3],s[4],s[5]);
			      }
            function ccm_calendar_data_ack(msg,ref)
            {
                if( msg && !msg.result&&msg.date_infos)
                {
                    var l_date_infos=[];
                    var l_local_date_infos=[];
                    var l_date_infos=msg.date_infos;
                    var date_infos_time=[];
                    // for(var i=0;i<l_date_infos.length;i++)
                    // {
                    //    l_local_date_infos[i]= new Date(l_date_infos[i].date * 1000).format("yyyy.MM.dd.00.00.00");
                    // }
                    //var start_time1 = (new Date(l_local_date_infos[0])).getTime();                 /*get the first day video data*/
                    //start_time = (getDateForStringDate(l_local_date_infos[0])).getTime();
                    for(var i=0;i<l_date_infos.length;i++)
                    {
                        var date_mis = new Date(l_date_infos[i].date * 1000).format("yyyy.MM.dd.00.00.00");
                        if(i>0&& date_mis != l_local_date_infos[l_local_date_infos.length-1] && (l_date_infos[i].date*1000) >date_infos_time[date_infos_time.length-1]){
                            l_local_date_infos[l_local_date_infos.length]= date_mis;
                            date_infos_time[date_infos_time.length]= (getDateForStringDate(l_local_date_infos[l_local_date_infos.length-1])).getTime();
                        }
                        else if (i==0){
                            l_local_date_infos[i]= date_mis;
                            date_infos_time[i]= (getDateForStringDate(l_local_date_infos[i])).getTime();
                        }
                        
                    }
                    jQuery("#vimtag_calendar_input").datepicker({showOn:'button', buttonImageOnly:true,date_infos:date_infos_time, onSelect:function(dateText, inst){l_me.ctrl({type:"select_video_base_select_date", date:mx("#vimtag_calendar_input").value})}});
                    var date = new Date();
                    var now = date.getFullYear()+"."+(date.getMonth()+1)+"."+date.getDate()+".00.00.00";

                    start_time = (getDateForStringDate(now)).getTime();
                    end_time = start_time+60*60*24*1000;
                    ms.send_msg("box_get",{box_sn:ref.box_sn, dev_sn:ref.dev_sn, flag:8,start_time:start_time,end_time:end_time},{box_sn:ref.box_sn,dev_sn:ref.dev_sn,flag:8,base_start_time:start_time},ccm_segs_get_ack);
                }                
            }
            
            l_me.ctrl = function(obj){
                switch(obj.type){
                    case "destroy_box_device_video_page":
                    {
                    	 l_dom_playback_obj.ctrl({type:"destroy_playback_vimtag"});
                    	 l_dom_box_playback_video.parentNode.removeChild(l_dom_box_playback_video); /*destroy the box_playback_video page*/
                    	 jQuery("#vimtag_device_list_box").show();                                  /*show the page of video list page*/
                    	 break;
                    }
                    case "select_video_base_select_date":
                    {
                    	 mx("#vimtag_device_list_box")[s_innerHTML] = "";
                    	 l_me.ctrl({type:"destroy"});
                    	 start_time = (new Date(obj.date)).getTime();
                    	 end_time = start_time+60*60*24*1000;
                    	 ms.send_msg("box_get",{box_sn:g_select_device_ipc, dev_sn:g_select_box_ipc, flag:8,start_time:start_time,end_time:end_time},{box_sn:g_select_device_ipc,dev_sn:g_select_box_ipc,flag:8,base_start_time:start_time},ccm_segs_get_ack);
                    	 break;
                    }
                    case "reload_box_video_list":
                    {
                    	 mx("#vimtag_device_list_box")[s_innerHTML] = "";
                    	 l_me.ctrl({type:"destroy"});
                    	 ms.send_msg("box_get",{box_sn:g_select_device_ipc, dev_sn:g_select_box_ipc, flag:8,start_time:start_time,end_time:end_time},{box_sn:g_select_device_ipc,dev_sn:g_select_box_ipc,flag:8,base_start_time:start_time},ccm_segs_get_ack);
                    	 break;
                    }
                    case "get_alarm_video_list":
                    {
                    	 mx("#vimtag_device_list_box")[s_innerHTML] = "";
                    	 create_video_list({length:local_cut_alarm_video_data.length,alarm:1});
                    	 l_me.ctrl({type:"destroy"});
                    	 break;
                    }
                    case "destroy":
                    {
                    	 l_segs = [];
                    	 l_local_segs = [];
                    	 l_local_alarm_segs = [];
                    	 l_pic_token = [];
                    	 local_segs_index = 0;
                    	 local_alarm_segs_index = 0;
                    	 local_cut_video_data_index = 0;
                    	 local_cut_video_data = [];
                    	 local_cut_alarm_video_data = [];
                    	 local_cut_alarm_vide_data_index = 0;
                    	 local_segs_index = 0;
                       cut_video_time = 0;
                       mark_video_segment_start_time = 0;
                       mark_video_segment_start_token = 0;
                       mark_video_segment_start_pic_token = 0;
                       mark_video_segment_start_flag =0; 
                       local_video_time_duration = [];
                       local_video_time_duration_index = 0;                      
                       break;
                    }
                }
            }
            ms.send_msg("box_get",{box_sn:g_select_device_ipc, dev_sn:obj.box_ipc_sn, flag:2,start_time:0, end_time:0},{box_sn:g_select_device_ipc,dev_sn:obj.box_ipc_sn,flag:2,base_start_time:obj.start_time},ccm_calendar_data_ack);            
    }
    function class_device_messages_page(obj){
    	  var l_me_parent = obj.parent,
    	      l_parent_callback = obj.on_event,
    	      l_me = this,
    	      g_click_time,
		        g_shown_pic,
		        g_last_time,
		        g_history_message = new Array(),
		        g_first_time,
		        g_history_url = new Array(),
		        g_big_img_url = new Array(),
		        g_play_back_url,
		        g_weekArray = new Array(mcs_sunday, mcs_monday, mcs_tuesday, mcs_wednesday,mcs_thursday, mcs_friday, mcs_saturday),
		        l_dom_history_main,
		        l_dom_snapshot_pic,
		        l_view_page_obj,
            l_dom_history_definition,
		        l_dom_playback_obj;
              
            l_dom_history_definition = dom_create_child(l_me_parent, "div", "vimtag_device_list_box")
    	      l_dom_history_main = dom_create_child(l_dom_history_definition, "div", "history_main");
		    	  function create_big_image_preview_div(obj)
		        {
		            var correct_width, correct_height, prop,
		                snapshot_preview_div = mx("#snapshot_preview_div"),
		                snapshot_preview_inner = mx("#snapshot_preview_inner"),
		                snapshot_preview_content = mx("#snapshot_preview_content");

		            correct_width = obj.resolution_w;
		            correct_height = obj.resolution_h;
		            if(correct_width > g_web.offsetWidth * 8 / 10)
		            {
		                correct_width = parseInt(g_web.offsetWidth * 8 / 10);
		                correct_height = parseInt(correct_width * obj.resolution_h / obj.resolution_w);
		            }
		            if(correct_height > g_web.offsetHeight * 8 / 10)
		            {
		                correct_height = parseInt(g_web.offsetHeight * 8 / 10);
		                correct_width = parseInt(correct_height * obj.resolution_w / obj.resolution_h);
		            }
		            if(snapshot_preview_content)
		            {
		                snapshot_preview_div.style.width = correct_width + 13*2 + "px";
		                snapshot_preview_div.style.height = correct_height + 13*2 + "px";
		                snapshot_preview_div.style.left = ((g_web.offsetWidth - correct_width) / 2) + "px";
		                snapshot_preview_div.style.top = ((g_web.offsetHeight - correct_height) / 2)  + "px";
		                snapshot_preview_content.src = obj.uri;
		            }
		            else
		            {
		                var snapshot_preview_close;

		                snapshot_preview_div = dom_create_child(page, "div", "snapshot_preview_div");
		                snapshot_preview_div[s_style][s_cssText] = "width:" + (correct_width + 13*2) + "px;height:" + (correct_height + 13*2) + "px;"
		                    + "left:" + ((g_web.offsetWidth - correct_width) / 2) + "px;"
		                    + "top:" + ((g_web.offsetHeight - correct_height) / 2)  + "px;position:absolute;z-index:50";

		                snapshot_preview_inner = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_inner");
		                snapshot_preview_inner[s_style][s_cssText] = "width:" + (correct_width + 13) + "px;height:" + (correct_height + 13) + "px;"
		                    + "left:6px;top:6px;position:relative;";

		                snapshot_preview_content = dom_create_child(snapshot_preview_inner, "img", "snapshot_preview_content");
		                snapshot_preview_content[s_style][s_cssText] = "width:" + correct_width + "px;height:" + correct_height + "px;"
		                    + "left:7px;top:7px;position:relative;";
		                snapshot_preview_content.src = obj.uri;

		                snapshot_preview_close = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_close");		                
		                if(g_domain_oems_vimtag)
		                {
		                	 snapshot_preview_close[s_style][s_cssText] = "position:absolute;right:15px;top:15px;cursor:pointer;";
		                }
		                //预览图关闭按键事件
		                snapshot_preview_close.onclick = function() {
		                    snapshot_preview_close.onclick = "";
		                    snapshot_preview_close.onmouseover = "";
		                    snapshot_preview_close.onmouseout = "";
		                    snapshot_preview_div[s_innerHTML] = "";
		                    page[s_removeChild](snapshot_preview_div);
		                    snapshot_preview_div = null;
		                };
		            }
		        }
		    	  function create_history_main()
		        {                  
		            mcloud_agent.msgs_get({sn:g_select_device_ipc,start:l_start,counts:"-30",filter:""},null, get_device_information);
                function get_device_information(msg,ref)
                {
                    if(msg.result == "")
                    {
                        l_length = (msg.messages)?msg.messages.length:0;
                        l_start = (msg.messages)?msg.messages[l_length-1].msg_id:"0X7fffffff";
                        var i = 0,load_images = new Array();
                        for(var i = 0;i<l_length;i++)
                        {
                            l_pic_id[i + 30 * g_click_time] = msg.messages[i];
                            g_history_message[i + 30 * g_click_time] = msg.messages[i];
                            l_message[i + 30 * g_click_time] = msg.messages[i].p;
                            msg.messages[i].p = msg.messages[i].p?msg.messages[i].p:" ";
                            var now_params = msg.messages[i].p;
                            if(!g_last_time)
                            {
                            	g_first_time = new Date(msg.messages[i].date * 1000).format("yyyy-MM-dd");
                            }
                            if (new Date(msg.messages[i].date * 1000).format("yyyy-MM-dd") != g_last_time) {
                                g_last_time = new Date(msg.messages[i].date * 1000).format("yyyy-MM-dd");
                                var time = document.createElement("div");
                                time.setAttribute("class", "time_div");
                                time.innerHTML = g_last_time + "  " + g_weekArray[new Date(msg.messages[i].date * 1000).getDay()];
                                jQuery("#history_main")[0].appendChild(time);
                                jQuery(time).css("clear", "both");
                            }
                            var history_img = document.createElement("div");
                            history_img.setAttribute("class", "img_box");
                            var img = document.createElement("img");
                            img.setAttribute("class", "video_and_photo");
                            img.setAttribute("id", msg.messages[i].msg_id);
                            img.setAttribute("name", msg.messages[i].type);
                            history_img.appendChild(img);
                            jQuery("#history_main")[0].appendChild(history_img);
                            for (var j = 0; j < now_params.length; j++)
                            {
                                if (now_params[j].n == "img_thumb_token" && now_params[j].v != 0 && now_params[j].v != "")
                                {
                                    var pic_url = "http://" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + mcloud_agent.create_nid() + "&dsess_sn=" + g_select_device_ipc + "&dtoken=" + now_params[j].v;
                                    load_images[i+g_click_time*30] = new Image();
                                    load_images[i+g_click_time*30].src = pic_url;
                                    load_images[i+g_click_time*30].onload = (function()
                                    {
                                    	var dom_image = jQuery(".video_and_photo");
                                    	if(dom_image.length > 0)
									                    {
                                            for(var j = 0;j < g_history_message.length;j++)
                                            {
                                                if(this == load_images[j])
                                                {
                                                    break;
                                                }
                                            }
                                            	dom_image[j].src = this.src;
                                     	}
                                    });
                                    g_history_url[i + 30 * g_click_time] = pic_url;
                                }
                                else if(now_params[j].n == "img_token" && now_params[j].v != 0 && now_params[j].v != "")
                                {
                                	g_big_img_url[i + 30 * g_click_time]="http://" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + mcloud_agent.create_nid() + "&dsess_sn=" + g_select_device_ipc + "&dtoken=" + now_params[j].v;
                                }
                            }
                            var mark = document.createElement("div");
                            mark.setAttribute("class", "mark_of_pic");
                            mark.innerHTML = (msg.messages[i].type == "snapshot")?mcs_snapshot:(msg.messages[i].type == "record")?mcs_record:mcs_motion_alert;
                            history_img.appendChild(mark);
                            if (i == l_length - 1) {
                                g_shown_pic  += l_length;
                                if (msg.total > g_shown_pic&&msg.total>30) {
                                    var more_pic = document.createElement("input");
                                    more_pic.setAttribute("type", "button");
                                    more_pic.setAttribute("id", "more_pic");
                                    more_pic.setAttribute("value", mcs_show_more);
                                    jQuery("#history_main")[0].appendChild(more_pic);
                                }
                                add_history_event();
                            }
                            g_shown_history = true;
                        }
                        if(!msg.messages)
                        {
                            jQuery("#history_main")[0].innerHTML = mcs_no_history;
                        }
                    }
                    else if(msg.result = "InvalidSession")
                    {
                        create_history_main();
                    }
                    else
                    {
                        msg_tips({msg:msg.result, type:"error", timeout:3000});
                    }
                };
		        }

		        function add_history_event()
		        {
		            var video_and_photo = jQuery(".video_and_photo"),
		                dom_more = jQuery("#more_pic");
		            for(var i = 0;i<video_and_photo.length;i++)
		            {
		                video_and_photo[i].onclick = (function()
		                {
		                    var p;
		                    for(var j = 0;j<video_and_photo.length;j++)
		                    {
		                        if(this == video_and_photo[j])
		                        {
		                            //p = g_history_message[j].p[0];
		                            p = g_history_message[j];
		                            break;
		                        }
		                    }
		                    if(this.name == "snapshot")
		                    {
                           //创建大预览图
                           create_big_image_preview_div({resolution_w:640, resolution_h:360, uri:this.src});
		                    }
		                    else if(this.name == "record")
		                    {
		                        g_now_page = "playback";
		                        l_me_parent[s_innerHTML] = "";
		                        l_dom_playback_obj = new class_home_cntr({parent:l_me_parent,on_event:obj.on_event, node_sn:g_select_device_ipc, playback:1});
		                        l_dom_playback_obj.ctrl({type:"playback_token_vimtag",token:p.p[0].v});
		                        l_dom_playback_obj.ctrl({type:"playback_size_vimtag",size:p.p[3].v});
		                        l_dom_playback_obj.ctrl({type:"create_playback_vimtag",node_sn:g_select_device_ipc});
		                        
		                        g_return_play_video_page = 0; //当处于视频播放时值为0
		                        g_is_in_playback_page = 1;
		                    }
		                    else if(this.name == "alert")
		                    {
		                        //创建大预览图
		                        create_big_image_preview_div({resolution_w:640, resolution_h:360, uri:this.src});
		                    }                        
		                });
		            }
		            if(dom_more[0])
		            {
		                dom_more[0].onclick = function()
		                {
		                    g_click_time++;
		                    create_history_main();
		                };
		            }

		        }

		        l_me.ctrl = function(obj){
		            switch(obj.type){
		               case "destroy_history_play_page":
		                  {  //结束正在播放的视频
		                  	 if(g_is_play_back) l_dom_playback_obj.ctrl({type:"destroy_playback_vimtag", node_sn:g_select_device_ipc});
		                  	 l_me_parent[s_innerHTML] = "";
		                  	 l_me_parent = null;
		                  	 break;
		                  }
		               case "destroy_history_page":
		                  {
		                  	 l_me_parent[s_innerHTML] = "";
		                  	 l_me_parent = null;
		                  	 break;
		                  }
		            }
		        }

            var l_start = "0X7fffffff",l_length,l_message = [];
            var l_pic_id = [],l_min_id;
            g_click_time = 0;
            g_shown_pic = 0;
            g_last_time = 0;
            jQuery("#setup_list").remove();
            create_history_main();
    }
    function class_Tips_box(obj) {
        var l_me_parent = obj.parent, l_dom_add_device_Tips,l_dom_normal_Tips,
        l_client_h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
        l_client_w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        l_me_parent[s_innerHTML] = "<div id='add_device_Tips' style='width:10px;height:10px; z-index:95;   position:absolute'></div><div id='normal_Tips' style='width:10px;height:10px;z-index:95;   position:absolute'></div>";
        l_dom_add_device_Tips = mx("#add_device_Tips");
        l_dom_normal_Tips = mx("#normal_Tips");
        l_dom_add_device_Tips[s_style].top = g_device_list_inner_h + 40 + "px";
        l_dom_add_device_Tips[s_style].left = (l_client_w - g_cntr_content_w) / 2 + 85 + "px";
        l_dom_normal_Tips[s_style].top = "10px";
        l_dom_normal_Tips[s_style].right = (l_client_w - g_cntr_content_w) / 2 + 50 + "px";
        system_tooltip({parent: l_dom_add_device_Tips,color: "gray",position: "right",disappear_way: "time",str: mcs_devlist_adddev_hint});
        system_tooltip({parent: l_dom_normal_Tips,color: "gray",position: "left",disappear_way: "time",str: mcs_devlist_menu_hint});
    }

    function class_device_list_box(obj)
    {
        var l_me = this,l_inner_html = "",
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_device_list_panel,
            l_dom_device_list_arrow,
            l_dom_device_list_inner,
            l_dom_device_list_header,
            l_dom_device_list_content,
            l_dom_device_list_footer,
            l_dom_list_classDom,
            l_dom_list_state_classDom,
            l_dom_list_span_classDom,
            l_dom_device_add_menu,
            l_dom_device_edit_ico,
            l_dom_device_add_ico,
            l_dom_device_refresh_ico,
            l_dom_device_invalid_div,
            l_dom_device_invalid_close,
            l_dom_device_invalid_inner,
            l_dom_device_invalid_content,
            l_dom_device_invalid_Prompt,
            l_cable_page_create_obj,
            l_option_cable_page,
            l_dom_net_skip,l_dom_net_next,l_dom_net_cancel,l_dom_net_setting,
            l_profiles=[{token:"p0",width:1280,height:720},{token:"p1",width:640,height:360},{token:"p2",width:320,height:180},{token:"p3",width:160,height:90}],
            l_add_waiting_flag = 0, //用来间隔添加设备，即某次添加设备还未响应，系统不允许再次点击添加设备
            // 用来存储当前信息序号
            l_device_list_man_qid={};

        l_dom_device_list_panel = dom_create_child(l_me_parent, "div", "device_list_panel");
        l_dom_device_list_arrow =  dom_create_child(l_me_parent, "span", "device_list_arrow");
        l_dom_device_list_inner = dom_create_child(l_dom_device_list_panel, "div", "device_list_inner", "standard_box_inner_style");
        l_dom_device_list_header = dom_create_child(l_dom_device_list_inner, "div", "device_list_header");
        l_dom_device_list_content = dom_create_child(l_dom_device_list_inner, "div", "device_list_content");
        l_dom_device_list_footer = dom_create_child(l_dom_device_list_inner, "div", "device_list_footer");
        //设备列表底部菜单
        l_dom_device_list_footer[s_innerHTML] =
            "<div id='device_edit_div'><div id='device_edit_ico'></div></div>"
            +"<div id='device_add_div'><div id='device_add_ico'></div></div>"
            +"<div id='device_Refresh_div'><div id='device_Refresh_ico'></div></div>";
        l_dom_device_edit_ico = mx("#device_edit_ico");
        l_dom_device_refresh_ico = mx("#device_Refresh_ico");
        l_dom_device_add_ico = mx("#device_add_ico");
        background_img_set(l_dom_device_edit_ico, sub_img_device_edit);
        background_img_set(l_dom_device_refresh_ico, sub_img_device_search);
        background_img_set(l_dom_device_add_ico, sub_img_device_add);
        //如果是ipc连接则不显示设备列表下的功能
        if(g_login_status == "ipc")
        {
            l_dom_device_list_footer[s_style].display = "none";
        }

        l_dom_device_list_footer[s_style][s_width] = g_panel_box_w + "px";
        g_device_list_inner_h = g_panel_box_inner_h - l_dom_device_list_footer.offsetHeight;
        l_dom_device_list_panel[s_style][s_cssText] = "width:" + g_panel_box_w + "px;height:" + g_panel_box_h + "px;left:" + g_panel_box_offset + "px;";
        l_dom_device_list_inner[s_style][s_cssText] = "width:" + g_panel_box_w + "px;height:" + g_device_list_inner_h + "px;";
        l_dom_device_list_arrow[s_style].top = g_panel_box_h + 8 + "px";
        //创建设备列表
        function create_device_list(obj)
        {
            var i, j, length, sn, pos, old_sn,type;
            if(mcloud_agent.devs.list.length == 0) return;
            if(l_dom_device_list_content[s_innerHTML] == ""){
              //创建设备列表

              l_inner_html = "<ul id='device_list_tree'>";
              for( length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
              {
              	 var data = mcloud_agent.devs.list[i];
              	 if(!data)  continue;
              	 if(data.stat == "Online")
              	 {
                   l_inner_html += "<li class='device_list_li' state='online'>"
                      + "<div class='omit_layer'><div class='device_list_li_state'  title=" + mcs_connnected + " state='normal'></div>";
              	 }
              	 else if(data.stat == "Offline")
              	 {
                   l_inner_html += "<li class='device_list_li' state='offline'>"
                      + "<div class='omit_layer'><div class='device_list_li_state' title=" + mcs_not_connected + " state='not_connected'></div>";
              	 }
              	 else if(data.stat == "InvalidAuth")
              	 {
                    l_inner_html += "<li class='device_list_li' state='invalid_auth'>"
                      + "<div class='omit_layer'><div class='device_list_li_state' title=" + mcs_invalid_password + " state='password_correction'></div>";
              	 }
              	 l_inner_html += "<span class='device_list_li_span' title=" + data.sn + "&#13;" + data.addr + " sn=" + data.sn + ">" + ((data.nick.trim() != "")?data.nick:data.sn) + "</span>";
              	 if(i < length-1)
                   l_inner_html += "<img class='device_list_split_bar' src='./imgs/split_bar.png'></img></div>"
                       +"</li>";
              }
              l_inner_html += "</ul>";
              l_dom_device_list_content[s_innerHTML] = l_inner_html;
              jQuery(l_dom_device_list_content).mCustomScrollbar();

              l_dom_list_classDom = mx(".device_list_li");
              l_dom_list_state_classDom = mx(".device_list_li_state");
              l_dom_list_span_classDom = mx(".device_list_li_span");
            }else{
            	  for(length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
                {
                    var data = mcloud_agent.devs.list[i];
                    if(l_dom_list_classDom[i]==null )
                    {
                        l_dom_device_list_content[s_innerHTML] ="";
                        create_device_list({type:"create"});
                        return;
                    }
                    if(data.stat == "Online")
                    {
                        l_dom_list_classDom[i].setAttribute("state","online");
                        l_dom_list_state_classDom[i].setAttribute("state","normal");
                        l_dom_list_state_classDom[i].setAttribute("title",mcs_connnected);

                    }
                    else if(data.stat == "Offline")
                    {
                        l_dom_list_classDom[i].setAttribute("state","offline");
                        l_dom_list_state_classDom[i].setAttribute("state","not_connected");
                        l_dom_list_state_classDom[i].setAttribute("title",mcs_not_connected);
                    }
                    else if(data.stat == "InvalidAuth")
                    {
                        l_dom_list_classDom[i].setAttribute("state","invalid_auth");
                        l_dom_list_state_classDom[i].setAttribute("state","password_correction");
                        l_dom_list_state_classDom[i].setAttribute("title",mcs_invalid_password);
                    }
                }
                jQuery(l_dom_device_list_content).mCustomScrollbar("update");
            }

            for(length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
            {
            	  var data = mcloud_agent.devs.list[i];
            	  //将设备列表的信息存进g_device_list_obj中
                  g_device_list_obj["sn_" + data.sn] = {name:name,type:mcloud_agent.devs.get(data.sn).type, ip:mcloud_agent.devs.get(data.sn).addr, isParent:true,
                         state:{online:"Online", view:0, recording:0, call:0, playback:0,playback_download:0}};  //["sn_" + data.sn]
            }
            //给设备列表中设备状态放图
            for(i = 0, length = l_dom_list_state_classDom.length; i < length; ++i)
            {
                if(l_dom_list_state_classDom[i].getAttribute("state") == "normal")
                    background_img_set(l_dom_list_state_classDom[i], sub_img_status0);
                else if(l_dom_list_state_classDom[i].getAttribute("state") == "password_correction")
                    background_img_set(l_dom_list_state_classDom[i], sub_img_status1);
                else if(l_dom_list_state_classDom[i].getAttribute("state") == "not_connected")
                    background_img_set(l_dom_list_state_classDom[i], sub_img_status2);
            }
            length = l_dom_list_span_classDom.length;
            for(i = 0; i < length; ++i)
            {
            	  //状态正常设备的事件
                if(l_dom_list_classDom[i].getAttribute("state") == "online")
                {   //状态正常设备的点击事件
                    l_dom_list_span_classDom[i].onclick = function() {
                        old_sn = g_select_device_ipc;
                        g_select_device_ipc = this.getAttribute("sn");
                        pos = mcloud_agent.devs.get_index(g_select_device_ipc);
                        type= mcloud_agent.devs.get(g_select_device_ipc).type;
                        var dev_img_ver=mcloud_agent.devs.get(g_select_device_ipc).img_ver;
                        //如果点击的是同一个设备 则不做任何事
                        //if((old_sn == g_select_device_ipc)&& (type != "BOX")) return;

                        //更改选中的项的style
                        change_select_device_style(pos);

                        //根据设备 版本更改菜单栏
        	            	if(determine_the_version({type:"Positive",version:version_Category.Info_version}) )
        	            	{
        	              	  l_parent_callback({type:"refresh_menu",data:2});
        	            	}

                        if((g_now_page == "home" || g_now_page == "playback")/* && type != "BOX"*/)
                        {   //处理更改设备
                            l_parent_callback({type:"change_select_ipc", data:{old_sn:old_sn}});
                            if(this.getAttribute("window_id"))
                                mx("#" + this.getAttribute("window_id")).click_ex();
                            if(determine_the_version({type:"Anti",version:version_Category.Snapshot_version}) && g_now_page == "home")
        	                	{    //更改菜单栏
        	                     //l_parent_callback({type:"refresh_menu",data:0});
        	                	}
        	                	else if(determine_the_version({type:"Anti",version:version_Category.Snapshot_version})  && g_now_page == "playback")
        	                	{
        	                     //l_parent_callback({type:"refresh_menu",data:1});
        	                	}
                        }
                        else if(g_now_page == "manager")//设置界面不需要处理change_select_ipc
                        {   //设置界面 切换设备 后点击关于
                            jQuery("#product_information").click();
                            if(determine_the_version({type:"Positive",version:version_Category.Snapshot_version}))
        	                  {
        	                     //l_parent_callback({type:"refresh_menu",data:3});
        	                  }
        	                  if(type == "BOX")
        	                  {
        	                    jQuery(OSD).hide();
                              jQuery(alarm).hide();
                              jQuery(alarm_linkage).hide();
                              jQuery(record_setting).hide();
                              jQuery(others).hide();
                              jQuery(storage_device).hide();
        	                  }
                            if(!g_domain_oems_luxcamapp)
                            {
                              jQuery(notification).hide();
                            }
                            if((mcloud_agent.devs.get(g_select_device_ipc)).img_ver.substr(0,2) < "v2")
                            {
                              jQuery(storage_device).hide();
                            }
                        }
                        else if(g_now_page == "alarm")
                        {   //删除设备列表后的红底数字
                            del_alarm_notification({sn:g_select_device_ipc});
                            l_parent_callback({type:"change_select_ipc"});
                            if(determine_the_version({type:"Anti",version:version_Category.Snapshot_version}))
        	                  {
        	                    //l_parent_callback({type:"refresh_menu",data:1});
        	                  }
                        }
                        else if(g_now_page == "timeline")
                        {

                            if(determine_the_version({type:"Positive",version:version_Category.Snapshot_version}))
        	                  {
        	                    //l_parent_callback({type:"refresh_menu",data:1});
        	                    l_parent_callback({type:"change_select_ipc"});
        	                  }
                        }

                        if(type == "BOX")
        	            	{
        	            	    if(determine_the_version({type:"Positive",version:version_Category.Snapshot_version}))
        	                  {
        	                    l_parent_callback({type:"refresh_menu",data:5,click_index:(g_now_page == "manager")?5:4});
        	                    return;
        	                  }
        	            	}
        	            	else if(dev_img_ver.substring(0,2)>="v2")
    	            	    {
    	            	        var t_index=(g_now_page == "home")?1:((g_now_page == "manager")?5:4);
    	            	        l_parent_callback({type:"refresh_menu",data:6,click_index:t_index});
    	            	    }
        	            	else
    	            	    {
    	            	        var t_index=(g_now_page == "home")?1:
    	            	            ((g_now_page == "manager")?5:
    	            	            ((g_now_page == "playback")?2:
    	            	            ((g_now_page == "alarm")?3:2)));
    	            	         l_parent_callback({type:"refresh_menu",data:7,click_index:t_index});
  	            	      }
                    };
                    //状态正常设备的双击事件
                    l_dom_list_span_classDom[i].ondblclick = function() {
                        var old_sn = g_select_device_ipc;
                        g_select_device_ipc = this.getAttribute("sn");
                        if(old_sn == g_select_device_ipc){
                        	if(g_is_playing == 1){
                        		return;
                        	}
                        }else{
                          pos = mcloud_agent.devs.get_index(g_select_device_ipc);
                          change_select_device_style(pos);
                        }
                        if(g_now_page != "home" || l_dom_list_classDom[pos].getAttribute("state") != "online") return;
                        if(g_is_playing == 1)
                        {
                           l_parent_callback({type:"delete_ipc", data:{node_sn:old_sn}});
                           l_parent_callback({type:"create_ipc", data:{node_sn:g_select_device_ipc}});
                        }
                        else
                        {
                           l_parent_callback({type:"create_ipc", data:{node_sn:g_select_device_ipc}});
                        }
                    };
                }
                //设备在线但是密码错误的设备事件
                else if(l_dom_list_classDom[i].getAttribute("state") == "invalid_auth")
                {
                    l_dom_list_span_classDom[i].onclick = function() {
                    	  //如果是ipc连接即使用设备ID登录，则退出系统
                        if(g_login_status == "ipc"){
                           system_pop_confirm_box({alert:true,str:mcs_password_expired, callback_func:function(){
                              jQuery("#system_logout").click();
                           }});
                        }
                        else
                        {
                           create_device_add_menu({parent:this, sn:this.getAttribute("sn"), type:"re_enter", direction:"bottom"});
                        }
                    };
                }
            }
            if(obj.type == "create"){
            		//如果有选择的设备则点击设备列表该设备项
            		if(g_select_device_ipc){
               		 	pos = mcloud_agent.devs.get_index(g_select_device_ipc);
         				change_select_device_style(pos);
            		}
            }else{
            	 if(g_select_device_ipc){
            	 	  pos = mcloud_agent.devs.get_index(g_select_device_ipc);
            	 	  if(obj.data.change){
            	 	  	g_select_device_ipc = obj.data.old_sn;
            	 	  	jQuery(".device_list_li_span:eq(" + pos + ")").click();
            	 	  }else{
            	 	  	change_select_device_style(pos);
            	 	  }
            	 }
            }
        }

        //更改选中的项的style
        function change_select_device_style(index)   //from 0
        {
            device_list_li_span=mx(".device_list_li_span");
            for(var i=0;i<device_list_li_span.length;i++)
            {
                device_list_li_span[i][s_style].color = "#BBBBBB";
                device_list_li_span[i][s_style].fontSize ="14px";
            }
            if(device_list_li_span[index])
            {
               if(g_hostname=="www.luxcamapp.eu")
               {
                  device_list_li_span[index][s_style].color ="red";
               }
               else
               {
                  device_list_li_span[index][s_style].color = "#80a52d";
               }
               device_list_li_span[index][s_style].fontSize ="16px";
            }
        }
        function create_device_add_menu(obj)
        {
            var origin_left = 0, origin_top = 0,
                offset_left = 0, offset_top = 0,
                p = obj.parent, sn = obj.sn,
                add_device_sn,
                add_device_show_pw, add_device_pw,
                add_button,
                l_inner_html = "";

            if(l_dom_device_add_menu) return;
            while(p !== null)
            {
                origin_left += p.offsetLeft;
                origin_top += p.offsetTop;
                p = p.offsetParent;
            }
            l_dom_device_add_menu = dom_create_child(page, "div", "device_add_menu");
            l_inner_html = "<div id='device_add_menu_inner'>";
            //如果obj的direction属性为top表示添加设备 为bottom表示从新输入密码
            if(obj.direction == "top")
            {
                l_inner_html += "<h2>" + mcs_add_device + ":</h2>";
            }
            else if(obj.direction == "bottom")
            {
                l_inner_html += "<h2>" + mcs_re_enter_the_password + ":</h2>";
            }
            l_inner_html += "<div class='placeholding_input'>";
            if(obj.type == "add")
                l_inner_html += "<input class='standard_inputs_normal_ex pop_menu_first' id='add_device_sn' type='text' value='" + mcs_input_device_id + "'>";
            else if(obj.type == "re_enter")
                l_inner_html += "<input class='input_read_only pop_menu_first'"
                    + "style='text-align:left;color:#bbb;height:39px;line-height:39px;padding-left:10px;width:166px'"
                    + "id='add_device_sn' type='text' value='" + obj.sn + "' " + g_input_read_only + "/>";
            l_inner_html +=
                "</div>"
                +   "<div class='placeholding_input'>"
                +       "<input class='standard_inputs_normal_ex pop_menu_last' id='add_device_show_pw' type='text' value='" + mcs_password+ "'>"
                +       "<input class='standard_inputs_normal_ex pop_menu_last' id='add_device_pw' type='password' style='display:none;color:#404040'>"
                +   "</div>"
                +   "<button id='device_add_button' class='ok_button'>" + mcs_add + "</button>";
            if(obj.direction == "top")
            {
                l_inner_html +=
                    "<span class='caret_arrow_bottom' style='position:absolute;bottom:-6px;left:90px;'></span>"
                    +"</div>";
            }
            else if(obj.direction == "bottom")
            {
                l_inner_html +=
                    "<span class='caret_arrow_up' style='position:absolute;top:-6px;left:90px;'></span>"
                    +"</div>";
            }
            l_dom_device_add_menu[s_innerHTML] = l_inner_html;

            jQuery(l_dom_device_add_menu).hide().fadeIn();
            add_device_sn = mx("#add_device_sn");
            add_device_show_pw = mx("#add_device_show_pw");
            add_device_pw = mx("#add_device_pw");
            add_button = mx("#device_add_button");

            if(obj.direction == "top")
            {
                offset_top = origin_top - mx(".caret_arrow_bottom")[0].offsetHeight - l_dom_device_add_menu.offsetHeight - 6;
                offset_left = origin_left - l_dom_device_add_menu.offsetWidth / 2 + 10;
            }
            else if(obj.direction == "bottom")
            {
                offset_top = origin_top + mx(".caret_arrow_up")[0].offsetHeight + obj.parent.offsetHeight + 6;
                offset_left = origin_left - l_dom_device_add_menu.offsetWidth / 3;
            }
            l_dom_device_add_menu[s_style][s_cssText] = "top:" + offset_top + "px;left:" + (offset_left < 0 ? 0 : offset_left) + "px;";

            if(obj.type == "add")
            {
                add_device_sn.onfocus = function() {
                    this.style.color = "#404040";
                    if(this.value == mcs_input_device_id)
                    {
                        this.value = "";
                    }
                };
                add_device_sn.onblur = function () {
                    if(this.value == "")
                    {
                        this.style.color = "#4D4D4D";
                        this.value = mcs_input_device_id;
                    }
                    else
                    {
                        this.style.color = "#404040";
                    }
                };
            }
            add_device_show_pw.onfocus = function() {
                this.style.display = "none";
                add_device_pw.style.display = "inline";
                add_device_pw.focus();
            };
            add_device_pw.onfocus = function() {
                this.select();
            };
            add_device_pw.onblur = function() {
                if(this.value == "")
                {
                    this.style.display = "none";
                    add_device_show_pw.style.display = "inline";
                }
            };
            //设备添加按键事件
            add_button.onclick = function() {
            	  if(add_device_pw.value == "amdin")
            	  {
            	  	add_device_pw.value = "admin";
            	  }
                if(mx("#system_tooltip"))
                {
                  mx("#system_tooltip")[s_innerHTML]="";
                }
                if(!add_device_sn.value || add_device_sn.value == mcs_input_device_id)
                {
                  system_tooltip({parent:add_device_sn, color:"red", position:"right", disappear_way:"time", str:mcs_blank_device_id + "."});
                  return;
                }
                if(!add_device_pw.value || add_device_pw.value == mcs_password)
                {
                  system_tooltip({parent:add_device_show_pw, color:"red", position:"right", disappear_way:"time", str:mcs_the_password_is_empty + "."});
                  return;
                }
                //用来判断设备列表是否含有设备，type为re_enter表示重新输入密码
                if(mcloud_agent.devs.get(add_device_sn.value.trim())&& obj.type != "re_enter"){
                	system_tooltip({parent:add_device_sn, color:"red", position:"right", disappear_way:"time", str:mcs_device_existed + "."});
                  return;
                }
                if(l_add_waiting_flag == 0){
                	l_add_waiting_flag = 1;
                  ms.send_msg("dev_add",{sn:add_device_sn.value.trim(),pass:add_device_pw.value},{sn:add_device_sn.value.trim(),pass:add_device_pw.value,passlength:add_device_pw.value.length,type:obj.type},ccm_dev_add_ack);
                }
            };
            var temp_func = function(evt) {
                var e = evt || window.event, target = e.target || e.srcElement;

                if(!target || is_ancestor(l_dom_device_add_menu, target)) return;

                if(l_dom_device_add_menu)
                {
                    page[s_removeChild](l_dom_device_add_menu);
                    l_dom_device_add_menu = null;
                }
                g_j_page.unbind("mouseup", temp_func);
            };
            g_j_page.bind("mouseup", temp_func);

            var temp_func2 = function(e) {
                if(e.keyCode == 13)
                {
                    jQuery(document).unbind("keydown", temp_func2);
                    trigger_click(add_button);
                }
            }
            jQuery(document).bind("keydown", temp_func2);
        }
        //创建删除设备按键
        function create_device_delete_img(obj)
        {
            var i, length, delete_div,
                delete_imgs = mx(".device_delete_img"), delete_divs;

            if(delete_imgs.length) return;
            if(l_dom_list_classDom){
            	length = l_dom_list_classDom.length;
            	for(i = 0; i < length; ++i)
            	{
                l_dom_list_classDom[i].firstChild.style.width = "142px";
                delete_div = dom_create_child(l_dom_list_classDom[i], "div", "", "device_delete_div");
                background_img_set(delete_div, sub_img_delete);
                //删除设备按键点击事件
                delete_div.onclick = function() {
                    var sn = mx(".device_list_li_span", this.parentNode)[0].getAttribute("sn");
                    ms.send_msg("dev_del",{sn:sn},{sn:sn},ccm_dev_del_ack);
                }
                delete_div.style.display = "none";
            	}
            	delete_divs = mx(".device_delete_div");
            	jQuery(delete_divs).fadeIn(400);
              //清除设备删除按键
            	var temp_func = function(evt) {
                var e = evt || window.event, target = e.target || e.srcElement;
                if(!target) return;
                delete_divs = mx(".device_delete_div");
                delete_imgs = mx(".device_delete_img");
                length = delete_divs.length;
                for(i = 0; i < length; ++i)
                {
                    if(delete_divs[i] === target || delete_imgs[i] === target) return;
                }
                --length;
                for(; length >= 0; --length)
                {
                    l_dom_list_classDom[length].firstChild.style.width = "152px";
                    delete_divs[length].onclick = null;
                    delete_divs[length].parentNode[s_removeChild](delete_divs[length]);
                }
                g_j_page.unbind("mouseup", temp_func);
            	};
            	g_j_page.bind("mouseup", temp_func);
          	}
            return 0;
        }
        function delete_device(sn)
        {
            var pos = mcloud_agent.devs.get_index(sn),
                l_dom_list_classDom = mx(".device_list_li"),
                j_list_classDom;

            j_list_classDom = jQuery(l_dom_list_classDom[pos]);
            //Animation
            if(!j_list_classDom.is(":animated")) {
                j_list_classDom.animate({width:"0px"}, {queue:true, duration:200}).slideUp(200,
	                function(){
	                //Dom destroy
	                l_dom_list_classDom[pos][s_innerHTML] = "";
	                l_dom_list_classDom[pos].parentNode[s_removeChild](l_dom_list_classDom[pos]);
	                l_dom_list_classDom[pos] = null;
	                //Data adjustment
	                mcloud_agent.devs.del(sn);
	                //Change select device
	
	                if(g_select_device_ipc == sn){
	                	var i,length = mcloud_agent.devs.list.length;
	                	if(length != 0){
	                		for(i=0;i<length;i++){
	                	  	if(mcloud_agent.devs.list[i].stat == "Online"){
	                	  		 pos = mcloud_agent.devs.get_index(mcloud_agent.devs.list[i].sn);
	                	  	 	 jQuery(".device_list_li_span:eq(" + pos + ")").click();
	                	  	   break;
	                	    }
	                	  }
	                	}else{
	                		l_parent_callback({type:"delete_ipc",data:{node_sn:sn}});
	                		g_select_device_ipc = "";
	                	}
	                }
	                var del_g_device_list_obj = new Array();
	                g_device_list_obj = del_g_device_list_obj;
	                for(var i=0; i<mcloud_agent.devs.list.length; i++){
	                   g_device_list_obj["sn_" + mcloud_agent.devs.list[i].sn] = {name:name,type:mcloud_agent.devs.get(mcloud_agent.devs.list[i].sn).type, ip:mcloud_agent.devs.get(mcloud_agent.devs.list[i].sn).addr, isParent:true,
	                       state:{online:"Online", view:0, recording:0, call:0, playback:0,playback_download:0}};
	                }
                });
            }
        }
        //添加设备
        function ccm_dev_add_ack(msg,ref)
        {
        	  l_add_waiting_flag = 0;
            if(!l_me_parent) return;
            if(msg.result == "" && msg.info)
            {   var old_sn,device_change;
                jQuery(l_dom_device_add_menu).toggle();
                if(mcloud_agent.devs.get(msg.info.sn)){
                	mcloud_agent.devs.get(msg.info.sn).stat = msg.info.stat;
                }
                if(g_select_device_ipc == ""){
                	old_sn = "",
                	device_change = 1;
                	g_select_device_ipc = msg.info.sn;
                }
                create_device_list({type:"refresh",data:{old_sn:old_sn,change:device_change}});
            }
            else
            {
                if(msg.result=="accounts.user.offline"){
                   system_tooltip({parent:add_device_sn, color:"red", position:"right", disappear_way:"time", str:mcs_offline+ "."});
                }
                else if(msg.result=="accounts.pass.invalid")
                {
                   system_tooltip({parent:add_device_pw, color:"red", position:"right", disappear_way:"time", str:mcs_invalid_password + "."});
                }
                else if(msg.result=="accounts.user.invalid")
                {
                   system_tooltip({parent:add_device_sn, color:"red", position:"right", disappear_way:"time", str: mcs_device_not_exist+ "."});
                }
                else if(msg.result == "subdev.exceed.device")
                {
                   g_system_prompt_box(mcs_devices_in_the_account_overrun, -10, -200);
                }
                else if(msg.result == "subdev.exceed.user")
                {
                   g_system_prompt_box(mcs_exceed_device, -10, -200);
                }
                return;
            }
            if(ref.passlength<6)
            {
                if(ref.type=="re_enter")
                {
                   system_pop_confirm_box({str:mcs_password_too_simple_hint, callback_func:
                    	function(obj){
                          if(mcloud_agent.devs.get(msg.info.sn).stat == "Online")
                          {
                          	var pos = mcloud_agent.devs.get_index(msg.info.sn);
                      	    jQuery(".device_list_li_span:eq(" + pos + ")").click();
                          }
                    	  	l_parent_callback({type:"refresh_menu",data:3});
                    	}
                   });
                }
                else if(ref.type=="add")
                {
                    l_dom_net_setting.ctrl({type:"ipc_pass_set",data:{user:ref.sn,pass:ref.pass}});
                }
            }
        }
        //删除设备
        function ccm_dev_del_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if( msg && !msg.result)
            {
                delete_device(ref.sn);
            }
            else
            {
                log("error:CcmAddSubDeviceResponse return Result error in class_device_list_box.");
            }
        }
        //产生设备列后面的红底数字
        function alarm_notification(obj)
        {   //count 显示的数字
            var pos,length,classDom_last,count;
            pos = mcloud_agent.devs.get_index(obj.now_item.sn);
            if(!l_device_list_man_qid["q_"+obj.now_item.sn])
            {
               l_device_list_man_qid["q_"+obj.now_item.sn] = obj.sn;
               count=1;
            }else
            {  //用传过来的消息序号减去旧的序号
               count = obj.sn - l_device_list_man_qid["q_"+obj.now_item.sn];
               if(count <= 0) return;
            }
            if(!l_dom_list_classDom[pos])return;
            classDom_last=l_dom_list_classDom[pos].lastChild;
            //红底数字未被清除
            if(classDom_last.className == "device_alarm_div")
            {
                if(count>99){count=99;}
                l_dom_list_classDom[pos].lastChild.lastChild.lastChild[s_innerHTML]=count;
            }
            else
            {
                if(obj.now_item.sn==g_select_device_ipc && g_now_page=="alarm")return;
                //创建存放红底数字的div
                device_alarm_div = dom_create_child(l_dom_list_classDom[pos], "div", "", "device_alarm_div");
                //创建红底数字的 html代码
                device_alarm_div.innerHTML =
                    "<div>"
                   +   "<img style='width:18px;cursor:pointer' src='imgs/notif_ico.png'></img>"
                   +"</div>"
                   +"<div style='color:#fff;font-size:7px;font-weight:900;width:18px;text-align:center;position:absolute;top:2px'>"
                   +   "<span id='ccm_notif_count' style='cursor:pointer'>" + count + "</span>"
                   +"</div>";
                //红底数字的点击事件
                device_alarm_div.onclick=function()
                {
                   //点击设备列表中的设备项
                   jQuery(".device_list_li_span:eq(" + pos + ")").click();
                   //跳转到信息界面
                   setTimeout(function(){l_parent_callback({type:"refresh_menu",data:4});},500);
                }
            }
        }
        //删除设备列后面的红底数字 当在信息界面切换设备时使用或者切换界面至信息界面时
        function del_alarm_notification(obj)
        {
        	var pos,classDom_last;
        	pos = mcloud_agent.devs.get_index(obj.sn);
        	if(!l_dom_list_classDom[pos])return;
          classDom_last=l_dom_list_classDom[pos].lastChild;
          //有红底数字
          if(classDom_last.className == "device_alarm_div")
          {
						//清除红底数字
            l_dom_list_classDom[pos][s_removeChild](l_dom_list_classDom[pos].lastChild);
            //清空当前的信息序号
            if(l_device_list_man_qid["q_"+obj.sn])
            {
               l_device_list_man_qid["q_"+obj.sn] = null;
            }
          }
        }
        function add_event()
        {   //添加设备按键事件
            l_dom_device_add_ico.onclick = function() {
                //create_device_add_menu({parent:this, type:"add", direction:"top"});
                l_dom_net_setting.ctrl({type:"add_device"});
            };
            //刷新设备按键事件
            l_dom_device_refresh_ico.onclick = function() {
                l_parent_callback({type:"Refresh_devs"});
            };
            //删除设备按键事件
            l_dom_device_edit_ico.onclick = function() {
                create_device_delete_img();
            };
            l_me_parent.onmouseover = function() {
                if(g_panel_box_all_w < g_panel_box_max_w)
                {
                    if(!g_old_browser_version)
                    {
                        jQuery(this).animate({opacity:"1"}, {queue:false, duration:400, easing:'easeOutQuint'});
                    }
                    jQuery(this).animate({width:g_panel_box_max_w}, {queue:false, duration:400, easing:'easeOutQuint'});
                    jQuery(l_dom_device_list_panel).animate({left:"3"}, {queue:false, duration:400, easing:'linear'});

                    var temp_func = function(evt) {
                        var e = evt || window.event, target = e.target || e.srcElement;

                        if(!target || is_ancestor(l_me_parent, target)) return;

                        if(!g_old_browser_version)
                        {
                            jQuery(l_me_parent).animate({opacity:"0.5"}, {queue:false, duration:400, easing:'linear'});
                        }
                        jQuery(l_me_parent).animate({width:g_panel_box_all_w}, {queue:false, duration:400, easing:'linear'});
                        jQuery(l_dom_device_list_panel).animate({left:g_panel_box_offset}, {queue:false, duration:400, easing:'linear'});
                        g_j_page.unbind("mouseup", temp_func);
                    };
                    g_j_page.bind("mouseup", temp_func);
                }
            };
            l_me_parent.onmouseout = function () {
                if(g_panel_box_all_w < g_panel_box_max_w)
                {
                    if(!g_old_browser_version)
                    {
                        jQuery(this).animate({opacity:"0.5"}, {queue:false, duration:400, easing:'linear'});
                    }
                    jQuery(this).animate({width:g_panel_box_all_w}, {queue:false, duration:400, easing:'linear'});
                    jQuery(l_dom_device_list_panel).animate({left:g_panel_box_offset}, {queue:false, duration:400, easing:'linear'});
                }
            };
        }
        function remove_event()
        {
        	 l_dom_device_add_ico.onclick = "";
        	 l_dom_device_refresh_ico.onclick = "";
        	 l_dom_device_edit_ico.onclick = "";
        	 l_me_parent.onmouseover = "";
        	 l_me_parent.onmouseout = "";
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "update":
                {

                }
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        g_device_list_inner_h = g_panel_box_inner_h - l_dom_device_list_footer.offsetHeight;
                        l_dom_device_list_panel[s_style][s_width]  = g_panel_box_w + "px";
                        l_dom_device_list_panel[s_style][s_height] = g_panel_box_h + "px";
                        l_dom_device_list_panel[s_style].left      = g_panel_box_offset + "px";
                        l_dom_device_list_inner[s_style][s_width]  = g_panel_box_w + "px";
                        l_dom_device_list_inner[s_style][s_height] = g_device_list_inner_h + "px";
                        l_dom_device_list_footer[s_style][s_width] = g_panel_box_w + "px";
                        l_dom_device_list_arrow[s_style].top       = g_panel_box_h + 8 + "px";
                        break;
                    }
                case "destroy":
                    {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                case "delete_alarm_nofication"://删除设备列后面的红底数字
                    {
                    	 del_alarm_notification(obj);
                    	 break;
                    }
                case "change_select_device_style":
                    {
                        change_select_device_style(obj.data);
                        break;
                    }
                case "refresh_notif_latest":
                    {
                       alarm_notification(obj.data);
                       break;
                    }
                case "change_device_name"://更改设备昵称
                    {
                    	 var pos = mcloud_agent.devs.get_index(obj.sn);
                       if(l_dom_list_span_classDom[pos])
                          l_dom_list_span_classDom[pos][s_innerHTML] = mcloud_agent.devs.get(obj.sn).nick?mcloud_agent.devs.get(obj.sn).nick:obj.sn;
                       break;
                    }
                case "get_profiles":
                    {
                        return l_profiles;
                    }
                case "refresh_device_list"://刷新设备列表
                    {
                        create_device_list({type:"refresh",data:obj.data});
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_device_list_box.");
            }
        }
        add_event();
        create_device_list({type:"create"});
        l_dom_net_setting=new net_setting_class({parent:l_me_parent, on_event:function(obj){return on_event(obj);}});
    }
    function net_setting_class(obj)
    {
	      var l_me = this, i, inner_html = "",
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_device_list_panel,
            l_dom_device_list_arrow,
            l_dom_device_list_inner,
            l_dom_device_list_header,
            l_dom_device_list_content,
            l_dom_device_list_footer,
            l_dom_list_classDom,
            l_dom_list_state_classDom,
            //l_dom_list_span_classDom,
            l_dom_device_add_menu,
            l_dom_device_edit_ico,
            l_dom_device_add_ico,
            l_dom_device_refresh_ico,
            l_dom_device_invalid_div,
            l_dom_device_invalid_close,
            l_dom_device_invalid_inner,
            l_dom_device_invalid_content,
            l_dom_device_add_content,
            l_dom_device_invalid_Prompt,
            l_cable_page_create_obj,
            l_option_cable_page,
            l_dom_net_skip,l_dom_net_next,l_dom_net_cancel,
        	  option_pos=0,l_is_ipc_pass;


		    function create_device_invalid_div(obj)
        {
            var correct_width, correct_height, prop;
                l_dom_device_invalid_div = mx("#device_invalid_div");
                l_dom_device_invalid_inner = mx("#device_invalid_inner");
                l_dom_device_invalid_content = mx("#device_invalid_content");

            correct_width = 500;
            correct_height = 300;
            if(correct_width > g_web.offsetWidth * 8 / 10)
            {
                correct_width = parseInt(g_web.offsetWidth * 8 / 10);
                correct_height = parseInt(correct_width * 300 / 500);
            }
            if(correct_height > g_web.offsetHeight * 8 / 10)
            {
                correct_height = parseInt(g_web.offsetHeight * 8 / 10);
                correct_width = parseInt(correct_height * 500 / 300);
            }
            if(l_dom_device_invalid_content)
            {
                l_dom_device_invalid_div.style.width = correct_width + 13*2 + "px";
                l_dom_device_invalid_div.style.height = correct_height + 13*2 + "px";
                l_dom_device_invalid_div.style.left = ((g_web.offsetWidth - correct_width) / 2) + "px";
                l_dom_device_invalid_div.style.top = ((g_web.offsetHeight - correct_height) / 2)  + "px";
                //snapshot_preview_content.src = obj.uri;
            }
            else
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	  	  l_dom_device_invalid_div = dom_create_child(page, "div", "device_invalid_div");
		                l_dom_device_invalid_div[s_style][s_cssText] = "width:280px;height:250px;"
		                    + "left:" + ((g_web.offsetWidth - 280) / 2) + "px;"
		                    + "top:" + ((g_web.offsetHeight - 250) / 2)  + "px;position:absolute;z-index:50";
		
		
		                l_dom_device_invalid_div = mx("#device_invalid_div");
		                l_dom_device_invalid_inner = dom_create_child(device_invalid_div, "div", "device_invalid_inner");
		                l_dom_device_invalid_inner[s_style][s_cssText] = "width:280px;height:250px;left:6px;top:6px;position:relative;color:#000000;";
		                
		                l_dom_device_invalid_content = dom_create_child(l_dom_device_invalid_inner, "div", "device_invalid_content");
		                l_dom_device_invalid_content[s_style][s_cssText] = "width:280px;height:250px;"
		                    + "left:7px;top:7px;position:relative;";
		
		                l_cable_page_create_obj =new cable_page_create({parent:l_dom_device_invalid_content,on_event:function(obj){return on_event(obj);}});
            	  }
            }

        }

		    function net_cable_page(obj)
        {
            l_cable_page_create_obj.ctrl({type:"options_destroy", data:{option:l_option_cable_page}});
            l_option_cable_page = obj.option;
            l_cable_page_create_obj.ctrl({type:"chang_net_cable_content", data:obj});
        }
        function cable_page_create(obj)
        {
            var l_me=this,
                l_me_parent = obj.parent,
                l_parent_callback = obj.on_event,
                l_dom_add_device,
                l_add_device_obj,
                l_dom_connection_device,
                l_connection_device_obj,
                l_dom_device_set_pass,
                l_device_set_pass_obj,
                l_dom_setting_wifi,
                l_setting_wifi_obj,
                l_dom_is_configured_wifi,
                l_is_configured_wifi_obj,
                l_dom_into_the_wizard,
                l_into_the_wizard_obj,
                l_dom_guiding_connection,
        				l_guiding_connection_obj,
        				l_dom_ipc_set_pass,
        				l_ipc_set_pass_obj,
                l_dom_ipc_set_wifi,
        				l_ipc_set_wifi_obj,
        				l_dom_ipc_Guide_ok,
        				l_ipc_Guide_ok_obj,
        				l_dom_option_set,
		            l_option_set_obj;

             function chang_net_cable_content(obj)
             {
                    switch(obj.option)
                    {
                            case "add_device":
                            {
                                 l_dom_add_device = dom_create_child(l_me_parent, "div", "add_device");
                                 l_add_device_obj = new add_device_class({parent:l_dom_add_device});
                                 break;
                            }
                            case "into_the_wizard":
                            {
                                 l_dom_into_the_wizard = dom_create_child(l_me_parent, "div", "into_the_wizard");
                                 l_into_the_wizard_obj = new into_the_wizard_class({parent:l_dom_into_the_wizard});
                                 break;
                            }

                            case "device_set_pass":
                            {
                                 l_dom_device_set_pass = dom_create_child(l_me_parent, "div", "device_set_pass");
                                 l_device_set_pass_obj = new device_set_pass_class({parent:l_dom_device_set_pass ,sn:obj.sn,pass:obj.pass});
                                 break;
                            }
                            case "setting_wifi":
                            {
                                 l_dom_setting_wifi = dom_create_child(l_me_parent, "div", "setting_wifi");
                                 l_setting_wifi_obj = new setting_wifi_class({parent:l_dom_setting_wifi,old_page:obj.old_page,sn:obj.sn});
                               break;
                            }
                            case "is_configured_wifi":
                            {
                                 l_dom_is_configured_wifi = dom_create_child(l_me_parent, "div", "is_configured_wifi");
                                 l_is_configured_wifi_obj = new is_configured_wifi_class({parent:l_dom_is_configured_wifi,Completion_status:obj.Completion_status});
                                 break;
                            }
                            case "guiding_connection":
                						{
                						     l_dom_guiding_connection = dom_create_child(l_me_parent, "div", "guiding_connection");
                             	   l_guiding_connection_obj = new guiding_connection_class({parent:l_dom_guiding_connection,data:obj.data,on_event:function(obj){return on_event(obj);}});
                						     break;
                						}
                						case "ipc_set_pass":
                						{
                						     if(l_ipc_set_pass_obj)
                    						 {
                    							   options_destroy({option:"ipc_set_pass"});
                    						 }
                						     l_dom_ipc_set_pass = dom_create_child(l_me_parent, "div", "ipc_set_pass");
                             	   l_ipc_set_pass_obj = new ipc_set_pass_class({parent:l_dom_ipc_set_pass,data:obj.data,on_event:function(obj){return on_event(obj);}});
                						     break;
                						}
                						case "ipc_set_wifi":
                						{
                						     l_dom_ipc_set_wifi = dom_create_child(l_me_parent, "div", "ipc_set_wifi");
                             	   l_ipc_set_wifi_obj = new ipc_set_wifi_class({parent:l_dom_ipc_set_wifi,sn:obj.sn,old_page:obj.old_page,on_event:function(obj){return on_event(obj);}});
                						     break;
                						}
                						case "ipc_Guide_ok":
                						{
                						    l_dom_ipc_Guide_ok = dom_create_child(l_me_parent, "div", "ipc_Guide_ok");
                							  l_ipc_Guide_ok_obj = new ipc_Guide_ok_class({parent:l_dom_ipc_Guide_ok,sn:obj.sn,Completion_status:obj.Completion_status,on_event:function(obj){return on_event(obj);}});
                						    break;
                						}
		                				case "option_set":
		                        {
		                        	  l_dom_option_set = dom_create_child(l_me_parent, "div", "option_set");
		                        	  l_option_set_obj = new option_set_class({parent:l_dom_option_set});
		                        	  break;
		                        }
                    }

             }
             function options_destroy(obj)
             {
                  if(obj.option=="add_device" && l_add_device_obj)
                  {
                     l_add_device_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_add_device);
                     l_dom_add_device = null;
                     l_add_device_obj = null;
                  }
                  else if(obj.option == "into_the_wizard" && l_into_the_wizard_obj)
                  {
                     l_into_the_wizard_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_into_the_wizard);
                     l_dom_into_the_wizard = null;
                     l_into_the_wizard_obj = null;
                  }
                  else if(obj.option=="device_set_pass" && l_device_set_pass_obj)
                  {
                     l_device_set_pass_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_device_set_pass);
                     l_dom_device_set_pass = null;
                     l_device_set_pass_obj = null;
                  }
                  else if(obj.option =="is_configured_wifi" && l_is_configured_wifi_obj)
                  {
                     l_is_configured_wifi_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_is_configured_wifi);
                     l_dom_is_configured_wifi = null;
                     l_is_configured_wifi_obj = null;
                  }
                  else if(obj.option=="setting_wifi" && l_setting_wifi_obj)
                  {
                     l_setting_wifi_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_setting_wifi);
                     l_dom_setting_wifi = null;
                     l_setting_wifi_obj = null;
                  }
                  else if(obj.option=="ipc_set_pass" && l_ipc_set_pass_obj)
                  {
        				     l_me_parent[s_removeChild](l_dom_ipc_set_pass);
                     l_ipc_set_pass_obj.ctrl({type:"destroy"});
                     l_dom_ipc_set_pass = null;
                     l_ipc_set_pass_obj = null;
                  }
        				  else if(obj.option=="guiding_connection" && l_guiding_connection_obj)
                  {
                     l_guiding_connection_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_guiding_connection);
                     l_dom_guiding_connection = null;
                     l_guiding_connection_obj = null;
                  }
        				  else if(obj.option=="ipc_set_wifi" && l_ipc_set_wifi_obj)
                  {
        				     l_me_parent[s_removeChild](l_dom_ipc_set_wifi);
                     l_ipc_set_wifi_obj.ctrl({type:"destroy"});
                     l_dom_ipc_set_wifi = null;
                     l_ipc_set_wifi_obj = null;
                  }
        				  else if(obj.option=="ipc_Guide_ok" && l_ipc_Guide_ok_obj)
                  {
                     l_ipc_Guide_ok_obj.ctrl({type:"destroy"});
                     l_me_parent[s_removeChild](l_dom_ipc_Guide_ok);
                     l_dom_ipc_Guide_ok = null;
                     l_ipc_Guide_ok_obj = null;
                  }
                  else if(obj.option=="option_set" && l_option_set_obj)
                  {
                 		 l_option_set_obj.ctrl({type:"destroy"});
                 		 l_me_parent[s_removeChild](l_dom_option_set);
                 		 l_dom_option_set = null;
                 		 l_option_set_obj = null;        
                  }
             }
             l_me.ctrl=function(obj)
             {
                   switch(obj.type)
                   {
                        case "update":
                           {

                               break;
                           }
                        case "chang_net_cable_content":
                           {
                                 chang_net_cable_content(obj.data);
                               break;
                           }
                        case "options_destroy":
                           {
                                 options_destroy(obj.data);
                               break;
                           }
                        case "add_device":
                           {
                                if(l_add_device_obj)
                                {
                                   l_add_device_obj.ctrl(obj);
                                }
                                break;
                           }
                        case "device_set_pass":
                           {
                                if(l_device_set_pass_obj)
                                {
                                   l_device_set_pass_obj.ctrl(obj);
                                }
                              break;
                           }
                        case "connection_device":
                           {
                                if(l_connection_device_obj)
                                {
                                      l_connection_device_obj.ctrl(obj);
                                }
                                break;
                           }
                        case "setting_wifi":
                           {
                                if(l_setting_wifi_obj)
                                {
                                       l_setting_wifi_obj.ctrl(obj);
                                }
                              break;
                           }
                   }
             }
             function on_event(obj)
             {
                  switch(obj.type)
                  {
                       case "login_ack":
                       {
        					         options_destroy({option:"guiding_connection"});
        					         l_dom_device_invalid_div[s_innerHTML] = "";
                           g_page[s_removeChild](l_dom_device_invalid_div);
                           l_dom_device_invalid_div = null;
                           l_dom_device_invalid_close.onclick = "";
                           l_dom_device_invalid_close.onmouseover = "";
                           l_dom_device_invalid_close.onmouseout = "";
					                 //l_parent_callback(obj);
        						       break;
                       }
        					     case"Guide_ok":
        					     {
        					         options_destroy({option:obj.option});
        					         l_dom_device_invalid_div[s_innerHTML] = "";
                           g_page[s_removeChild](l_dom_device_invalid_div);
                           l_dom_device_invalid_div = null;
                           l_dom_device_invalid_close.onclick = "";
                           l_dom_device_invalid_close.onmouseover = "";
                           l_dom_device_invalid_close.onmouseout = "";
                       	   l_parent_callback({type:"logined"});
        					      break;
        					     }
                  }
             }
        }
        function add_device_class(obj)
        {
               var l_me=this,
               l_me_parent = obj.parent,
               l_dom_add_device_id,
               l_dom_add_device_pass="",
               l_add_device_stat=1,
               l_dom_pass_div,l_dom_Prompt_div,l_dom_adevice_div,
               l_dom_dom_adevice_div,l_dom_device_stat,l_dom_device_con,
               l_dom_device_div,l_dom_net_add,
               l_dom_image_div,l_dom_adevice_div_page,l_dom_connection_page,
               l_dom_device_invalid_Operat,
               correct_width=500,correct_height=300;
               l_dom_device_invalid_Prompt = dom_create_child(l_me_parent, "div", "device_invalid_Prompt");
               l_dom_device_invalid_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:" + 92 + "px;text-align:center;"
               + "position:relative;text-align:left;margin-left:20px;";
               l_dom_device_invalid_Prompt.style.top ="5px";
               l_dom_device_invalid_Prompt[s_innerHTML]="<h3>"+mcs_add_device+"</h3><div style='margin-top:12px;'><div id='device_stat'></div><div id='device_con' ></div></div>";


               l_dom_adevice_div_page = dom_create_child(l_me_parent, "div", "adevice_div_page");
               l_dom_adevice_div_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-142) + "px;"
               + "position:relative";
                l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
                l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:center;"
                + "position:relative;text-align:right;";

                l_dom_device_invalid_Operat[s_innerHTML]=
                 "<button class='standard_buttons_green' id='net_cancel' style='margin-right:25px;margin-top:18px'>"+mcs_cancel+"</button>"
                 +"<button class='standard_buttons_green' id='net_next' style='margin-top:18px; margin-right:20px;'>"+mcs_action_next+"</button>"
                 +"<button class='standard_buttons_green' id='net_add' style='margin-top:18px; margin-right:20px;'>"+mcs_add+"</button>";
               //+ "<button class='standard_buttons_green' id='net_cancel' style='margin-left:25px;margin-top:10px'>"+mcs_cancel+"</button>";


               l_dom_adevice_div_page[s_innerHTML]=
               "<div id='adevice_div'>"
               +"<div id='device_div' style='height:40px; margin-top:10px;'>"
               +     " <input id='add_device_id' class='standard_inputs_wifi_set' type='text'/><span style='float:right;margin-right:5px;line-height:22px;'>"+mcs_input_device_id+":</span><br/>"
               +"</div>"
               +"<div id='pass_div' style='height:40px;float:right;margin-top:10px;'>"
               +    "<input id='add_device_pass' class='standard_inputs_wifi_set' type='password'/><span style='float:right;margin-right:5px;line-height:22px;'>"+mcs_password+": </span>"
               +"</div>"
               +"</div>"
               +"<div id='image_div'>"
               +   "<div id='mcs_step_div' style='width:480px;height:160px;text-align:left;margin-left:20px;'>"
               +    mcs_prompt_check_connection+"<br/>"
               +    mcs_step1_check_connect+"<image style='width:40px;height:40px;' src='./imgs/lan.png'/><br/>"
               +    mcs_step2_check_connect+"<br/><br/>"
               +    mcs_hint_check_network+"<br/>"
               +"</div>"
               +"</div>";

               l_dom_add_device_id  = mx("#add_device_id");
               l_dom_add_device_pass= mx("#add_device_pass");
               l_dom_pass_div       = mx("#pass_div");
               l_dom_Prompt_div     = mx("#Prompt_div");
               l_dom_adevice_div    = mx("#adevice_div");
               l_dom_image_div      = mx("#image_div");
               l_dom_device_div    = mx("#device_div");
               l_dom_device_stat   = mx("#device_stat");
               l_dom_device_con    = mx("#device_con");

               jQuery(l_dom_image_div).hide();
               jQuery(l_dom_pass_div).hide();


               l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:absolute;text-align:center;";
               l_dom_adevice_div[s_style][s_cssText] ="text-align:center;position:absolute;margin-top:10px;";

               l_dom_adevice_div.style.left = ((l_dom_adevice_div_page.offsetWidth - l_dom_adevice_div.offsetWidth) / 2) + "px";
               l_dom_adevice_div.style.top = ((l_dom_adevice_div_page.offsetHeight - l_dom_adevice_div.offsetHeight) / 2)  + "px";

               l_dom_net_next = mx("#net_next");
               l_dom_net_cancel = mx("#net_cancel");
               l_dom_net_skip   = mx("#net_skip");
               l_dom_net_add    = mx("#net_add");
               jQuery(l_dom_net_cancel).hide();
               jQuery(l_dom_net_add).hide();
                jQuery("#mcs_step_div").mCustomScrollbar();
               l_dom_net_add.onclick=function(){
               	    if(l_dom_add_device_pass.value == "amdin")
               	    {
               	    	 l_dom_add_device_pass.value = "admin";
               	    }
                    l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_request_send;
                    l_cable_page_create_obj.ctrl({type:"add_device"});
               }
               l_dom_net_next.onclick=function(){
                    l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_request_send;
                    if(g_device_list_obj["sn_"+l_dom_add_device_id.value])
									{
					   					 l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
					   					 l_dom_device_invalid_div[s_innerHTML] = "";
                       page[s_removeChild](device_invalid_div);
                       l_dom_device_invalid_div = null;
                       l_dom_device_invalid_close.onclick = "";
                       l_dom_device_invalid_close.onmouseover = "";
                       l_dom_device_invalid_close.onmouseout = "";

					   				system_pop_confirm_box({alert:true,str:mcs_device_existed, callback_func:function(){
             	        }});

									}else{
                	 	l_cable_page_create_obj.ctrl({type:"add_device"});
				    			}
                     //l_cable_page_create_obj.ctrl({type:"add_device"});
               }
               l_dom_net_cancel.onclick=function(){
                    l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
                      l_dom_device_invalid_div[s_innerHTML] = "";
                    g_page[s_removeChild](l_dom_device_invalid_div);
                    l_dom_device_invalid_div = null;
                    l_dom_device_invalid_close.onclick = "";
                    l_dom_device_invalid_close.onmouseover = "";
                    l_dom_device_invalid_close.onmouseout = "";
               }
               l_me.ctrl=function(obj)
               {
                  switch(obj.type)
                  {
                      case "destroy":
                      {
                            l_me_parent[s_innerHTML]="";
                            l_me_parent=null;
                            break;
                      }
                      case "add_device":
                      {
                              if(l_add_device_stat==1)
                              {
                                    ccm_add_sub_device_req({sn:l_dom_add_device_id.value,pass:""});
                              }
                              else if(l_add_device_stat==2)
                              {

                                    ccm_add_sub_device_req({sn:l_dom_add_device_id.value,pass:l_dom_add_device_pass.value});
                              }
                              break;
                      }
                  }
               }
            function ccm_add_sub_device_req(obj)
            {
                ms.send_msg("dev_add",{sn:obj.sn,pass:obj.pass},{passlength:obj.pass.length,sn:obj.sn,pass:obj.pass},ccm_add_sub_device_response);

            }
            function ccm_add_sub_device_response(msg, ref)
            {
               if(!l_me_parent) return;
               if((msg &&  msg.result == "") && (ref.pass !== ""))
               {
                    add_device(msg.info, ref.sn);
                    pos = g_device_list_link.pos("sn_" + msg.info.sn);
                    /*if(g_device_list_obj["sn_" + msg.info.sn].stat.online == "Online")
                    {
                        jQuery(".device_list_li_span:eq(" + pos + ")").click();
                    }*/
                    jQuery("#device_Refresh_ico").click();
                    //CcmDiskCtrlRequest({sn:msg.info.sn,pass:ref.pass});
                    if(ref.pass.length > 5)
                    {
                        net_cable_page({option:"setting_wifi",sn:msg.info.sn,old_page:"add_device"});
                    }
                    else
                    {
                        net_cable_page({option:"device_set_pass",sn:msg.info.sn,pass:ref.pass});
                    }
               }
               else if(msg.result)
               {
                    if(msg.result=="accounts.user.offline")
                    {
                       if(l_add_device_stat==1)
                       {
                         jQuery(l_dom_image_div).show();
                         jQuery(l_dom_adevice_div).hide();
                         l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+l_dom_add_device_id.value+"</div>";
                         setTimeout(function(){
                             if(!l_me_parent)
                             {
                                  return;
                             }
                             l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_state_wait_device_online;

                            ccm_add_sub_device_req({sn:l_dom_add_device_id.value,pass:""});
                          },3000);
                          jQuery(l_dom_net_next).hide();
                          jQuery("#net_cancel").show();
                          jQuery("#mcs_step_div").mCustomScrollbar("update");
                       }
                    }
                    else if(msg.result=="accounts.pass.invalid")
                    {
                       if(l_add_device_stat==1)
                       {
                          l_dom_device_con[s_innerHTML]="";
                          l_add_device_stat=2;
                          jQuery(l_dom_net_next).hide();
                          jQuery(l_dom_net_add).show();
                          jQuery(l_dom_device_div).hide();
                          jQuery(l_dom_pass_div).show();
                          jQuery(l_dom_adevice_div).show();
                          jQuery(l_dom_image_div).hide();

                          l_dom_adevice_div.style.left = ((l_dom_adevice_div_page.offsetWidth - l_dom_adevice_div.offsetWidth) / 2) + "px";
                          l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+l_dom_add_device_id.value+"</div><div>"+mcs_status+":"+mcs_state_device_online+"</div>";
                          jQuery(l_dom_net_cancel).hide();
                          return;
                       }
                       l_dom_device_con[s_innerHTML]="";
                       system_tooltip({parent:l_dom_add_device_pass, color:"red", position:"right", disappear_way:"time", str:mcs_invalid_password + "."});
                    }
                    else if(msg.result=="accounts.user.invalid")
                    {
                        l_dom_device_con[s_innerHTML]="";
                        system_tooltip({parent:l_dom_add_device_id, color:"red", position:"right", disappear_way:"time", str: mcs_device_not_exist+ "."});
                    }
                    else if(msg.result=="ccms.system.err"){

                    }
                    else if(msg.result == "subdev.exceed.device")
                    {
                        g_system_prompt_box(mcs_devices_in_the_account_overrun, -10, -200);
                    }
                    else if(msg.result == "subdev.exceed.user")
                    {
                        g_system_prompt_box(mcs_exceed_device, -10, -200);
                    }
                    else if(msg.result == "permission.denied")
                    {
                    	  log(mcs_permission_denied);
                    }
                    return -1;
               }
            }
            /*2015.12.4 add devices for a new account,input the passowrd and get error "ccms.param_invalid"*/
            /*function CcmDiskCtrlRequest(obj)
            {
                ms.send_msg("sd_set",{sn:g_select_device_ipc,ctrl_type:"",token:"sd",no_conf:1},{sn:obj.sn,pass:obj.pass},ccm_DiskCtrlResponse);

            }
            function ccm_DiskCtrlResponse(msg, ref)
            {
                 if(!l_me_parent) return;
                   if(msg && msg.result == "")
                   {
                      if(ref.pass.length > 5)
                      {
                          net_cable_page({option:"setting_wifi",sn:ref.sn,old_page:"add_device"});
                      }
                      else
                      {
                          net_cable_page({option:"device_set_pass",sn:ref.sn,pass:ref.pass});
                      }
                   }
                   else if(msg.result=="permission.denied")
                   {
                      net_cable_page({option:"is_configured_wifi",Completion_status:1});
                   }
            }*/
        }
        function device_set_pass_class(obj)
        {
               var l_me=this,
               l_me_parent = obj.parent,
               sn=obj.sn,
               pass=obj.pass,
               l_dom_old_pass,l_dom_new_pass,l_dom_confirm_new_pass,
               l_dom_device_set_div_page,l_dom_net_change,
               l_dom_connection_page,l_dom_device_stat,l_dom_device_con,
               l_dom_device_invalid_Operat,l_dom_device_set_div,
               correct_width=500,correct_height=300;


                l_dom_device_invalid_Prompt = dom_create_child(l_me_parent, "div", "device_invalid_Prompt");
                l_dom_device_invalid_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:" + 132 + "px;text-align:left;margin-left:20px;"
                    + "position:relative;";
                l_dom_device_invalid_Prompt.style.top ="5px";
                l_dom_device_invalid_Prompt[s_innerHTML]="<h3>"+mcs_modify_password+"</h3><div  style='margin-top:12px;'><div>"+mcs_device_id+":"+obj.sn+"</div><div id='device_stat'><div>"+mcs_state_add_device_success+"</div><div><br/>"+mcs_prompt_modify_passwd+"</div></div><div id='device_con' ></div></div>";

               l_dom_device_set_div_page = dom_create_child(l_me_parent, "div", "device_set_div_page");
               l_dom_device_set_div_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-182) + "px;"
               + "position:relative";


               l_dom_device_set_div = dom_create_child(l_dom_device_set_div_page, "div", "device_set_div");

                l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
                l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:center;"
                + "position:relative;text-align:right";

                l_dom_device_invalid_Operat[s_innerHTML]=
                 "<button class='standard_buttons_green' id='net_change' style='margin-top:18px;margin-right:20px;'>"+mcs_change+"</button>";

               jQuery("#net_next").hide();
               jQuery("#net_cancel").hide();

               l_dom_net_next = mx("#net_next");
               l_dom_net_change =mx("#net_change");
               l_dom_net_cancel = mx("#net_cancel");
               l_dom_device_con = mx("#device_con");

               l_dom_net_change.onclick=function(){
                      ccm_pwd_set();
               }
               l_dom_device_set_div[s_style][s_cssText] ="height:120px;position:absolute;text-align:center;";

               l_dom_device_set_div[s_innerHTML]=
                 "<div style='height:40px; margin-top:10px;'>"
                  +   "<input id='new_pass' class='standard_inputs_wifi_set' type='password'><span style='float:right;line-height:22px;margin-right:5px;'>"+mcs_new_password+":</span>"
                  +"</div>"
                  +"<div style='height:40px; margin-top:10px;'>"
                  +   "<input id='confirm_new_pass' class='standard_inputs_wifi_set' type='password'><span style='float:right;line-height:22px;margin-right:5px;'>"+mcs_confirm_new_password+":</span>"
                  +"</div>";
                l_dom_old_pass        = mx("#old_pass");
                l_dom_new_pass        = mx("#new_pass");
                l_dom_confirm_new_pass= mx("#confirm_new_pass");

                l_dom_device_set_div.style.left = ((l_dom_device_set_div_page.offsetWidth - l_dom_device_set_div.offsetWidth) / 2) + "px";
                l_dom_device_set_div.style.top = ((l_dom_device_set_div_page.offsetHeight-l_dom_device_set_div.offsetHeight) / 2)  + "px";

               function ccm_pwd_set(obj)
               {
                       if(l_dom_new_pass.value =="")
                       {
                           system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_blank_password+ "."});
                          return -1;
                       }
                       else if(l_dom_new_pass.value.length<6)
                       {
                           system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_password_demand+ "."});
                          return -1;
                       }
                       else if(l_dom_confirm_new_pass.value=="")
                       {
                           system_tooltip({parent:l_dom_confirm_new_pass, color:"red", position:"right", disappear_way:"time", str:mcs_blank_password+ "."});
                          return-1;
                       }
                       else if(l_dom_new_pass.value!=l_dom_confirm_new_pass.value)
                       {
                            system_tooltip({parent:l_dom_confirm_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_two_password_input_inconsistent+ "."});
                               return -1;
                       }
                       l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_request_send;
                       ms.send_msg("dev_passwd_set",{sn:sn,old_pass:pass,new_pass:l_dom_confirm_new_pass.value,is_guest:0},{sn:sn,pass:l_dom_confirm_new_pass.value},ccm_pwd_set_ack);

               }
               function ccm_pwd_set_ack(msg,ref)
               {
                   if(!l_me_parent) return;

                   l_dom_device_con[s_innerHTML]="";
                   if(msg && msg.result == "")
                   {
                        ms.send_msg("dev_add",{sn:ref.sn,pass:ref.pass},{sn:ref.sn,pass:ref.pass},
                              function(type, msg, ref){
                              	     ms.send_msg("sign_in",{srv:g_server_device,user:msg.sn, password:msg.pass},{user:sn, password:new_pass.value},on_cacs_login_ack);
                   											function on_cacs_login_ack(msg,ref)
    			   														{
                 													if(msg && msg.result=="")
                 													{
    				       													net_cable_page({option:"setting_wifi",sn:ref.user,old_page:"set_pass"});
    					   													}
    					   												}
                                  //if(msg && msg.result == "")
                                    //{
                                     //   net_cable_page({option:"setting_wifi",sn:msg.sn,old_page:"set_pass"});
                                    //}
                              });
                   }
                   else if(msg.result == "accounts.pass.invalid")
                   {
                            l_dom_device_con[s_innerHTML]="";
                            system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_invalid_password+ "."});
                   }
                   else if(msg.result == "accounts.user.offline")
                   {
                            l_dom_device_con[s_innerHTML]="";
                            system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_offline+ "."});
                   }
               }
               l_me.ctrl=function(obj)
               {
                  switch(obj.type)
                  {
                      case "destroy":
                      {
                            l_me_parent[s_innerHTML]="";
                            l_me_parent=null;
                            break;
                      }
                      case "device_set_pass":
                      {
                          ccm_pwd_set();
                      }
                  }
               }
        }
    		function guiding_connection_class(obj)
    		{
    		       var l_me=this,
                   l_me_parent = obj.parent,
                   l_parent_callback = obj.on_event,
                   l_dom_pass_div,l_dom_Prompt_div,l_dom_adevice_div,
                   l_dom_adevice_div,l_dom_device_stat,l_dom_device_con,
    			         l_dom_device_div,l_dom_net_add,
                   l_dom_image_div,l_dom_adevice_div_page,l_dom_connection_page,
                   l_dom_device_invalid_Operat,correct_width=500,correct_height=300;
                   l_dom_device_invalid_Prompt = dom_create_child(l_me_parent, "div", "device_invalid_Prompt");
                   l_dom_device_invalid_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:" + 52 + "px;text-align:center;"
                        + "position:relative;text-align:left;margin-left:20px;";
                   l_dom_device_invalid_Prompt.style.top ="5px";
                   l_dom_device_invalid_Prompt[s_innerHTML]="<div style='margin-top:12px;'><div id='device_stat'></div><div id='device_con' ></div></div>";

                   l_dom_adevice_div_page = dom_create_child(l_me_parent, "div", "adevice_div_page");
                   l_dom_adevice_div_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-112) + "px;"
                   + "position:relative";
                   l_dom_device_invalid_Operat = dom_create_child(me_parent, "div", "device_invalid_Operat");
                   l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:center;"
                   + "position:relative;text-align:right;";

                   l_dom_device_invalid_Operat[s_innerHTML]=
                    "<button class='standard_buttons_green' id='net_cancel' style='margin-right:25px;margin-top:18px'>"+mcs_cancel+"</button>";


                   l_dom_adevice_div_page[s_innerHTML]=
                   "<div id='image_div'>"
                   +   "<div id='mcs_step_div' style='width:480px;height:160px;text-align:left;margin-left:20px;'>"
    			   +    mcs_prompt_check_connection+"<br/>"
                   +    mcs_step1_check_connect+"<image style='width:40px;height:40px;' src='./imgs/lan.png'/><br/>"
                   +    mcs_step2_check_connect+"<br/><br/>"
                   +    mcs_hint_check_network+"<br/>"
                   +"</div>"
                   +"</div>";

                   l_dom_pass_div       = mx("#pass_div");
                   l_dom_Prompt_div     = mx("#Prompt_div");
                   l_dom_adevice_div    = mx("#adevice_div");
                   l_dom_image_div      = mx("#image_div");
                   l_dom_device_stat   = mx("#device_stat");
                   l_dom_device_con    = mx("#device_con");

                   l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:absolute;text-align:center;";

                   l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+obj.data.user+"</div>";
            			 l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_state_wait_device_online;
                   l_dom_net_cancel = mx("#net_cancel");
            			 jQuery("#mcs_step_div").mCustomScrollbar();
            			 l_dom_net_cancel.onclick=function(){
                        l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
                      	l_dom_device_invalid_div[s_innerHTML] = "";
                        g_page[s_removeChild](l_dom_device_invalid_div);
                        l_dom_device_invalid_div = null;
                        l_dom_device_invalid_close.onclick = "";
                        l_dom_device_invalid_close.onmouseover = "";
                        l_dom_device_invalid_close.onmouseout = "";
                   }
    			   l_me.ctrl=function(obj)
    			   {
    			      switch(obj.type)
    				  {
    				     case "destroy":
    				     {
    				        l_me_parent[s_innerHTML]="";
                    l_me_parent=null;
                    break;
    				     }
    				  }
    			   }
    			   function login_req()
    			   {
    			       var now_handle_info=acs.ctrl({type:"get_info"});
    			       var password=acs.ctrl({type:"md5_pass", data:{pass:obj.data.pass}});
    				     ms.send_msg("sign_in",{srv:g_server_device,user:obj.data.user, password:password},{user:obj.data.user, pass:acs.ctrl({type:"md5_message_encrypt", data:{pass:obj.data.pass}}).toString(), lid_relate:{lid:now_handle_info.lid,share_key:now_handle_info.share_key}, remember:obj.data.flag, to:"ccm"},on_cacs_login_ack);

    			   }
    			   function on_cacs_login_ack(msg,ref)
    			   {
    			       if(!l_me_parent) return;
                 if(msg && msg.result=="")
                 {
    				       l_parent_callback({type:"login_ack",data:{type:"cacs_login_req",msg:msg,ref:ref}});
    					   }
    				     else if(msg.result)
    				     {
    				         if(msg.result=="accounts.user.offline"){
                    		   	  setTimeout(function(){
                    		   	      if(!l_me_parent)
                    		   	      {
                    		   	      	 return;
                    		   	      }
                    		   	     login_req();
                               },3000);
                   	        }
    						     else if(msg.result == "accounts.pass.invalid")
        				     {
        				           l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
        				           l_dom_device_invalid_div[s_innerHTML] = "";
                           g_page[s_removeChild](l_dom_device_invalid_div);
                           l_dom_device_invalid_div = null;
                           l_dom_device_invalid_close.onclick = "";
                           l_dom_device_invalid_close.onmouseover = "";
                           l_dom_device_invalid_close.onmouseout = "";
        						       system_tooltip({parent:mx("#sign_in"), color:"red", position:"right", disappear_way:"time", str:mcs_invalid_password});
        				     }
    				     }
    			   }
             login_req();
    		}
    		function ipc_set_pass_class(obj)
        {
        		    var l_me=this,
                    l_me_parent = obj.parent,
                		l_parent_callback = obj.on_event,
                		sn=obj.data.user,
                	  pass=obj.data.pass,
                	  l_dom_net_change,
                    l_dom_old_pass,l_dom_device_stat,l_dom_device_con,
                    l_dom_new_pass,l_dom_confirm_new_pass,l_dom_device_set_div_page,l_dom_connection_page,l_dom_device_invalid_Prompt,l_dom_device_set_div,
                    l_dom_device_invalid_Operat,correct_width=500,correct_height=300;

                l_dom_device_invalid_Prompt = dom_create_child(l_me_parent, "div", "device_invalid_Prompt");
                l_dom_device_invalid_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:" + 152 + "px;text-align:left;margin-left:20px;"
                + "position:relative;";
                l_dom_device_invalid_Prompt.style.top ="5px";
                l_dom_device_invalid_Prompt[s_innerHTML]="<h3>"+mcs_modify_password+"</h3><div  style='margin-top:12px;'><div>"+mcs_device_id+":"+sn+"</div><div id='device_stat'>"+mcs_login_sucess+"<div><br/>"+mcs_prompt_modify_passwd+"</div></div><div id='device_con' ></div></div>";

                l_dom_device_set_div_page = dom_create_child(l_me_parent, "div", "device_set_div_page");
                l_dom_device_set_div_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-202) + "px;"
                + "position:relative";

                l_dom_device_set_div = dom_create_child(l_dom_device_set_div_page, "div", "device_set_div");

                l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
                l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:center;"
                + "position:relative;text-align:right";

                l_dom_device_invalid_Operat[s_innerHTML]=
                "<button class='standard_buttons_green' id='net_change' style='margin-top:18px;margin-right:20px;'>"+mcs_change+"</button>";
                jQuery("#device_invalid_close").hide();
                l_dom_net_change =mx("#net_change");
                jQuery(l_me_parent).hide();
                l_dom_net_change.onclick=function(){
                   	   ccm_pwd_set();
                }
                l_dom_device_set_div[s_style][s_cssText] ="height:98px;position:absolute;text-align:center;";

                l_dom_device_set_div[s_innerHTML]=
                   "<div style='height:40px; margin-top:10px;'>"
                   +   "<input id='new_pass' class='standard_inputs_wifi_set' type='password'><span style='float:right;line-height:22px;margin-right:5px;'>"+mcs_new_password+":</span>"
                   +"</div>"
                   +"<div style='height:40px; margin-top:10px;'>"
                   +   "<input id='confirm_new_pass' class='standard_inputs_wifi_set' type='password'><span style='float:right;line-height:22px;margin-right:5px;'>"+mcs_confirm_new_password+":</span>"
                   +"</div>";
                l_dom_old_pass        = mx("#old_pass");
                l_dom_new_pass        = mx("#new_pass");
                l_dom_confirm_new_pass= mx("#confirm_new_pass");
    			      l_dom_device_con      = mx("#device_con");

        		    if(!l_is_ipc_pass)
        			  {
        			      jQuery("#device_invalid_div").hide();
                }
                l_dom_device_set_div.style.left = ((l_dom_device_set_div_page.offsetWidth - l_dom_device_set_div.offsetWidth) / 2) + "px";
                l_dom_device_set_div.style.top = ((l_dom_device_set_div_page.offsetHeight-l_dom_device_set_div.offsetHeight) / 2)  + "px";

        			function CcmDiskCtrlRequest(obj)
        			{
        			    ms.send_msg("sd_set",{sn:sn,no_conf:1},{sn:sn,pwd:pass,now_page:"login_page"},ccm_DiskCtrlResponse);
        			}
        			function ccm_DiskCtrlResponse(msg, ref)
        			{
        			     if(!l_me_parent) return;
                   if(msg && msg.result == "")
                   {
        				      if(ref.pwd.length > 5)
                    	{

        						     var not_prompt =mlocal_storage.get("not_prompt_"+sn);
            						 if(not_prompt)
            						 {
            							   l_parent_callback({type:"Guide_ok",option:"ipc_set_pass"});
            						 }
            						 else
            						 {
                						  var old_page;
                						  if(l_is_ipc_pass)
                							{
                							    old_page="pass_page";
                							    l_is_ipc_pass=false;
                							}
                							else
                							{
                							    old_page="login_page";
                							}
                              net_cable_page({option:"ipc_set_wifi",sn:sn,old_page:old_page});
                         }
                      }
                      else
                      {
        					        jQuery(l_me_parent).show();
        						      jQuery("#device_invalid_div").show();
        					    }
        					    l_dom_device_set_div.style.left = ((l_dom_device_set_div_page.offsetWidth - l_dom_device_set_div.offsetWidth) / 2) + "px";
                      l_dom_device_set_div.style.top = ((l_dom_device_set_div_page.offsetHeight-l_dom_device_set_div.offsetHeight) / 2)  + "px";
                   }
                   else if(msg.result=="permission.denied")
                   {
        				       l_parent_callback({type:"Guide_ok",option:"ipc_set_pass"});
                   }
        			}
        			function ccm_pwd_set(obj)
              {
               	    if(l_dom_new_pass.value =="")
               	    {
                  		 system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_blank_password+ "."});
               	       return -1;
               	    }
               	    else if(l_dom_new_pass.value.length<6||l_dom_new_pass.value.length>20)
               	    {
                  		 system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_password_demand+ "."});
               	       return -1;
               	    }
               	    else if(l_dom_confirm_new_pass.value=="")
               	    {
                  		 system_tooltip({parent:l_dom_confirm_new_pass, color:"red", position:"right", disappear_way:"time", str:mcs_blank_password+ "."});
               	       return-1;
               	    }
               	    else if(l_dom_new_pass.value!=l_dom_confirm_new_pass.value)
               	    {
                  		  system_tooltip({parent:l_dom_confirm_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_two_password_input_inconsistent+ "."});
               	    		return -1;
               	    }
               	    l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_request_send;
				            ms.send_msg("dev_passwd_set",{sn:sn,old_pass:pass,new_pass:l_dom_confirm_new_pass.value,is_guest:0},{sn:sn,pass:l_dom_confirm_new_pass.value},ccm_pwd_set_ack);

              }
              function ccm_pwd_set_ack(msg,ref)
              {
                    if(!l_me_parent) return;
                   	l_dom_device_con[s_innerHTML]="";
    				        l_is_ipc_pass=true;
                   if(msg && msg.result == "")
                   {
                      ms.send_msg("sign_in",{srv:g_server_device,user:ref.sn, password:ref.pass},{user:ref.sn, password:ref.pass},
                   			function (msg,ref)
    			   						{
                 					if(msg && msg.result=="")
                 					{
    				       					net_cable_page({option:"setting_wifi",sn:ref.user,old_page:"set_pass"});
    					   					}
    					   				});
    			         }
                   else if(msg.result == "accounts.pass.invalid")
                   {
                   	    l_dom_device_con[s_innerHTML]="";
                  		  system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_invalid_password+ "."});
                   }
                   else if(msg.result == "accounts.user.offline")
                   {
                            l_dom_device_con[s_innerHTML]="";
                            system_tooltip({parent:l_dom_new_pass, color:"red", position:"right", disappear_way:"time", str: mcs_offline+ "."});
                   }
              }
        			l_me.ctrl=function(obj)
        			{
        			   switch(obj.type)
        			   {
        			      case "destroy":
        				   {
        				      l_me_parent[s_innerHTML]="";
                      l_me_parent=null;
                      break;
        				   }
        			   }
        			}
        			CcmDiskCtrlRequest();
        }

    		function ipc_set_wifi_class(obj)
    		{
    		    var l_me=this,
                l_me_parent = obj.parent,
    				    l_parent_callback = obj.on_event,
    				    sn=obj.sn,
                now_ifs={},
                now_net_info={},
                set_wifi_con=0,
                l_dom_select_ssid,
                l_dom_Connecting_div,
                l_dom_setting_wifi,
                l_dom_setting_wifi_p,
                l_dom_setting_wifi_Prompt,
                l_dom_wifi_Refresh,
                l_dom_connection_page,
                l_dom_device_stat,
    				    l_dom_not_prompt,
                l_dom_device_con,l_dom_wifi_button_refresh,
    				    l_dom_ssid_password,l_dom_device_invalid_Operat,
    				    correct_width=500,correct_height=300;

           jQuery("#device_invalid_close").show();
           l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:absolute;text-align:center;";

           l_dom_setting_wifi_Prompt = dom_create_child(l_me_parent, "div", "setting_wifi_Prompt");
           l_dom_setting_wifi_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:152px;"
           + "position:relative;text-align:left;margin-left:20px;";
           l_dom_setting_wifi_Prompt.style.top="5px";

           l_dom_setting_wifi_p = dom_create_child(l_me_parent, "div", "setting_wifi_p");
           l_dom_setting_wifi_p[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-202) + "px;"
           + "position:relative;text-align:center;";

           l_dom_setting_wifi = dom_create_child(l_dom_setting_wifi_p, "div", "setting_wifi");

           l_dom_wifi_Refresh = dom_create_child(l_dom_setting_wifi_p, "div", "wifi_Refresh");
           l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
           l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 60 + "px;text-align:center;"
           + "position:absolute;text-align:right";

           l_dom_device_invalid_Operat[s_innerHTML]=
            "<button class='standard_buttons_green' id='net_cancel' style='margin-right:25px;margin-top:18px;'>"+mcs_action_skip+"</button>"
           +"<button class='standard_buttons_green' id='net_next' style='margin-top:18px;margin-right:20px;'>"+mcs_apply+"</button>";

           l_dom_setting_wifi_Prompt[s_innerHTML]="<div><h3>"+mcs_action_config_wifi+"</h3><div id='device_stat' style='margin-top:12px;'></div><div id='device_con' ></div><div id='Connecting_div'></div></div>";
           l_dom_device_con  = mx("#device_con");
           l_dom_device_stat = mx("#device_stat");
           if(obj.old_page=="login_page")
           {
			        l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+sn+"</div><div>"+mcs_login_sucess+"</div><br/></div>"+mcs_prompt_config_wifi+"</div></div>";
           }
           else
           {
            	l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+sn+"</div><div>"+mcs_state_modify_pass_success+"</div><div><br/>"+mcs_prompt_config_wifi+"</div>";
           }
           l_dom_setting_wifi[s_innerHTML]=
                	"<div style='width:300px;height:35px; '>"
                	+"SSID:&nbsp;&nbsp;<select id='select_ssid' style='text-align:left;'></select>"
                	+"</div>"
                	+"<div style='width:300px;height:35px;'>"
                	+"<input id='ssid_password' class='standard_inputs_wifi_set' type='password' ><span style='float:right;line-height:22px;'>"+mcs_password+":&nbsp;&nbsp;</span>"
                	+"</div>"
				            +"<div style='width:300px;height:20px;line-height:20px;'>"

                	+"<input id='not_prompt'type='checkbox' >&nbsp;&nbsp;"+mcs_donot_remind
                	+"</div>"
                	+"</div>"
                	;

           l_dom_select_ssid    = mx("#select_ssid");
           l_dom_Connecting_div = mx("#Connecting_div");
           l_dom_not_prompt     = mx("#not_prompt");

           l_dom_setting_wifi[s_style][s_cssText] ="width:300px;height:90px;position:relative;text-align:right;";

           l_dom_wifi_Refresh[s_innerHTML]=" <button id='wifi_button_refresh' class='standard_buttons_white' style='margin-left:3px'>" + mcs_refresh + "</button>";
           l_dom_wifi_Refresh[s_style][s_cssText] ="width:150px;height:90px;position:absolute;z-index:51;top:20px;right:10px;text-align:right;float:right;";
           l_dom_setting_wifi.style.left = "30px";
           setting_wifi.style.top =  "10px";

           l_dom_net_next = mx("#net_next");
           l_dom_net_cancel = mx("#net_cancel");
           l_dom_wifi_button_refresh = mx("#wifi_button_refresh");

           l_dom_net_next.onclick=function(){
           	   CcmSetNetworkInfoRequest();
           }
           l_dom_wifi_button_refresh.onclick=function(){
                ccm_get_network_info_request("wifi_client");
           }
           l_dom_net_cancel.onclick=function(){
             	if(mx("#not_prompt").checked)
              {
			            mlocal_storage.set("not_prompt_"+sn,"true");
    					}
    					if(obj.old_page=="login_page")
    					{
    					      l_parent_callback({type:"Guide_ok",option:"ipc_set_wifi"});
    					}else
    					{
    					      net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"set_pass"});
    					}

           }
           jQuery(l_me_parent).hide();
           function ccm_get_network_info_request(filter)
           {
                ms.send_msg("net_get",{sn:sn,force_scan:0,filter:"all"},{ip:g_server_device},ccm_get_network_info_response);

           }
           function ccm_get_network_info_response(msg, ref)
           {
           	    if(msg && msg.result == "")
                {
                	  if(msg.networks)
                	  {
                	      for(var i=0;i<msg.networks.length;i++)
                	      {
                	          if(msg.networks[i].token=="ra0")
                	          {
    						                if(msg.networks[i].enabled  )
                    	          {
                	          	      now_ifs=msg.networks[i];
                    	             	if(msg.networks[i].enabled==1 && msg.networks[i].wifi_client && msg.networks[i].wifi_client.info.stat=="ok")
                    	             	{
                    	                    l_dom_device_con[s_innerHTML]="";
                        									if(set_wifi_con)
                        									{
                        									   if(obj.old_page=="login_page")
                        			               {
                        										    net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"set_wifi"});
                        			               }
                        			               else
            			                           {
            			                              net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"pass_and_wifi"});
            			                           }
                        									}
                        									else
                        									{
                        									   if(obj.old_page=="login_page")
            			                           {
            			                              l_parent_callback({type:"Guide_ok",option:"ipc_set_wifi"});
            			                           }
            			                           else
            			                           {
            			                              net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"set_pass"});
            			                           }
                        									}

                                    }
                                    else if(msg.networks[i].phy&& msg.networks[i].phy.info && msg.networks[i].phy.info.stat=="err" && set_wifi_con==0)
                        						{
                								         if(obj.old_page=="login_page")
        			                           {
        			                              l_parent_callback({type:"Guide_ok",option:"ipc_set_wifi"});
        			                           }else
        			                           {
        			                              net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"set_pass"});
        			                           }
                							      }
                        						else if(msg.networks[i].wifi_client && !set_wifi_con )
                                    {
                    								   if(msg.networks[i].wifi_client.ap_list )
                    								   {
                        	                  var iner_htm="";
                        	              	  for(var j=0;j<msg.networks[i].wifi_client.ap_list.length;j++)
                        	              	  {
                        	              	     iner_htm+="<option style='color:white;' value='"+msg.networks[i].wifi_client.ap_list[j].ssid+"'>"+msg.networks[i].wifi_client.ap_list[j].ssid+"</option>"	;
                        	                  }
                    								        jQuery("#select_ssid").html(iner_htm);
                    								   }
                                      jQuery(l_me_parent).show();
                    								  jQuery(select_ssid).tzSelect(null,2);
                    								  jQuery(l_me_parent).show();
                    								  l_dom_device_con[s_innerHTML]="";
                    								  jQuery("#device_invalid_div").show();
                                    }
                	                  else if(set_wifi_con==1)
                	                  {
                    								    if(!l_me_parent) return;
                    									  setTimeout(function(){
                        	              		ccm_get_network_info_request("all");},3000);
                        	          }
                							  }
                							  else
                								{
                						        if(obj.old_page=="login_page")
                    								{
                    			              l_parent_callback({type:"Guide_ok",option:"ipc_set_wifi"});
                    			          }else
                    								{
                			                  net_cable_page({option:"ipc_Guide_ok",sn:sn,Completion_status:"set_pass"});
                								    }
                							  }
                	          }
                	      }
                	  }
                }
                else if(msg.result == "accounts.user.offline")
                {
                     set_wifi_con=0;
                	  	if(l_dom_Connecting_div)
                	  	{
                	  		   l_dom_device_con[s_innerHTML]="";
                	  	     l_dom_Connecting_div[s_innerHTML]=mcs_failed_to_set_the;
                	    }
                }
           }
           function CcmSetNetworkInfoRequest(obj)
           {
	              if(mx("#not_prompt").checked)
                {
			              mlocal_storage.set("not_prompt_"+sn,"true");
    					  }
    					  l_dom_Connecting_div[s_innerHTML]="";
                l_dom_ssid_password = mx("#ssid_password");
                now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
           	    now_net_info.ifs["phy"] = {conf:{mode:"wificlient"}};
    				    now_net_info.ifs["wifi_client"] ={conf:{enabled:1,ssid:mx("#select_network_edit").value,key:ssid_password.value}};
    						ms.send_msg("net_set",{sn:sn,networks:now_net_info.ifs,dns:now_net_info.dns},{sn:sn},ccm_set_network_info_response);

           }
           function ccm_set_network_info_response(msg,ref)
           {
           	    if(msg && msg.result == "")
                {
                	 var wifi_con_time;
                	    set_wifi_con=1;
           	          l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_state_connecting_to+" "+mx("#select_network_edit").value;
                	 	  ccm_get_network_info_request();

                	 setTimeout(function(){
                	  	set_wifi_con=0;
                	  	if(l_dom_Connecting_div)
                	  	{
                	  		   l_dom_device_con[s_innerHTML]="";
                	  	     l_dom_Connecting_div[s_innerHTML]=mcs_failed_to_set_the;
                	    }
                	 },70000);
                }
                else if(msg.result == "accounts.user.offline")
                {
                     set_wifi_con=0;
                	  	if(l_dom_Connecting_div)
                	  	{
                	  		   l_dom_device_con[s_innerHTML]="";
                	  	     l_dom_Connecting_div[s_innerHTML]=mcs_failed_to_set_the;
                	    }
                }
           }
           l_me.ctrl=function(obj)
           {
              switch(obj.type)
              {
                  case "destroy":
                  {
                  	  l_me_parent[s_innerHTML]="";
                  	  l_me_parent=null;
                  	  break;
                  }
                  case "setting_wifi":
                  {
                  	  CcmSetNetworkInfoRequest(obj);
                  	  break;
                  }
              }
           }
           ccm_get_network_info_request("all");
    		}
        function ipc_Guide_ok_class(obj)
    		{
    		     var l_me=this,
                 l_me_parent = obj.parent,
                 l_dom_complete_div,l_dom_connection_page,
    			       l_dom_device_invalid_Remark,
                 l_dom_device_invalid_Operat,
                 correct_width=500,correct_height=300;

                jQuery("#device_invalid_close").show();
                l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:relative;text-align:center;";

               l_dom_connection_page = dom_create_child(l_me_parent, "div", "connection_page");
               l_dom_connection_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:30px;"
               + "position:relative;text-align:left;margin-left:20px;";

               l_dom_connection_page[s_innerHTML]=mcs_done;

               l_dom_complete_div_p = dom_create_child(l_me_parent, "div", "complete_div_p");
               l_dom_complete_div_p[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-100) + "px;"
               + "position:relative;text-align:center;";

               l_dom_complete_div = dom_create_child(l_dom_complete_div_p, "div", "complete_div");
               l_dom_device_invalid_Remark = dom_create_child(l_dom_complete_div_p, "div", "device_invalid_Remark");
               l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
               l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:right;"
               + "position:relative;text-align:right";

               l_dom_device_invalid_Operat[s_innerHTML]=
               "<button class='standard_buttons_green' id='net_cancel' style='margin-top:18px;margin-right:20px;'>"+mcs_ok+"</button>";
               l_dom_device_invalid_Operat.style.top="20px";

               l_dom_net_cancel = mx("#net_cancel");
               l_dom_net_cancel.onclick=function(){
			         l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
                  	l_dom_device_invalid_div[s_innerHTML] = "";
                    g_page[s_removeChild](device_invalid_div);
                    l_dom_device_invalid_div = null;
                    l_dom_device_invalid_close.onclick = "";
                    l_dom_device_invalid_close.onmouseover = "";
                    l_dom_device_invalid_close.onmouseout = "";

    					      l_parent_callback({type:"logined"});
                   }

                   l_dom_complete_div[s_style][s_cssText] ="height:80px;position:absolute;text-align:left;";
    			         l_dom_device_invalid_Remark[s_style][s_cssText] ="height:40px;position:absolute;text-align:left;";
                   if(obj.Completion_status=="set_pass")
                   {
                      l_dom_complete_div[s_innerHTML]="1 . "+mcs_modify_password+" "+mcs_state_success//+"<br/>2 . "+mcs_modify_password+"<br/>3 . "+mcs_action_config_wifi;
                   }
                   else if(obj.Completion_status=="set_wifi")
                   {
                   		l_dom_complete_div[s_innerHTML]="1 . "+mcs_action_config_wifi+" "+mcs_state_success//+"<br/>3 . "+mcs_action_config_wifi;
    					        l_dom_device_invalid_Remark[s_innerHTML]=mcs_hint_remove_ethernet;
                   }
                   else if(obj.Completion_status=="pass_and_wifi")
                   {
                   		l_dom_complete_div[s_innerHTML]="1 . "+mcs_modify_password+" "+mcs_state_success+"<br/>2 . "+mcs_action_config_wifi+" "+mcs_state_success;
    					        l_dom_device_invalid_Remark[s_innerHTML]=mcs_hint_remove_ethernet;
                   }
                   l_dom_complete_div.style.right = ((l_dom_complete_div_p.offsetWidth - l_dom_complete_div.offsetWidth) / 2) + "px";
                   l_dom_complete_div.style.top = ((l_dom_complete_div_p.offsetHeight- l_dom_complete_div.offsetHeight) / 2)  + "px";
    			         l_dom_device_invalid_Remark.style.right = ((l_dom_complete_div_p.offsetWidth - l_dom_device_invalid_Remark.offsetWidth) / 2) + "px";
                   l_dom_device_invalid_Remark.style.top = ((l_dom_complete_div_p.offsetHeight- l_dom_device_invalid_Remark.offsetHeight) / 2)+80 + "px";

                   jQuery("#net_cancel").show();
                   l_me.ctrl=function(obj)
                   {
                      switch(obj.type)
                      {
                          case "destroy":
                          {
                          	  l_me_parent[s_innerHTML]="";
                          	  l_me_parent=null;
                          	  break;
                          }
                      }
                   }

    		}
    		function is_configured_wifi_class(obj)
        {
              var l_me=this,
               l_me_parent = obj.parent,
               l_dom_complete_div,l_dom_connection_page,
               l_dom_device_invalid_Operat,
               correct_width=500,correct_height=300;

               l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:relative;text-align:center;";

               l_dom_connection_page = dom_create_child(l_me_parent, "div", "connection_page");
               l_dom_connection_page[s_style][s_cssText] = "width:" + correct_width  + "px;height:30px;"
               + "position:relative;text-align:left;margin-left:20px;";

               l_dom_connection_page[s_innerHTML]=mcs_done;

               l_dom_complete_div_p = dom_create_child(l_me_parent, "div", "complete_div_p");
               l_dom_complete_div_p[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-100) + "px;"
               + "position:relative;text-align:center;";

               l_dom_complete_div = dom_create_child(l_dom_complete_div_p, "div", "complete_div");

               l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
               l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 50 + "px;text-align:center;"
               + "position:relative;text-align:right";

               l_dom_device_invalid_Operat[s_innerHTML]=
               "<button class='standard_buttons_green' id='net_cancel' style='margin-top:18px;margin-right:20px;'>"+mcs_ok+"</button>";
               l_dom_device_invalid_Operat.style.top="20px";

               l_dom_net_cancel = mx("#net_cancel");
               l_dom_net_cancel.onclick=function(){
                    l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
                    l_dom_device_invalid_div[s_innerHTML] = "";
                    g_page[s_removeChild](l_dom_device_invalid_div);
                    l_dom_device_invalid_div = null;
                    l_dom_device_invalid_close.onclick = "";
                    l_dom_device_invalid_close.onmouseover = "";
                    l_dom_device_invalid_close.onmouseout = "";

                     l_parent_callback({type:"logined"});
               }

               l_dom_complete_div[s_style][s_cssText] ="height:80px;position:absolute;text-align:left;";
               if(obj.Completion_status==1)
               {
                  l_dom_complete_div[s_innerHTML]="1 . "+mcs_add_device+" "+mcs_state_success//+"<br/>2 . "+mcs_modify_password+"<br/>3 . "+mcs_action_config_wifi;
               }
               else if(obj.Completion_status==2)
               {
                   l_dom_complete_div[s_innerHTML]="1 . "+mcs_add_device+" "+mcs_state_success+"<br/>2 . "+mcs_modify_password+" "+mcs_state_success//+"<br/>3 . "+mcs_action_config_wifi;
               }
               else if(obj.Completion_status==3)
               {
                   l_dom_complete_div[s_innerHTML]="1 . "+mcs_add_device+" "+mcs_state_success+"<br/>2 . "+mcs_modify_password+" "+mcs_state_success+"<br/>3 . "+mcs_action_config_wifi+" "+mcs_state_success;
               }
               else if(obj.Completion_status==4)
               {
                   l_dom_complete_div[s_innerHTML]="1 . "+mcs_add_device+" "+mcs_state_success+"<br/>"/*+2 . "+mcs_modify_password+" <br/>*/+"2 . "+mcs_action_config_wifi+" "+mcs_state_success;
               }

               l_dom_complete_div.style.right = ((l_dom_complete_div_p.offsetWidth - l_dom_complete_div.offsetWidth) / 2) + "px";
               l_dom_complete_div.style.top = ((l_dom_complete_div_p.offsetHeight- l_dom_complete_div.offsetHeight) / 2)  + "px";

               jQuery("#net_cancel").show();
               l_me.ctrl=function(obj)
               {
                  switch(obj.type)
                  {
                      case "destroy":
                      {
                            l_me_parent[s_innerHTML]="";
                            l_me_parent=null;
                            break;
                      }
                  }
               }
        }
        function setting_wifi_class(obj)
        {
            var l_me=this,
                l_me_parent = obj.parent,
                now_ifs={},
                now_net_info={},
                set_wifi_con=0,
                l_dom_select_ssid,
                l_dom_Connecting_div,
                l_dom_setting_wifi,
                l_dom_setting_wifi_p,
                l_dom_setting_wifi_Prompt,
                l_dom_connection_page,
                l_dom_device_stat,
                l_dom_device_con,l_dom_wifi_button_refresh,
                l_dom_ssid_password,l_dom_device_invalid_Operat,
                correct_width=500,correct_height=300;

               l_me_parent[s_style][s_cssText] ="width:100%;height:100%;position:absolute;text-align:center;";

               l_dom_setting_wifi_Prompt = dom_create_child(l_me_parent, "div", "setting_wifi_Prompt");
               l_dom_setting_wifi_Prompt[s_style][s_cssText] = "width:" + correct_width-20  + "px;height:152px;"
               + "position:relative;text-align:left;margin-left:20px;";
               l_dom_setting_wifi_Prompt.style.top="5px";

               l_dom_setting_wifi_p = dom_create_child(l_me_parent, "div", "setting_wifi_p");
               l_dom_setting_wifi_p[s_style][s_cssText] = "width:" + correct_width  + "px;height:" +( correct_height-202) + "px;"
               + "position:relative;text-align:center;";

               l_dom_setting_wifi = dom_create_child(setting_wifi_p, "div", "setting_wifi");

               l_dom_wifi_Refresh = dom_create_child(setting_wifi_p, "div", "wifi_Refresh");
               l_dom_device_invalid_Operat = dom_create_child(l_me_parent, "div", "device_invalid_Operat");
               l_dom_device_invalid_Operat[s_style][s_cssText] = "width:" + correct_width  + "px;height:" + 60 + "px;text-align:center;"
                + "position:absolute;text-align:right";

               l_dom_device_invalid_Operat[s_innerHTML]=
                "<button class='standard_buttons_green' id='net_cancel' style='margin-right:25px;margin-top:18px;'>"+mcs_cancel+"</button>"
               +"<button class='standard_buttons_green' id='net_next' style='margin-top:18px;margin-right:20px;'>"+mcs_apply+"</button>";

               l_dom_setting_wifi_Prompt[s_innerHTML]="<div><h3>"+mcs_action_config_wifi+"</h3><div id='device_stat' style='margin-top:12px;'></div><div id='device_con'></div></div>";
               l_dom_device_con  = mx("#device_con");
               l_dom_device_stat = mx("#device_stat");
               if(obj.old_page=="set_pass")
               {
                   l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+g_select_device_ipc+"</div><div>"+mcs_state_modify_pass_success+"</div><div><br/>"+mcs_prompt_config_wifi+"</div>";
               }
               else
               {
                    l_dom_device_stat[s_innerHTML]="<div>"+mcs_device_id+":"+g_select_device_ipc+"</div><div>"+mcs_state_add_device_success+"</div><div><br/>"+mcs_prompt_config_wifi+"</div>";
               }
               l_dom_setting_wifi[s_innerHTML]=
                        "<div style='width:300px;height:40px; '>"
                        +"SSID:&nbsp;&nbsp;<select id='select_ssid' style='text-align:left;'></select>"
                        +"</div>"
                        +"<div style='width:300px;height:40px;'>"
                        +"<input id='ssid_password' class='standard_inputs_wifi_set' type='password' ><span style='float:right;line-height:22px;'>"+mcs_password+":&nbsp;&nbsp;</span>"
                        +"</div>"
                        +"<div id='Connecting_div'>"
                        +"</div>"
                        +"</div>"
                        ;

               l_dom_select_ssid    = mx("#select_ssid");
               l_dom_Connecting_div = mx("#Connecting_div");

               l_dom_setting_wifi[s_style][s_cssText] ="width:300px;height:90px;position:relative;text-align:right;";

               l_dom_wifi_Refresh[s_innerHTML]=" <button id='wifi_button_refresh' class='standard_buttons_white' style='margin-left:3px'>" + mcs_refresh + "</button>";
               l_dom_wifi_Refresh[s_style][s_cssText] ="width:150px;height:90px;position:absolute;z-index:51;top:20px;right:10px;text-align:right;float:right;";
               l_dom_setting_wifi.style.left = "30px";
               //l_dom_setting_wifi.style.top = (((correct_height-182) - setting_wifi.offsetHeight) / 2)  + "px";

               l_dom_net_next = mx("#net_next");
               l_dom_net_cancel = mx("#net_cancel");
               l_dom_wifi_button_refresh = mx("#wifi_button_refresh");
               l_dom_net_next.onclick=function(){
                      CcmSetNetworkInfoRequest(obj);
               }
               l_dom_wifi_button_refresh.onclick=function(){
                    ccm_get_network_info_request("wifi_client");
               }
               l_dom_net_cancel.onclick=function(){
                      if(obj.old_page=="set_pass")
                    {
                          net_cable_page({option:"is_configured_wifi",Completion_status:2});
                    }
                    else if(obj.old_page=="add_device")
                    {
                          net_cable_page({option:"is_configured_wifi",Completion_status:1});
                    }
               }
               jQuery(l_me_parent).hide();
               function ccm_get_network_info_request()
               {

                    ms.send_msg("net_get",{sn:obj.sn,force_scan:0,filter:"all"},{ip:g_server_device},ccm_get_network_info_response);

               }
               function ccm_get_network_info_response(msg, ref)
               {
               	    if(msg && msg.result == "")
                    {
                    	  if(msg.networks )
                    	  {
                    	      for(var i=0;i<msg.networks.length;i++)
                    	      {
                    	          if(msg.networks[i].token=="ra0")
                    	          {
                    	          	    now_ifs=msg.networks[i];
                    	             	if(msg.networks[i].enabled==1 && msg.networks[i].wifi_client && msg.networks[i].wifi_client.info.stat=="ok")
                    	             	{
                    	                  l_dom_device_con[s_innerHTML]="";
                    	                  if(obj.old_page=="set_pass" &&set_wifi_con==1)
                    	                  {
                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:3});
                    	                  }
                    	                  else if(obj.old_page=="add_device" &&set_wifi_con==1)
                    	                  {
                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:4});
                    	                  }
                    	                  else if(obj.old_page=="set_pass" && set_wifi_con==0)
                    	                  {
                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:2});
                    	                  }
                    	                  else
                    	                  {
                    	                      net_cable_page({option:"is_configured_wifi",Completion_status:1});
                    	                  }
                    	             	}
                    	             	else if(msg.networks[i].wifi_client && msg.networks[i].wifi_client.ap_list && !set_wifi_con )
                    	              {
                    	                  var iner_htm="";
                    	              	  for(var j=0;j<msg.networks[i].wifi_client.ap_list.length;j++)
                    	              	  {
                    	              	     iner_htm+="<option style='color:white;' value='"+msg.networks[i].wifi_client.ap_list[j].ssid+"'>"+msg.networks[i].wifi_client.ap_list[j].ssid+"</option>"	;
                    	              	  }

                										  jQuery("#select_ssid").html(iner_htm);
                                      jQuery(l_me_parent).show();
                										  jQuery(select_ssid).tzSelect(null,2);

                										  l_dom_device_con[s_innerHTML]="";
                    	              }
                    	              else if(set_wifi_con==1)
                    	              {
                										    if(!l_me_parent) return;
                											  setTimeout(function(){ccm_get_network_info_request("all");},3000);
                    	              }
                										else if(set_wifi_con==0)
                										{
                										  if(obj.old_page=="add_device")
                										  {
                										     net_cable_page({option:"is_configured_wifi",Completion_status:1});
                										  }else if(obj.old_page=="set_pass")
                										  {
                                    	    net_cable_page({option:"is_configured_wifi",Completion_status:2});
                										  }
                									  }
                    	          }
                    	      }
                    	  }
                    }
               }
               function CcmSetNetworkInfoRequest(obj)
               {



                      ssid_password = mx("#ssid_password");
                      now_net_info["networks"] = {token:now_ifs.token, enabled:1};
               	      now_net_info.networks["phy"] = {conf:{mode:"wificlient"}};

                      now_net_info.networks["wifi_client"] ={conf:{enabled:1,ssid:mx("#select_network_edit").value,key:ssid_password.value}};

								      ms.send_msg("net_set",{sn:obj.sn,networks:now_net_info.networks,dns:now_net_info.networks.dns},{sn:obj.sn, ip_refresh:obj.to, select:obj.select,ip:obj.to},ccm_set_network_info_response);
                      //ms.send_msg("net_set",{sn:obj.sn,networks:now_net_info.networks,},null,ccm_set_network_info_response);
               }
               function ccm_set_network_info_response(msg,ref)
               {
               	    if(msg && msg.result == "")
                    {
                    	 var wifi_con_time;
                    	    set_wifi_con=1;
               	          l_dom_device_con[s_innerHTML]="<image src='"+client_name+"loading.gif'/>"+mcs_request_send;
                    	 	  ccm_get_network_info_request();

                    	 setTimeout(function(){
                    	  	set_wifi_con=0;
                    	  	if(Connecting_div)
                    	  	{
                    	  		 l_dom_device_con[s_innerHTML]="";
                    	  	   l_dom_Connecting_div[s_innerHTML]=mcs_failed_to_set_the;
                    	    }
                    	 },70000);
                    }
               }
               l_me.ctrl=function(obj)
               {
                  switch(obj.type)
                  {
                      case "destroy":
                      {
                            l_me_parent[s_innerHTML]="";
                            l_me_parent=null;
                            break;
                      }
                      case "setting_wifi":
                      {
                            CcmSetNetworkInfoRequest();
                            break;
                      }
                  }
               }
            ccm_get_network_info_request();
        }
        function option_set_class(obj)
        {        	     
        	     var l_me = this,
        	     l_me_parent = obj.parent,
        	     correct_width=500,correct_height=300;
        	     if(g_domain_oems_vimtag)
        	     {
        	     	  l_me_parent[s_innerHTML] =
        	     	  "<div>"
        	     	  +  "<div style='height:60px;line-height:60px;text-align:center;font-size:16px;'>" + mcs_option + "</div>"
        	     	  +  "<div style='width:260px;height:1px;background-color:#cccccc;'></div>"
        	     	  +  "<div style='height:40px;line-height:40px;font-size:16px;'>" + mcs_plug + ":</div>"
        	     	  +  "<div id='adevice_div' style='width:260px;height:40px;margin-bottom:30px;font-size:14px;'>"
			            +     "<select id='select_plug' style='width:260px;height:40px;cursor:pointer;'>"
			            +         "<option value='1'>"+mcs_plug_load+"</option>"
			            +         "<option value='2'>"+mcs_plug_load_refuse+"</option>"
			            +         "<option value='3'>"+mcs_plug_load_auto+"</option>"
			            +     "</select>"
			            +  "</div>"
			            +  "<button id='option_ok' style='font-size:16px;width:260px;height:40px;background-color:#00a6ba;margin-bottom:10px;border:0px;cursor:pointer;'>" + mcs_option_ok + "</button>"
        	     	  +"<div>";
        	     	  
        	     	  select_plug_option = mx("#select_plug");
        	     	  plug_option_ok = mx("#option_ok");
        	     }
               
             if(g_domain_oems_vimtag)
             {
             	   select_plug_option.onchange = function(e){
             	   	     if(this[this.selectedIndex].text == mcs_plug_load )
		                    {
		                    	  mlocal_storage.set(str.remember_plug_str, this[this.selectedIndex].value); 
		                        g_is_plug_load = 1;
		                        g_is_plug_load_refuse = 0;
		                        g_play_flash_video = 0;
		                    }
		                   else if(this[this.selectedIndex].text == mcs_plug_load_refuse) 
		                   	{  
		                   		  mlocal_storage.set(str.remember_plug_str, this[this.selectedIndex].value);
		                   		  g_is_plug_load_refuse = 1;
		                        g_is_plug_load = 0;
		                   	}
		                   else if(this[this.selectedIndex].text == mcs_plug_load_auto) 
		                   	{ 
		                   		  mlocal_storage.set(str.remember_plug_str, this[this.selectedIndex].value);
		                   		  g_is_plug_load = 0;
		                        g_is_plug_load_refuse = 0;
		                   	}
             	   
             	   };
             }            
             var str =
             {
             	  remember_plug_str:"remember_plug_info"
             };
             var i, length = select_plug_option.length, plug_choice = mlocal_storage.get("remember_plug_info");

             if(plug_choice)
             {
             	  //select_plug_option.value = "自动";
             	  //select_plug_option[2].selected = true;
             	  for(i=0;i<length;++i)
             	  {
             	  	if(select_plug_option[i].value == plug_choice)
             	  	select_plug_option[i].selected = true;
             	  }
             }
             else
             {
             	  //select_plug_option.value = plug_choice;
             	  //select_plug_option[document.getElementById('select_plug').selectedIndex].selected = true;
             	  select_plug_option[2].selected = true;
             }
             l_me.ctrl=function(obj)
             {
               switch(obj.type)
               {
                  case "destroy":
                   {
                      l_me_parent[s_innerHTML]="";
                      l_me_parent=null;
                      break;
                   }
               }
             }
             plug_option_ok.onclick=function(){
                    l_cable_page_create_obj.ctrl({type:"options_destroy",data:{option:l_option_cable_page}});
                    l_dom_device_invalid_div[s_innerHTML] = "";
                    page[s_removeChild](l_dom_device_invalid_div);
                    l_dom_device_invalid_div = null;
                    l_dom_device_invalid_close.onclick = "";
                    l_dom_device_invalid_close.onmouseover = "";
                    l_dom_device_invalid_close.onmouseout = "";
             }
                                                    
        }
    		function add_device(msg,sn)
    		{
    		   l_parent_callback({type:"add_device",data:{msg:msg,sn:sn}});
    	  }
    	  function on_event(obj)
        {
            switch(obj.type)
            {
                case "logined":
                {
                    l_parent_callback({type:"logined"});
                }
            }
        }
    	    l_me.ctrl=function(obj)		//net_setting_class
    	    {
    	      switch(obj.type)
    	      {
        		     case "add_device":
            		 {
            			    create_device_invalid_div();
            				net_cable_page({option:"add_device"});
            			    break;
            		 }
            			 case "ipc_pass_set":
            			 {
            			    create_device_invalid_div();
            				net_cable_page({option:"ipc_set_pass",data:obj.data});
            			    break;
            			 }
            			 case "guiding_connection":
            			 {
            			    create_device_invalid_div();
            			    net_cable_page({option:"guiding_connection",data:obj.data});
            				break;
            			 }
            			 case "option_set":
			             {
			             	  create_device_invalid_div();
			             	  net_cable_page({option:"option_set"});
			             } //set option
    		    }
    	    }
    }
    function class_home_cntr(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_view_page,
            l_view_page_obj,
            l_dom_ptz_control_box,
            l_ptz_control_box_obj,
            l_dom_home_control_box,
            l_home_control_box_obj,
            l_dom_view_page_up,
            l_dom_view_page_bottom,
            l_dom_view_page_bottom_menu,
            l_dom_view_page_left,
            l_dom_view_page_center,
            l_dom_view_page_right,
            l_view_page_bottom_menu;

        if(g_domain_oems_vimtag)
        {
        	  l_dom_view_page_left = dom_create_child(l_me_parent, "div", "view_page_left");
        	  l_dom_view_page_center = dom_create_child(l_me_parent, "div", "view_page_center");
        	  l_dom_view_page_right = dom_create_child(l_me_parent, "div", "view_page_right");
        	  l_dom_view_page_up = dom_create_child(l_dom_view_page_left, "div", "view_page_up");
        	  l_dom_view_page = dom_create_child(l_dom_view_page_left, "div", "view_page");
        	  l_dom_view_page_bottom = dom_create_child(l_dom_view_page_left, "div", "view_page_bottom");
        	  l_dom_view_page_bottom_menu = dom_create_child(l_dom_view_page_left, "div", "view_page_bottom_menu");
        	  l_dom_ptz_control_box = dom_create_child(l_dom_view_page, "div", "vimtag_ptz_control_box");
        }
        function create_ipc(obj)
        {
            if(!obj.node_sn) return;
            if(!g_view_link.add(obj.node_sn))
            {
                var pos = g_view_link.pos(obj.node_sn) + 1,
                    inner_window_info, page_state;
                if(g_view_link.length >= (g_view_split_count * g_view_pages))
                    ++g_view_pages;
                if(pos <= (g_view_split_count * g_now_view_page))
                {
                    inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:pos - g_view_split_count * (g_now_view_page - 1)}});
                    l_view_page_obj.ctrl({type:"snapshot",data:0});
                    l_view_page_obj.ctrl({type:"add_home_ipc",data:{inner_window_info:inner_window_info, node_sn:obj.node_sn}});
                }
                g_is_playing = 1;
            }
        }
        function delete_ipc(obj)
        {
            if(g_view_link.del(obj.node_sn))
            {
                var pos = g_view_link.pos(obj.node_sn),
                    trol, page_state;
                if((obj.type != "refresh"))
                    g_is_playing = 0;
                if(g_view_pages > 1 && g_view_link.length <= (g_view_split_count * (g_view_pages - 1)))
                {
                    --g_view_pages;
                    if(g_view_link.length && g_view_link.length  == (g_view_split_count * (g_now_view_page - 1)))                   //the last page is empty
                    {
                        --g_now_view_page;
                        if(g_view_page_redraw)
                            g_view_page_redraw();
                    }
                }
                var i = 0, in_pos, count_pos,
                    temp_pos = pos - g_view_split_count * g_now_view_page,
                    list_obj = g_view_link.get_first(),
                    trow, inner_window_info;
                if(temp_pos < 0)
                {
                    in_pos = 0;
                    count_pos = g_view_split_count * (g_now_view_page - 1);
                }
                else if(temp_pos > g_view_split_count)
                {
                    in_pos = g_view_split_count;
                    count_pos = 0;
                }
                else
                {
                    in_pos = temp_pos;
                    count_pos = pos;
                    if(list_obj == null)                //the last remaining
                    {
                        inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:in_pos + 1}});
                         l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
                        return;
                    }
                }
                while(i++ < count_pos)
                    list_obj = list_obj.next;
                if(list_obj == null)                    //the one that at the end of
                {
                    g_select_inner_ipc = "";
                }
                else
                    g_select_inner_ipc = list_obj.data;
                for(; in_pos < g_view_split_count && in_pos < g_view_link.length - g_view_split_count * (g_now_view_page - 1) ; ++in_pos)
                {
                    inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:in_pos + 1}});
                    l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});

                    l_view_page_obj.ctrl({type:"snapshot",data:0});
                        l_view_page_obj.ctrl({type:"add_home_ipc", data:{inner_window_info:inner_window_info, node_sn:list_obj.data}});
                    pos = g_view_link.pos(list_obj.data);
                    list_obj = list_obj.next;
                }
                if(in_pos < g_view_split_count)
                {
                     inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:in_pos + 1}});
                     l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
                     l_view_page_obj.ctrl({type:"snapshot",data:1});
                }
            }
        }
        function split_screen(obj)
        {
            if(g_split_update)
                g_split_update({count:obj.count});
        }
        //打开或关闭设备列表
        function operate_device_list(obj)
        {
            if(g_device_list_switch == obj.state)
                return 0;
            else
            {
                var j_device_list_panel = jQuery("#device_list_panel"),
                    j_device_list_inner = jQuery("#device_list_inner"),
                    j_device_list_arrow = jQuery("#device_list_arrow");
                if(obj.state == "open")
                {
                    mx("#device_list_panel").style.display = "inline";
                    if(!j_device_list_panel.is(":animated")){
                        j_device_list_panel.animate({height:g_panel_box_h, top:"8", left:"3"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_panel.animate({width:g_panel_box_w}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({height:g_device_list_inner_h}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({width:(g_panel_box_w)}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_arrow.animate({top:g_panel_box_h + 8}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_device_list_panel.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_inner.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_arrow.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_device_list_switch = obj.state;
                    }
                }
                else if(obj.state == "close")
                {
                    if(!j_device_list_panel.is(":animated")){
                        j_device_list_panel.animate({height:"0", top:g_panel_box_h + 15, left:"10"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_panel.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({height:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_arrow.animate({top:g_panel_box_h + 8 + 10}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_device_list_panel.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_inner.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_arrow.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_device_list_switch = obj.state;
                    }
                }
                l_view_page_obj.ctrl({type:"update"});
            }
        }
        function operate_ptz_control(obj)
        {
            if(g_ptz_control_switch == obj.state)
                return ;
            else
            {
                var j_ptz_control_panel = jQuery("#ptz_control_panel"),
                    j_ptz_control_inner = jQuery("#ptz_control_inner"),
                    j_ptz_control_arrow = jQuery("#ptz_control_arrow");
                if(obj.state == "open")
                {
                    mx("#ptz_control_panel").style.display = "inline";
                    if(!j_ptz_control_panel.is(":animated")){
                        j_ptz_control_panel.animate({height:g_panel_box_h, top:"8", right:"3"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_panel.animate({width:g_panel_box_w}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_inner.animate({height:(g_panel_box_h - 18)}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_inner.animate({width:(g_panel_box_w)}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_arrow.animate({top:g_panel_box_h + 8}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_ptz_control_panel.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_ptz_control_inner.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_ptz_control_arrow.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_ptz_control_switch = obj.state;
                    }
                }
                else if(obj.state == "close")
                {
                    if(!j_ptz_control_panel.is(":animated")){
                        j_ptz_control_panel.animate({height:"0", top:g_panel_box_h + 15, right:"10"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_panel.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_inner.animate({height:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_inner.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_ptz_control_arrow.animate({top:g_panel_box_h + 8 + 10}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_ptz_control_panel.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_ptz_control_inner.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_ptz_control_arrow.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_ptz_control_switch = obj.state;
                    }
                }
                l_view_page_obj.ctrl({type:"update"});
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	  if(g_is_in_playback_page)
                    	  	  {
                    	  	  	 l_dom_view_page_left.style.left = (g_body_width - g_player_width)/2 + "px";
                    	  	  }
                    	  	  l_dom_view_page_left[s_style][s_width] = g_player_width + "px";
                    	  	  l_dom_view_page_left[s_style][s_height] = g_player_height + 64 + "px";                      	  	  
                    	  	  l_dom_view_page[s_style][s_width] = g_player_width + "px";
                    	  	  l_dom_view_page[s_style][s_height] = g_player_height + "px";
                    	  	  l_dom_view_page_up[s_style][s_width] = g_player_width + "px";
                    	  	  l_dom_view_page_bottom[s_style][s_width] = g_player_width + "px";
                    	  	  l_dom_view_page_bottom.style.marginTop = g_player_height + 10 + "px";
                    	  	  l_dom_view_page_bottom_menu[s_style][s_width] = g_player_width + "px";
                    	  	  l_dom_view_page_bottom_menu.style.marginTop = g_player_height + 20 + "px";
                    	  	  if(!g_is_in_playback_page)
                    	  	  {
                    	  	  	  l_dom_view_page_center[s_style][s_height] = g_player_height + 64 + "px";
		                    	  	  l_dom_view_page_right[s_style][s_height] = g_player_height + 64 + "px";
		                    	  	  if(g_body_width == 900)
		                    	  	  {
		                    	  	  	 mx("#vimtag_device_list_box").style.marginLeft = g_nine_hundred_side + "px";
										        	  	 mx("#vimtag_device_list_box").style.marginRight = g_nine_hundred_side + "px";
										        	  	 l_dom_view_page.style.left = "0px";
		                    	  	  }
		                    	  	  else if(g_body_width > 900)
										        	  {
										        	  	 mx("#vimtag_device_list_box").style.marginLeft = (g_body_width - g_player_width -244)/2 + "px";
										        	  	 mx("#vimtag_device_list_box").style.marginRight = (g_body_width - g_player_width -244)/2 + "px";
										        	  	 l_dom_view_page.style.left = (g_body_width - g_player_width -244)/2 + "px";
										        	  }
										        	  
										        	  l_view_page_right.ctrl(obj);
										        	  l_ptz_control_box_obj.ctrl(obj);
								        	  }                    	  	  
                    	  	  l_view_page_obj.ctrl(obj);                    	  	                      	  	  
                    	  }
                        break;
                    }
                case "change_select_device_style":
                case "refresh_device_list":
                    {
                        l_device_list_box_obj.ctrl(obj);
                        break;
                    }
                case "change_select_ipc"://处理更改设备
                    {
                        if(l_view_page_obj)
                            l_view_page_obj.ctrl({type:"change_select_ipc", data:obj.data});
                        break;
                    }
                case "get_profiles":
                    {
                        return l_device_list_box_obj.ctrl(obj);
                        break;
                    }
                case "profiles_play":
                    {
                         l_home_control_box_obj.ctrl(obj);
                         break;
                    }
                case "update_imaging":
                    {
                    	 l_ptz_control_box_obj.ctrl(obj);
                    	 break;
                    }
                case "create_ipc":
                    {
                    	  create_ipc({node_sn:obj.data.node_sn});
                        break;
                    }
                case "delete_ipc":
                    {
                    	  delete_ipc({node_sn:obj.data.node_sn});
                        break;
                    }
                case "destroy"://清除本元素
                    {   //如果正在播放视频 删除播放
                    	  if(g_is_playing){
                    	 	  delete_ipc({node_sn:g_select_device_ipc});
                    	 	  g_is_playing = 0;
                    	  }
                        l_view_page_obj.ctrl(obj);
                        l_home_control_box_obj.ctrl(obj);
                        l_ptz_control_box_obj.ctrl(obj);
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                case "create_playback_vimtag":
                    {
                    	  g_is_play_back = 1;
                    	  var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
                        l_view_page_obj.ctrl({type:"add_playback_ipc", data:{inner_window_info:inner_window_info, node_sn:obj.node_sn}});
                    	  break;
                    }
                case "destroy_playback_vimtag":
                    {
                    	  g_is_play_back = 0;
                    	  var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
                        //l_view_page_obj.ctrl({type:"add_playback_ipc", data:{inner_window_info:inner_window_info, node_sn:obj.node_sn}});
                        l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
                    }
                case "playback_token_vimtag":
                    {
                    	  l_view_page_obj.ctrl({type:"RecordingToken", data:obj.token});
                    	  break;
                    }
                case "playback_size_vimtag":
                    {
                    	  l_view_page_obj.ctrl({type:"RecordingSize", data:obj.size});
                    	  break;
                    }
                case "destroy_play_page":
                    {
                    	  if(g_is_playing){
                    	 	  delete_ipc({node_sn:g_select_device_ipc});
                    	 	  g_is_playing = 0;
                    	  }
                    	  l_view_page_right.ctrl(obj);
                    	  l_view_page_bottom_menu.ctrl(obj);
                    	  l_view_page_obj.ctrl(obj);
                    	  l_ptz_control_box_obj.ctrl(obj);
                    	  l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                    	  break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_home_cntr.");
            }
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "create_ipc":
                    {
                        create_ipc(obj.data);
                        break;
                    }
                case "delete_ipc":
                    {
                        delete_ipc(obj.data);
                        break;
                    }
                case "refresh_menu":
                    {
                        l_parent_callback(obj);
                        break;
                    }
                case "Refresh_devs":
                    {
                       l_parent_callback(obj);
                       break;
                    }
                case "speed":
                    {
                        l_home_control_box_obj.ctrl(obj);
                        break;
                    }
                case "relative_move":
                    {
                        l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "operate_device_list_box":
                    {
                        operate_device_list(obj.data);
                        break;
                    }
                case "operate_ptz_control_box":
                    {
                        operate_ptz_control(obj.data);
                        break;
                    }
                case "get_snapshot_uri":
                    {
                        l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "call_button_clicked":
                    {
                        var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:obj.data.inner_window_index}});
                        if(inner_window_info)
                        {
                            if(inner_window_info.audio_chls === null)
                            {
                                l_view_page_obj.ctrl({type:"get_audio_output_stream_uri", data:{inner_window_info:inner_window_info}});
                            }
                            else
                            {
                                inner_window_info.mme.chl_destroy(inner_window_info.audio_chls);
                                inner_window_info.audio_chls = null;
                                if(g_domain_oems_vimtag)
                                {
                                	mx("#talkback_off_pic").className = "talkback_off_picture";
                                }
                            }
                        }
                        break;
                    }
                case "adjust_calling_button_state":
                    {
                    		l_home_control_box_obj.ctrl(obj);
                    		break;
                    }
                case "re_create_ipc":
                    {
                        l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "update_sound_settings":
                    {
                        l_view_page_obj.ctrl({type:"update_sound_settings"});
                        break;
                    }
                case "get_inner_window_info":
                    {
                        return l_view_page_obj.ctrl(obj);
                    }
                case "play_button_onclick":
                    {
                        var sn, node;
                        sn = g_select_device_ipc;
                        node = mcloud_agent.devs.get(sn);
                        if(g_is_playing)
                        {
                        	if(g_plug_is_missing==1)
                      	    {
                       	      l_view_page_obj.ctrl({type:"is_missing"});
                          	}
                            delete_ipc({node_sn:sn});
                        }
                        else
                        {
                           create_ipc({node_sn:sn});
                        }
                        break;
                    }
                case "get_profiles":
                    {
                        return l_device_list_box_obj.ctrl(obj);
                        break;
                    }
                case "snapshot":
                    {
                    	l_view_page_obj.ctrl({type:"snapshot",data:obj.data});
                    	break;
                    }
                case "adjust_play_button_state":
                    {
                    	l_home_control_box_obj.ctrl(obj);
                      break;
                    }
                case "add_home_ipc":
                    {
                      l_view_page_obj.ctrl({type:"snapshot",data:0});
                      l_view_page_obj.ctrl(obj);
                      break;
                    }
                case "remove_ipc":
                    {
                      l_view_page_obj.ctrl(obj);
                      break;
                    }
                case "change_select_ipc":
                    {
                    	l_me.ctrl(obj);
                    	break;
                    }
                case "profiles_play":
                    {
                    	l_me.ctrl(obj);
                    	break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_home_cntr.");
            }
        }

        if(g_domain_oems_vimtag)
        {
        	  if(obj.playback)
        	  {
        	     l_dom_view_page_left[s_style][s_cssText] = "width:" + g_player_width+ "px;height:" + (g_player_height + 64) + "px;margin-top:10px;position:absolute;left:"+ (obj.parent.offsetWidth - g_player_width )/2 +"px;";
        	  }
        	  else
        	  {
        	  	 l_dom_view_page_left[s_style][s_cssText] = "width:" + g_player_width+ "px;height:" + (g_player_height + 64) + "px;margin-top:10px;float:left;";
        	  }
        	  
        	  if(!obj.playback) l_dom_view_page_center[s_style][s_cssText] = "width:10px;height:" + (g_player_height + 64) + "px;background-color:#4d4d4d;margin-top:10px;float:left;"
        	  l_dom_view_page[s_style][s_cssText] = "width:" + g_player_width+ "px;height:" + g_player_height + "px;left:" + (obj.offsetwidth - l_me_parent.offsetWidth )/2 + "px;";
        	  l_dom_view_page_up[s_style][s_cssText] = "width:" + g_player_width+ "px;height:10px;background-color:#1b1b1b;position:absolute;";
        	  l_dom_view_page_bottom[s_style][s_cssText] = "width:" + g_player_width+ "px;height:10px;background-color:#1b1b1b;margin-top:" + (g_player_height + 10) + "px;";
        	  l_dom_view_page_bottom_menu[s_style][s_cssText] = "width:" + g_player_width+ "px;height:44px;background-color:#2b2b2b;font-size:16px;color:#00a6ba;margin-top:" + (g_player_height + 20) + "px;";
        	  if(!obj.playback) l_dom_view_page_right[s_style][s_cssText] = "width:234px;height:" + (g_player_height + 64) + "px;margin-top:10px;float:left;";        	  
        	  
        	  if(g_body_width == 900 && (!obj.playback))
    	  	  {
    	  	  	 mx("#vimtag_device_list_box").style.marginLeft = g_nine_hundred_side + "px";
        	  	 mx("#vimtag_device_list_box").style.marginRight = g_nine_hundred_side + "px";
        	  	 l_dom_view_page.style.left = "0px";
    	  	  }
    	  	  else if(g_body_width > 900 && (!obj.playback))
        	  {
        	  	 mx("#vimtag_device_list_box").style.marginLeft = (g_body_width - g_player_width -244)/2 + "px";
        	  	 mx("#vimtag_device_list_box").style.marginRight = (g_body_width - g_player_width -244)/2 + "px";
        	  	 l_dom_view_page.style.left = (g_body_width - g_player_width -244)/2 + "px";
        	  }

        	  if(!obj.playback) l_view_page_right = new class_view_page_right({parent:l_dom_view_page_right, on_event:on_event});
        	  if(!obj.playback) l_view_page_bottom_menu = new class_view_page_bottom_menu({parent:l_dom_view_page_bottom_menu, on_event:on_event});
        }
    		l_view_page_obj = new class_view_page({parent:l_dom_view_page, type:"create", on_event:on_event});
        if(!obj.playback) l_ptz_control_box_obj = new class_ptz_control_box({parent:l_dom_ptz_control_box, on_event:on_event});

        if(g_device_list_switch == "close")
        {
            g_device_list_switch = "waiting change";
            operate_device_list({state:"close"});
        }
        if(g_ptz_control_switch == "close")
        {
            g_ptz_control_switch = "waiting change";
            l_dom_ptz_control_box.style.display = "none";
            operate_ptz_control({state:"close"});
        }
        if(g_domain_oems_vimtag)
        {//当进入预览画面时隐藏控制界面
        	  if(jQuery("#video_pause_pic")||jQuery("#play_pause_pic"))
        	  {
        	  	 jQuery("#vimtag_ptz_control").hide();
        	  }
        }
    }
    function class_view_page_bottom_menu(obj)
    {
    	  var l_me_parent = obj.parent,
    	      l_me = this,
    	      l_parent_callback = obj.on_event,
    	      l_dom_input_device_speaker,
    	      l_dom_voice_close_open,
    	      l_dom_resolute_choice,
    	      l_dom_full_screen_btn;

    	      l_me_parent[s_innerHTML] =
    	      "<div id='view_page_bottom_menu_option_left' style='position:absolute;margin-left:24px;'>"
    	      +          "<div id='voice_close_open' class='voice_close' style='margin-top:12px;margin-right:5px;position:absolute;'></div>"
    	      //+          "<div style='width:100px;height:20px;margin-left:25px;'>"
    	      //+          "<div class='options_float_right' style='width:100px;'>"
            //+             "<label for='input_speaker'></label>"
            //+             "<input name='slider' type='text' id='input_device_speaker' class='fd_tween fd_classname_extraclass fd_hide_input "
            //+             "fd_slider_cb_create_ms.TT-init fd_slider_cb_update_ms.TT-update fd_slider_cb_move_ms.TT-update' value='0%'</input>"
            //+          "</div>"
            //+          "</div>"
    	      +       "</div>"
    	      +       "<div id='view_page_bottom_menu_option_right' style='float:right;'>"
              +"<div id='enter_history_img' class='history_img' style='float:left;'></div><div class='enter_nav'></div>"
                +"<div id='enter_set_img' class='device_set_img' style='float:left;'></div><div class='enter_nav'></div>"
		        +          "<div id='resolute_choice' style='float:left;font-size:16px;color:#00a6ba;text-align:center;'></div>"
    	      +          "<div id='full_screen_btn' class='full_screen' style='margin-top:13px;margin-right:24px;margin-left:44px;float:right;'></div>"
    	      +"</div>";

    	      l_dom_input_device_speaker = mx("#input_device_speaker");
    	      l_dom_voice_close_open = mx("#voice_close_open");
    	      l_dom_resolute_choice = mx("#resolute_choice");
    	      l_dom_full_screen_btn = mx("#full_screen_btn");
              l_dom_enter_history = mx("#enter_history_img");
              l_dom_enter_set = mx("#enter_set_img");
            jQuery("#full_screen_btn").hide();
		    	  function dev_audio_get_ack(msg,ref)
		        {
		            if(!l_me_parent) return;
		            if(msg && msg.result == "")
		            {
		                if(l_dom_input_device_speaker)
		                    fdSliderController.increment("input_speaker", msg.speaker_level - l_dom_input_device_speaker.value);
		            }
		            else
		            {
		                log("error:GetAudioOutputConfigurationResponse return Result error in class_options_others.");
		            }
		        }
            l_dom_enter_history.onclick = function(){
                l_dom_enter_messages_img.click();
            }
            l_dom_enter_set.onclick = function(){
                l_dom_enter_setting_img.click();
            }
            //点击分辨率时显示分辨率选项
            l_dom_resolute_choice.onclick = function(){
                jQuery("#choice_play_definition").show();
            };
            
    	      l_dom_voice_close_open.onclick = function(){
    	      	  if(g_m_speaker_is_mute)
                {
                    g_m_speaker_is_mute=0;
                    l_dom_voice_close_open.className = "voice_open";
                }else{
                    g_m_speaker_is_mute=1;
                    l_dom_voice_close_open.className = "voice_close";
                }
    	          l_parent_callback({type:"update_sound_settings"});
    	      };

    	      function remove_event()
    	      {
                l_dom_voice_close_open.onclick = "";
                l_dom_resolute_choice.onclick = "";
    	      }

            jQuery(document).bind("click", function(event){
            	 var e = event || window.event;
               var elem = e.srcElement||e.target;

               while(elem)
               {
                  if(elem.id=="resolute_choice")
                  {
                      return;
                  }
                  elem = elem.parentNode;
               }
               jQuery("#choice_play_definition").hide();
            });
            
    	      l_me.ctrl = function(obj){
    	          switch(obj.type){
    	          	 case "destroy_play_page":
    	          	    {
    	          	    	  remove_event();
                          l_me_parent[s_innerHTML] = "";
                          l_me_parent = null;
    	          	    }
    	          }
     	      }

    	      fdSliderController.create();
    	      ms.send_msg("audio_get",{sn:g_select_device_ipc},null,dev_audio_get_ack);
    }
    function class_view_page_right(obj)
    {
        var l_me_parent = obj.parent,
            l_me = this,
            l_me_parent_callback = obj.on_event,
            l_dom_device_list_sidebar,
            l_dom_device_list_sidebar_up,
            l_dom_device_list_sidebar_center,
            l_dom_device_list_sidebar_center_left,
            l_dom_device_list_sidebar_bottom;

            l_me_parent[s_innerHTML] =
               "<div id='device_list_sidebar'>"
               +     "<div id='device_list_sidebar_up'>" + mcs_device_list + "</div>"
               +     "<div id='device_list_sidebar_center'>"
               +        "<div id='device_list_sidebar_center_left'></div>"
               +     "</div>"
               +     "<div id='device_list_sidebar_bottom'></div>"
               +"</div>";

            l_dom_device_list_sidebar = mx("#device_list_sidebar");
            l_dom_device_list_sidebar_up = mx("#device_list_sidebar_up");
            l_dom_device_list_sidebar_center = mx("#device_list_sidebar_center");
            l_dom_device_list_sidebar_center_left = mx("#device_list_sidebar_center_left");
            l_dom_device_list_sidebar_bottom = mx("#device_list_sidebar_bottom");

            var height = l_me_parent.offsetHeight;
            l_dom_device_list_sidebar_up[s_style][s_cssText] = "width:234px;height:44px;background-color:#1b1b1b;font-size:14px;color:#ffffff;text-align:center;line-height:44px;";
            l_dom_device_list_sidebar_center[s_style][s_cssText] = "width:234px;height:" + (height-49) + "px;";
            l_dom_device_list_sidebar_center_left[s_style][s_cssText] = "width:234px;height:" + (height-49) + "px;background-color:#2b2b2b;";
            l_dom_device_list_sidebar_bottom[s_style][s_cssText] = "width:234px;height:5px;background-color:#2b2b2b;";


            var l_dom_device_list_box_sidebar = new class_device_list_box_sidebar({parent:l_dom_device_list_sidebar_center_left, on_event:obj.on_event});
            jQuery(l_dom_device_list_sidebar_center_left).mCustomScrollbar();

            l_me.ctrl = function(obj){
                switch(obj.type){
                	 case "destroy_play_page":
                	    {
                	    	 if(l_dom_device_list_box_sidebar.ctrl)
                	    	 {
                	    	   l_dom_device_list_box_sidebar.ctrl(obj);
                	    	 }
                	    	 break;
                	    }
                	 case "update":
                	    {
                	    	 l_dom_device_list_sidebar_center[s_style][s_height] = g_player_height + 15 + "px";
                	    	 l_dom_device_list_sidebar_center_left[s_style][s_height] = g_player_height + 15 + "px";
                	    	 break;
                	    }
                }
            }
    }
    function class_device_list_box_sidebar(obj)
    {
    	  var l_me_parent = obj.parent,
    	      l_me = this,
    	      l_parent_callback = obj.on_event,
    	      images = new Array(),
    	      l_dom_device_list_img,
    	      l_home_cntr_obj;

    	      if(mcloud_agent.devs.list.length == 0) return;
    	      if(l_me_parent[s_innerHTML] == "")
    	      {
		            l_me_parent[s_innerHTML] = "<div id='vimtag_device_list'>"
		            for(var length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
		            {
		              	 var data = mcloud_agent.devs.list[i],pic_url;
		              	 if(!data)  continue;
		              	 var sn = data.nick?data.nick:data.sn;
		              	 if((data.stat == "Online")&&(data.type == "BOX"))
		              	 {
		              	 	 //l_me_parent[s_innerHTML] += "<div class='device_list_sidebar_img' state='online' sn="+data.sn+"><div class='device_sidebar_list_box_img'></div><div class='device_sidebar_nick'><span>"+ sn+"</span></div></div>";  //if the device is BOX, hide its
		              	 	 continue;
		              	 }
		              	 else if(data.stat == "Online")
		              	 {
		                   l_me_parent[s_innerHTML] += "<div class='device_list_sidebar_img' state='online' sn="+data.sn+"><div id='camera_sign_picture' class='sidebar_camera_sign_picture'></div><div class='device_sidebar_nick'><span>"+ sn+"</span></div></div>";
		                   continue;
		              	 }
		              	 else if(data.stat == "Offline")
		              	 {
		                   l_me_parent[s_innerHTML] += "<div class='device_list_sidebar_img' state='offline' sn="+data.sn+"><div class='device_sidebar_list_offline_img'></div><div class='device_sidebar_nick'><span>"+ sn+"</span></div></div>"
		              	 }
		            }
		            l_me_parent[s_innerHTML] += "</div>";
                
		            load_imgs();
            }

            for(var length = mcloud_agent.devs.list.length, i = 0; i < length; i++)
            {
            	  var data = mcloud_agent.devs.list[i];
            	  g_device_list_obj["sn_" + data.sn] = {name:name,type:mcloud_agent.devs.get(data.sn).type, ip:mcloud_agent.devs.get(data.sn).addr, isParent:true,
		                         state:{online:"Online", view:0, recording:0, call:0, playback:0,playback_download:0}};
            }

            function load_imgs()
            {
            	  for(var length = mcloud_agent.devs.list.length, k = 0; k < length; k++)
            	  {
            	  	  images[k] = new Image();
                    images[k].src = mcloud_agent.pic_url_get({sn:mcloud_agent.devs.list[k].sn,token:"p2"});
                    images[k].onload = function(){
                        for(var j=0;j<length;j++){
                                if(!jQuery(".device_list_sidebar_img")[j])return;
                                var dev_sn = jQuery(".device_list_sidebar_img").eq(j).attr("sn");
                                if(this.src.indexOf(dev_sn)>-1){                                    
                                    break;
                                }
                            }
                            jQuery(".device_list_sidebar_img")[j].childNodes[0].style.background ="url("+this.src+") no-repeat 0 0";
                        // for(var j = 0;j<length;j++)
                        // {
                        //      if(this == images[j])
                        //      {
                        //          break;
                        //      }
                        // }
                        // if(!jQuery(".device_list_sidebar_img")[j])
                        // {
                        // 	return;
                        // }
                        // else
                        // {
                        //   jQuery(".device_list_sidebar_img")[j].childNodes[0].style.backgroundImage ="url("+this.src+")";
                        // }
                    };
            	  }
            }

            l_dom_device_list_img = mx(".device_list_sidebar_img");
            for(var length= l_dom_device_list_img.length, i = 0; i < length; ++i)
            {
            	  //状态正常设备的事件
                if(l_dom_device_list_img[i].getAttribute("state") == "online")
                {   //状态正常设备的点击事件
                    l_dom_device_list_img[i].onclick = function() {
                        var old_sn = g_select_device_ipc;
                        g_select_device_ipc = this.getAttribute("sn");
                        pos = mcloud_agent.devs.get_index(g_select_device_ipc);

                        l_parent_callback({type:"change_select_ipc", data:{old_sn:old_sn}});
                        if(this.getAttribute("window_id"))
                        {
                           mx("#" + this.getAttribute("window_id")).click_ex();
                        }
                        
                        if(g_domain_oems_vimtag)
								        {//当进入预览画面时隐藏控制界面
								        	  if(jQuery("#video_pause_pic")||jQuery("#play_pause_pic"))
								        	  {
								        	  	 jQuery("#vimtag_ptz_control").hide();
								        	  }
								        }
                    };
                    l_dom_device_list_img[i].ondblclick = function() {
                        var old_sn = g_select_device_ipc;
                        g_select_device_ipc = this.getAttribute("sn");
                        pos = mcloud_agent.devs.get_index(g_select_device_ipc);
                        if(old_sn == g_select_device_ipc)
                        {
                        	if(g_is_playing == 1)
                        	{
                        		return;
                        	}
                        }else
                        {
                          //pos = mcloud_agent.devs.get_index(g_select_device_ipc);
                          //change_select_device_style(pos);
                        }

                        if(g_is_playing == 1)
                        {
                           l_parent_callback({type:"delete_ipc", data:{node_sn:old_sn}});
                           l_parent_callback({type:"create_ipc", data:{node_sn:g_select_device_ipc}});
                        }
                        else
                        {
                           l_parent_callback({type:"create_ipc", data:{node_sn:g_select_device_ipc}});
                        }
                    };
                }
                //设备不在线的事件
                else if(l_dom_device_list_img[i].getAttribute("state") == "offline")
                {
                	  l_dom_device_list_img[i].onclick = function() {
                	      msg_tips({msg:mcs_prompt_check_device_connection, type:"error", timeout:3000});
                	  };
                }
                //设备在线但是密码错误的设备事件
                else if(l_dom_device_list_img[i].getAttribute("state") == "invalid_auth")
                {
                    l_dom_device_list_img[i].onclick = function() {
                    	  //如果是ipc连接即使用设备ID登录，则退出系统
                        if(g_login_status == "ipc"){
                           system_pop_confirm_box({alert:true,str:mcs_password_expired, callback_func:function(){
                              jQuery("#system_logout").click();
                           }});
                        }
                        else
                        {
                           create_device_add_menu({parent:this, sn:this.getAttribute("sn"), type:"re_enter", direction:"bottom"});
                        }
                    };
                }
            }

            function remove_event()
            {
            	 l_me_parent[s_innerHTML] ="";
            	 l_me_parent = null;
            }

            l_me.ctrl = function(obj)
            {
            	  switch(obj.type)
            	  {
            	  	  case "destroy_play_page":
            	  	     {
            	  	     	  remove_event();
            	  	     }
            	  }
            }
    }
    function class_playback_cntr(obj)
    {
       	var l_me = this,
            l_me_parent = obj.parent,
            l_playback_slider_max_range = 1000,
            l_get_event_count = -10,//回放界面每次查询10条记录
            l_parent_callback = obj.on_event,
            l_search_time = 0X7fffffff,
            l_starting_line,
            l_passed_second,
            l_event_array,
            l_RecordingToken = "",
            l_search_begin_date,
            l_search_end_date,
						l_download_progress_timeout,
            l_play_pause_timer,
            l_dom_view_page = dom_create_child(l_me_parent, "div", "view_page"),
            l_view_page_obj,
            l_dom_playback_search_box = dom_create_child(l_me_parent, "div", "playback_search_box"),
            l_playback_search_box_obj,
            l_dom_playback_control_box = dom_create_child(l_me_parent, "div", "playback_control_box"),
            l_playback_control_box_obj;

        function create_ipc(obj)
        {
          if(!g_playback_link.add(obj.node_sn)){
             if(!obj.isDownload)g_is_play_back = 1; //debug by summer
             if(obj.isDownload)g_is_play_back_download = 1; //debug by summer
             var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
             l_view_page_obj.ctrl({type:"add_playback_ipc", data:{inner_window_info:inner_window_info, node_sn:obj.node_sn,isDownload:obj.isDownload?obj.isDownload:0,localPath:obj.localPath?obj.localPath:""}});
          }
        }
        function delete_ipc(obj)
        {
            if(g_playback_link.del(obj.node_sn))
            {               
                g_is_play_back = 0;
                l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{play_state:"pause"}});
                var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
                l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
            }
        }
        //打开或关闭设备列表
        function operate_device_list(obj)
        {
            if(g_device_list_switch == obj.state)
                return;
            else
            {
                var j_device_list_panel = jQuery("#device_list_panel"),
                    j_device_list_inner = jQuery("#device_list_inner"),
                    j_device_list_arrow = jQuery("#device_list_arrow");
                if(obj.state == "open")
                {
                    mx("#device_list_panel").style.display = "inline";
                    if(!j_device_list_panel.is(":animated")){
                        j_device_list_panel.animate({height:g_panel_box_h, top:"8", left:"3"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_panel.animate({width:g_panel_box_w}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({height:g_device_list_inner_h}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({width:(g_panel_box_w)}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_arrow.animate({top:g_panel_box_h + 8}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_device_list_panel.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_inner.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_arrow.animate({opacity:"1"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_device_list_switch = obj.state;
                    }
                }
                else if(obj.state == "close")
                {
                    if(!j_device_list_panel.is(":animated")){
                        j_device_list_panel.animate({height:"0", top:g_panel_box_h + 15, left:"10"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_panel.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({height:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_inner.animate({width:"0"}, {queue:false, duration:500, easing:'easeOutQuint'});
                        j_device_list_arrow.animate({top:g_panel_box_h + 8 + 10}, {queue:false, duration:200, easing:'linear'});
                        if(!g_old_browser_version)
                        {
                            j_device_list_panel.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_inner.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                            j_device_list_arrow.animate({opacity:"0"}, {queue:false, duration:500, easing:'linear'});
                        }
                        g_device_list_switch = obj.state;
                    }
                }
                l_view_page_obj.ctrl({type:"update"});
            }
        }
        function get_current_date(obj)
        {
            var i, length = 0, begin_event, end_event, pos,
                offset_millisecond, offset_date,
                between_millisecond = (l_search_end_date - l_search_begin_date);

            if(undefined !== obj.date)
            {
                offset_date = obj.date;
                if(l_event_array)
                    length = l_event_array.length;
                for(i = 0; i < length; ++i)
                {
                    if(offset_date < l_event_array[i].date)
                    {
                        if(l_event_array[i].type == "end")
                        {
                            return {state:"normal", offset_date:offset_date,
                                offset_value:Math.round(l_playback_slider_max_range * (offset_date - l_search_begin_date) / between_millisecond)};
                        }
                        else if(l_event_array[i].type == "begin")
                        {
                            offset_date = l_event_array[i].date;
                            return {state:"jump", offset_date:offset_date,
                                offset_value:Math.round(l_playback_slider_max_range * (offset_date - l_search_begin_date) / between_millisecond)};
                        }
                    }
                }
                //Not in any event in front of That is the last event behind the event
                if(l_event_array[length - 1].type == "begin")
                {
                    return {offset_date:offset_date,
                        offset_value:Math.round(l_playback_slider_max_range * (offset_date - l_search_begin_date) / between_millisecond)};
                }
                else
                {
                    return {offset_date:0, offset_value:0};
                }
            }
            else if(undefined !== obj.value)
            {
                pos = obj.value / l_playback_slider_max_range;
                offset_millisecond = Math.round(between_millisecond * pos);
                offset_date = l_search_begin_date + offset_millisecond;
                if(l_event_array && l_event_array.length)
                    length = l_event_array.length;
                else return {offset_date:0, offset_value:0};
                for(i = 0; i < length; ++i)
                {
                    if(offset_date < l_event_array[i].date)
                    {
                        if(l_event_array[i].type == "end")
                        {
                            return {state:"normal", offset_date:offset_date, offset_value:obj.value};
                        }
                        else if(l_event_array[i].type == "begin")
                        {
                            offset_date = l_event_array[i].date;
                            return {state:"jump", offset_date:offset_date,
                                offset_value:Math.round(l_playback_slider_max_range * (offset_date - l_search_begin_date) / between_millisecond)};
                        }
                    }
                }
                //Not in any event in front of That is the last event behind the event
                if(l_event_array[length - 1].type == "begin")
                {
                    return {offset_date:offset_date, offset_value:obj.value};
                }
                else
                {
                    return {offset_date:0, offset_value:0};
                }
            }
        }
        function play_playback_handle(obj)
        {
            var between_milliseconds = (l_search_end_date - l_search_begin_date);
            var exchange_rate = l_playback_slider_max_range / (between_milliseconds / 1000),
                current_value,current_time, next_time;

            current_value = parseInt(mx(".fd-slider-handle", mx("#fd-slider-playback_slider"))[0].getAttribute("aria-valuenow"), 10);
            l_passed_second = 1;
            l_starting_line = current_value;
            if(current_value < l_playback_slider_max_range)
            {
                current_time = get_current_date({value:current_value});
                l_view_page_obj.ctrl({type:"seek_ipc", data:{type:"time", date:current_time.offset_date, inner_window_info:obj.inner_window_info}});
                next_time = get_current_date({value:current_time.offset_value + exchange_rate});
                fdSliderController.increment("playback_slider", next_time.offset_value - current_time.offset_value);
                if(l_play_pause_timer)
                    clearInterval(l_play_pause_timer);
                l_play_pause_timer = setInterval(
                    function() {
                        ++l_passed_second;
                        current_value = parseInt(mx(".fd-slider-handle", mx("#fd-slider-playback_slider"))[0].getAttribute("aria-valuenow"), 10);
                        if(current_value < l_playback_slider_max_range)
                        {
                            next_time = get_current_date({value:l_starting_line + l_passed_second * exchange_rate});
                            if(next_time.state == "jump")
                            {
                                l_passed_second = 0;
                                l_starting_line = next_time.offset_value;
                                l_view_page_obj.ctrl({type:"seek_ipc", data:{type:"time", date:next_time.offset_date, inner_window_info:obj.inner_window_info}});
                            }
                            if(!next_time.offset_date)
                            {
                                l_passed_second = 0;
                                clearInterval(l_play_pause_timer);
                                if(!obj.isDownload)l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                                l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                                fdSliderController.increment("playback_slider", l_playback_slider_max_range);
                                return;
                            }
                            if(Math.round(next_time.offset_value) == l_playback_slider_max_range)
                            {
                                l_passed_second = 0;
                                clearInterval(l_play_pause_timer);
                                if(!obj.isDownload)l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                                l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                                fdSliderController.increment("playback_slider", l_playback_slider_max_range);
                            }
                            else
                            {
                                fdSliderController.increment("playback_slider", next_time.offset_value - current_value);
                            }
                        }
                        else
                        {
                            l_passed_second = 0;
                            clearInterval(l_play_pause_timer);
                            if(!obj.isDownload)l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                            l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                        }
                    }, 1000);
                    //l_view_page_obj.ctrl({type:"play_ipc", data:{inner_window_info:obj.inner_window_info}});
                return 0;
            }
            else
            {
                return -1;
            }
        }
        //获得回放记录
        function ccm_msg_get_ack(msg, ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                l_playback_search_box_obj.ctrl({type:"create_playback_file_list", data:msg});
                if(msg.messages){
                    l_search_time=msg.messages[msg.messages.length-1].msg_id;
                }
            }
            else
            {
                log("error:ccm_msg_get return error in class_playback_cntr.");
            }
        }
        //获取回放记录
        function ccm_msg_get(obj)
        {
            var node, node_sn;
            l_playback_control_box_obj.ctrl({type:"remove_playback_slider_block"});
            l_event_array = new Array();
            node_sn = obj.inner_window_info? obj.inner_window_info.node_sn : g_select_device_ipc;
            if(node_sn == "none" || node_sn == "")
            {
                 obj.inner_window_info=null;
                 node_sn=g_select_device_ipc;
            }
            node = mcloud_agent.devs.get(node_sn);;
            if(!node) return;
            obj.start_point = obj.start_point ? Date.parse(obj.start_point) / 1000 : "";
            obj.end_point = obj.end_point ? Date.parse(obj.end_point) / 1000 : "";

            ms.send_msg("msgs_get",{sn:g_select_device_ipc, start:(l_search_time), counts:l_get_event_count,filter:"record"},{inner_window_info:obj.inner_window_info || null},ccm_msg_get_ack);
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_view_page[s_style][s_width] = (l_me_parent.offsetWidth - g_panel_box_all_w * 2) + "px";
                        l_dom_view_page[s_style][s_height] = (l_me_parent.offsetHeight - g_control_box_h) + "px";
                        l_dom_view_page[s_style].left = g_panel_box_all_w + "px";
                        l_dom_playback_search_box[s_style][s_width] = g_panel_box_all_w + "px";
                        l_dom_playback_search_box[s_style][s_height] = g_panel_box_all_h + "px";
                        l_dom_playback_control_box[s_style][s_width] = l_me_parent.offsetWidth + "px";
                        if(g_panel_box_all_w < g_panel_box_max_w)
                        {
                            l_dom_playback_search_box[s_style].opacity = "0.5";
                        }
                        else
                        {
                            l_dom_playback_search_box[s_style].opacity = "1";
                        }
                        l_view_page_obj.ctrl(obj);
                        l_playback_search_box_obj.ctrl(obj);
                        l_playback_control_box_obj.ctrl(obj);
                        break;
                    }
                case "change_select_device_style":
                case "refresh_device_list":
                    {
                        l_device_list_box_obj.ctrl(obj);
                        break;
                    }
                case "change_select_ipc"://更改设备选择 通知其它模块发生改变
                    {
                        l_RecordingToken = "";
                        if(l_view_page_obj)
                            l_view_page_obj.ctrl({type:"change_select_ipc", data:obj.data});
                        if(l_playback_search_box_obj)
                            l_playback_search_box_obj.ctrl({type:"change_select_ipc", data:obj.data});
                        if(l_playback_control_box_obj)
                            l_playback_control_box_obj.ctrl({type:"change_select_ipc", data:obj.data});
                        break;
                    }
                case "create_ipc":
                    {
                        create_ipc(obj);
                        break;
                    }
                case "delete_ipc":
                    {
                        delete_ipc(obj);
                        break;
                    }
                case "destroy"://清除本元素
                    {  //如果正在回放 删除回放
                    	 if(g_is_play_back){
                    	 	  delete_ipc({node_sn:g_select_device_ipc});
                    	 }
                       l_view_page_obj.ctrl(obj);
                       l_playback_control_box_obj.ctrl(obj);
                       l_playback_search_box_obj.ctrl(obj);
                       clearInterval(l_play_pause_timer);
                       remove_event();
                       l_me_parent[s_innerHTML] = "";
                       l_me_parent = null;
                       break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_playback_cntr.");
            }
        }
         function on_event(obj)
        {
            switch(obj.type)
            {
                case "create_ipc":
                    {
                        create_ipc(obj);
                        break;
                    }
                case "delete_ipc":
                    {
                        delete_ipc(obj.data);
                        break;
                    }
                case "refresh_menu":
                    {
                      l_parent_callback(obj);
                      break;
                    }
                case "playback_button_onclick": //回放播放按键点击
                    {
                        if(g_is_play_back)
                        {
                           delete_ipc({node_sn:g_select_device_ipc});
                        }
                        else
                        {
                           create_ipc({node_sn:g_select_device_ipc});
                        }
                        break;
                    }
                case "playback_download":
                    {
                    		var sn=g_select_device_ipc?g_select_device_ipc:g_device_list_link.get_first().data.substr(3);
                    		var node = mcloud_agent.devs.get(g_select_device_ipc);
                    		old_progress=0;
                    		clearTimeout(l_download_progress_timeout);
                    		var progress_dom=obj.progress_dom?obj.progress_dom:mcloud_agent.devs.get(g_select_device_ipc).download_progress_dom;
                    		var file_list_img=jQuery(".download_img", progress_dom.parentNode)[0];
                    		if(g_is_play_back_download)
                        {
                              progress_dom.innerHTML=(g_is_play_back_download && obj.iscomplete)?"100%":"×";
                              delete_ipc({node_sn:sn,isDownload:0});
                              if(!obj.iscomplete) progress_dom.style.display="none";
                              file_list_img.style.backgroundImage="url('./imgs/download_ico.png')";
                              mcloud_agent.devs.get(g_select_device_ipc).download_progress_dom="";
                        }
                        else
                        {
                              if(navigator.platform.indexOf("Win") > -1)
                              {
                                  create_ipc({node_sn:sn,isDownload:1,localPath:"C:\/Downloads\/"+obj.path+".mp4"});
                              }
                        			else if(navigator.platform.indexOf("Mac") > -1)
                        			{
                        			    create_ipc({node_sn:sn,isDownload:1,localPath:"\/Users\/Shared\/"+obj.path+".mp4"});
                        			}
                        			mcloud_agent.devs.get(g_select_device_ipc).RecordingSaveName=obj.path;
                        			mcloud_agent.devs.get(g_select_device_ipc).download_progress_dom=progress_dom;
                        			progress_dom.innerHTML="0%";
                        			progress_dom.style.display="inline-block";
                        			file_list_img.style.backgroundImage="url('./imgs/download_stop_ico.png')";
                        			//view_page_obj.ctrl({type:"download_status",status:1});
                        }
                        break;
                    }
                case "adjust_playback_slider_position":
                    {
                        l_playback_control_box_obj.ctrl(obj);
                        break;
                    }
                case "time_control_position":
                    {
                        l_playback_control_box_obj.ctrl({type:"adjust_playback_slider_position", data:obj.data});
                        if(obj.data.inner_window_info)
                        {
                            var content;
                            l_passed_second = 1;
                            content = get_current_date({date:obj.data.date});
                            l_starting_line = content.offset_value;
                            l_view_page_obj.ctrl({type:"seek_ipc", data:{type:"time", date:content.offset_date, inner_window_info:obj.data.inner_window_info}});
                        }
                        break;
                    }
                case "playback_search_result":
                    {
                        var inner_window_info;
                        inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:obj.data.index}});
                        l_search_time = 0X7fffffff;
                        ccm_msg_get({inner_window_info:inner_window_info?inner_window_info:null, start_point:obj.data.start_point, end_point:obj.data.end_point});
                        break;
                    }
                case "play_playback_handle":
                    {
                        return play_playback_handle(obj.data);
                        break;
                    }
                case "playback_download_progress":
                    {
                        var download_progress_dom=mcloud_agent.devs.get(g_select_device_ipc).download_progress_dom;
                        if(download_progress_dom)
                        {
                        		var current_progress=(obj.current_progress*100).toFixed(2);
		                        download_progress_dom.innerHTML=current_progress+"%";
		                        l_download_progress_timeout=setTimeout(function(){
		                        		if(current_progress==old_progress)
				                        {
				                        		on_event({type:"playback_download",path:mcloud_agent.devs.get(g_select_device_ipc).RecordingSaveName,progress_dom:download_progress_dom,iscomplete:1});
				                        }
		                        },6000);

		                        old_progress=current_progress;
                        }
                        break;
                    }
                case "pause_playback_handle":
                    {
                        clearInterval(l_play_pause_timer);
                        return l_view_page_obj.ctrl({type:"pause_ipc", data:obj.data});
                        break;
                    }
                case "seek_ipc":
                    {
                        return l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "get_inner_window_info":
                    {
                        return l_view_page_obj.ctrl(obj);
                    }
                case "operate_device_list_box":
                    {
                        operate_device_list(obj.data);
                        break;
                    }
                case "remove_playback_slider_block":
                    {
                        l_playback_control_box_obj.ctrl(obj);
                        break;
                    }
                case "RecordingToken":
                    {
                    	  l_RecordingToken = obj.data;
                    	  l_view_page_obj.ctrl(obj);
                    	  break;
                    }
                case "RecordingSize":
                		{
                				l_view_page_obj.ctrl(obj);
                				break;
                		}
                case "add_playback":
                case "remove_playback":
                case "playback_list":
                    {
                       l_view_page_obj.ctrl(obj);
                       break;
                    }
                case "playback_click":
                    {
                        l_playback_search_box_obj.ctrl(obj);
                        l_playback_control_box_obj.ctrl(obj);
                        break;
                    }
                case "playback_search_list_more"://回放界面回放记录查看更多十条
                    {
                       l_search_time=obj.l_search_time;
                       ccm_msg_get(obj);
                       break;
                    }
                case "play_pause":
                    {
                        l_playback_search_box_obj.ctrl(obj);
                        break;
                    }
                case "add_playback_ipc":
                    {
                        l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "adjust_play_button_state":
                    {
                        l_playback_control_box_obj.ctrl(obj);
                        break;
                    }
                case "create_playback_file_list":
                    {
                         l_playback_search_box_obj.ctrl(obj);
                         break;
                    }
                case "remove_ipc":
                    {
                        l_view_page_obj.ctrl(obj);
                        break;
                    }
                case "playback_slider_is_ok":
                    {
                       l_view_page_obj.ctrl(obj);
                       break;
                    }
                case "l_search_time":
                    {
                       l_search_time=obj.data;
                       break;
                    }
                case "ccm_msg_get_ack":
                    {
                        ccm_msg_get_ack(obj.data.type,obj.data.msg,obj.data.ref);
                        break;
                    }
                case "speed":
                    {
                        break;
                    }
                default:
                    log("error:on_event's" + obj.type + "is not exist in class_playback_cntr.");
            }
        }
        function add_event()
        {
            if(null == g_view_page_redraw)
            {
                g_view_page_redraw = function(obj) {
                    l_view_page_obj.ctrl({type:"destroy"});
                    l_view_page_obj = new class_view_page({parent:l_dom_view_page,type:"redraw"});
                };
            }
        }
        function remove_event()
        {
            g_playback_slider_callback = null;
            g_view_page_redraw = null;
        }
        l_dom_view_page.style[s_cssText] = "width:" + (l_me_parent.offsetWidth - g_panel_box_all_w * 2) + "px;"
            + "height:" + (l_me_parent.offsetHeight - g_control_box_h) + "px;left:" + g_panel_box_all_w + "px;";
        l_dom_playback_search_box[s_style][s_cssText] = "width:" + g_panel_box_all_w + "px;height:" + g_panel_box_all_h + "px;";
        l_dom_playback_control_box[s_style][s_cssText] = "width:" + l_me_parent.offsetWidth + "px;height:" + g_control_box_h + "px;";
        if(g_panel_box_all_w < g_panel_box_max_w)
        {
           l_dom_playback_search_box[s_style].opacity = "0.5";
        }
        add_event();
        l_view_page_obj = new class_view_page({parent:l_dom_view_page, type:"create", on_event:on_event});
        l_playback_search_box_obj = new class_playback_search_box({parent:l_dom_playback_search_box, on_event:on_event});
        l_playback_control_box_obj = new class_playback_control_box({parent:l_dom_playback_control_box, on_event:on_event});

        if(g_device_list_switch == "close")
        {
            g_device_list_switch = "waiting change";
            operate_device_list({state:"close"});
        }
        if(g_select_device_ipc)
           ccm_msg_get({start_point:"", end_point:"", inner_window_info:null});
        fdSliderController.create();
    }
    function class_view_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_inner_windows_cont,
            l_dom_bg_top, l_dom_bg_center, l_dom_bg_bottom,
            l_window_array_info = {},
            l_ipc_speed_time,
            l_replay_interval,
            l_plug_type = "",
            l_play_ico_onclick=0,
            l_play_ico_count_down,
            l_RecordingSize,
            l_mask_setup_click,
            l_RecordingToken="";
        //处理更改设备
        function change_select_ipc(obj)
        {
            if(g_now_page == "home")
            {
                if(g_is_playing){
                   //删除旧的播放
                   l_parent_callback({type:"delete_ipc", data:{node_sn:obj.old_sn, type:"refresh"}});
                   g_is_playing = 0;
                }
                snapshot({data:1});
            }
            else if(g_now_page == "playback")
            {
                if(g_is_play_back){
                   //删除旧的播放
                   l_parent_callback({type:"delete_ipc", data:{ node_sn:obj.old_sn, type:"refresh"}});
                }
                //清除旧的回放标识
                l_RecordingToken = "";
            }
        }
        function split_screen(obj)
        {
            var count = 0, old_count;
            if(g_now_page == "home" || g_now_page == "timeline")
            {
                old_count = g_view_split_count;
                count = g_view_split_count;
                if(obj.count)
                {
                    count = g_view_split_count = obj.count;
                }
            }
            else if(g_now_page == "playback")
            {
                old_count = g_playback_split_count;
                count = g_playback_split_count;
                if(obj.count)
                {
                    count = g_playback_split_count = obj.count;
                }
            }

            while(count--)
            {
                inner_windows = dom_create_child(l_dom_inner_windows_cont, "div", "", "inner_windows");
            }
            adjust_screen(obj);
            if(obj.type && obj.type == "create")
                fill_inner_ipc({count:obj.count, old_count:old_count, type:"not_ipc"});
            else
                fill_inner_ipc({count:obj.count, old_count:old_count, type:"add_ipc"});
        }
        function adjust_screen(obj)
        {
            var split_count,
                count,
                inner_window_w,
                inner_window_h;

            if(g_domain_oems_vimtag)
            {
                mx("#inner_windows_cont").style.width = g_player_width + "px";
                mx("#inner_windows_cont").style.height = g_player_height + "px";
            }
            if(g_now_page == "home" || g_now_page == "timeline")
            {
                split_count = count = g_view_split_count;
            }
            else if(g_now_page == "playback")
            {
                split_count = count = g_playback_split_count;
            }

            if(4 == split_count || 9 == split_count || 16 == split_count || 36 == split_count)
            {
                inner_window_w = Math.floor(g_main_window_w / Math.sqrt(split_count));
                inner_window_h = Math.floor(g_main_window_h / Math.sqrt(split_count));
                while(count--)
                    mx(".inner_windows")[count][s_style][s_cssText] = "float:left;width:" + inner_window_w + "px;height:" + inner_window_h + "px;";
            }
            else if(8 == split_count)
            {
                inner_window_w = Math.floor(g_main_window_w / 4);
                inner_window_h = Math.floor(g_main_window_h / 4);

                while(count--)
                    mx(".inner_windows")[count][s_style][s_cssText] = "float:left;width:" + inner_window_w + "px;height:" + inner_window_h + "px;";
                mx(".inner_windows")[0][s_style][s_cssText] = "float:left;width:" + (inner_window_w * 3) + "px;height:" + (inner_window_h * 3) + "px;";
            }
            //The wrong data also use 1 split_screen;
            else
            {
                if(g_domain_oems_vimtag)
                {                    
                    inner_window_w = g_player_width;
                    inner_window_h = g_player_height;
                    mx(".inner_windows")[0].style.width = g_player_width + "px";
                    mx(".inner_windows")[0].style.height = g_player_height + "px";
                }
            }
        }
        function fill_inner_ipc(obj)
        {
            var i = 1, count, id_count,
                array_count = 0,
                list_length,
                list_obj,
                inner_windows = mx(".inner_windows"),
                inner_window_obj;

            if(g_now_page == "home" || g_now_page == "timeline")
            {
                count = obj.old_count;
                id_count = (g_now_view_page - 1) * count + 1;
                list_length = g_view_link.length;
                list_obj = g_view_link.get_first();
                if(obj.count)
                {
                    count = obj.count;
                    g_now_view_page = Math.ceil(id_count / obj.count);
                    id_count = (g_now_view_page - 1) * count + 1;
                }
            }
            else if(g_now_page == "playback")
            {
                count = obj.old_count;
                id_count = (g_now_playback_page - 1) * count + 1;
                list_length = g_playback_link.length;
                list_obj = g_playback_link.get_first();
                if(obj.count)
                {
                    count = obj.count;
                    g_now_playback_page = Math.ceil(id_count / obj.count);
                    id_count = (g_now_playback_page - 1) * count + 1;
                }
            }
            g_window_array = new Array(count);
            while(i++ < id_count)
                list_obj = list_obj.next;
            while(count--)
            {
                l_window_array_info["inner_window" + id_count] = {dom_id:("inner_window" + id_count), index:id_count, video_chls:null, audio_chls:null, mme:null, ipc_state:"", node_sn:""};
                inner_window_obj = new class_inner_window({parent:inner_windows[array_count], inner_window_info:l_window_array_info["inner_window" + id_count],
                    on_event:function(obj){on_event(obj);}});
                l_window_array_info["inner_window" + id_count].inner_obj = inner_window_obj;
                if(id_count <= list_length && obj.type == "add_ipc")
                {
                    if(g_now_page == "home" || g_now_page == "timeline")
                        add_home_ipc({inner_window_info:l_window_array_info["inner_window" + id_count], node_sn:list_obj.data});
                    else if(g_now_page == "playback")
                        add_playback_ipc({inner_window_info:l_window_array_info["inner_window" + id_count], node_sn:list_obj.data});
                    list_obj = list_obj.next;
                }
                if(g_now_page == "home")
                {
                   l_me.ctrl({type:"snapshot",data:1});
                }
                ++id_count;
                ++array_count;
            }
            //g_window_array = l_window_array_info;
        }
        function create_view_page_bg()
        {
            var bg, bg_top_left, bg_top_right,
                bg_bottom_left, bg_bottom_right, ie7_help_div;

            bg = dom_create_child(l_me_parent, "div", "view_page_bg");
            bg_top_left = dom_create_child(bg, "div", "view_page_top_left");
            l_dom_bg_top = dom_create_child(bg, "div", "view_page_top");
            bg_top_right = dom_create_child(bg, "div", "view_page_top_right");
            l_dom_bg_center = dom_create_child(bg, "div", "view_page_center");
            bg_bottom_left = dom_create_child(bg, "div", "view_page_bottom_left");
            l_dom_bg_bottom = dom_create_child(bg, "div", "view_page_bottom");
            bg_bottom_right = dom_create_child(bg, "div", "view_page_bottom_right");

            background_img_set(bg_top_left, sub_img_view_bg0)
            l_dom_bg_top[s_style][s_cssText] = "width:" + (l_me_parent.offsetWidth - 25*2) + "px;height:21px;background-color:#141517;border-top:1px solid #0a0a0b;";
            background_img_set(bg_top_right, sub_img_view_bg1)
            l_dom_bg_center[s_style][s_cssText] = "width:" + l_me_parent.offsetWidth  + "px;height:" + (l_me_parent.offsetHeight - 22 - 10) + "px;background-color:#141517;";
            background_img_set(bg_bottom_left, sub_img_view_bg2)
            l_dom_bg_bottom[s_style][s_cssText] = "width:" + (l_me_parent.offsetWidth - 25*2) + "px; height:10px;background-color:#141517;";
            background_img_set(bg_bottom_right, sub_img_view_bg4)

            ie7_help_div = dom_create_child(l_me_parent, "div", "ie7_help_div");
            ie7_help_div[s_style][s_cssText] = "margin:0px;border:0px;padding:0px;clear:both;float:none;font-size:1px;height:0px";
        }
        //创建快照div
        function create_snapshot_preview_div(obj)
        {
            var correct_width, correct_height, prop,
                snapshot_preview_div = mx("#snapshot_preview_div"),
                snapshot_preview_inner = mx("#snapshot_preview_inner"),
                snapshot_preview_content = mx("#snapshot_preview_content");

            correct_width = obj.resolution_w;
            correct_height = obj.resolution_h;
            if(correct_width > g_web.offsetWidth * 8 / 10)
            {
                correct_width = parseInt(g_web.offsetWidth * 8 / 10);
                correct_height = parseInt(correct_width * obj.resolution_h / obj.resolution_w);
            }
            if(correct_height > g_web.offsetHeight * 8 / 10)
            {
                correct_height = parseInt(g_web.offsetHeight * 8 / 10);
                correct_width = parseInt(correct_height * obj.resolution_w / obj.resolution_h);
            }
            if(snapshot_preview_content)
            {
                snapshot_preview_div.style.width = correct_width + 13*2 + "px";
                snapshot_preview_div.style.height = correct_height + 13*2 + "px";
                snapshot_preview_div.style.left = ((g_web.offsetWidth - correct_width) / 2) + "px";
                snapshot_preview_div.style.top = ((g_web.offsetHeight - correct_height) / 2)  + "px";
                snapshot_preview_content.src = obj.uri;
            }
            else
            {
                var snapshot_preview_close;

                snapshot_preview_div = dom_create_child(page, "div", "snapshot_preview_div");
                snapshot_preview_div[s_style][s_cssText] = "width:" + (correct_width + 13*2) + "px;height:" + (correct_height + 13*2) + "px;"
                    + "left:" + ((g_web.offsetWidth - correct_width) / 2) + "px;"
                    + "top:" + ((g_web.offsetHeight - correct_height) / 2)  + "px;position:absolute;z-index:50";

                snapshot_preview_inner = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_inner");
                snapshot_preview_inner[s_style][s_cssText] = "width:" + (correct_width + 13) + "px;height:" + (correct_height + 13) + "px;"
                    + "left:6px;top:6px;position:relative;";

                snapshot_preview_content = dom_create_child(snapshot_preview_inner, "img", "snapshot_preview_content");
                snapshot_preview_content[s_style][s_cssText] = "width:" + correct_width + "px;height:" + correct_height + "px;"
                    + "left:7px;top:7px;position:relative;";
                snapshot_preview_content.src = obj.uri;

                snapshot_preview_close = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_close");
                if(g_domain_oems_vimtag)
                {
                	  snapshot_preview_close[s_style][s_cssText] = "position:absolute;right:15px;top:15px;cursor:pointer;";
                }
                snapshot_preview_close.onclick = function() {
                    snapshot_preview_div[s_innerHTML] = "";
                    page[s_removeChild](snapshot_preview_div);
                    snapshot_preview_div = null;
                    snapshot_preview_close.onclick = "";
                };
            }
        }
        //获取分辨率大小等
        function get_profile_token_choice()
        {
            var profile_token_obj=new Object(),
                profile_token_choice = mlocal_storage.get("PlayProfile");
       	    if(profile_token_choice=="" || profile_token_choice==null)
       	    {
       	           if(g_network_environ=="private")
       	           {
       	               profile_token_obj.profile_token_choice_value="p0_xxxxxxxxxx";
       	               profile_token_obj.few_seconds=3000;
       	           }else
       	           {
       	               profile_token_obj.profile_token_choice_value="p1_xxxxxxxxxx";
       	               profile_token_obj.few_seconds=1000;
       	           }
       	    }
       	    else if(profile_token_choice=="p0")
       	    {
       	            profile_token_obj.profile_token_choice_value="p0_xxxxxxxxxx";
       	            profile_token_obj.few_seconds=3000;
       	    }
       	    else if(profile_token_choice=="p1")
       	    {
       	            profile_token_obj.profile_token_choice_value="p1_xxxxxxxxxx";
       	            profile_token_obj.few_seconds=1000;
       	    }
       	    else if(profile_token_choice=="p2")
       	    {
       	            profile_token_obj.profile_token_choice_value="p2_xxxxxxxxxx";
       	            profile_token_obj.few_seconds=500;
       	    }
       	    else if(profile_token_choice=="p3")
       	    {
       	            profile_token_obj.profile_token_choice_value="p3_xxxxxxxxxx";
       	            profile_token_obj.few_seconds=500;
       	    }
       	    return profile_token_obj;
        }
        //mme(插件)回调函数
        function on_plug_event(obj)
        {
        	switch( obj.type )
        	{
        		case "missing":
        		{
        		    if( g_now_page == "home" )
       	        	{
       	  	    			g_plug_is_missing=1;
        	  	  			local_address(obj);
        	  	  	}
        	  	  	break;
        	  	}
            	case "close":
            	{
            	    if(obj.ref_obj.page == "playback" || obj.ref_obj.page == "timeline")
            	    {
            	  	  	var inner_window;
                	  	for(n in l_window_array_info)
            	      	{
            		      	inner_window = l_window_array_info[n];
            		      	break;
            	      	}
            	      	if(obj.chl!=inner_window.video_chls)
            	      	{
            	  	     	clearInterval(l_ipc_speed_time);
            	  	     	inner_window.mme.chl_destroy(inner_window.video_chls);
                        g_video_stream_uri = "";
            	  	  	}
        	  	    }
        	  	    else
        	  	    {
            	  	  	g_video_stream_uri = "";
            	  	  	if( obj.ref_obj.page == "home" )
            	  	  	{
            	  	  	 	var select_device = mcloud_agent.devs.get(g_select_device_ipc);
            	  	  	 	if( select_device )
            	  	  	 	{
            	  	  	 		var state = select_device.Status;
            	  	  	 		if( state == "Online" )
            	  	  	 		{
            	  	  	 			var proto = obj.ref_obj.protocol;
                    				if(obj.plug.type.name == "flash")
                    				{
                        			    l_plug_type = "flash";
                        			    proto = "rtmp";
                    				}
                    				else
                    				{
                        			    if(proto == "auto")
                           				   proto = "rtdp";
                    				}
                    				l_replay_interval = setInterval(function(){
                     	                var inner_window;
                     	                for(n in window_array_info)
                     	                {
                     	                    inner_window = window_array_info[n];
                                            break;
                     	                }
                     	                ms.send_msg("play",{sn:g_select_device_ipc,token:inner_window.profile_token, protocol:proto},inner_window,function(msg,ref){ msg.type = "play" ; play_ack(msg,ref);});
                                    },parseInt(5000*Math.random()+5000));
            	  	  	 		}
            	  	  	 	}
            	  	    }
        	  	  	}
        	  	  	break;
        	  	}
                case "install_ui":
                {
                	var j_panel = jQuery(obj.panel);
                	j_panel.fadeOut();
                	obj.panel[s_innerHTML] = null;
                	obj.panel[s_style][s_cssText] = "cursor:default;position:relative;left:0px;top:0px;width:100%;height:100%;color:#fff;visibility:hidden;background-image:url('./imgs/media_install_bg.png')";
                	obj.panel[s_innerHTML] =
                        "<div id='install_the_video_plug' style='position:absolute;left:4%;width:92%;height:100%;overflow:none;'><br/><center style='padding-top:10%'><span style='font-size:30px;'><b>" + mcs_install_the_video_plug + "</b></span></center><br/>"
                        + "<li>" + mcs_for_more_clarity_smooth_video_experience + "</li><br/><br/>"
                        + "<div style='position:absolute;bottom:0px;height:35%;width:100%'>"
                        +"<a name='plug' href='" + obj.download + "' target='_blank'"
                        + " style='background:#333;font-size:15px;color:#fff;text-decoration:none;text-align:center;"
                        + "display:block;width:210px;height:32px;line-height:32px;margin:0 auto 30px;"
                        + "-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5Px;"
                        + mhack.css_box_shadow(1, "#505050") + "'"
                        + ">" + mcs_install_now + "</a>"
                        + "<a name='flash' href='javascript:void(0)'"
                        + " style='background:#333;font-size:15px;color:#fff;text-decoration:none;text-align:center;"
                        + "display:block;width:210px;height:32px;line-height:32px;margin:0 auto 30px;"
                        + "-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5Px;"
                        + mhack.css_box_shadow(1, "#505050") + "'"
                        + " >" + mcs_temporarily_installed_use_ordinary_video + "</a></div>"
                        + "<span name='plug_installing' style='display:none'></span>"
                        + "</div><div style='float:clear;'></div>";
                	if((navigator.userAgent.toLowerCase().match(/chrome\/[\d.]+/gi)+"").replace(/[^0-9.]/ig,"")>"42")
                    {
                    	 var isWin8=navigator.userAgent.indexOf("Windows NT 6.2") > -1 || navigator.userAgent.indexOf("Windows 8") > -1 || navigator.userAgent.indexOf("Windows NT 6.3") > -1 ,  //debug by summer
                       isServer_ip = g_server_device.substring(0,g_server_device.lastIndexOf(":")),isServer_ip_foreign;
                    	
                       obj.panel[s_innerHTML] +=
                           "<div style='position:absolute;bottom:30px;margin: auto;width: 100%;'>"
                           + "<center>"+mcs_set_npapi+"</center>"
                           +"</div>";
                           
                       if(g_inland_server_ip_ok)
			                 {
			                  	isServer_ip_foreign = 0;
			                 }
			                 else
			                 {
			                  	isServer_ip_foreign = 1;
			                 }
			
			                 if(g_is_plug_load_refuse == 1 || (g_is_plug_load ==0 && isServer_ip_foreign ==1))
			                 {                                  
			                    g_play_flash_video = 1;
			                 }
                    }
                	j_panel.hide();
                	j_panel.fadeIn();
                	
                	jQuery("#vimtag_ptz_control").hide();  //当处于选择flash界面时隐藏控制界面
                    break;
                }
            	case "ready":
            	{
                    var proto = obj.ref_obj.protocol;
                    if(obj.plug.type.name == "flash")
                    {
                        l_plug_type = "flash";
                        proto = "rtmp";
                    }
                    else
                    {
                        if(proto == "auto")
                            proto = "rtdp";
                    }
                    if(obj.ref_obj.page == "home")
                        {
                           ms.send_msg("play",{sn:g_select_device_ipc,token:obj.ref_obj.inner_window_info.profile_token, protocol:proto,ref:obj.ref_obj},obj.ref_obj,function(msg,ref){ msg.type = "play" ; play_ack(msg,ref);});
                           if(g_domain_oems_vimtag)
                           { //显示控制界面
                           	 jQuery("#vimtag_ptz_control").show();
                           }
                        }
                    else if(obj.ref_obj.page == "playback" || obj.ref_obj.page == "timeline")
                        ms.send_msg("playback",{sn:g_select_device_ipc,token:l_RecordingToken, protocol:proto,ref:obj.ref_obj},obj.ref_obj,function(msg,ref){ msg.type = "playback" ; play_ack(msg,ref);});
           	        break;
           	    }
            	case "license":
            	{
                    log("license is invalid");
                }
            }
        }
        function get_profiles_request(obj)
        {
            var node, node_sn;
            node_sn = obj.inner_window_info.node_sn;
            node = mcloud_agent.devs.get(node_sn);
            if(!node) return;
            ccm_profiles_get({ip:node.addr, to:"ccm", sn:node_sn, inner_window_info:obj.inner_window_info})
        }
        function ccm_profiles_get(obj)
        {
              var i, pos = -1;
              obj.inner_window_info.profile_token = mlocal_storage.get("PlayProfile");
              if(!obj.inner_window_info.profile_token)
              {
                 if(g_network_environ == "private")
                 {
                    obj.inner_window_info.profile_token="p0";
                    pos=0;
                 }
                 else if(g_network_environ == "public")
                 {
                    obj.inner_window_info.profile_token = "p1";
                    pos = 1;
                 }
              }
              else
              {
                for(i=0;i<4;++i)
                {
                   if(obj.inner_window_info.profile_token==("p"+i))
                   {
                        obj.inner_window_info.profile_token="p"+i;
                        pos = i;
                   }
                }
                if(pos < 0)
                {
                    if(g_network_environ == "private")
                    {
                       obj.inner_window_info.profile_token="p0";
                        pos=0;
                    }
                    else if(g_network_environ == "public")
                    {
                        obj.inner_window_info.profile_token = "p1";
                        pos = 1;
                    }
                }
              }
              ccm_media_get_request({type:"video", inner_window_info:obj.inner_window_info});
        }
        function ccm_media_get_request(obj)
        {
            var proto = "auto";
            if(obj.type == "video")
                create_mme({inner_window_info:obj.inner_window_info, protocol:"auto", page:g_now_page,localPath:obj.localPath,isDownload:obj.isDownload,l_mask_setup_click:obj.l_mask_setup_click});
            else if(obj.type == "audio")
            {
               if( l_plug_type == "flash")
               {
                    proto = "rtmp"
               }
               else
               {
                    if(proto == "auto")
                       proto = "rtdp";
               }
               ms.send_msg("pushtalk",{sn:g_select_device_ipc,protocol:proto,token:obj.inner_window_info.profile_token},null,function(msg,ref){
                    if(g_domain_oems_vimtag)
                    {
                    	if(msg.result=="")
	                    {
	                    	mx("#talkback_off_pic").className = "talkback_on_picture";
	                      g_audio_output_uri = msg.url;
	                      chl_audio_create({type:"publish", uri:msg.url, inner_window_info:obj.inner_window_info});
	                    }
	                    else if(msg.result == "permission.denied")
	                    {
	                    	msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
	                    }	                    		                    	
	                    else{
	                    	log("error:pushtalk return error in class_view_page.");
	                    }
                    }
               });
            }
        }
        function play_ack(msg,ref)
        {
            if( msg.result == "")
            {
              if( g_video_stream_uri != "" )  return;
              if( l_replay_interval )    clearInterval( l_replay_interval );
              g_video_stream_uri = msg.url;
              chl_video_create({type:msg.type, uri:msg.url, inner_window_info:ref.inner_window_info,localPath:ref.localPath,isDownload:ref.isDownload,l_mask_setup_click:ref.l_mask_setup_click});
            }else{
            	log("error:play return error in class_view_page.");
            }
        }
        function add_home_ipc(obj)
        {
            obj.inner_window_info.node_sn = obj.node_sn;
            var pos = mcloud_agent.devs.get_index(obj.node_sn);
            obj.inner_window_info.device_list_li_span = mx(".device_list_li_span")[pos];
            obj.inner_window_info.inner_ipc_dom = obj.inner_window_info.inner_obj.ctrl({type:"add_ipc_div"});
            get_profiles_request({inner_window_info:obj.inner_window_info});
            if(g_select_inner_window == obj.inner_window_info.dom_id)
                g_select_inner_ipc = obj.inner_window_info.node_sn;
        }
        function add_playback_ipc(obj)
        {
            obj.inner_window_info.node_sn = obj.node_sn;
            var pos = mcloud_agent.devs.get_index(obj.node_sn);
            obj.inner_window_info.device_list_li_span = mx(".device_list_li_span")[pos];
            obj.inner_window_info.inner_ipc_dom = obj.inner_window_info.inner_obj.ctrl({type:"add_ipc_div"});
            l_me.ctrl({type:"playback_slider_is_ok", inner_window_info:obj.inner_window_info,localPath:obj.localPath,isDownload:obj.isDownload});
            if(g_select_inner_window == obj.inner_window_info.dom_id)
                g_select_inner_ipc = obj.inner_window_info.node_sn;
        }
        //删除视频播放 音频
        function remove_ipc(obj)
        {
            if(g_now_page == "home")
            {
                if(obj.inner_window_info.mme)
                {
                    if(obj.inner_window_info.video_chls)
                    {
                        obj.inner_window_info.mme.chl_destroy(obj.inner_window_info.video_chls);
                        g_video_stream_uri = "";
                    }
                    if(obj.inner_window_info.audio_chls)
                        obj.inner_window_info.mme.chl_destroy(obj.inner_window_info.audio_chls);
                }
                obj.inner_window_info.inner_view_info = null;
                obj.inner_window_info.node_sn = "none";
                obj.inner_window_info.device_list_li_span = null;
                obj.inner_window_info.profile_token = "";
                obj.inner_window_info.ptz_token = "";
                obj.inner_window_info.video_encoding = "";
                obj.inner_window_info.video_resolution_w = 0;
                obj.inner_window_info.video_resolution_h = 0;
                obj.inner_window_info.video_frame_rate = 0;
                obj.inner_window_info.video_max_bit_rate = 0;
                obj.inner_window_info.video_min_bit_rate = 0;
            }
            else if(g_now_page == "playback" || g_now_page == "timeline")
            {
            	if(obj.inner_window_info.mme)
                {
                    if(obj.inner_window_info.video_chls)
                    {
                        obj.inner_window_info.mme.chl_destroy(obj.inner_window_info.video_chls);
                        g_video_stream_uri = "";
                    }
                    if(obj.inner_window_info.audio_chls)
                        obj.inner_window_info.mme.chl_destroy(obj.inner_window_info.audio_chls);
                }
                obj.inner_window_info.inner_view_info = null;
                obj.inner_window_info.node_sn = "none";
                obj.inner_window_info.device_list_li_span = null;
                obj.inner_window_info.profile_token = "";
                obj.inner_window_info.ptz_token = "";
                obj.inner_window_info.video_encoding = "";
                obj.inner_window_info.video_resolution_w = 0;
                obj.inner_window_info.video_resolution_h = 0;
                obj.inner_window_info.video_frame_rate = 0;
                obj.inner_window_info.video_max_bit_rate = 0;
                obj.inner_window_info.video_min_bit_rate = 0;
            }
            obj.inner_window_info.inner_obj.ctrl({type:"remove_ipc_div"});
        }
        function play_ipc(obj)
        {
            obj.inner_window_info.mme.ctrl(obj.inner_window_info.video_chls, "play", "");
            obj.inner_window_info.playback_state = "play";
            return 0;
        }
        function pause_ipc(obj)
        {
        	if(obj.inner_window_info.mme){
               obj.inner_window_info.mme.ctrl(obj.inner_window_info.video_chls, "pause", "");
            }
            obj.inner_window_info.playback_state = "pause";
            return 0;
        }
        function seek_ipc(obj)
        {
            if(obj.inner_window_info && obj.inner_window_info.mme)
            {
                if(obj.type == "pos")
                    obj.inner_window_info.mme.ctrl(obj.inner_window_info.video_chls, "seek", "{pos:" + obj.pos + "}");
                else if(obj.type == "time")
                    obj.inner_window_info.mme.ctrl(obj.inner_window_info.video_chls, "seek", "{time:" + obj.date + "}");
                return 0;
            }
            else
            {
                return -1;
            }
        }
        //创建inner_window初始图
        function snapshot(obj)
        {
        	if(g_select_device_ipc =="") return;
          	var profile_token_choice = get_profile_token_choice(),
        	    n, inner_window_obj = null,url;
        	//获取图片的url
        	url = window.location.protocol + "//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+g_select_device_ipc+"&dtoken="+profile_token_choice.profile_token_choice_value;
        	if(obj.data){
        	   clearInterval(l_ipc_speed_time);
        	   l_play_ico_onclick=0;
        	}
        	for(n in l_window_array_info)
        	{
        	   inner_window_obj = l_window_array_info[n].inner_obj;
        	   break;
        	}
        	inner_window_obj.ctrl({type:"set_img",url:obj.data?url:""});
        }
        function local_address(obj)
        {
              snapshot({type:"snapshot",data:0});
              if(l_play_ico_onclick)
              {
            	   is_snapshot=false;
            	   l_play_ico_onclick=0;
            	   snapshot({type:"snapshot",data:1});
            	   l_parent_callback({type:"adjust_play_button_state",data:{play_state:"stop"}});
              }
              else
              {
            	   l_play_ico_onclick=1;
            	   snapshot_broadcast();
            	   l_parent_callback({type:"adjust_play_button_state",data:{play_state:"play"}});
              }
        }
        function snapshot_broadcast()
        {
            var profile_token_choice = get_profile_token_choice();
            	if(l_play_ico_onclick){
            	   var urls,imgs_dom;
            	  	urls= window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+acs.create_nid(acs.ctrl({type:"get_info"}))+"&dsess_sn="+g_select_device_ipc+"&dtoken="+profile_token_choice.profile_token_choice_value;
            	    if(mx("#snapshotImg")){
            	        mx("#snapshotImg").src=urls;
            	    }else{
            	     var  inner_window_obj = null;
            	        for(n in l_window_array_info)
        	            {
        		             inner_window_obj = l_window_array_info[n].inner_obj;
        	               break;
        	            }
        	            imgs_dom = inner_window_obj.ctrl({type:"add_ipc_div"});
            	        imgs_dom[s_innerHTML]=("<img style='width:100%;height:100%;' id='snapshotImg'   src='" + urls + "'/>");
            	    }
            	    if(g_network_environ=="private")
        	  	    {
        	  	        mx("#snapshotImg").onload=snapshot_broadcast;
            	         clearInterval(l_play_ico_count_down);
            	         l_play_ico_count_down=setTimeout(snapshot_broadcast,1000);
        	  	    }
        	  	    else
        	  	    {
        	  	        mx("#snapshotImg").onload=function(){
        	  	            l_play_ico_count_down=setTimeout(snapshot_broadcast,profile_token_choice.few_seconds);
        	  	        }
        	  	        mx("#snapshotImg").onerror=function(){
        	  	              l_play_ico_count_down=setTimeout(snapshot_broadcast,5000);
        	  	        }
        	  	    }

            	}
        }
        function update_sound_settings(obj)
        {
        	var window_info,video_chls;
            for(n in l_window_array_info)
        	{
        		window_info = l_window_array_info[n];
        		video_chls = window_info.video_chls;
        		break;
        	}
        	if(video_chls)
        	    window_info.mme.ctrl(video_chls,"speaker.mute",g_m_speaker_is_mute?"{value:1}":"{value:0}");
        }
        function create_mme(obj)
        {
            var panel,
                ua = navigator.userAgent.toLowerCase(),
                mme_params, url_params = (location.search || location.hash || ""), judge_enable_native_plug, judge_enable_flash_plug, server_ip_foreign;
            
            if((!g_inland_server_ip_ok) && ((navigator.userAgent.toLowerCase().match(/chrome\/[\d.]+/gi)+"").replace(/[^0-9.]/ig,"")>"41"))
            {
            	server_ip_foreign = 1;
            }
            else
            {
            	server_ip_foreign = 0;
            }
            if(mlocal_storage.get("remember_plug_info") == "2")
            {
            	 g_is_plug_load_refuse = 1;
               g_is_plug_load = 0;  
            } 
                     
            if((g_is_plug_load_refuse ==1 || g_play_flash_video == 1 || (g_is_plug_load == 0 && server_ip_foreign ==1)) && mlocal_storage.get("remember_plug_info") !== "1")
            {
            	 judge_enable_native_plug = false;
            	 judge_enable_flash_plug = true;
            }      
            else
            {
            	 judge_enable_native_plug = true;
            	 judge_enable_flash_plug = false;
            }
            
            panel = obj.inner_window_info.inner_ipc_dom;
            panel.style.width = obj.inner_window_info.inner_ipc_dom.offsetWidth + "px";
            panel.style.height = obj.inner_window_info.inner_ipc_dom.offsetHeight + "px";

            if(g_inland_server_ip_ok)
            {
                mme.prototype.types.install.codebase=navigator.platform == "MacIntel"?"http://61.147.109.92:7080/mme/npmme.pkg?0.140906.pkg":"http://61.147.109.92:7080/mme/mme.exe?0.140906.exe";
            }
            else
            {
                mme.prototype.types.install.codebase=navigator.platform == "MacIntel"?"http://209.133.212.170:7080/mme/npmme.pkg?0.140906.pkg":"http://209.133.212.170:7080/mme/mme.exe?0.140906.exe";
            }

            mme.prototype.types.flash.install_url="mme/mme.swf?0.130715.swf";
            mme_params = {parent:panel, enable_native_plug:judge_enable_native_plug,enable_flash_plug:judge_enable_flash_plug, params:"{key:'data:application/octet-stream;base64,NGO/Mnqt7aXYO3hdsIe87bCTuqTRRSPMwJGuT26CuSedGTi2h7wroHY0IZObBPKYA/exp+e/efFj35sLiDKQpRfRFz8Th8zlYtrYki24JiN7vpGb2bUN9nY7quZ56SicUoqLd+KcCrvWheZ5NaE+slPpCg+F+hUdhNl4JXbVxzxY0uNV6ci7eEG44g4nf+TVB84SbVPllsSLhoQ4u6bGgiijR4s2A7HIDhEXTxEZIRjqSIH4QVUQUpkiIsQVwCm7gEXMGjvIhSv1CemWWX/C8HTPDxSWZgyVSXVVaPx/bEcSdcz/t6FKbx/crZ4xOry5PcdTd9zGMPxWo/2j2WrlWspUpkM4DJvNu3lhaO2Y3Y8G0Ly2e/em84b23Uu56U3nQdF+4Yv9jSvSoK6GyG0xuA3zbw/A2tKCN2yrdTdWX+s+K89rLvcqIAMJ9AAimXCPlKqImtkfJA2Bgp6yjF+AS7CF5MVnYgsLhArJtum+/EOST6Khl18Wz940iBLVyLJOS/25onfm/C3rSXNZmjq95YLT9yp99Qdg/2K7ZS5F1YVZ7C2Puyb99fIyBWGCtRtt0SPs0HRBXorx/zk2fjaR1BwVrStkS5Xkx46JFtCCVez5lmFALtUHS/Qj6Gw8rYICY2peJbztbBpCzJZtPVvIAFylfgMlNBRT8/Zt9G/JJ5g'}",
                on_event:function(e){on_plug_event(e)},
                ref_obj:obj,
                debug:(0 <= url_params.indexOf("debug=1"))};
            if(ua.match(/windows|win32/))
            {
                if(0 <= url_params.indexOf("windowless=0"))
                {
                    mme_params.windowless = false;
                }
                else if(0 <= url_params.indexOf("windowless=1"))
                {
                    mme_params.windowless = true;
                }
               /*else if(ua.match(/chrome\/([\d.]+)/))
                {
                    mme_params.windowless = false;
                }*/
            }
            obj.inner_window_info.mme = new mme(mme_params);
        }
        //创建视频
        function chl_video_create(obj)
        {
            var uri = obj.uri, chl_params = (obj.type == "publish")?"":",thread:\"istream\", jitter:{max:3000}"/* for old version's mme plugin */,
                trans_params = (obj.type == "play")?",trans:[{flow_ctrl:\"jitter\",thread:\"istream\"}]":
                                    ((obj.type == "playback")?",trans:[{flow_ctrl:\"delay\",thread:\"istream\"}]":"");
            obj.inner_window_info.video_chls = obj.inner_window_info.mme.chl_create({  
                params:(obj.type == "playback" && obj.isDownload)?
                	("{src:[{url:\"" + uri + "\"}], dst:[{url:\"file:\/\/"+obj.localPath+"\",thread:\"channel\"}],speaker:{mute:\"1\"},audio:{type:\"none\"},thread:\"channel\",canvas:\"none\"}"):
                	("{" + ((obj.type == "publish")?"dst":"src") + ":[{url:\"" + uri + "\"}]" + trans_params + chl_params + "}")});
            if(obj.inner_window_info.video_chls !== null)
            {
                var inner_window_obj,string_speed,json_speed;
            	for(n in l_window_array_info)
        	    {
        		    inner_window_obj = l_window_array_info[n].inner_obj;
        		    l_window_array_info[n]=obj.inner_window_info;
        		    break;
        	    }
        	    var nini=obj.inner_window_info.mme.ctrl(obj.inner_window_info.video_chls,"speaker.mute",obj.type=="playback"?"{value:0}":g_m_speaker_is_mute?"{value:1}":"{value:0}");
                if(g_now_page == "playback")
                {
                    obj.inner_window_info.playback_state = "play";
                    l_parent_callback({type:"play_playback_handle", data:{inner_window_info:obj.inner_window_info,isDownload:obj.isDownload}});
                }
                if(g_device_list_link.length == 1 || g_view_link.length == 1)
                    obj.inner_window_info.inner_obj.ctrl({type:"click_ex", data:{inner_window_info:obj.inner_window_info}});
            }
            if(obj.type=="playback")
            {
               setTimeout(function(){play_ipc(obj)},1000)
            }
        }
        //呼叫
        function chl_audio_create(obj)
        {
            var uri = obj.uri, chl_params = "";
            obj.inner_window_info.audio_chls = obj.inner_window_info.mme.chl_create({
                params:("{src:[{url:'mic://0',type:'audio'}], dst:[{url:'" + uri + "'}]" + (("" != chl_params)?",":"") + chl_params + "}")});
        }
        function add_event()
        {
            var i, length, inner_windows;
            if(null == g_split_update)
            {
                g_split_update = function(obj)
                {
                    var count;
                    if(g_now_page == "home")
                    {
                        count = g_view_split_count;
                    }
                    else if(g_now_page == "playback")
                    {
                        count = g_playback_split_count;
                    }
                    while(count--)
                    {
                        l_window_array_info["inner_window" + count].inner_obj.ctrl({type:"destroy"});
                    }
                    l_me_parent[s_innerHTML] = "";
                    split_screen(obj);
                };
            }
            inner_windows = mx(".inner_windows");
            for(i = 0, length = inner_windows.length; i < length; ++i)
            {
                inner_windows[i].onclick = function()
				        {
                  if(g_now_page == "home")
                  {
                    if(!g_select_device_ipc)return;
                    if(g_is_playing)
                        return
                    else
                        l_parent_callback({type:"create_ipc", data:{node_sn:g_select_device_ipc}});
                  }
                }
            }
        }
        function remove_event()
        {
            var i, length, inner_windows = mx(".inner_windows");
            g_split_update = null;
            for(i = 0, length = inner_windows.length; i < length; ++i)
            {
                inner_windows[i].onmouseover = "";
                inner_windows[i].onmouseout = "";
                inner_windows[i].onclick = "";
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "is_missing":
                	{
                       on_plug_event({type:"missing"});
            	      	 break;
            	    }
                case "update_sound_settings":
           	      {
            	      	  update_sound_settings(obj);
            	      	  break;
            	    }
                case "snapshot":
            	    {
                        snapshot(obj);
            	  	      break;
            	  	}
                case "update":
                    {
		                        var count;
		                        //if(mx("#inner_windows_cont")) adjust_screen(obj);
		                        adjust_screen(obj);
		                        //根据浏览器大小调整播放界面大小
		                        if(l_dom_bg_top) l_dom_bg_top.style.width = (l_me_parent.offsetWidth - 25*2) + "px";
		                        if(l_dom_bg_center) l_dom_bg_center.style.width = l_me_parent.offsetWidth  + "px";
		                        if(l_dom_bg_center) l_dom_bg_center.style.height = (l_me_parent.offsetHeight - 22 - 10) + "px";
		                        if(l_dom_bg_bottom) l_dom_bg_bottom.style.width = (l_me_parent.offsetWidth - 25*2) + "px";
		                        if(g_now_page == "home" || g_now_page == "timeline")
		                        {
		                            count = g_view_split_count;
		                        }
		                        else if(g_now_page == "playback")
		                        {
		                            count = g_playback_split_count;
		                        }
		                        while(count)
		                        {
		                            l_window_array_info["inner_window" + count--].inner_obj.ctrl(obj);
		                        }
                        break;
                    }
                case "change_select_ipc"://处理更改设备
                    {
                        change_select_ipc(obj.data);
                        break;
                    }
                case "add_home_ipc":
                    {
                        add_home_ipc(obj.data);
                        break;
                    }
                case "add_playback_ipc":
                    {
                        add_playback_ipc(obj.data);
                        break;
                    }
                case "remove_ipc":
                    {
                        remove_ipc(obj.data);
                        break;
                    }
                case "RecordingToken"://选择的回放列表中的选择的回放项
                    {
                       l_RecordingToken = obj.data;
                       break;
                    }
                case "RecordingSize":
                    {
                    	l_RecordingSize = obj.data;
                    	break;
                    }
                case "add_playback":
                case "remove_playback":
                case "playback_list":
                    {
                    	  var n, inner_window_obj = null;
        	              for(n in l_window_array_info)
        	              {
        		               inner_window_obj = l_window_array_info[n].inner_obj;
        		               break;
        	              }
        	              inner_window_obj.ctrl(obj);
                    	  break;
                    }
                case "play_ipc":
                    {
                        return play_ipc(obj.data);
                        break;
                    }
                case "pause_ipc":
                    {
                        return pause_ipc(obj.data);
                        break;
                    }
                case "seek_ipc":
                    {
                        seek_ipc(obj.data);
                        break;
                    }
                case "relative_move"://摄像头移动
                    {
                       ms.send_msg("ptz_ctrl",{sn:g_select_device_ipc,x:obj.data.x,y:obj.data.y},obj.ref,function(msg,ref){
                       	 if(msg.result == ""){
                       	 	 if(ref.flag)
                       	     ref.flag = "ready";
                       	 }
                       });
                       break;
                    }
                case "playback_slider_is_ok":
                    {
                       ccm_media_get_request({type:"video", inner_window_info:obj.inner_window_info,localPath:obj.localPath,isDownload:obj.isDownload});
                       break;
                    }
                case "media_get":
                    {
                    	 ccm_media_get_request({type:"video",inner_window_info:obj.inner_window_info,l_mask_setup_click:obj.l_mask_setup_click});
                    	 break;
                    }
                case "get_snapshot_uri":
                    {
                        if(l_window_array_info["inner_window" + obj.data.inner_window_index])
                            create_snapshot_preview();
                        break;
                    }
                case "get_audio_output_stream_uri":
                    {
                        ccm_media_get_request({type:"audio", inner_window_info:obj.data.inner_window_info});
                        break;
                    }
                case "re_create_ipc":
                    {
                        remove_ipc({inner_window_info:obj.data.inner_window_info});
                        if(g_now_page == "home")
                        {
                            add_home_ipc({inner_window_info:obj.data.inner_window_info, node_sn:obj.data.node_sn});
                        }
                        else if(g_now_page == "playback")
                        {
                            add_playback_ipc({inner_window_info:obj.data.inner_window_info, node_sn:obj.data.node_sn});
                        }
                        break;
                    }
                case "get_inner_window_info":
                    {
                        return l_window_array_info["inner_window" + obj.data.index];
                    }
                case "destroy":
                    {
                        var count;
                        if(g_now_page == "home")
                        {
                            count = g_view_split_count;
                        }
                        else if(g_now_page == "playback")
                        {
                            count = g_playback_split_count;
                        }
                        while(count)
                        {
                            if(l_window_array_info["inner_window" + count].mme)
                                l_window_array_info["inner_window" + count].mme.destroy();
                            l_window_array_info["inner_window" + count].inner_obj.ctrl(obj);
                            --count;
                        }
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in view_page.");
            }
        }
        //创建快照预览
        function create_snapshot_preview()
        {
          if(!l_me_parent) return;
          //var url = window.location.protocol + "//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+g_select_device_ipc+"&dtoken="+get_profile_token_choice().profile_token_choice_value;
          ms.send_msg("pic_get", {sn:g_select_device_ipc, token:"p1"}, null, ccm_snapshot_pic);
          
          function ccm_snapshot_pic(msg, ref)
          {
              if(msg && msg.result == "")
              {
                 create_snapshot_preview_div({resolution_w:640, resolution_h:360, uri:msg.url});  
              }                  
          }
          //create_snapshot_preview_div({resolution_w:640, resolution_h:360, uri:url});
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
               case "play_button_onclick":
               case "playback_click":
                    {
                         l_parent_callback(obj);
                         break;
                    }
                case "chl_video_create":
                    {
                        chl_video_create(obj.data);
                        break;
                    }
                case "create_snapshot_preview_div":
                    {
                        create_snapshot_preview_div(obj.data);
                        break;
                    }
                case "create_mme":
                    {
                        create_mme(obj.data);
                        break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_view_page.");
            }
        }
        l_dom_inner_windows_cont = dom_create_child(l_me_parent, "div", "inner_windows_cont");
        split_screen(obj);
        add_event();
    }
    function class_inner_window(obj)
    {
        var l_me =  this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_info = obj.inner_window_info,
            l_dom_inner_window = dom_create_child(l_me_parent, "div", "inner_window" + l_info.index, "inner_window"),
            l_dom_inner_ipc,
            l_dom_broadcast,l_dom_playback,l_dom_playback_list_div, l_snapshot_image;

        l_dom_inner_window[s_style][s_cssText] = "width:" + l_me_parent.offsetWidth + "px;height:" + l_me_parent.offsetHeight + "px;";

        function add_ipc_div(obj)
        {
            if(l_dom_playback && l_dom_playback_list_div)
            {
               remove_playback_div();
            }
            l_dom_inner_ipc = dom_create_child(l_dom_inner_window, "div");
            l_dom_inner_ipc.style.width  = l_me_parent.offsetWidth + "px";
            l_dom_inner_ipc.style.height = l_me_parent.offsetHeight + "px";
            l_dom_inner_ipc.style.background = "black";
            return l_dom_inner_ipc;
        }
        function snapshot_renovate(obj)
        {
            l_dom_inner_window[s_innerHTML]="";
        	  snapshot_img_dom=dom_create_child(l_dom_inner_window, "div");
        	  snapshot_img_dom[s_style][s_cssText]="position: absolute;width:100%;height:100%;";
        	  snapshot_img_dom[s_innerHTML]="<img style='width:100%;height:100%;' id='imgs'  src='" + obj.url + "'/>"
        	  renovate_dom=dom_create_child(l_dom_inner_window, "div");
        	  renovate_dom[s_style][s_cssText]="position:absolute; width:20%;height:20%;   opacity:0.8;right:40%;top:40%;";
        	  background_img_set(renovate_dom, sub_img_renovate);
        	  renovate_dom.onclick=function()
        	  {
        	  	 this.style.opacity="0.3";
        	  	 renovate_dom.disabled=true;
        	     mx("#imgs").src=window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+acs.create_nid(acs.ctrl({type:"get_info"}))+"&dsess_sn="+g_select_device_ipc+"&dtoken="+obj.profile_token_choice.profile_token_choice_value;

        	     setTimeout(function(){renovate_dom.disabled=false;renovate_dom[s_style].opacity=1},obj.profile_token_choice.few_seconds);
        	  }
        }
        //创建初始图
        function snapshots(obj)
        {
       	   l_dom_inner_window[s_innerHTML]="";
           if(determine_the_version({type:"Basic",version:version_Category.Basic_version}))
           {
        	   return;
           }
        	 l_dom_broadcast = dom_create_child(l_dom_inner_window, "div");
           l_dom_broadcast[s_style][s_cssText]="cursor: pointer;position:absolute; left:0;top:0; width:100%;height:100%; background-color:gray;opacity:0.5;filter:alpha(opacity=50);";
           if(g_domain_oems_vimtag)
           {
           	   broadcast1 =dom_create_child(l_dom_inner_window, "div", "video_pause_pic");
        	     broadcast1[s_style][s_cssText]="cursor: pointer;position:absolute;  opacity:0.5; filter:alpha(opacity=50);  left:45%;top:40%;background:url(./oem/testvimtag/imgs/mipc_img.png) no-repeat -15px -273px;width:80px;height:80px;";
        	     broadcast2 =dom_create_child(l_dom_inner_window, "div", "play_pause_pic");
        	     broadcast2[s_style][s_cssText]="cursor: pointer;position:absolute;  opacity:0;filter:alpha(opacity=0);  text-align:center;  left:45%;top:40%;background:url(./oem/testvimtag/imgs/mipc_img.png) no-repeat -15px -273px;width:80px;height:80px;";
           }       	 
           if(obj.url)
           {
               snapshot=dom_create_child(l_dom_inner_window,"div");
               l_snapshot_image= new Image();
               l_snapshot_image.src=obj.url;
               l_snapshot_image.style.width=l_me_parent.offsetWidth+"px";
               l_snapshot_image.style.height=l_me_parent.offsetHeight+"px";
               if(l_snapshot_image.complete){
                  snapshot.appendChild(l_snapshot_image);
               }else{
                  l_snapshot_image.onload = function(){
                     snapshot.appendChild(l_snapshot_image);
                  };
                  l_snapshot_image.onerror = function(){
                     snapshot[s_innerHTML]="";
                  };
               }
           }
           else
           {
             l_dom_inner_window[s_innerHTML] ="";
           }
           broadcast2.onmouseover=function(){
             broadcast2[s_style].opacity=1;
             broadcast2.style.filter ="alpha(opacity='100')";
           }
           broadcast2.onmouseout=function(){
             broadcast2[s_style].opacity=0;
             broadcast2.style.filter ="alpha(opacity='0')";
           }
        }
        function remove_ipc_div(obj)
        {
            if(!l_dom_playback && !l_dom_playback_list_div)
              l_dom_inner_window[s_innerHTML]="";
        }
        //清除回放
        function remove_playback_div(obj)
        {
            if(l_dom_playback && l_dom_playback_list_div)
            {
               l_dom_inner_window[s_removeChild](l_dom_playback);
               l_dom_playback="";
            }
        }
        function add_playback_list(obj)
        {
            if(!l_dom_playback)
            {
               l_dom_inner_window[s_innerHTML]="";
        	   l_dom_playback = dom_create_child(l_dom_inner_window, "div","playback_list");
        	   playback_list[s_style][s_cssText]="width:100%;height:"+l_dom_inner_window.offsetHeight+"px;margin:0 auto;";
        	   l_dom_playback_list_div=dom_create_child(l_dom_playback, "div","playback_list_div");
        	   jQuery(playback_list).mCustomScrollbar();
        	}
             for(ptr=obj.data.get_first(); ptr; ptr = ptr.next)
             {
        	    	if(!ptr.data.params)
        	    	   continue;
        	    	 playback_list_li = dom_create_child(l_dom_playback_list_div, "div","playback_li"+ptr.data.msg_id,"playback_li");
        	    	 playback_list_li[s_style][s_cssText]="width:22.5%;height:"+(l_dom_inner_window.offsetHeight*0.295)+"px; margin:1%;float:left; border:1px solid white;";

        	    	 image = new Image();
        	    	 for(j=0;j<ptr.data.params.length;j++){
        	    	    if(ptr.data.params[j].name=="img_thumb_token" &&  ptr.data.params[j].value!="")
        	    	    {
        	    	        image.src=window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+acs.create_nid(acs.ctrl({type:"get_info"}))+"&dsess_sn="+g_select_device_ipc+"&dtoken="+ptr.data.params[j].value;
        	    	    }
        	    	 }
        	    	 image[s_style][s_cssText]="width:100%;height:100%;";
        	    	 jQuery(playback_list_li).append(image);

             }
              playback_li=mx(".playback_li");
        	    for(i = 0;i < playback_li.length; ++i)
        	    {
        	        playback_li[i].onclick=function(){
        	            for(j = 0 ; j < playback_li.length; ++j)
                        {
                            playback_li[j][s_style].borderColor="#eaeaea";
                        }
                        this.style.borderColor="rgb(128, 165, 45)";
        	           l_parent_callback({type:"playback_click",id:this.id});
        	        }
        	    }
             jQuery(playback_list).mCustomScrollbar("update");
             return;
        }
        function add_event()
        {   //播放界面点击事件
            l_dom_inner_window.onclick = function() {
            	 //首页点击播放界面事件才会响应，回放界面也有播放界面不知道该怎么相应
               if(g_select_device_ipc && g_now_page == "home" && l_info.dom_id)
               { 
               	   if(g_domain_oems_vimtag)
               	   {//当进入播放画面时显示控制界面
               	   	  jQuery("#vimtag_ptz_control").show();
               	   }  
                   g_select_inner_window = l_info.dom_id;
                   g_select_inner_ipc = l_info.node_sn;
               }
            }
            l_dom_inner_window.click_ex = function(obj) {
                if(g_select_inner_window != l_info.dom_id)
                {
                    g_select_inner_window = l_info.dom_id;
                    g_select_inner_ipc = l_info.node_sn;
                    if(g_now_page == "home")
                    {
                          // if(g_select_inner_ipc)
                          //  l_parent_callback({type:"get_nodes", data:{inner_window_info:info}});
                    }
                }
            }
        }
        function remove_event()
        {
            l_dom_inner_window.onclick = "";
            l_dom_inner_window.click_ex = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_inner_window.style.width = g_main_window_w + "px";
                        l_dom_inner_window.style.height = g_main_window_h + "px";
                        if(l_snapshot_image)
                        {
                           l_snapshot_image.style.width=l_me_parent.offsetWidth+"px";
                           l_snapshot_image.style.height=l_me_parent.offsetHeight+"px";
                        }
                        if(l_dom_inner_ipc)
                        {
                            l_dom_inner_ipc.style.width = l_dom_inner_window.offsetWidth + "px";
                            l_dom_inner_ipc.style.height = l_dom_inner_window.offsetHeight + "px";
                        }
                        if(l_dom_playback)
                        {
                            l_dom_playback[s_style][s_cssText]="width:100%;height:"+l_dom_inner_window.offsetHeight+"px;margin:0 auto;";
                            jQuery(".playback_li").css({"width":"22.5%","height":""+(l_dom_inner_window.offsetHeight*0.295)+"px"});
                            jQuery(playback_list).mCustomScrollbar("update");
                        }
                        break;
                    }
                case "add_ipc_div":
                    {
                        return add_ipc_div();
                    }
                case "remove_ipc_div":
                    {
                        remove_ipc_div();
                        break;
                    }
                case "set_img":
                    {
                         snapshots(obj);
                      	 break;
                    }
                case "playback_list":
                    {
                    	playback_lists(obj);
                        break;
                    }
                case "add_playback":
                    {
                        add_playback_list(obj);
                        break;
                    }
                case "remove_playback":
                    {
                        remove_playback_div(obj);
                        break;
                    }
                case "remove_playback_list":
                    {
                    	l_dom_inner_window[s_innerHTML]="";
                        break;
                    }
                case "click_ex":
                    {
                        l_dom_inner_window.click_ex(obj.data);
                        break;
                    }
                case "snapshot_renovate":
                    {
                    	 snapshot_renovate(obj);
                        break;
                    }
                case "RecordingSize":
                    {
                        RecordingSize=obj.data;
                           break;
                    }
                case "destroy":
                    {
                        if(l_dom_inner_ipc)
                            remove_ipc_div();
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_inner_window.");
            }
        }
        add_event();
    }
    function class_ptz_control_box(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_mark = {flag:"ready"},
            l_interval, l_flag = "stop",
            l_left_interval,
            l_up_interval,
            l_right_interval,
            l_down_interval,
            l_move_dist = 12,//摄像头移动距离
            ptz_speed=30,
            l_recording = 0,//表示是否正在录像
            l_calling = 0,
            l_getsysteminfo=false,//是否是获取设备信息而更改显示，用来控制是否设置cam
            timer,//cam set的定时器
            time,//control_menu的定时器
            l_dom_ptz_control_panel,
            l_dom_ptz_control_arrow,
            l_dom_ptz_control_inner,
            l_dom_ptz_control_header,
            l_dom_ptz_control_body,
            l_dom_ptz_control_footer,
            l_dom_ptz_control,
            l_dom_select_mode,
            l_dom_select_power,
            l_dom_checkbox_equipment_flip,
            l_dom_recover_button,
            l_dom_store_point_button,
            l_dom_clear_point_button,
            l_points = new Array(8),
            l_point_now = 0,
            l_dom_vimtag_ptz_control,
            l_dom_ptz_control_left,
            l_dom_ptz_control_up,
            l_dom_ptz_control_right,
            l_dom_ptz_control_down,
            l_dom_ptz_click_left,
            l_dom_ptz_click_up,
            l_dom_ptz_click_right,
            l_dom_ptz_click_down,
            l_dom_ptz_control_center,
            l_dom_ptz_control_bottom,
            l_dom_ptz_control_bottom_center,
            l_dom_control_menu,
            l_dom_video_off_pic,
            l_dom_camera_off_pic,
            l_dom_talkback_off_pic,
            l_dom_adjust_off_pic,
            l_dom_turn_up,
			      l_dom_turn_right,
			      l_dom_turn_down,
			      l_dom_turn_left,
			      l_dom_mode_night,
			      l_dom_mode_daytime,
			      l_dom_mode_auto,
			      l_dom_adjust_mode_night,
			      l_dom_adjust_mode_daytime,
			      l_dom_adjust_mode_auto,
			      l_dom_adjust_reset,
			      l_cam_conf_reset = [6,70,60,50],
			      l_adjust = 0,
			      l_dom_delete_adjust_page,
			      l_dom_adjust_setting,
			      l_dom_super_definition,
			      l_dom_high_definition,
			      l_dom_standard_definition,
			      l_dom_fluency_definition,
			      l_dom_auto_definition,
			      l_dom_choice_play_definition;

        if(g_domain_oems_vimtag)
        {
			      l_me_parent[s_innerHTML] =
			          "<div id='vimtag_ptz_control'>"
			          +       "<div id='ptz_control_left'>"
			          +          "<div id='turn_left' class='left_key'></div>"
			          +          "<div id='ptz_click_left'>" + mcs_top_left + "</div>"
			          +       "</div>"
			          +       "<div id='ptz_control_center'>"
			          +          "<div id='ptz_control_up'>"
			          +             "<div id='turn_up' class='up_key'></div>"
			          +             "<div id='ptz_click_up'>" + mcs_bottom_left + "</div>"
			          +          "</div>"
			          +          "<div id='ptz_control_bottom'>"
			          +             "<div id='ptz_control_bottom_center'>"
			          +             "</div>"
			          +             "<div id='control_menu'>"
			          +                "<div id='video_off_pic' class='video_off_picture' style='float:left;margin-left:44px;'></div>"
			          +                "<div id='camera_off_pic' class='camera_off_picture' style='float:left;margin-left:44px;'></div>"
			          +                "<div id='talkback_off_pic' class='talkback_off_picture' style='float:left;margin-left:44px;'></div>"
			          +                "<div id='adjust_off_pic' class='adjust_off_picture' style='float:left;margin-left:44px;'></div>"
			          +             "</div>"
			          +          "</div>"
			          +          "<div id='ptz_control_down'>"
			          +             "<div id='turn_down' class='down_key'></div>"
			          +             "<div id='ptz_click_down'>" + mcs_bottom_right + "</div>"
			          +          "</div>"
			          +       "</div>"
			          +       "<div id='ptz_control_right'>"
			          +          "<div id='turn_right' class='right_key'></div>"
			          +          "<div id='ptz_click_right'>" + mcs_top_right + "</div>"
			          +       "</div>"
			          +       "<div id='adjust_setting'>"
			          +          "<div class='adjust_line'>"
			          +             "<div id='delete_adjust_page' class='delete_adjust_page' style='float:right;margin-top:12px;'></div>"
			          +          "</div>"
			          +          "<div class='adjust_line'>"
			          +             "<div class='adjust_cha'>" + mcs_mode + "</div>"
                +             "<div style='width:70px;height:40px;float:right;'>"	
			          +                "<div id='adjust_mode_night' class='mode_cha'>"+ mcs_night +"</div>"	          
			          +                "<div id='mode_night' class='adjust_mode_circle'></div>"			          
			          +             "</div>"
			          +             "<div style='width:70px;height:40px;float:right;'>"
			          +                "<div id='adjust_mode_daytime' class='mode_cha'>"+ mcs_daytime +"</div>"
			          +                "<div id='mode_daytime' class='adjust_mode_circle'></div>"			          	
			          +             "</div>"			          
			          +             "<div style='width:70px;height:40px;float:right;'>"
			          +                "<div id='adjust_mode_auto' class='mode_cha'>"+ mcs_auto +"</div>"
			          +                "<div id='mode_auto' class='adjust_mode_circle'></div>"			          
			          +             "</div>"
			          +          "</div>"
			          +          "<div class='adjust_line'>"
			          +             "<div class='adjust_cha'>" + mcs_sharpness + "</div>"
			          +             "<div style='width:187px;float:right;'>"
			          +                "<div id='brightness_value' class='adjust_show_value'></div>"
			          +                "<div class = 'adjust_out_box'>"
                +                   "<div class = 'adjust_in_box'></div>"
                +                   "<div class = 'adjust_circle' style='margin-top:-5px;'></div>"
                +                "</div>"
                +             "</div>"
			          +          "</div>"
			          +          "<div class='adjust_line'>"
			          +             "<div class='adjust_cha'>" + mcs_contrast + "</div>"
			          +             "<div style='width:187px;float:right;'>"
			          +                "<div id='contrast_value' class='adjust_show_value'></div>"
			          +                "<div class = 'adjust_out_box'>"
                +                   "<div class = 'adjust_in_box'></div>"
                +                   "<div class = 'adjust_circle' style='margin-top:-5px;'></div>"
                +                "</div>"
                +             "</div>"
			          +          "</div>"
			          +          "<div class='adjust_line'>"
			          +             "<div class='adjust_cha'>" + mcs_color_saturation + "</div>"
			          +             "<div style='width:187px;float:right;'>"
			          +                "<div id='saturation_value' class='adjust_show_value'></div>"
			          +                "<div class = 'adjust_out_box'>"
                +                   "<div class = 'adjust_in_box'></div>"
                +                   "<div class = 'adjust_circle' style='margin-top:-5px;'></div>"
                +                "</div>"
                +             "</div>"
			          +          "</div>"
			          +          "<div class='adjust_line'>"
			          +             "<div class='adjust_cha'>" + mcs_brightness + "</div>"
			          +             "<div style='width:187px;float:right;'>"
			          +                "<div id='sharpness_value' class='adjust_show_value'></div>"
			          +                "<div class = 'adjust_out_box'>"
                +                   "<div class = 'adjust_in_box'></div>"
                +                   "<div class = 'adjust_circle' style='margin-top:-5px;'></div>"
                +                "</div>"
                +             "</div>"
			          +          "</div>"
			          +          "<div id='adjust_reset'>"+ mcs_reset +"</div>"
			          +       "</div>"
			          +"</div>"
			          + "<div id='choice_play_definition'>"
    	          +    "<div id='super_definition' class='definition_cha'>"+ mcs_super_clear +"</div>"
    	          +    "<div style='width:55px;height:1px;background-color:#ffffff;margin:auto;'></div>"
    	          +    "<div id='high_definition' class='definition_cha'>"+ mcs_high_clear +"</div>"
    	          +    "<div style='width:55px;height:1px;background-color:#ffffff;margin:auto;'></div>"
    	          +    "<div id='standard_definition' class='definition_cha'>"+ mcs_standard_clear +"</div>"
    	          +    "<div style='width:55px;height:1px;background-color:#ffffff;margin:auto;'></div>"
    	          +    "<div id='fluency_definition' class='definition_cha'>"+ mcs_fluent_clear +"</div>"
    	          +    "<div style='width:55px;height:1px;background-color:#ffffff;margin:auto;'></div>"
    	          +    "<div id='auto_definition' class='definition_cha'>"+ mcs_auto +"</div>"
    	          +"</div>";

			      l_dom_vimtag_ptz_control = mx("#vimtag_ptz_control");
			      l_dom_ptz_control_left = mx("#ptz_control_left");
			      l_dom_ptz_control_up = mx("#ptz_control_up");
			      l_dom_ptz_control_right = mx("#ptz_control_right");
			      l_dom_ptz_control_down = mx("#ptz_control_down");
			      l_dom_ptz_click_left = mx("#ptz_click_left");
			      l_dom_ptz_click_up = mx("#ptz_click_up");
			      l_dom_ptz_click_right = mx("#ptz_click_right");
			      l_dom_ptz_click_down = mx("#ptz_click_down");
			      l_dom_ptz_control_center = mx("#ptz_control_center");
			      l_dom_ptz_control_bottom = mx("#ptz_control_bottom");
			      l_dom_ptz_control_bottom_center = mx("#ptz_control_bottom_center");
			      l_dom_control_menu = mx("#control_menu");
			      l_dom_video_off_pic = mx("#video_off_pic");
			      l_dom_camera_off_pic = mx("#camera_off_pic");
			      l_dom_talkback_off_pic = mx("#talkback_off_pic");
			      l_dom_adjust_off_pic = mx("#adjust_off_pic");
			      l_dom_turn_up = mx("#turn_up");
			      l_dom_turn_right = mx("#turn_right");
			      l_dom_turn_down = mx("#turn_down");
			      l_dom_turn_left = mx("#turn_left");
			      l_dom_mode_night = mx("#mode_night");
			      l_dom_mode_daytime = mx("#mode_daytime");
			      l_dom_mode_auto = mx("#mode_auto");
			      l_dom_adjust_mode_night = mx("#adjust_mode_night");
			      l_dom_adjust_mode_daytime = mx("#adjust_mode_daytime");
			      l_dom_adjust_mode_auto = mx("#adjust_mode_auto");
			      l_dom_adjust_reset = mx("#adjust_reset");
			      l_dom_adjust_setting = mx("#adjust_setting");
			      l_dom_delete_adjust_page = mx("#delete_adjust_page");
			      l_dom_super_definition = mx("#super_definition");
			      l_dom_high_definition = mx("#high_definition");
			      l_dom_standard_definition = mx("#standard_definition");
			      l_dom_fluency_definition = mx("#fluency_definition");
			      l_dom_auto_definition = mx("#auto_definition");
			      l_dom_choice_play_definition = mx("#choice_play_definition");
            //隐藏亮度、对比度、锐度等的设置
            jQuery("#adjust_setting").hide();
            
			      var width = l_me_parent.offsetParent.clientWidth, height = l_me_parent.offsetParent.clientHeight;
			      l_dom_ptz_control_left[s_style][s_cssText] = "width:" + width*0.15 + "px;height:" + height + "px;float:left;text-align:center;line-height:" + height + "px;font-size:16px;color:#ffffff";
			      l_dom_ptz_control_center[s_style][s_cssText] = "width:" + width*0.7 + "px;height:" + height + "px;float:left;";
			      l_dom_ptz_control_up[s_style][s_cssText] = "width:" + width*0.7 + "px;height:" + height*0.15 + "px;text-align:center;line-height:" + height*0.15 + "px;font-size:16px;color:#ffffff";
			      l_dom_ptz_control_bottom[s_style][s_cssText] = "width:" + width*0.7 + "px;height:" + height*0.7 + "px;";
			      l_dom_ptz_control_bottom_center[s_style][s_cssText] = "width:" + width*0.7 + "px;height:" + (height*0.7-59) + "px;";
			      l_dom_ptz_control_down[s_style][s_cssText] = "width:" + width*0.7 + "px;height:" + height*0.15 + "px;text-align:center;line-height:" + height*0.15 + "px;font-size:16px;color:#ffffff";
            l_dom_ptz_control_right[s_style][s_cssText] = "width:" + width*0.15 + "px;height:" + height + "px;float:left;text-align:center;line-height:" + height + "px;font-size:16px;color:#ffffff";
            l_dom_control_menu[s_style][s_cssText] = "width:420px;height:59px;position:absolute;margin-left:" + ((width*0.7-420)/2-22) + "px;";
            l_dom_turn_up[s_style][s_cssText] = "margin-left:" + (width*0.7-65)/2 + "px;position:absolute;";
            l_dom_turn_right[s_style][s_cssText] = "margin-top:" + (height-65)/2 + "px;position:absolute;right:0px;";
            l_dom_turn_down[s_style][s_cssText] = "margin-left:" + (width*0.7-65)/2 + "px;position:absolute;bottom:0px;";
            l_dom_turn_left[s_style][s_cssText] = "margin-top:" + (height-65)/2 + "px;position:absolute;";

            jQuery("#turn_up").hide();
            jQuery("#turn_right").hide();
            jQuery("#turn_down").hide();
            jQuery("#turn_left").hide();
            jQuery("#ptz_click_left").hide();
            jQuery("#ptz_click_up").hide();
            jQuery("#ptz_click_down").hide();
            jQuery("#ptz_click_right").hide();
            l_dom_mode_night.onclick=function(){
                l_dom_adjust_mode_night.click();
            }
            l_dom_mode_auto.onclick=function(){
                l_dom_adjust_mode_auto.click();
            }
            l_dom_mode_daytime.onclick=function(){
                l_dom_adjust_mode_daytime.click();
            }
		        function adjust_recording_button_state(obj)
		        {
		            if(obj.recording_state == "recording")
		            {
		                l_dom_video_off_pic.className = "video_on_picture";
		            }
		            else if(obj.recording_state == "normal")
		            {
		                l_dom_video_off_pic.className = "video_off_picture";
		            }
		        }

		        function record_ack(msg,ref)
		        {
		           if(msg && msg.sd_ready == 0)
		           {
		               msg_tips({msg:mcs_sdcard_not_ready, type:"error", timeout:3000});
		           }else if(msg && msg.result==""){
		           	  if(l_recording == 0)
		               {
		                  l_recording = 1;
		                  adjust_recording_button_state({recording_state:"recording"});
		               }
		               else
		               {
		                  l_recording = 0;
		                  adjust_recording_button_state({recording_state:"normal"});
		               }
		           }
                    else if(msg.result == "permission.denied")
                    {
                           msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
                    }
		        }

		        function ptz_turn_left()
		        {
		        	  if(l_flag == "stop")
	              {
		               	 l_parent_callback({type:"relative_move",data:{x:-1,y:0},ref:l_mark});
	              }
	              else
	              {
	                  if(l_left_interval)
	                  {
	                      clearInterval(l_left_interval);
	                      l_mark.flag = "ready";
	                  }
			              l_parent_callback({type:"relative_move",data:{x:-l_move_dist,y:0},ref:l_mark});
	                  l_left_interval = setInterval(function(){
	                    if(l_mark.flag == "ready")
	                    {
	                      l_mark.flag = "move";
				                l_parent_callback({type:"relative_move",data:{x:-l_move_dist,y:0},ref:l_mark});
	                    }
	                  }, 400);
	              }
		        }

		        function ptz_turn_up()
		        {
		        	  if(l_flag == "stop")
                {
		              l_parent_callback({type:"relative_move",data:{x:0,y:1},ref:l_mark});
                }
                else
                {
                    if(l_up_interval)
                    {
                        l_mark.flag = "ready";
                        clearInterval(l_up_interval);
                    }
			              l_parent_callback({type:"relative_move",data:{x:0,y:l_move_dist},ref:l_mark});
                    l_up_interval = setInterval(function(){
                      if(l_mark.flag == "ready")
                      {
                        l_mark.flag = "move";
                      }
                    }, 400);
                }
		        }

		        function ptz_turn_right()
		        {
		        	  if(l_flag == "stop")
                {
	    	           l_parent_callback({type:"relative_move",data:{x:1,y:0},ref:l_mark});
                }
                else
                {
                    if(l_right_interval)
                    {
                        l_mark.flag = "ready";
                        clearInterval(l_right_interval);
                    }
			              l_parent_callback({type:"relative_move",data:{x:l_move_dist,y:0},ref:l_mark});
                    l_right_interval = setInterval(function(){
                    if(l_mark.flag == "ready")
                    {
                        l_mark.flag = "move";
				                l_parent_callback({type:"relative_move",data:{x:l_move_dist,y:0},ref:l_mark});
                    }}, 400);
                }
		        }

		        function ptz_turn_down()
		        {
		        	  if(l_flag == "stop")
                {
		              l_parent_callback({type:"relative_move",data:{x:0,y:-1},ref:l_mark});
                }
                else
                {
                    if(l_down_interval)
                    {
                        l_mark.flag = "ready";
                        clearInterval(l_down_interval);
                    }
		                l_parent_callback({type:"relative_move",data:{x:0,y:-l_move_dist},ref:l_mark});
                    l_down_interval = setInterval(function(){
                      if(l_mark.flag == "ready")
                      {
                        l_mark.flag = "move";
		                    l_parent_callback({type:"relative_move",data:{x:0,y:-l_move_dist},ref:l_mark});
                    }}, 400);
                }
		        }
		        
		        function change_cam_mode(obj)
            {
                l_dom_mode_auto.style.background = "#ffffff";
                l_dom_mode_daytime.style.background = "#ffffff";
                l_dom_mode_night.style.background = "#ffffff";
                if(obj == "auto")
                {
                    l_dom_mode_auto.style.background = "#00a6ba";
                }
                else if(obj == "day")
                {
                    l_dom_mode_daytime.style.background = "#00a6ba";
                }
                else
                {
                    l_dom_mode_night.style.background = "#00a6ba";
                }
            }
            
            l_dom_super_definition.onclick = function(){
                mlocal_storage.set("PlayProfile", "p0");
                jQuery("#resolute_choice").text(mcs_super_clear);
            	  if(g_select_inner_ipc)
                {
                  var pos = parseInt(g_select_inner_window.charAt(g_select_inner_window.length - 1));
                  var  home_window_info = l_parent_callback({type:"get_inner_window_info", data:{index:pos}});
                  if("p0" !== home_window_info.profile_token)
                  l_parent_callback({type:"re_create_ipc", data:{inner_window_info:home_window_info, node_sn:home_window_info.node_sn}});
                }            
            };
            
            l_dom_high_definition.onclick = function(){
                mlocal_storage.set("PlayProfile", "p1");
                jQuery("#resolute_choice").text(mcs_high_clear);
            	  if(g_select_inner_ipc)
                {
                  var pos = parseInt(g_select_inner_window.charAt(g_select_inner_window.length - 1));
                  var  home_window_info = l_parent_callback({type:"get_inner_window_info", data:{index:pos}});
                  if("p1" !== home_window_info.profile_token)
                  l_parent_callback({type:"re_create_ipc", data:{inner_window_info:home_window_info, node_sn:home_window_info.node_sn}});
                }
            };
            
            l_dom_standard_definition.onclick = function(){
                mlocal_storage.set("PlayProfile", "p2");
                jQuery("#resolute_choice").text(mcs_standard_clear);
            	  if(g_select_inner_ipc)
                {
                  var pos = parseInt(g_select_inner_window.charAt(g_select_inner_window.length - 1));
                  var  home_window_info = l_parent_callback({type:"get_inner_window_info", data:{index:pos}});
                  if("p2" !== home_window_info.profile_token)
                  l_parent_callback({type:"re_create_ipc", data:{inner_window_info:home_window_info, node_sn:home_window_info.node_sn}});
                }
            };
            
            l_dom_fluency_definition.onclick = function(){
                mlocal_storage.set("PlayProfile", "p3");
                jQuery("#resolute_choice").text(mcs_fluent_clear);
            	  if(g_select_inner_ipc)
                {
                  var pos = parseInt(g_select_inner_window.charAt(g_select_inner_window.length - 1));
                  var  home_window_info = l_parent_callback({type:"get_inner_window_info", data:{index:pos}});
                  if("p3" !== home_window_info.profile_token)
                  l_parent_callback({type:"re_create_ipc", data:{inner_window_info:home_window_info, node_sn:home_window_info.node_sn}});
                }
            };
            
            l_dom_auto_definition.onclick = function(){
            	  jQuery("#resolute_choice").text(mcs_auto);
            };
            //获取本地存储的分辨率
            if(mlocal_storage.get("PlayProfile") == "p0")
            {
               jQuery("#resolute_choice").text(mcs_super_clear);
            }
            else if(mlocal_storage.get("PlayProfile") == "p1")
            {
            	 jQuery("#resolute_choice").text(mcs_high_clear);
            }
            else if(mlocal_storage.get("PlayProfile") == "p2")
            {
            	 jQuery("#resolute_choice").text(mcs_standard_clear);
            }
            else if(mlocal_storage.get("PlayProfile") == "p3")
            {
            	 jQuery("#resolute_choice").text(mcs_fluent_clear);
            }
            else
            {
            	 jQuery("#resolute_choice").text(mcs_auto);
            }
            
            l_dom_ptz_control_bottom_center.onclick = function(){
		            if(jQuery("#control_menu").is(":hidden"))
		            {
		               jQuery("#control_menu").show();
		               time = setTimeout(function(){jQuery("#control_menu").hide()},5000);
		            }
		            else
		            {
		            	 jQuery("#control_menu").hide();
		            }
            };
            //录像按键点击事件
            l_dom_video_off_pic.onclick = function(){
            	  clearTimeout(time);
                if(g_select_device_ipc)
                {
                   if(l_recording == 0){
                     ms.send_msg("record",{sn:g_select_device_ipc,keep_time:60000},null,record_ack);
                   }else{
                   	 ms.send_msg("record",{sn:g_select_device_ipc,keep_time:-1},null,record_ack);
                   }
                }
            };
            //拍照按键点击事件
            l_dom_camera_off_pic.onclick = function(){
                clearTimeout(time);
                if(g_select_device_ipc)
                {
                   l_parent_callback({type:"get_snapshot_uri", data:{inner_window_index:1}});
                }
            };
            //对讲按键点击事件
            l_dom_talkback_off_pic.onclick = function(){
                //l_dom_talkback_off_pic.className = "talkback_on_picture";
                clearTimeout(time);
                if(g_select_inner_ipc&&g_select_inner_window != "none")
                {
                    var inner_window_index = g_select_inner_window.substr(g_select_inner_window.length - 1, 1);
                    l_parent_callback({type:"call_button_clicked", data:{inner_window_index:inner_window_index}});
                }
            };
            //亮度、对比度、锐度、饱和度调节
            var dom_left = jQuery(".left_button")[0],dom_center = jQuery(".center_button")[0],dom_right = jQuery(".right_button")[0],
                dom_out_box = jQuery(".adjust_out_box"),dom_in_box = jQuery(".adjust_in_box"),outX,values_flag = [false,false,false,false],
                dom_circle = jQuery(".adjust_circle"),left,top,mouseX,l_cam_conf, i,evt,dom_value = jQuery(".adjust_show_value");
            dom_out_box.mousedown(function(e)
            {
                for(i = 0;i<4;i++)
                {
                    if(this == dom_out_box[i])
                    {
                        values_flag[i] = true;
                        break;
                    }
                }
                evt = window.event || e;
                outX = this.offsetLeft;
                mouseX = evt.clientX-getLeft(jQuery("#adjust_setting")[0]);
                var value = mouseX-outX;
                if(value>160)
                {
                    dom_in_box[i].style.width = "160px";
                    dom_circle[i].style.left = outX+160+"px";
                }
                else if(value <= 0)
                {
                    dom_in_box[i].style.width = "0";
                    dom_circle[i].style.left = outX+"px";
                }
                else
                {
                    dom_in_box[i].style.width = value+"px";
                    dom_circle[i].style.left = mouseX+"px";
                }
                dom_value[i].style.display = "block";
                dom_value[i].innerHTML = parseInt(dom_in_box[i].offsetWidth/1.6);
            });

            document.onmousemove = (function(e)
            {
                evt = window.event||e;
                if(values_flag[0]||values_flag[1]||values_flag[2]||values_flag[3])
                {
                    mouseX = evt.clientX-getLeft(jQuery("#adjust_setting")[0]);
                    var value = mouseX-outX;
                    if(value>160)
                    {
                        dom_in_box[i].style.width = "160px";
                        dom_circle[i].style.left = outX+160+"px";
                    }
                    else if(value <= 0)
                    {
                        dom_in_box[i].style.width = "0";
                        dom_circle[i].style.left = outX+"px";
                    }
                    else
                    {
                        dom_in_box[i].style.width = value+"px";
                        dom_circle[i].style.left = mouseX+"px";
                    }
                    dom_value[i].innerHTML = parseInt(dom_in_box[i].offsetWidth/1.6);
                }
            });

            document.onmouseup = (function(e)
            {
                if(values_flag[0]||values_flag[1]||values_flag[2]||values_flag[3])
                {
                    l_cam_conf.sharpness = parseInt(dom_in_box[0].offsetWidth/1.6);
                    l_cam_conf.contrast = parseInt(dom_in_box[1].offsetWidth/1.6);
                    l_cam_conf.color_saturation = parseInt(dom_in_box[2].offsetWidth/1.6);
                    l_cam_conf.brightness = parseInt(dom_in_box[3].offsetWidth/1.6);
                    mcloud_agent.cam_set(l_cam_conf,null,function(msg,ref)
                    {
                    	  if(msg.result == "permission.denied")
					            	{
					            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
					            	}
                        else if(msg.result!= "")
                        {
                        	  msg_tips({msg:msg.result, type:"error", timeout:3000});
                        }
                    });
                    values_flag = [false,false,false,false];
                }
            });
            
            l_dom_adjust_off_pic.onclick = function(){
            	  if(!l_adjust)
            	  {
            	  	  l_adjust = 1;
            	  	  l_dom_adjust_off_pic.className = "adjust_on_picture";
		            	  jQuery("#adjust_setting").show();
				            mcloud_agent.cam_get({sn:g_select_device_ipc},null,function(msg,ref)
				            {
				                if(msg.result == "")
				                {
				                    l_cam_conf = msg;
				                    l_cam_conf.sn = g_select_device_ipc;
				                    dom_in_box[0].style.width = parseInt(l_cam_conf.sharpness*1.6)+"px";
				                    dom_in_box[1].style.width = parseInt(l_cam_conf.color_saturation*1.6)+"px";
				                    dom_in_box[2].style.width = parseInt(l_cam_conf.contrast*1.6)+"px";
				                    dom_in_box[3].style.width = parseInt(l_cam_conf.brightness*1.6)+"px";
				                    
				                    dom_value[3].innerHTML = parseInt(l_cam_conf.brightness);
				                    dom_value[2].innerHTML = parseInt(l_cam_conf.contrast);
				                    dom_value[1].innerHTML = parseInt(l_cam_conf.color_saturation);
				                    dom_value[0].innerHTML = parseInt(l_cam_conf.sharpness);
				                    for(var j = 0;j<4;j++)
				                    {
				                        dom_circle[j].style.left = dom_out_box[j].offsetLeft+dom_in_box[j].offsetWidth+"px";
				                        dom_circle[j].style.top = dom_out_box[j].offsetTop+"px";
				                    }
				                    change_cam_mode(l_cam_conf.day_night);
				                }
						            else if(msg.result == "permission.denied")
					            	{
					            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
					            	}
				                else
				                {   
				                	  msg_tips({msg:msg.result, type:"error", timeout:3000});
				                }
				            });
		            }
		            else
		            {
		            	  l_adjust = 0;
		            	  l_dom_adjust_off_pic.className = "adjust_off_picture";
		            	  jQuery("#adjust_setting").hide();
		            }
            }
            
            l_dom_delete_adjust_page.onclick = function()
            { 
            	  l_adjust = 0;
            	  jQuery("#adjust_setting").hide();
            	  l_dom_adjust_off_pic.className = "adjust_off_picture";
            }
            
            l_dom_adjust_mode_auto.onclick = function()
            {
                change_cam_mode("auto");
                l_cam_conf.day_night = "auto";
                l_cam_conf.sn = g_select_device_ipc;
                mcloud_agent.cam_set(l_cam_conf,null,function(msg,ref)
                {
                	  if(msg.result == "permission.denied")
			            	{
			            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
			            	}
                    else if(msg.result!= "")
                    {
                    	  msg_tips({msg:msg.result, type:"error", timeout:3000});
                    }
                    else
                    {
                    	  msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                    }
                });
            };

            l_dom_adjust_mode_daytime.onclick = function()
            {
                change_cam_mode("day");
                l_cam_conf.day_night = "day";
                mcloud_agent.cam_set(l_cam_conf,null,function(msg,ref)
                {
                	  if(msg.result == "permission.denied")
			            	{
			            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
			            	}
                    else if(msg.result!= "")
                    {
                    	  msg_tips({msg:msg.result, type:"error", timeout:3000});
                    }
                    else
                    {
                    	  msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                    }
                });
            };

            l_dom_adjust_mode_night.onclick = function()
            {
                change_cam_mode("night");
                l_cam_conf.day_night = "night";
                l_cam_conf.sn = g_select_device_ipc;
                mcloud_agent.cam_set(l_cam_conf,null,function(msg,ref)
                {
                	  if(msg.result == "permission.denied")
			            	{
			            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
			            	}
                    else if(msg.result!= "")
                    {
                    	  msg_tips({msg:msg.result, type:"error", timeout:3000});
                    }
                    else
                    {
                    	  msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                    }
                });
            };
            //点击重置之后的事件
            l_dom_adjust_reset.onclick = function(){
                for(var i = 0;i<4;i++)
                {
                    dom_in_box[i].style.width = l_cam_conf_reset[i]*1.6+"px";
                    dom_circle[i].style.left = dom_out_box[i].offsetLeft+dom_in_box[i].offsetWidth+"px";
                }
                change_cam_mode("auto");
                l_cam_conf.sharpness = l_cam_conf_reset[0];
                l_cam_conf.color_saturation = l_cam_conf_reset[1];
                l_cam_conf.contrast = l_cam_conf_reset[2];
                l_cam_conf.brightness = l_cam_conf_reset[3];
                dom_value[3].innerHTML = l_cam_conf_reset[3];
                dom_value[2].innerHTML = l_cam_conf_reset[2];
                dom_value[1].innerHTML = l_cam_conf_reset[1];
                dom_value[0].innerHTML = l_cam_conf_reset[0];
                l_cam_conf.day_night = "auto";
                mcloud_agent.cam_set(l_cam_conf,null,function(msg,ref)
                {
                	  if(msg.result == "permission.denied")
			            	{
			            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
			            	}
                    else if(msg.result!= "")
                    {
                        msg_tips({msg:msg.result, type:"error", timeout:3000});
                    }
                });
            };            

            l_dom_ptz_control_left.onmouseover = function(){
                jQuery("#turn_left").show();
            };

            l_dom_ptz_control_left.onmouseout = function(){
                jQuery("#turn_left").hide();
            };

            l_dom_ptz_control_up.onmouseover = function(){
                jQuery("#turn_up").show();
            };

            l_dom_ptz_control_up.onmouseout = function(){
                jQuery("#turn_up").hide();
            };

            l_dom_ptz_control_right.onmouseover = function(){
                jQuery("#turn_right").show();
            };

            l_dom_ptz_control_right.onmouseout = function(){
                jQuery("#turn_right").hide();
            };

            l_dom_ptz_control_down.onmouseover = function(){
                jQuery("#turn_down").show();
            };

            l_dom_ptz_control_down.onmouseout = function(){
                jQuery("#turn_down").hide();
            };

            l_dom_turn_left.onmousedown = function(){
                l_flag = "move";
                setTimeout( ptz_turn_left(),300);
            };

            l_dom_turn_left.onmouseup = function(){
            	  l_flag = "stop";
                if(l_left_interval) clearInterval(l_left_interval);
            };

            l_dom_turn_up.onmousedown = function(){
                l_flag = "move";
                setTimeout( ptz_turn_up(),300);
            };

            l_dom_turn_up.onmouseup = function(){
                l_flag = "stop";
                if(l_up_interval) clearInterval(l_up_interval);
            };

            l_dom_turn_right.onmousedown = function(){
                l_flag = "move";
                setTimeout( ptz_turn_right(),300);
            };

            l_dom_turn_right.onmouseup = function(){
                l_flag = "stop";
                if(l_right_interval) clearInterval(l_right_interval);
            };

            l_dom_turn_down.onmousedown = function(){
                l_flag = "move";
                setTimeout( ptz_turn_down(),300);
            };

            l_dom_turn_down.onmouseup = function(){
                l_flag = "stop";
                if(l_down_interval) clearInterval(l_down_interval);
            };

        }
    		l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	  l_dom_ptz_control_left[s_style][s_width] = g_player_width*0.15 + "px";
                    	  	  l_dom_ptz_control_left[s_style][s_height] = g_player_height + "px";
                    	  	  l_dom_ptz_control_left.style.lineHeight = g_player_height + "px";
                    	  	  l_dom_ptz_control_center[s_style][s_width] = g_player_width*0.7 + "px";
                    	  	  l_dom_ptz_control_center[s_style][s_height] = g_player_height + "px";
                    	  	  l_dom_ptz_control_up[s_style][s_width] = g_player_width*0.7 + "px";
                    	  	  l_dom_ptz_control_up[s_style][s_height] = g_player_height*0.15 + "px";
                    	  	  l_dom_ptz_control_up.style.lineHeight = g_player_height*0.15 + "px";
                    	  	  l_dom_ptz_control_bottom[s_style][s_width] = g_player_width*0.7 + "px";
                    	  	  l_dom_ptz_control_bottom[s_style][s_height] = g_player_height*0.7 + "px";
                    	  	  l_dom_ptz_control_bottom_center[s_style][s_width] = g_player_width*0.7 + "px";
                    	  	  l_dom_ptz_control_bottom_center[s_style][s_height] = g_player_height*0.7 -59 + "px";
                    	  	  l_dom_ptz_control_down[s_style][s_width] = g_player_width*0.7 + "px";
                    	  	  l_dom_ptz_control_down[s_style][s_height] = g_player_height*0.15 + "px";
                    	  	  l_dom_ptz_control_down.style.lineHeight = g_player_height*0.15 + "px";
                    	  	  l_dom_ptz_control_right[s_style][s_width] = g_player_width*0.15 + "px";
                    	  	  l_dom_ptz_control_right[s_style][s_height] = g_player_height+ "px";
                    	  	  l_dom_ptz_control_right.style.lineHeight = g_player_height + "px";
                    	  	  l_dom_control_menu.style.marginLeft = (g_player_width*0.7 - 420)/2 -22 + "px";
                    	  	  l_dom_turn_up.style.marginLeft = (g_player_width*0.7 - 65)/2 + "px";
                    	  	  l_dom_turn_right.style.marginTop = (g_player_height - 65)/2 + "px";
                    	  	  l_dom_turn_down.style.marginLeft = (g_player_width*0.7 - 65)/2 + "px";
                    	  	  l_dom_turn_left.style.marginTop = (g_player_height - 65)/2 + "px";                    	  	  
                    	  }
                        break;
                    }
                case "update_imaging":
                    {
                       update_imagings(obj,false);
                       break;
                    }
                case "change_select_ipc"://处理更改设备
                    {
                       change_select_ipc(obj);
                       break;
                    }
                case "destroy":
                    {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_ptz_control_box.");
            }
        }
    }
    function class_playback_search_box(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_playback_search_panel,
            l_dom_playback_search_inner,
            l_dom_playback_search_body,
            l_dom_playback_search_footer,
            l_dom_playback_search_list_more,
            l_dom_playback_file_list,//回放列表
            l_playback_device="",//表示当前设备，需要存储一些特殊值，因为查看更多十条会用到，
            l_playback_list={};//存储回放列表,
            l_playback_device_list=new Array();//回放设备列表

        l_playback_list["list"] = createLinkList();
        l_dom_playback_search_panel = dom_create_child(l_me_parent, "div", "playback_search_panel");
        l_dom_playback_search_inner = dom_create_child(l_dom_playback_search_panel, "div", "playback_search_inner", "standard_box_inner_style");
        l_dom_playback_search_body = dom_create_child(l_dom_playback_search_inner, "div", "playback_search_body");
        l_dom_playback_search_footer = dom_create_child(l_dom_playback_search_footer, "div", "playback_search_footer");

        l_dom_playback_search_panel[s_style][s_cssText] = "width:" + g_panel_box_w + "px;height:" + g_panel_box_h + "px;right:" + g_panel_box_offset + "px;";
        l_dom_playback_search_inner[s_style][s_cssText] = "width:" + g_panel_box_w + "px;height:" + g_panel_box_inner_h + "px;";
        l_dom_playback_search_body[s_style][s_cssText]="height:"+(l_dom_playback_search_inner.offsetHeight-5)+"px;";
        l_dom_playback_search_body[s_innerHTML] = "<ul id='playback_file_list' ></ul>"
        l_dom_playback_file_list = mx("#playback_file_list");
        //创建回放数据列表
        function create_playback_file_list(obj){
        	 var  i,device_change = 0,length, inner_html, file_list_li, file_list_span, file_list_img, duration, surplus_dur,
                begin_date = 0, end_date = 0, date = new Date(),
                begin_year, begin_month, begin_day, begin_hour, begin_minute, begin_second,
                end_year, end_month, end_day, end_hour, end_minute, end_second,download_location_tip,on_recording_timer,
                dur_year, dur_month, dur_day, dur_hour, dur_minute, dur_second,RecordingToken="",RecordingSize;

                var download_img_src='./imgs/download_ico.png';
            		var playback_ico = mx("#control_playback_ico");

            if(navigator.platform.indexOf("Win") > -1)
            {
                download_location_tip=mcs_download_location+": C:\/Downloads\/"; //IF it's windows system
            }
    			  else if(navigator.platform.indexOf("Mac") > -1)
    			  {
    			      download_location_tip=mcs_download_location+": \/Users\/Shared\/"; //IF it's MAC system
    			  }

        	 //如果返回的信息为空 则退出
           if(!obj.messages){
            	 if(l_playback_list["list"].length == 0){
            	   //清空原来的数据
            	   l_dom_playback_file_list[s_innerHTML] = "";
            	   l_playback_device = "";
            	   return;
            	 }else if(obj.bound == -1){
            	 	 l_dom_playback_search_list_more[s_innerHTML] = "";
            	 	 return;
            	 }
           }else{
           	  if(l_playback_list["list"].length == 0){
            	    l_playback_device = obj.messages[0];
            	    device_change = 1;
              }
           }
           inner_html="";
           for(i = 0,length = obj.messages.length;i<length;i++)
           {
           	   if(!obj.messages[i].p || !obj.messages[i].p[2].v) continue
               l_playback_list["list"].add(obj.messages[i]);
               date.setTime(obj.messages[i].date*1000);
               year = date.getFullYear();
               year = year.toString().length < 2 ? "0" + year : year;
               month= date.getMonth() + 1;
               month= month.toString().length < 2 ? "0" + month : month;
               day = date.getDate();
               day = day.toString().length < 2 ? "0" + day : day;
               hour = date.getHours();
               hour = hour.toString().length < 2 ? "0" + hour : hour;
               minute = date.getMinutes();
               minute = minute.toString().length < 2 ? "0" + minute : minute;
               second = date.getSeconds();
               second = second.toString().length < 2 ? "0" + second : second;

               duration = obj.messages[i].p[2].v - obj.messages[i].p[1].v;
               dur_day = Math.floor(duration / (24 * 3600 * 1000));
               surplus_dur = duration % (24 * 3600 * 1000);
               dur_hour = Math.floor(surplus_dur / (3600 * 1000));
               surplus_dur = surplus_dur % (3600 * 1000);
               dur_minute = Math.floor(surplus_dur / (60 * 1000));
               surplus_dur = surplus_dur % (60 * 1000);
               dur_second = Math.floor(surplus_dur / 1000);

               inner_html += "<li class='file_list_li' id='file_list_li"+obj.messages[i].msg_id+"' date=" + obj.messages[i].date + "><span>" + (year-2000) + "." + month + "." + day + " "
                          +hour + ":" + minute + ":" + second + "</span>"
                         //+"<span class='file_list_span'>" + year + "." + month + "." + day + " "+hour + ":" + minute + ":" + second + "</span>"
                          + "<img src='./imgs/dropdown_out_ico.png' style='margin-left:2px'></img>"
                          +   "<ul style='margin-left:10px;display:none'>"
                          +"<li class='file_list_li_span'>"
                          +(dur_day?dur_day:'') + (dur_hour?dur_hour:'00')+":"
                          +(dur_minute?dur_minute:'00')+":" + (dur_second?dur_second:'00')
                          +"<label id='download_progress' style='display:none;margin-left:15px;'>"
                          +"0%"
                          +"</label>"
                          +"<div class='download_img' title='"+download_location_tip+"' style='background-image: url("+download_img_src+");margin-right: 31px;float: right;height:16px;width:15px;display:inline-block;*display:inline;display:-moz-inline-box;'></div>"
                          +       "</li>"
                          +   "</ul>"
                          + "</li>";
           }
           if(device_change){
           	 mx("#playback_file_list")[s_innerHTML]= inner_html;
           }else{
             mx("#playback_file_list")[s_innerHTML]= mx("#playback_file_list")[s_innerHTML]+inner_html;
             jQuery(l_dom_playback_search_body).mCustomScrollbar("update");
           }

           if(obj.bound==0){
           	    if(device_change){
                		l_dom_playback_search_list_more = dom_create_child(l_dom_playback_search_body, "div", "playback_search_list_more", "standard_box_inner_style");
                		l_dom_playback_search_list_more[s_style][s_cssText]="width:130px; text-align:center;";
                		l_dom_playback_search_list_more[s_innerHTML] =mcs_more + 10 + mcs_bar;
                		jQuery(l_dom_playback_search_body).mCustomScrollbar();
                }
                //查看更多10条 按键事件
                l_dom_playback_search_list_more.onmouseover=function(){
                    l_dom_playback_search_list_more.style.fontSize="14px";
                    l_dom_playback_search_list_more.style.color="rgb(128, 165, 45)";
                }
                l_dom_playback_search_list_more.onmouseout=function(){
                     l_dom_playback_search_list_more.style.fontSize="12px";
                     l_dom_playback_search_list_more.style.color="#bbb";
                }
                l_dom_playback_search_list_more.onclick=function(){
                     l_parent_callback({type:"playback_search_list_more",l_search_time:obj.messages[obj.messages.length-1].msg_id});
                }
           }else{
           	 if(!device_change){
           	   l_dom_playback_search_list_more[s_innerHTML] = "";
           	 }
           }

           file_list_li = mx(".file_list_li", l_dom_playback_search_body);
           file_list_span = mx("/span", l_dom_playback_search_body);
           file_list_img = mx("/img", l_dom_playback_search_body);
           file_list_download_img = mx(".download_img", l_dom_playback_file_list);
           file_list_li_span = mx(".file_list_li_span", l_dom_playback_file_list);
           length = file_list_li.length;
           for(i = 0; i < length; ++i)
           {  //回放界面 回放记录列表每项记录的点击事件
              file_list_li[i].onclick = function() {
               	  /*if(g_is_play_back){
               	  	l_parent_callback({type:"delete_ipc", data:{node_sn:g_select_device_ipc}});
               	  } */             //debug by summer, when download the recording, can't execute "delete_ipc"
                  //将所有记录颜色回复正常
                  for(j = 0 ; j < length; ++j)
                  {
                      file_list_span[j][s_style].color="#eaeaea";
                  }
                  //更改自己的颜色
                  if(g_hostname=="www.luxcamapp.eu")
                  {
                      this.firstChild.style.color="red";
                  }
                  else
                  {
                      this.firstChild.style.color="rgb(128, 165, 45)";
                  }
                  for(j = 0 ; j < length; ++j)
                  {
                     if(file_list_li[j]==this)
                     {
                  			//将选择的回放项的标识RecordingToken传给view_page
                  	    for(ptr=l_playback_list["list"].get_first(); ptr; ptr = ptr.next)
                        {
        	    	             if(this.id == "file_list_li"+ptr.data.msg_id)
        	    	             {
        	    	                 RecordingToken=ptr.data.p[0].v;
                    	  	       l_parent_callback({type:"RecordingToken",data:RecordingToken});
                    	  	       RecordingSize=ptr.data.p[3].v;
                                 l_parent_callback({type:"RecordingSize",data:RecordingSize});
                                 /*RecordingImg=ptr.data.p[4].v;
                                 l_parent_callback({type:"RecordingImg",data:RecordingImg});
                                 RecordingSaveName=jQuery("span:first", this)[0].innerHTML.replace(/:/g,".");
                                 l_parent_callback({type:"RecordingSaveName",data:RecordingSaveName});*/
        	    	             }
                        }
                  	 }
                  }
              };
              //回放记录每项记录的下拉事件
              file_list_img[i].onclick = function() {
                 jQuery("ul:first", this.parentNode).slideToggle();
                 jQuery(l_dom_playback_search_body).mCustomScrollbar("update");
              };
              if(file_list_li_span[i])
              {
               var text_content_tmp4=(g_old_browser_version)?(file_list_li_span[i].innerText.length>2 && file_list_li_span[i].innerText.substring(0,7) != "00:00:00"):(file_list_li_span[i].textContent.length>2 && file_list_li_span[i].textContent.substring(0,7) != "00:00:00");
                if(text_content_tmp4)
                {
                    file_list_download_img[i].onclick = function() {
                    	 list_img_click=1;
                    	 if(g_is_play_back)
                    	 {
                    	    l_parent_callback({type:"delete_ipc", data:{node_sn:g_select_device_ipc}});
                    	 }
                    	 else
                    	 	{
                          var CurrentRecordingSaveName=jQuery("span:first", this.parentNode.parentNode.parentNode)[0].innerHTML.replace(/:/g,".");
                          var progress_dom=jQuery("label", this.parentNode.parentNode)[0];
                          if(g_is_play_back_download)
                          {
                        		if(CurrentRecordingSaveName==mcloud_agent.devs.get(g_select_device_ipc).RecordingSaveName)
                        				l_parent_callback({type:"playback_download",path:CurrentRecordingSaveName,progress_dom:progress_dom});
                          }
                          else
                      	  {
                        		l_parent_callback({type:"playback_download",path:CurrentRecordingSaveName,progress_dom:progress_dom});
                          }
                        }

                    };
                    file_list_download_img[i].onmouseover = function() {
                        var CurrentRecordingSaveName=jQuery("span:first", this.parentNode.parentNode.parentNode)[0].innerHTML.replace(/:/g,".");
                    		if(!g_is_play_back_download || (g_is_play_back_download && CurrentRecordingSaveName!=mcloud_agent.devs.get(g_select_device_ipc).RecordingSaveName))
                    	  {
                    		    this.style.backgroundImage="url('./imgs/download_over_ico.png')";
                        }
                    };
                    file_list_download_img[i].onmouseout = function() {
                      var CurrentRecordingSaveName=jQuery("span:first", this.parentNode.parentNode.parentNode)[0].innerHTML.replace(/:/g,".");
                    	if(!g_is_play_back_download || (g_is_play_back_download && CurrentRecordingSaveName!=mcloud_agent.devs.get(g_select_device_ipc).RecordingSaveName))
                    	{
                    	    this.style.backgroundImage="url('./imgs/download_ico.png')";
                      }
                    };
                }
                else
                {
                    file_list_li_span[i].innerHTML=
                        "<span class='recording_ico'  style='display:inline-block;width:16px;height:15px;'></span>"
                        +"<div class='download_img' style='background-image: url("+download_img_src+");margin-right: 40px;float: right;height:16px;width:15px;display:none;'></div>"
    		    						;

    		    				var recording_ico = mx(".recording_ico",file_list_li_span[i])[0];
                    background_img_set(recording_ico, sub_img_status2);
                    playback_ico.parentNode.onclick = null;
                    playback_ico.parentNode.onmouseout = null;
                    playback_ico.parentNode.onmouseover =  null;
                }
            }
           }
           if(device_change && l_playback_list["list"].get_first())
           {
                file_list_li[0].click();
           }
        }
        function add_event()
        {
            l_me_parent.onmouseover = function(obj) {
                if(g_panel_box_all_w < g_panel_box_max_w)
                {
                    if(!g_old_browser_version)
                    {
                        jQuery(this).animate({opacity:"1"}, {queue:false, duration:400, easing:'easeOutQuint'});
                    }
                    jQuery(this).animate({width:g_panel_box_max_w}, {queue:false, duration:400, easing:'easeOutQuint'});
                    jQuery(l_dom_playback_search_panel).animate({right:"3"}, {queue:false, duration:400, easing:'linear'});

                    var temp_func = function(evt) {
                        var e = evt || window.event, target = e.target || e.srcElement;

                        if(!target || is_ancestor(l_me_parent, target)) return;

                        if(!g_old_browser_version)
                        {
                            jQuery(l_me_parent).animate({opacity:"0.5"}, {queue:false, duration:400, easing:'linear'});
                        }
                        jQuery(l_me_parent).animate({width:g_panel_box_all_w}, {queue:false, duration:400, easing:'linear'});
                        jQuery(l_dom_playback_search_panel).animate({right:g_panel_box_offset}, {queue:false, duration:400, easing:'linear'});

                        g_j_page.unbind("mouseup", temp_func);
                    };
                    g_j_page.bind("mouseup", temp_func);
                }
            };
            l_me_parent.onmouseout = function(obj) {
                if(g_panel_box_all_w < g_panel_box_max_w)
                {
                    if(!g_old_browser_version)
                    {
                        jQuery(this).animate({opacity:"0.5"}, {queue:false, duration:400, easing:'linear'});
                    }
                    jQuery(this).animate({width:g_panel_box_all_w}, {queue:false, duration:400, easing:'linear'});
                    jQuery(l_dom_playback_search_panel).animate({right:g_panel_box_offset}, {queue:false, duration:400, easing:'linear'});
                }
            };
        }
        function remove_event()
        {
        	l_me_parent.onmouseover = "";
        	l_me_parent.onmouseout = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_playback_search_panel[s_style][s_width] = g_panel_box_w + "px";
                        l_dom_playback_search_panel[s_style][s_height] = g_panel_box_h + "px";
                        l_dom_playback_search_panel[s_style].right = g_panel_box_offset + "px";
                        l_dom_playback_search_inner[s_style][s_width] = g_panel_box_w + "px";
                        l_dom_playback_search_inner[s_style][s_height] = g_panel_box_inner_h + "px";
                        l_dom_playback_search_body[s_style][s_cssText]="height:"+(l_dom_playback_search_inner.offsetHeight-20)+"px;";
                        jQuery(l_dom_playback_search_body).mCustomScrollbar("update");
                        break;
                    }
                case "playback_click":
                    {
                        file_list_li = mx(".file_list_li", l_dom_playback_search_body);
                        for(ptr=l_playback_list["list"].get_first(); ptr; ptr = ptr.next)
                        {
        	    	       if(obj.id=="playback_li"+ptr.data.msg_id)
        	    	        {
        	    	            for(j = 0 ; j < file_list_li.length; ++j)
                                {
                                   file_list_span[j][s_style].color="#eaeaea";
                                   if(file_list_li[j].id=="file_list_li"+ptr.data.msg_id)
                                   {
                                      if(g_hostname=="www.luxcamapp.eu")
                                      {
                                          file_list_li[j].firstChild.style.color="red";
                                      }
                                      else
                                      {
                                          file_list_li[j].firstChild.style.color="rgb(128, 165, 45)";
                                      }
                                   }
                                }
        	    	           RecordingToken=ptr.data.params[0].value;
                    	  	   l_parent_callback({type:"RecordingToken",data:RecordingToken});
        	    	        }
                        }
                        break;
                    }
                case "change_select_ipc":
                    {   //清空回放列表
                        l_dom_playback_search_body[s_innerHTML] = "<ul id='playback_file_list' ></ul>"
                        //清空回放列表存储数据
            	          l_playback_list["list"].empty();
                        l_parent_callback({type:"playback_search_result",data:{inner_window_info:""}});
                        break;
                    }
                case "create_playback_file_list":
                    {
                        create_playback_file_list(obj.data);
                        break;
                    }
                case "play_pause":
                    {
                       //l_parent_callback({type:"add_playback",data:l_playback_list["list"]});
                       break;
                    }
                case "destroy":
                    {
                    	  remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_playback_search_box.");
            }
        }
        add_event();
    }
    function class_status_bar(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_dom_status_content, j_status_content,
            l_dom_log_detail,
            l_dom_log_detail_header, l_dom_log_detail_content,
            l_log_list, l_log_list_ptr,
            l_inner_html = "";

        l_dom_status_content = dom_create_child(l_me_parent, "div", "status_content");
        j_status_content = jQuery(l_dom_status_content);
        j_status_content.addClass("status_content");

        jQuery(document).bind("keydown", function(e) {
            if(e.ctrlKey && e.altKey && e.keyCode == 77)
            {
                l_dom_status_content[s_innerHTML] = g_video_stream_uri;
            }
        });
        function add_event()
        {   //消息缓存点击事件
            l_dom_status_content.onclick = function()
            {
                if(!l_dom_log_detail)
                {
                    l_dom_log_detail = dom_create_child(page, "div", "log_detail");
                    l_log_list = log();
                    l_dom_log_detail_header = dom_create_child(l_dom_log_detail, "div", "log_detail_header");
                    l_dom_log_detail_content = dom_create_child(l_dom_log_detail, "div", "log_detail_content");
                    l_dom_log_detail_header.innerHTML = mcs_message_buffering;
                    l_inner_html = "<ul>";
                    for(l_log_list_ptr = l_log_list.get_first(); l_log_list_ptr; l_log_list_ptr = l_log_list_ptr.next)
                    {
                        l_inner_html += "<li>" + l_log_list_ptr.data.date + "&nbsp;&nbsp;&nbsp;" + l_log_list_ptr.data.info + "</li>";
                    }
                    l_inner_html += "</ul>";
                    l_dom_log_detail_content.innerHTML = l_inner_html;
                    var detail_offset_height = l_dom_log_detail.offsetHeight;
                    l_dom_log_detail.style.cssText = "height:0px;top:" + l_me_parent.offsetTop + "px;"
                                                 + "right:" + ((l_me_parent.offsetWidth - l_dom_log_detail.offsetWidth)) / 2 + "px;";

                    jQuery(l_dom_log_detail).animate({top:"-=" + detail_offset_height, height:detail_offset_height},
                            {queue:false, duration:detail_offset_height * 2, easing:"linear"});

                    //l_dom_log_detail.onmousedown = function(e) {
                    //    drag(this, e || window.event, null, null);
                    //};

                    var temp_func = function(evt) {
                        var e = evt || window.event, target = e.target || e.srcElement;

                        if(!target || is_ancestor(l_dom_log_detail, target)) return;

                        if(l_dom_log_detail)
                        {
                            jQuery(l_dom_log_detail).fadeOut("normal", function(){
                                page[s_removeChild](l_dom_log_detail);
                                l_dom_log_detail = null;
                            });
                        }
                        g_j_page.unbind("mouseup", temp_func);
                    };
                    g_j_page.bind("mouseup", temp_func);
                }
            };
        }
        function remove_event()
        {
        	l_dom_status_content.onclick = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_me_parent.style.position="relative";
                        l_me_parent.style.bottom="0px";

                        if(g_now_page == "home" || g_now_page == "playback")
                            j_status_content.addClass("status_content");
                        else if(g_now_page == "manager" || g_now_page == "alarm" || g_now_page == "timeline")
                            j_status_content.removeClass("status_content");
                        break;
                    }
                case "destroy"://删除该组件
                    {
                    	  remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_status_bar.");
            }
        }
        add_event();
    }
    function class_device_manager_content(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            // dom
            l_dom_options_product_info,
            l_dom_options_device_nickname,
            l_dom_options_network,
            l_dom_options_OSD,
            l_dom_options_SD_card,
            l_dom_options_storage_device,
            l_dom_options_alarm,
            l_dom_options_alarm_linkage,
            l_dom_options_time_date,
            l_dom_options_record_setting,
            l_dom_options_system_maintenance,
            l_dom_options_others,
            l_dom_options_password_page,
            l_dom_options_guest_password_page,
            l_dom_options_notification,
            l_dom_options_del_devices,
            // dom obj
            l_options_product_info_obj,
            l_options_device_nickname_obj,
            l_options_network_obj,
            l_options_OSD_obj,
            l_options_SD_card_obj,
            l_options_storage_device_obj,
            l_options_alarm_obj,
            l_options_alarm_linkage_obj,
            l_options_time_date_obj,
            l_options_record_setting_obj,
            l_options_system_maintenance_obj,
            l_options_others_obj,
            l_options_password_obj,
            l_options_guest_password_obj,
            l_options_notification_obj,
            l_options_delete_device_obj;

        function change_manager_content(obj)
        {
            switch(obj.option)
            {
               case "product_information":
                  {
                     l_dom_options_product_info = dom_create_child(l_me_parent, "div", "options_product_info");
                     l_options_product_info_obj = new class_options_product_info({parent:l_dom_options_product_info});
                     break;
                  }
               case "device_nickname":
                  {
                     l_dom_options_device_nickname = dom_create_child(l_me_parent, "div", "options_device_nickname");
                     l_options_device_nickname_obj = new class_options_device_nickname({parent:l_dom_options_device_nickname, on_event:on_event});
                     break;
                  }
               case "password_page":
                  {
                      l_dom_options_password_page = dom_create_child(l_me_parent, "div", "options_password_page");
                      l_options_password_obj  = new class_options_password_page({parent:l_dom_options_password_page, on_event:function(obj){return on_event(obj);}});
                     break;
                  }
               case "guest_password_page":
                  {
                     l_dom_options_guest_password_page = dom_create_child(l_me_parent, "div", "options_guest_password_page");
                       l_options_guest_password_obj =new class_options_guest_password({parent:l_dom_options_guest_password_page, on_event:function(obj){return on_event(obj);}});
                        break;
                  }
               case "network":
                  {
                      l_dom_options_network = dom_create_child(l_me_parent, "div", "options_media_network");
                      l_options_network_obj = new class_options_network({parent:l_dom_options_network});
                      break;
                  }
               case "OSD":
                  {
                       l_dom_options_OSD = dom_create_child(l_me_parent, "div", "options_OSD");
                       l_options_OSD_obj = new class_options_OSD({parent:l_dom_options_OSD});
                       break;
                  }
               case "notification":
                  {
                       l_dom_options_notification = dom_create_child(l_me_parent,"div","options_notification");
                       l_options_notification_obj = new class_options_notification({parent:l_dom_options_notification});
                       break;
                  }
               case "SD_card":
                  {
                       l_dom_options_SD_card = dom_create_child(l_me_parent, "div", "options_SD_card");
                       l_options_SD_card_obj = new class_options_SD_card({parent:l_dom_options_SD_card});
                       break;
                  }
               case "storage_device":
                  {
                       l_dom_options_storage_device = dom_create_child(l_me_parent, "div", "options_storage_device");
                        l_options_storage_device_obj = new class_options_storage_device({parent:l_dom_options_storage_device});
                       break;
                  }
               case "alarm":
                  {
                        l_dom_options_alarm = dom_create_child(l_me_parent, "div", "options_alarm");
                        l_options_alarm_obj = new class_options_alarm({parent:l_dom_options_alarm,on_event:function(obj){return on_event(obj);}});
                        break;
                  }
               case "alarm_linkage":
                  {
            	        l_dom_options_alarm_linkage = dom_create_child(l_me_parent, "div", "options_alarm_linkage");
            	        l_options_alarm_linkage_obj=new class_options_alarm_linkage({parent:l_dom_options_alarm_linkage});
            	        break;
            	  }
               case "record_setting":
                  {
                        l_dom_options_record_setting = dom_create_child(l_me_parent, "div", "options_record_setting");
                        l_options_record_setting_obj =new class_options_record_setting({parent:l_dom_options_record_setting});
                        break;
                  }
               case "time_date":
                  {
                         l_dom_options_time_date = dom_create_child(l_me_parent, "div", "options_time_date");
                         l_options_time_date_obj = new class_options_time_date({parent:l_dom_options_time_date});
                        break;
                  }
               case "system_maintain":
                  {
                        l_dom_options_system_maintenance = dom_create_child(l_me_parent, "div", "options_system_maintenance");
                        l_options_system_maintenance_obj = new class_options_system_maintenance({parent:l_dom_options_system_maintenance});
                        break;
                  }
               case "others":
                  {
                        l_dom_options_others = dom_create_child(l_me_parent, "div", "options_others");
                        l_options_others_obj = new class_options_others({parent:l_dom_options_others});
                        break;
                  }
               case "del_dev":
                  {
                  	    l_dom_options_del_devices = dom_create_child(l_me_parent, "div", "delete_device");
                  	    l_options_delete_device_obj =new class_options_delete_device({parent:l_dom_options_del_devices});
                  	    break;
                  }
            }
        }
        function options_destroy(obj)                   //g_select_device_ipc == "none" did not create but select_device_ipc may change
        {
            if(obj.option == "product_information" && l_options_product_info_obj)
            {
                l_options_product_info_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_product_info);
                l_dom_options_product_info = null;
                l_options_product_info_obj = null;
            }
            else if(obj.option == "device_nickname" && l_options_device_nickname_obj)
            {
                l_options_device_nickname_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_device_nickname);
                l_dom_options_device_nickname = null;
                l_options_device_nickname_obj = null;
            }
            else if(obj.option=="password_page" && l_options_password_obj)
            {
                l_options_password_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_password_page);
                l_dom_options_password_page=null;
                l_options_password_obj =null;
            }
            else if(obj.option=="guest_password_page" && l_options_guest_password_obj)
            {
                l_options_guest_password_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_guest_password_page);
                l_dom_options_guest_password_page = null;
                l_options_guest_password_obj  = null;
            }
            else if(obj.option == "notification" && l_options_notification_obj)
            {
                l_options_notification_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_notification);
                l_dom_options_notification = null;
                l_options_notification_obj = null;
            }
            else if(obj.option == "network" && l_options_network_obj)
            {
                l_options_network_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_network);
                l_dom_options_network = null;
                l_options_network_obj = null;
            }
            else if(obj.option == "OSD" && l_options_OSD_obj)
            {
                l_options_OSD_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_OSD);
                l_dom_options_OSD = null;
                l_options_OSD_obj = null;
            }
            else if(obj.option == "SD_card" && l_options_SD_card_obj)
            {
                l_options_SD_card_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_SD_card);
                l_dom_options_SD_card = null;
                l_options_SD_card_obj = null;
            }
            else if(obj.option == "storage_device" && l_options_storage_device_obj)
            {
                l_options_storage_device_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_storage_device);
                l_dom_options_storage_device = null;
                l_options_storage_device_obj = null;
            }
            else if(obj.option == "alarm" && l_options_alarm_obj)
            {
                l_options_alarm_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_alarm);
                l_dom_options_alarm = null;
                l_options_alarm_obj = null;
            }
            else if(obj.option == "alarm_linkage" && l_options_alarm_linkage_obj)
            {
                l_options_alarm_linkage_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_alarm_linkage);
                l_dom_options_alarm_linkage = null;
                l_options_alarm_linkage_obj = null;
            }
            else if(obj.option == "record_setting" && l_options_record_setting_obj)
            {
                l_options_record_setting_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_record_setting);
                l_dom_options_record_setting = null;
                l_options_record_setting_obj = null;
            }
            else if(obj.option == "time_date" && l_options_time_date_obj)
            {
                l_options_time_date_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_time_date);
                l_dom_options_time_date = null;
                l_options_time_date_obj = null;
            }
            else if(obj.option == "system_maintain" && l_options_system_maintenance_obj)
            {
                l_options_system_maintenance_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_system_maintenance);
                l_dom_options_system_maintenance = null;
                l_options_system_maintenance_obj = null;
            }
            else if(obj.option == "others" && l_options_others_obj)
            {
                l_options_others_obj.ctrl({type:"destroy"});
                l_me_parent[s_removeChild](l_dom_options_others);
                l_dom_options_others = null;
                l_options_others_obj = null;
            }
            else if(obj.option == "del_dev" && l_options_delete_device_obj)
            {
            	  l_options_delete_device_obj.ctrl({type:"destory"});
            	  l_me_parent[s_removeChild](l_dom_options_del_devices);
            	  l_dom_options_del_devices = null;
            	  l_options_delete_devices_obj = null;
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        if(l_options_product_info_obj)
                            l_options_product_info_obj.ctrl(obj);
                        else if(l_options_device_nickname_obj)
                            l_options_device_nickname_obj.ctrl(obj);
                        else if(l_options_network_obj)
                            l_options_network_obj.ctrl(obj);
                        else if(l_options_OSD_obj)
                            l_options_OSD_obj.ctrl(obj);
                        else if(l_options_SD_card_obj)
                            l_options_SD_card_obj.ctrl(obj);
                        else if(l_options_storage_device_obj)
                        		l_options_storage_device_obj.ctrl(obj);
                        else if(l_options_alarm_obj)
                            l_options_alarm_obj.ctrl(obj);
                        else if(l_options_alarm_linkage_obj)
                            l_options_alarm_linkage_obj.ctrl(obj);
                        else if(l_options_record_setting_obj)
                            l_options_record_setting_obj.ctrl(obj);
                        else if(l_options_time_date_obj)
                            l_options_time_date_obj.ctrl(obj);
                        else if(l_options_system_maintenance_obj)
                            l_options_system_maintenance_obj.ctrl(obj);
                        else if(l_options_others_obj)
                            l_options_others_obj.ctrl(obj);
                        break;
                    }
                case "options_destroy":
                    {
                        options_destroy(obj.data);
                        break;
                    }
                case "change_manager_content":
                    {
                        change_manager_content(obj.data);
                        break;
                    }
                case "select_net":
                    {
                        if(l_options_network_obj)
                            l_options_network_obj.ctrl(obj);
                        break;
                    }
                case "destroy":
                    {
                        options_destroy(obj.data);
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_device_manager_content.");
            }
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "change_device_name":
                case "Refresh_devs":
                    {
                        l_parent_callback(obj);
                        break;
                    }
                case "delete_ipc":
                    {
                    	  l_parent_callback(obj);
                    	  break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_device_manager_content.");
            }
        }
    }
    function class_alarm_cntr(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_alarm_page_obj,
            l_dom_alarm_page = dom_create_child(l_me_parent, "div", "alarm_page");
            l_dom_alarm_page[s_style][s_cssText] = "width:" + (l_me_parent.offsetWidth - g_panel_box_all_w) + "px;height:" + (l_me_parent.offsetHeight * 0.9) + "px;"
            + "padding-top:" + (l_me_parent.offsetHeight * 0.05) + "px;padding-bottom:" + (l_me_parent.offsetHeight * 0.05) + "px";

        l_alarm_page_obj = new class_alarm_page({parent:l_dom_alarm_page, on_event:on_event});

        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_alarm_page.style.width = l_me_parent.offsetWidth - g_panel_box_all_w + "px";
                        l_dom_alarm_page.style.height = (l_me_parent.offsetHeight*0.9) + "px";
                        l_dom_alarm_page.style.paddingTop = (l_me_parent.offsetHeight * 0.05) + "px";
                        l_dom_alarm_page.style.paddingBottom = (l_me_parent.offsetHeight * 0.05) + "px";
                        l_alarm_page_obj.ctrl(obj);
                        break;
                    }
                case "change_select_ipc":
                    {
                        l_alarm_page_obj.ctrl(obj);
                        break;
                    }
                case "refresh_alarm":
                    {
                        l_alarm_page_obj.ctrl(obj);
                        break;
                    }
                case "destroy":
                    {
                        l_alarm_page_obj.ctrl(obj);
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_alarm_cntr.");
            }
        }
        function on_event(obj)
        {
            switch(obj.type)
            {
                case "delete_notif_info":
                    {
                        l_parent_callback(obj);
                        break;
                    }
                case "change_select_ipc":
                    {
                        l_alarm_page_obj.ctrl(obj);
                        break;
                    }
                case "refresh_menu":
                    {
                       l_parent_callback(obj);
                       break;
                    }
                case "Refresh_devs":
                    {
                       l_parent_callback(obj);
                       break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_alarm_cntr.");
            }
        }
    }
    function class_alarm_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_notif_info,
            l_trol, l_tcell,
            l_get_event_count = -30,//表示信息界面每次查询30条记录
            l_search_time = 0X7fffffff,
            l_dom_log_search_list_content,
            l_dom_log_search_list_more,l_dom_log_search_list,
            l_dom_table_content,l_dom_alarm_list_content,
            l_big_image_items={},l_dom_log_search_option;

            l_me_parent[s_innerHTML]=
             "<div id='alarm_list_content' margin:0 auto;'>"
            +"<div id='table_content'>"
            + "<table id='alarm_search_content_tb' border='none'  cellspacing='0px' style='border-collapse:collapse'>"
            +  "<tr style='font-weight:700;border-top: 3px solid #444;'>"
            +      "<td style='width:75px;text-align:center'>"+mcs_index+"</td>"
            +      "<td style='width:170px;text-align:center'>" + mcs_image +"</td>"
            +      "<td style='width:220px;text-align:center'>" + mcs_time + "</td>"
            +      "<td style='width:220px;text-align:center'>" + mcs_messages + "</td>"
            +      "<td style='width:100px;text-align:center'>" + mcs_remark + "</td>"
            +  "</tr>"
            + "</table>"
            +"</div>"
            +"</div>";
            l_dom_table_content      = mx("#table_content");
            l_dom_alarm_list_content = mx("#alarm_list_content");
            l_dom_log_search_option  = dom_create_child(l_dom_alarm_list_content, "div", "log_search_option");
            l_dom_log_search_list    = dom_create_child(l_dom_alarm_list_content, "div", "log_search_list");

        l_dom_log_search_list_content = dom_create_child(l_dom_log_search_list, "div", "log_search_list_content");
        l_dom_log_search_list_more    = dom_create_child(l_dom_log_search_list, "div", "log_search_list_more", "standard_box_inner_style");
        l_dom_log_search_list_more[s_style][s_cssText]="width:790px;";
        l_dom_log_search_list_more[s_innerHTML] = mcs_more + 30 + mcs_bar;
        l_dom_alarm_list_content[s_style][s_cssText]="margin:0 auto;Height:"+(l_me_parent.offsetHeight-40)+"px;";
        //获取信息
        function ccm_message_search()
        {
           ms.send_msg("msgs_get",{sn:g_select_device_ipc,filter:"",start:l_search_time,counts:l_get_event_count},null,ccm_msg_get_ack);
        }
        //返回的信息
        function ccm_msg_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            counts=0;
            if(msg && msg.result == "")
            {
                var i, j, l_trol, l_tcell, ilength, jlength, str = "", now_params,sn = g_select_device_ipc;
                if(!msg.messages){
                	l_dom_table_content[s_innerHTML] =
                             "<table id='alarm_search_content_tb' border='none'  cellspacing='0px' style='border-collapse:collapse'>"
                             +  "<tr style='font-weight:700;border-top: 3px solid #444;'>"
                             +      "<td style='width:75px;text-align:cente'>"+mcs_index+"</td>"
                             +      "<td style='width:170px;text-align:cente'>" + mcs_image +"</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_time + "</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_messages + "</td>"
                             +      "<td style='width:100px;text-align:center'>" + mcs_remark + "</td>"
                             +  "</tr>"
                             +"</table>";
                  return;
                }
                if(msg.messages)
                {
                    if(l_search_time==0X7fffffff || sn != msg.messages[0].sn)
                    {
                       l_dom_table_content[s_innerHTML] =
                             "<table id='alarm_search_content_tb' border='none'  cellspacing='0px' style='border-collapse:collapse'>"
                             +  "<tr style='font-weight:700;border-top: 3px solid #444;'>"
                             +      "<td style='width:75px;text-align:cente'>"+mcs_index+"</td>"
                             +      "<td style='width:170px;text-align:cente'>" + mcs_image +"</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_time + "</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_messages + "</td>"
                             +      "<td style='width:100px;text-align:center'>" + mcs_remark + "</td>"
                             +  "</tr>"
                             +"</table>";
                    }
                    ilength = msg.messages.length;
                    for(i = 0; i <ilength; i++)
                    {
                         if(mx("#alarm_search_content_tb"+msg.messages[i].msg_id))continue;
                         l_trol = mx("#alarm_search_content_tb").insertRow(-1);
                         l_tcell = l_trol.insertCell(-1);
                         l_tcell.innerHTML = "<td>"+msg.messages[i].msg_id+"</td>";
                         l_tcell = l_trol.insertCell(-1);
                         if(msg.messages[i].p)
                         {
                             now_params=msg.messages[i].p;
                             if(mx("#alarm_search_content_tb"+msg.messages[i].msg_id))
                        	   {
                        	      continue;
                        	   }
                        	   for(j=0;j<now_params.length;j++)
                        	   {
                        		    if(now_params[j].n=="img_thumb_token")
                        		    {
                        			     if(now_params[j].v!=0)
                        			     {
                        			        l_tcell.innerHTML = "<td><div class='alarm_search_content_tb_class'  id='alarm_search_content_tb"+msg.messages[i].msg_id+"' style='width:100%;height:40px;text-align:center;' ></div></td>";
                        			     }
                        		    }
                        	      else if(now_params[j].n=="img_token" )
                        	      {
                        	         l_big_image_items["alarm_search_content_tb"+msg.messages[i].msg_id]={data:now_params[j].v};
                                }
                             }
                             if(l_tcell.innerHTML=="" || l_tcell.innerHTML==null)
                               l_tcell.innerHTML = "<td><div style='width:100%;height:40px;text-align:center;' id='alarm_search_content_tb"+msg.messages[i].msg_id+"'></div></td>";
                         }
                         else
                         {
                        	 l_tcell.innerHTML = "<td><div style='width:100%;height:40px;text-align:center;' id='alarm_search_content_tb"+msg.messages[i].msg_id+"'></div></td>";
                         }

                         l_tcell = l_trol.insertCell(-1);
                         l_tcell.innerHTML = "<td>" + (new Date(msg.messages[i].date * 1000).format("yyyy-MM-dd hh:mm:ss")) + "</td>";
                         l_tcell = l_trol.insertCell(-1);
                         l_tcell.innerHTML = "<td>" + log_comparison_table[msg.messages[i].type] + " " + (msg.messages[i].code!=""?log_comparison_table[msg.messages[i].code]:"") + "</td>"
                         l_tcell = l_trol.insertCell(-1);
                         l_tcell.innerHTML = "<td>&nbsp;</td>";
                    }
                    if(30<counts && l_search_time==0X7fffffff)
                    {
                        l_notif_info = g_notif_info["sn_" + g_select_device_ipc.toLowerCase()];
                        if(!l_notif_info)
                           l_notif_info = g_notif_info["sn_" + g_select_device_ipc.toUpperCase()];
                           l_search_time=l_notif_info.get_first().data.items.msg_id;
                    }else
                    {
                        l_search_time=msg.messages[msg.messages.length-1].msg_id;
                    }

                    function getImage(array_i)
                    {
                        if(!msg.messages[array_i])return;
                        if(msg.messages[array_i].p)
                        {
                          if(mx("#alarm_search_content_tb"+msg.messages[array_i].msg_id))
                          {
                             now_params=msg.messages[array_i].p;
                             var  image_mark=1;
                             for(j=0;j<now_params.length;j++)
                        	   {
                        	     if(now_params[j].n=="img_thumb_token" && now_params[j].v!=0 &&now_params[j].v!="")
                        	     {
                        	         image_mark=0;
                        	         if(mx("#alarm_search_content_tb"+msg.messages[array_i].msg_id)[s_innerHTML])
                        	         {
                        	              array_i++;
                        	              getImage(array_i);
                        	              break;
                        	         }
                        	         var Images = new Image();
                        	         Images.src= window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_account.create_nid()+"&dsess_sn="+sn+"&dtoken="+now_params[j].v;
                        	         Images.width="80";
                        	         Images.height="40";

                        	         jQuery("#alarm_search_content_tb"+msg.messages[array_i].msg_id).append(Images);
                        	         Images.onload=function()
                        	         {
                        	            array_i++;
                        	            getImage(array_i);
                        	         }
                        	         Images.onerror=function()
                        	         {
                        	            array_i++;
                        	            getImage(array_i);
                        	         }
                        	         break;

                        	     }
                        	 }
                        	 if(image_mark)
                        	 {
                        	    array_i++;
                        	    getImage(array_i);
                        	 }
                          }
                        }
                    }
                    getImage(0);
                }
                if(msg.bound==0)
                {
                    l_dom_log_search_list_more.style.display = "block";
                    l_dom_log_search_list_more.onclick = function() {
                        ccm_message_search();
                        l_dom_log_search_list_more.onclick = "";
                    };
                }
                else
                {
                    l_dom_log_search_list_more.style.display = "none";
                }
                var td_class= mx(".alarm_search_content_tb_class")
                for(i=0;i<td_class.length;i++){
                    //信息界面 每项信息 的图片点击事件
                    td_class[i].onclick=function(){
                       if(l_big_image_items[this.id] &&  l_big_image_items[this.id].data !="")
                       {
                           var urls= window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+sn+"&dtoken="+l_big_image_items[this.id].data;
                           //创建大预览图
                           create_big_image_preview_div({resolution_w:640, resolution_h:360, uri:urls});
                       }
                    }
                }
                jQuery(l_dom_alarm_list_content).mCustomScrollbar("update");
            }
            else
            {
                log("error:ccm_message_search_ack return Result error in class_options_log.");
            }
        }
        function add_event()
        {
        	  jQuery(l_dom_alarm_list_content).mCustomScrollbar();
            jQuery(l_dom_alarm_list_content).mCustomScrollbar("scrollTo","bottom");
            l_dom_log_search_list_more.onmouseover=function()
            {
               l_dom_log_search_list_more.style.fontSize="16px";
               if(g_hostname=="www.luxcamapp.eu")
               {
                   l_dom_log_search_list_more.style.color="red";
               }
               else
               {
                   l_dom_log_search_list_more.style.color="rgb(128, 165, 45)";
               }
            }
            l_dom_log_search_list_more.onmouseout=function()
            {
               l_dom_log_search_list_more.style.fontSize="14px";
               l_dom_log_search_list_more.style.color="#bbb";
            }
        }
        function remove_event()
        {
            l_dom_log_search_list_more.onclick = "";
        }
        //信息界面 创建预览图
        function create_big_image_preview_div(obj)
        {
            var correct_width, correct_height, prop,
                snapshot_preview_div = mx("#snapshot_preview_div"),
                snapshot_preview_inner = mx("#snapshot_preview_inner"),
                snapshot_preview_content = mx("#snapshot_preview_content");

            correct_width = obj.resolution_w;
            correct_height = obj.resolution_h;
            if(correct_width > g_web.offsetWidth * 8 / 10)
            {
                correct_width = parseInt(g_web.offsetWidth * 8 / 10);
                correct_height = parseInt(correct_width * obj.resolution_h / obj.resolution_w);
            }
            if(correct_height > g_web.offsetHeight * 8 / 10)
            {
                correct_height = parseInt(g_web.offsetHeight * 8 / 10);
                correct_width = parseInt(correct_height * obj.resolution_w / obj.resolution_h);
            }
            if(snapshot_preview_content)
            {
                snapshot_preview_div.style.width = correct_width + 13*2 + "px";
                snapshot_preview_div.style.height = correct_height + 13*2 + "px";
                snapshot_preview_div.style.left = ((g_web.offsetWidth - correct_width) / 2) + "px";
                snapshot_preview_div.style.top = ((g_web.offsetHeight - correct_height) / 2)  + "px";
                snapshot_preview_content.src = obj.uri;
            }
            else
            {
                var snapshot_preview_close;

                snapshot_preview_div = dom_create_child(page, "div", "snapshot_preview_div");
                snapshot_preview_div[s_style][s_cssText] = "width:" + (correct_width + 13*2) + "px;height:" + (correct_height + 13*2) + "px;"
                    + "left:" + ((g_web.offsetWidth - correct_width) / 2) + "px;"
                    + "top:" + ((g_web.offsetHeight - correct_height) / 2)  + "px;position:absolute;z-index:50";

                snapshot_preview_inner = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_inner");
                snapshot_preview_inner[s_style][s_cssText] = "width:" + (correct_width + 13) + "px;height:" + (correct_height + 13) + "px;"
                    + "left:6px;top:6px;position:relative;";

                snapshot_preview_content = dom_create_child(snapshot_preview_inner, "img", "snapshot_preview_content");
                snapshot_preview_content[s_style][s_cssText] = "width:" + correct_width + "px;height:" + correct_height + "px;"
                    + "left:7px;top:7px;position:relative;";
                snapshot_preview_content.src = obj.uri;

                snapshot_preview_close = dom_create_child(snapshot_preview_div, "div", "snapshot_preview_close");
                snapshot_preview_close[s_style][s_cssText] = "position:absolute;right:0;top:0;cursor:pointer;";
                background_img_set(snapshot_preview_close, sub_img_close0);
                //预览图关闭按键事件
                snapshot_preview_close.onclick = function() {
                    snapshot_preview_close.onclick = "";
                    snapshot_preview_close.onmouseover = "";
                    snapshot_preview_close.onmouseout = "";
                    snapshot_preview_div[s_innerHTML] = "";
                    page[s_removeChild](snapshot_preview_div);
                    snapshot_preview_div = null;
                };
                snapshot_preview_close.onmouseover = function() {
                    background_img_change_pos(this, sub_img_close1);
                };
                snapshot_preview_close.onmouseout = function() {
                    background_img_change_pos(this, sub_img_close0);
                };
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        l_dom_alarm_list_content[s_style][s_cssText]="margin:0 auto;Height:"+(l_me_parent.offsetHeight-40)+"px;";
                        jQuery(l_dom_alarm_list_content).mCustomScrollbar("update");
                        break;
                    }
                case "refresh_alarm"://mmq返回刷新alarm
                    {
                    	  //信息界面已存在该项数据
                        if(mx("#alarm_search_content_tb"+obj.data.item.items.msg_id))
                        {
                             mx("#alarm_search_content_tb"+obj.data.item.items.msg_id)[s_innerHTML]="";
                             if(obj.data.item.items!=""){
                                if(obj.data.item.items.p)
                                {
                                   var Images =new Image();
                                    for(j=0;j<obj.data.item.items.p.length;j++)
                                    {
                        	            if(obj.data.item.items.p[j].n=="img_thumb_token" &&  obj.data.item.items.p[j].v != "" && obj.data.item.items.p[j].v != 0)
                        	            {
                        	              Images.src=window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+obj.data.item.items.sn+"&dtoken="+obj.data.item.items.p[j].v;
                                        Images.width=80;
                                        Images.height=40;
                                        break;
                                      }
                                    }
                                  jQuery("#alarm_search_content_tb"+obj.data.item.items.msg_id).append(Images);
                                }
                                //删除该项的所有绑定事件
                               jQuery("#alarm_search_content_tb"+obj.data.item.items.msg_id).unbind();
                               //给该项添加点击事件
                               mx("#alarm_search_content_tb"+obj.data.item.items.msg_id).onclick=function(){
                                   if(!obj.data.item.items.p)return;
                                   else{
                                      for(i=0;i<obj.data.item.items.p.length;i++)
                                      {
                                         if(obj.data.item.items.p[i].n == "img_token")
                                         {
                                            var urls= window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_account.create_nid()+"&dsess_sn="+obj.data.item.items.sn+"&dtoken="+obj.data.item.items.p[i].v;
                                            create_big_image_preview_div({resolution_w:640, resolution_h:360, uri:urls});
                                         }
                                      }
                                  }
                               }
                             }
                            return;
                        }
                        //信息列表插入一行
                        l_trol = mx("#alarm_search_content_tb").insertRow(1);
                        //新插入的该行插入一列
                        l_tcell = l_trol.insertCell(-1);
                        l_tcell.innerHTML = "<td>"+obj.data.item.items.msg_id+"</td>";
                        l_tcell = l_trol.insertCell(-1);
                        l_tcell.innerHTML = "<td><div id='alarm_search_content_tb"+obj.data.item.items.msg_id+"'style='height:40px;'></div></td>";
                        if(obj.data.item.items.p)
                        {
                           var Images =new Image();
                           for(j=0;j<obj.data.item.items.p.length;j++)
                           {
                        	   if(obj.data.item.items.p[j].n=="img_thumb_token" &&  obj.data.item.items.p[j].v!="" && obj.data.item.items.p[j].v != 0)
                        	   {
                               Images.src = window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+obj.data.item.items.sn+"&dtoken="+obj.data.item.items.p[j].v;
                               Images.width=80;
                               Images.height=40;
                             }
                           }
                           jQuery("#alarm_search_content_tb"+obj.data.item.items.msg_id).append(Images);
                        }
                        l_tcell = l_trol.insertCell(-1);
                        l_tcell.innerHTML = "<td>" + (new Date(obj.data.item.items.date * 1000).format("yyyy-MM-dd hh:mm:ss")) + "</td>";
                        l_tcell = l_trol.insertCell(-1);
                        l_tcell.innerHTML = "<td>" + log_comparison_table[obj.data.item.items.type] + " " + log_comparison_table[obj.data.item.items.code] + "</td>";
                        l_tcell = l_trol.insertCell(-1);
                        l_tcell.innerHTML = "<td>&nbsp;</td>";
                        if(obj.data.item.display)
                            l_trol.style.color = "#868686";
                        else
                            obj.data.item.display = 1;

                        mx("#alarm_search_content_tb"+obj.data.item.items.msg_id).onclick=function(){
                             if(!obj.data.item.items.p)return;
                             else{
                                for(i=0;i<obj.data.item.items.p.length;i++)
                                {
                                   if(obj.data.item.items.p[i].n=="img_token"){
                                       var urls= window.location.protocol+"//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_account.create_nid()+"&dsess_sn="+obj.data.item.items.sn+"&dtoken="+obj.data.item.items.p[i].v;
                                       create_big_image_preview_div({resolution_w:640, resolution_h:360, uri:urls});
                                   }
                                }
                             }
                        };
                        jQuery(l_dom_alarm_list_content).mCustomScrollbar("update");
                        break;
                    }
                case "change_select_ipc":
                    {
                        //清空原本 信息
                        l_dom_table_content[s_innerHTML] =
                             "<table id='alarm_search_content_tb' border='none'  cellspacing='0px' style='border-collapse:collapse'>"
                             +  "<tr style='font-weight:700;border-top: 3px solid #444;'>"
                             +      "<td style='width:75px;text-align:cente'>"+mcs_index+"</td>"
                             +      "<td style='width:170px;text-align:cente'>" + mcs_image +"</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_time + "</td>"
                             +      "<td style='width:220px;text-align:center'>" + mcs_messages + "</td>"
                             +      "<td style='width:100px;text-align:center'>" + mcs_remark + "</td>"
                             +  "</tr>"
                             +"</table>";
                        l_search_time = 0X7fffffff;
                        l_dom_log_search_list_more.style.display = "none";
                        ccm_message_search();
                        break;
                    }
                case "destroy":
                    {
                    	  l_dom_log_search_list.style.height = l_me_parent.parentNode.offsetHeight - l_dom_log_search_option.offsetHeight + "px";
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_alarm_page.");
            }
        }
        add_event();
        if(g_select_device_ipc){
          ccm_message_search();
        }
    }
    function class_timeline_cntr(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_timeline_box_obj,
            l_b64_str_array=[],
            l_canvas_dom_array=[],
            l_canvas_index=0,
            l_ctx, l_img_data,
            l_timer = l_init_timer = null,
            l_u8_data,l_last_buffer,
            l_nal, l_nal_len,
            l_start, l_frame,
            l_loop_num=0,
            l_pos = g_view_link.pos(g_select_device_ipc) + 1,
            l_dom_timeline_page = dom_create_child(l_me_parent, "div", "timeline_page"),
            l_dom_view_page = dom_create_child(l_dom_timeline_page, "div", "view_page"),
            l_view_page_obj,l_dom_box_dev_list,
            l_dom_timeline_box = dom_create_child(l_dom_timeline_page, "div", "timeline_box"),
            l_dom_box_dev_list=dom_create_child(l_dom_timeline_page, "div", "box_dev_list");


        l_dom_timeline_page.style[s_cssText]  = "width:" + (l_me_parent.offsetWidth - g_panel_box_all_w) + "px;height:" + l_me_parent.offsetHeight + "px;";
        l_dom_view_page.style[s_cssText] = "width:" + (l_me_parent.offsetWidth-g_panel_box_all_w)* 0.8 + "px;position: relative;"
            + "height:" + (l_me_parent.offsetHeight - g_control_box_h)*0.84 + "px;left:" + g_panel_box_all_w*(g_browser_IE67_version?0:0.5) + "px;";


        l_view_page_obj = new class_view_page({parent:l_dom_view_page, type:"create", on_event:function(obj){return on_event(obj);}});
        adjust_screen();

        l_timeline_box_obj = new class_timeline_box({parent:l_dom_timeline_box, on_event:function(obj){return on_event(obj);}});


        function adjust_screen()
        {
            setTimeout(function(){
                mx("#view_page_bg").style.top=(g_browser_IE67_version?0:-12)+"px";
                //mx("#inner_windows_cont").style.marginTop = "0px";
                if(g_domain_oems_vimtag)
                {
		                mx("#inner_windows_cont").style.width = g_player_width + "px";
		                mx("#inner_windows_cont").style.height = g_player_height + "px";
                }
            },100);

            l_dom_timeline_box[s_style][s_cssText] =  "width:"+(l_dom_view_page.clientWidth<820?820:l_dom_view_page.clientWidth)+"px;height:130px;position: relative;"
                + "top:"+(g_browser_IE67_version?0:-35)+"px;left:" + (g_panel_box_all_w*(g_browser_IE67_version?0:0.5)) + "px;";
            l_dom_box_dev_list[s_style][s_cssText] ="left:"+(g_panel_box_all_w*(g_browser_IE6_version?0:0.5)+(g_browser_IE7_version?30:0))+"px;width:"+l_dom_view_page.clientWidth+"px;height:"+(l_dom_view_page.clientHeight-5)+"px;";
        }
        function create_ipc(obj)
        {
          delete_ipc(obj);
          if(!g_playback_link.add(obj.node_sn))
          {
             g_is_play_back = 1;
             var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
             l_view_page_obj.ctrl({type:"add_playback_ipc", data:{inner_window_info:inner_window_info, node_sn:obj.node_sn}});
          }
        }
        function delete_ipc(obj)
        {
            g_playback_link.del(obj.node_sn);
            g_is_play_back = 0;
            var inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:1}});
            l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
        }
        function play_playback_handle(obj)
        {
            var between_milliseconds = (l_search_end_date - l_search_begin_date);
            var exchange_rate = l_playback_slider_max_range / (between_milliseconds / 1000),
                current_value,current_time, next_time;

            current_value = parseInt(mx(".fd-slider-handle", mx("#fd-slider-playback_slider"))[0].getAttribute("aria-valuenow"), 10);
            l_passed_second = 1;
            l_starting_line = current_value;
            if(current_value < l_playback_slider_max_range)
            {
                current_time = get_current_date({value:current_value});
                l_view_page_obj.ctrl({type:"seek_ipc", data:{type:"time", date:current_time.offset_date, inner_window_info:obj.inner_window_info}});
                next_time = get_current_date({value:current_time.offset_value + exchange_rate});
                fdSliderController.increment("playback_slider", next_time.offset_value - current_time.offset_value);
                if(l_play_pause_timer)
                    clearInterval(l_play_pause_timer);
                l_play_pause_timer = setInterval(
                    function() {
                        ++l_passed_second;
                        current_value = parseInt(mx(".fd-slider-handle", mx("#fd-slider-playback_slider"))[0].getAttribute("aria-valuenow"), 10);
                        if(current_value < l_playback_slider_max_range)
                        {
                            next_time = get_current_date({value:l_starting_line + l_passed_second * exchange_rate});
                            if(next_time.state == "jump")
                            {
                                l_passed_second = 0;
                                l_starting_line = next_time.offset_value;
                                l_view_page_obj.ctrl({type:"seek_ipc", data:{type:"time", date:next_time.offset_date, inner_window_info:obj.inner_window_info}});
                            }
                            if(!next_time.offset_date)
                            {
                                l_passed_second = 0;
                                clearInterval(l_play_pause_timer);
                                l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                                l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                                fdSliderController.increment("playback_slider", l_playback_slider_max_range);
                                return;
                            }
                            if(Math.round(next_time.offset_value) == l_playback_slider_max_range)
                            {
                                l_passed_second = 0;
                                clearInterval(l_play_pause_timer);
                                l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                                l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                                fdSliderController.increment("playback_slider", l_playback_slider_max_range);
                            }
                            else
                            {
                                fdSliderController.increment("playback_slider", next_time.offset_value - current_value);
                            }
                        }
                        else
                        {
                            l_passed_second = 0;
                            clearInterval(l_play_pause_timer);
                            l_playback_control_box_obj.ctrl({type:"adjust_play_button_state", data:{playback_state:"pause"}});
                            l_view_page_obj.ctrl({type:"pause_ipc", data:{inner_window_info:obj.inner_window_info}});
                        }
                    }, 1000);
                    //l_view_page_obj.ctrl({type:"play_ipc", data:{inner_window_info:obj.inner_window_info}});
                return 0;
            }
            else
            {
                return -1;
            }
        }
        function refresh_box_device_list(obj)
        {
            l_dom_box_dev_list.style.display="block";
            for(var i=0;i<obj.ipcs.length;i++)
            {
                //var url = window.location.protocol + "//" + g_server_device + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid="+mcloud_agent.create_nid()+"&dsess_sn="+obj.ipcs[i].sn+"&dtoken=p3_xxxxxxxxxx";
                //var url ="./imgs/pic.png";style='background-image: url("+url+")'
                l_dom_box_dev_list[s_innerHTML]+=
                    "<div class='dev_list_img' >"
                        +"<img class='device_pic' style='display:"+((g_old_browser_version||(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9."))?'none':'block')+"'></img>"
                        +"<div class='dev_nick'>"
                            +"<div class='dev_state "+(obj.ipcs[i].online?"online":"offline")+"'></div>"
                            +"<span>"+obj.ipcs[i].sn+"</span>"
                        +"</div>"
                    +"</div>";
            }
            for(var i=0;i<obj.ipcs.length;i++)
            {
                mx(".dev_list_img")[i].onclick=function()
                {
                    l_dom_box_dev_list.style.display="none";
                    on_event({type:"device_list_click",dev_sn:mx("/span", this)[0].innerHTML});
                }
            }

            pic_base64_get(obj.ipcs);
        }
        function pic_base64_get(obj)
        {
            l_b64_str_array=[];
            l_canvas_dom_array=[];
            l_canvas_index=0;
            var c_index=0;
            for(var i=0;i<obj.length;i++)
            {
                var token=obj[i].sn+"_p3_"+Math.pow(2,31) +"_"+Math.pow(2,31);
                ms.send_msg("pic_base64_get",{sn:g_select_device_ipc,token:token,flag:1},{index:i},
                    function(msg,ref)
                    {
                        if( msg && !msg.result && msg.frame)
                        {
                            l_b64_str_array[ref.index]=msg.frame;
                            c_index++;
                            if(c_index>=obj.length)
                            {
                                l_canvas_dom_array=mx("/img",l_dom_box_dev_list);
                                if( !g_old_browser_version&& !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
                                    mjme_init(l_b64_str_array[0],l_canvas_dom_array[0]);
                                }

                            }
                        }

                    }
                );
            }
        }
        function mjme_on_decode(buf, width, height,img_dom) {
                var sbuf="";
                for (var i = 0; i < buf.length; i++) {
                              sbuf+=buf[i];
                        }
                
                if (!buf /*|| sbuf == l_last_buffer*/) {
                  return;
                }
                function image(w, h) {
                            this.header = '';
                            this.data = Array();
                            this.width = w;
                            this.height = h;
                }

                // Convert a value to a little endian hexadecimal value
                function getLittleEndianHex(value) {
                    var result = [];

                    for (var bytes = 4; bytes > 0; bytes--) {
                        result.push(String.fromCharCode(value & 255));
                        value >>= 8;
                    }

                    return result.join('');
                }

                // Set the required bitmap header
                function setImageHeader(img)
                {
                    var numFileBytes = getLittleEndianHex(img.width * img.height);
                    var w = getLittleEndianHex(img.width);
                    var h = getLittleEndianHex(img.height);

                    img.header =
                        'BM' +                      // Signature
                        numFileBytes +              // size of the file (bytes)*
                       '\x00\x00' +                 // reserved
                       '\x00\x00' +                 // reserved
                       '\x36\x00\x00\x00' +         // offset of where BMP data lives (54 bytes)
                       '\x28\x00\x00\x00' +         // number of remaining bytes in header from here (40 bytes)
                       w +                          // the width of the bitmap in pixels*
                       h +                          // the height of the bitmap in pixels*
                       '\x01\x00' +                 // the number of color planes (1)
                       '\x20\x00' +                 // 32 bits / pixel
                       '\x00\x00\x00\x00' +         // No compression (0)
                       '\x00\x00\x00\x00' +         // size of the BMP data (bytes)*
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - horizontal resolution
                       '\x13\x0B\x00\x00' +         // 2835 pixels/meter - the vertical resolution
                       '\x00\x00\x00\x00' +         // Number of colors in the palette (keep 0 for 32-bit)
                       '\x00\x00\x00\x00';          // 0 important colors (means all colors are important)
                }

                // Fill a rectangle
                function fillRectangle(img,color) {
                    /*for (var ny = y; ny < y + h; ny++) {
                        for (var nx = x; nx < x + w; nx++) {
                          var pix_data=String.fromCharCode(color[nx],color[nx],color[nx],255);
                            img.data[ny * img.width + nx] = pix_data;
                        }
                        }*/
                        for (var i = 0; i < color.length; i++) {
                          var pix_data=String.fromCharCode(color[i],color[i],color[i],255);
                            img.data[i] = pix_data;
                        }

                }

                // Flip image vertically
                function flipImage(img) {
                    var newImgData = new Array();

                    for(var x = 0; x < img.width; x++) {
                        for(var y = 0; y < img.height; y ++) {
                            var ny = img.height - 1 - y;
                            newImgData[(ny * img.width) + x] = img.data[(y * img.width) + x];
                        }
                    }

                    img.data = newImgData;
                }

                // Main draw function
                function drawImage() {
                    var img = new image(width, height);

                    setImageHeader(img);

                    fillRectangle(img,buf);

                    // Flip image vertically
                    flipImage(img);

                    // If window.btoa is supported, use it since it's often faster
                    if(window.btoa != undefined) {
                        return 'data:image/bmp;base64,' + btoa(img.header + img.data.join(""));
                    }
                    // If not, use our base64 library
                    else {
                        return 'data:image/bmp;base64,' + jQuery.base64.encode(img.header + img.data.join(""));
                    }
                }
                l_last_buffer = sbuf;
               img_dom.src=drawImage();
            }
            function mjme_init(b64_str,img_dom)
            { 
                l_nal = null;
                g_avc.clearBuffer();
                l_start=l_frame=l_loop_num=l_nal_len=0;
                g_avc.onPictureDecoded = mjme_on_decode;
                if(!typeof(l_timer)=="undefined"){ clearTimeout(l_timer); l_timer = null; };

                var m_data=mcodec.b64_2_binary(b64_str);
                if(!m_data) return;
                l_u8_data = new Uint8Array(m_data);
                l_nal = new Uint8Array(0x1000000);
                l_nal_len = 0;
                for(var i=0;i<3;i++)
                {
                    l_timer = setTimeout(mjme_frame(img_dom), 10);
                }
            }
            function mjme_frame(img_dom)  //will the H264 decorder to BMP
            {
                var i;
                l_frame = 0;
                l_loop_num++;
                
                if(!l_u8_data)return;
                for(i = l_start; i < l_u8_data.length;)
                {
                    if((0 != l_u8_data[i]) || (0 != l_u8_data[i+1]) || (0 != l_u8_data[i+2]) || (1 != l_u8_data[i+3]))
                    {
                        l_nal[l_nal_len++] = l_u8_data[i++];
                        continue;
                    }
                    if(l_nal_len)
                    {
                        g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    }
                    i += 4;
                    l_start = i;
                    l_nal_len = 0;
                    if(l_frame)
                    {
                        break;
                    }
                }
                if(l_nal_len)
                {
                    g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),img_dom);
                    if(l_loop_num>2)
                    {
                        if((l_canvas_index+1)<l_b64_str_array.length&&(l_canvas_index+1)<l_canvas_dom_array.length)
                        {
                            setTimeout(function(){
                                l_canvas_index++;
                                mjme_init(l_b64_str_array[l_canvas_index],l_canvas_dom_array[l_canvas_index]);
                            },600);
                        }
                    }
                }
                if((0 == l_frame) && (l_start < l_u8_data.length))
                {
                    l_start = 0;
                    l_nal_len = 0;
                }
            }

        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":  //屏幕自适应
                    {
                        l_dom_timeline_page.style[s_cssText]  = "width:" + (l_me_parent.offsetWidth - g_panel_box_all_w) + "px;height:" + l_me_parent.offsetHeight + "px;";
                        var width_base=(l_me_parent.offsetWidth-g_panel_box_all_w)* 0.9;
                        width_base=width_base>1000?1000:width_base;
                        var heigth_base=(l_me_parent.offsetHeight - g_control_box_h)*0.84;
                        heigth_base=heigth_base>550?550:heigth_base;
                        var left_base=g_panel_box_all_w*(g_browser_IE67_version?0:0.5);
                        left_base=width_base<1000?20:left_base;
                        l_dom_view_page[s_style][s_cssText] = "width:" + width_base + "px;position: relative;"
                            + "height:" + heigth_base + "px;left:" + left_base + "px;";
                        if(l_me_parent.offsetWidth<1200)
                        {
                            //jQuery(".menu_page_li")[4].click();
                            /*var current_data=l_timeline_box_obj.ctrl({type:"get_data"});
                            l_timeline_box_obj.ctrl({type:"destroy"});
                            l_me_parent[s_removeChild](l_timeline_box_obj);
                            l_timeline_box_obj = new class_timeline_box({parent:l_dom_timeline_box, on_event:function(obj){return on_event(obj);}});
                            l_dom_timeline_box[s_style][s_cssText] =  "width:820px;height:150px;position: relative;"
                                + "top:-30px;left:" + left_base + "px;";
                            l_timeline_box_obj.ctrl({type:"update",data:current_data});*/
                        }
                        else
                        {
                            l_dom_timeline_box[s_style][s_cssText] =  "width:1000px;height:150px;position: relative;"
                                + "top:"+(g_browser_IE67_version?0:-30)+"px;left:" + left_base + "px;";
                        }
                        l_dom_box_dev_list[s_style][s_cssText] ="left:"+(left_base+(g_browser_IE7_version?100:0))+"px;width:"+width_base+"px;height:"+(heigth_base-5)+"px;display:"+l_dom_box_dev_list.style.display;
                        l_view_page_obj.ctrl(obj);
                        mx("#view_page_bg").style.top=(g_browser_IE67_version?0:-12)+"px";
                        mx("#inner_windows_cont").style.width = l_dom_view_page.clientWidth-(g_browser_IE6_version?54:24) + "px";
                        mx("#inner_windows_cont").style.height = l_dom_view_page.clientHeight-(g_browser_IE6_version?64:24) + "px";
                        //adjust_screen();

                        jQuery(l_dom_timeline_page).mCustomScrollbar("update");
                        break;
                    }
                case "change_select_ipc"://切换设备
                    {
                        l_timeline_box_obj.ctrl(obj);
                        break;
                    }
                case "timeline_rect_onclick":
                    {
                        if(g_is_play_back)
                        {
                           delete_ipc({node_sn:g_select_device_ipc});
                        }
                        else
                        {
                           create_ipc({node_sn:g_select_device_ipc});
                        }
                        break;
                    }
                case "create_ipc":
                    {
                        create_ipc({node_sn:g_select_device_ipc});
                        break;
                    }
                case "delete_ipc":
                    {
                        delete_ipc({node_sn:g_select_device_ipc});
                        break;
                    }
                case "RecordingToken":
                    {
                       l_view_page_obj.ctrl(obj);
                       break;
                    }
                case "destroy":
                    {
                        delete_ipc({node_sn:g_select_device_ipc});
                        l_timeline_box_obj.ctrl(obj);
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_timeline_cntr.");
            }
        };
        function on_event(obj)
        {
            switch(obj.type)
            {

                case "create_ipc"://切换设备
                    {
                        create_ipc({node_sn:g_select_device_ipc});
                        break;
                    }
                case "delete_ipc"://切换设备
                    {
                        delete_ipc({node_sn:g_select_device_ipc});
                        break;
                    }
                case "RecordingToken"://选择的回放列表中的选择的回放项
                    {
                       l_view_page_obj.ctrl(obj);
                       break;
                    }
                case "play_playback_handle":
                    {
                        return play_playback_handle(obj.data);
                        break;
                    }
                case "refresh_box_device_list":
                    {
                        return refresh_box_device_list(obj.data);
                        break;
                    }
                case "device_list_click":
                    {

                        return l_timeline_box_obj.ctrl(obj);
                        break;
                    }
                case "device_list_status_change":
                    {
                        if(l_dom_box_dev_list)
                        l_dom_box_dev_list.style.display=obj.status?"block":"none";
                        break;
                    }
                case "destroy_box_dev_list":
                    {
                    	if(l_dom_box_dev_list)
                        l_dom_box_dev_list[s_innerHTML] = "";
                        break;
                    }
                case "speed":
                    {
                        break;
                    }
                default:
                    log("error:on_event's obj.type is not exist in class_timeline_cntr.");
            }
        }

        jQuery(l_dom_timeline_page).mCustomScrollbar();

    }
    function class_timeline_box(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_timeline_canvas,l_dom_view_range,
            l_dom_show_data_g,l_dom_timeline_context,
            l_dom_base_line_path,
            l_dom_current_pos_line,
            l_dom_zoom_div,l_dom_zoom_minutes,l_dom_zoom_hour,l_dom_zoom_day,
            l_dom_scroll_later,l_dom_scroll_earlier,
            l_dom_preview,l_dom_preview_pointer,
            l_dom_preview_pointer_shadow,
            l_dom_preview_slide,l_dom_preview_event_array,
            l_dom_preview_right_slider,l_dom_preview_left_slider,
            l_calendar_table_tds=[],l_date_infos=[],l_local_date_infos=[],
            l_local_segs= [],l_segs = [],l_local_alarm_segs=[],
            l_dom_calendar_scroll_earlier,l_dom_calendar_scroll_later,
            l_dom_calendar_table,l_dom_calendar_range,
            l_current_temp_date,l_current_temp_date_ms,
            l_each_grid_width,l_each_second_width,l_each_pixel_time,
            l_base_start_time,l_base_end_time,
            l_week_index=l_today_index=0,
            l_select_dev_sn,l_move_path_x,
            l_current_zoom,l_selected_time,
            l_selected_calendar_dom,
            l_current_selected_time_save,
            l_rect_pos_x,//mouseover rect offSetX
            l_is_preview_show,
            l_ctx, l_img_data,
            l_timer = null,l_u8_data,
            l_nal, l_nal_len,
            l_start, l_frame,
            l_loop_num=l_canvas_index=0,
            l_last_pos_in_canvas_x=0,
            l_b64_str_array,l_canvas_dom_array,
            l_currentDate = new Date(),
            l_current_year=l_currentDate.getFullYear(),
            l_current_month= l_currentDate.getMonth() + 1,
            l_current_day = l_currentDate.getDate(),
            l_hour = l_currentDate.getHours(),
            l_minute = l_currentDate.getMinutes(),
            l_second = l_currentDate.getSeconds(),
            l_type=mcloud_agent.devs.get(g_select_device_ipc).type;

        l_me_parent[s_innerHTML]=
            "<div id='zoom_div' class='zoom'>"
                +"<div id='zoom_minutes' class='button'>5 Minutes</div>"
                +"<div id='zoom_hour' class='button'>1 Hour</div>"
                +"<div id='zoom_day' class='button  selected'>24 Hour</div>"
            +"</div>"
            +"<div id='timeline'>"
                +"<div id='view_range' style='margin-top: 27px;'>"
                    +"<canvas id='timeline_canvas' width='"+l_me_parent.clientWidth+"px' height='60px' style='margin-top:10px;border:none'></canvas>"
                +"</div>"
                +"<div id='current_pos_line'></div>"
            +"</div>"
            +"<div id='preview' style='display: none;'>"
              +"<div class='preview' style='margin: 0px 33px;'>"
                  +"<img id='left_slider' src='./imgs/left_slider.png' style='visibility: hidden;' left_num=0></img>"
                  +"<div class='preview-view'>"
                      +"<div id='preview-slide'>"
                      +"</div>"
                  +"</div>"
                  +"<img id='right_slider' src='./imgs/right_slider.png' style='visibility: hidden;' right_num=0></img>"
                +"</div>"
              +"<div id='preview_pointer_shadow' style='margin-left: 0px;'></div>"
              +"<div id='preview_pointer' style='margin-left: 0px;'></div>"
            +"</div>"
            +"<div id='calendar'>"
                +"<div id='calendar_range' >"
                    +"<table id='calendar_table' border='0' cellspacing='0' bordercolor='#ffffff'>"
                        +"<tr>"
                          +"<td id='calendar_table_td18' class=''></td>"
                          +"<td id='calendar_table_td17' class=''></td>"
                          +"<td id='calendar_table_td16' class=''></td>"
                          +"<td id='calendar_table_td15' class=''></td>"
                          +"<td id='calendar_table_td14' class=''></td>"
                          +"<td id='calendar_table_td13' class=''></td>"
                          +"<td id='calendar_table_td12' class=''></td>"
                          +"<td id='calendar_table_td11' class=''></td>"
                          +"<td id='calendar_table_td10' class=''></td>"
                          +"<td id='calendar_table_td9' class=''></td>"
                          +"<td id='calendar_table_td8' class=''></td>"
                          +"<td id='calendar_table_td7' class=''></td>"
                          +"<td id='calendar_table_td6' class=''></td>"
                          +"<td id='calendar_table_td5' class=''></td>"
                          +"<td id='calendar_table_td4' class=''></td>"
                          +"<td id='calendar_table_td3' class=''></td>"
                          +"<td id='calendar_table_td2' class=''></td>"
                          +"<td id='calendar_table_td1' class=''></td>"
                          +"<td id='calendar_table_td0' class='selected'></td>"
                        +"</tr>"
                    +"</table>"
                +"</div>"
                +"<img id='calendar_scroll_earlier' src='./imgs/left_slider.png' />"
                +"<img id='calendar_scroll_later' src='./imgs/right_slider.png' style='display:none;' />"
            +"</div>"

        l_dom_timeline_canvas=mx("#timeline_canvas");
        if (typeof window.G_vmlCanvasManager!="undefined") {
            l_dom_timeline_canvas=window.G_vmlCanvasManager.initElement(l_dom_timeline_canvas);
        }
        l_dom_timeline_context=l_dom_timeline_canvas.getContext('2d');
        l_dom_view_range=mx("#view_range");
        l_dom_current_pos_line=mx("#current_pos_line");
        l_dom_base_line_path=mx("#base_line_path");
        l_dom_show_data_g=mx("#show_data_g");
        l_dom_scroll_earlier=mx("#scroll_earlier");
        l_dom_scroll_later=mx("#scroll_later");
        l_dom_zoom_div=mx("#zoom_div");
        l_dom_zoom_minutes=mx("#zoom_minutes");
        l_dom_zoom_hour=mx("#zoom_hour");
        l_dom_zoom_day=mx("#zoom_day");
        l_dom_preview=mx("#preview");
        l_dom_preview_slide=mx("#preview-slide");
        l_dom_preview_right_slider=mx("#right_slider");
        l_dom_preview_left_slider=mx("#left_slider");
        l_dom_preview_pointer_shadow=mx("#preview_pointer_shadow");
        l_dom_preview_pointer=mx("#preview_pointer");
        l_dom_calendar_range=mx("#calendar_range");
        l_dom_calendar_table=mx("#calendar_table");
        l_dom_calendar_scroll_earlier=mx("#calendar_scroll_earlier");
        l_dom_calendar_scroll_later=mx("#calendar_scroll_later");
        l_each_grid_width=(l_me_parent.clientWidth-30)/(2*24);
        l_each_second_width=(l_me_parent.clientWidth-30)/(24*3600*1000);
        l_each_pixel_time=(24*3600)/(l_me_parent.clientWidth-30);
        l_current_zoom="day";



        for(var i=0;i<19;i++)
        {
            l_calendar_table_tds[i]=mx("#calendar_table_td"+i);
        }

        setTimeout(draw_timeline_scale,10);
        l_current_temp_date_ms=l_base_start_time=((new Date(l_current_year+"/"+l_current_month+"/"+l_current_day+" 00:00:00")).getTime());
        l_base_end_time=l_base_start_time+60*60*24*1000;
        for(var i=0;i<l_calendar_table_tds.length;i++)
        {
            l_current_temp_date=getDateWeek(l_current_temp_date_ms-60*60*24*1000*i);
            l_calendar_table_tds[i].setAttribute('data-time', l_current_temp_date.date_times);
            l_calendar_table_tds[i].setAttribute('data-date', l_current_temp_date.year+"/"+l_current_temp_date.month+"/"+l_current_temp_date.day);
            l_calendar_table_tds[i].innerHTML=l_current_temp_date.month+"/"+l_current_temp_date.day+"<span>"+l_current_temp_date.week+"</span>";
        }
        l_selected_calendar_dom=l_calendar_table_tds[0];


        function draw_timeline_scale(obj)
        {
            var start_time,end_time,each_big_grid_num,each_hour_scale,each_small_scale;
            l_move_path_x=0;
            if (!l_dom_timeline_context)   return;
            l_dom_timeline_context.strokeStyle = "rgb(255,255,255)";
            l_dom_timeline_context.fillStyle = "rgb(255,255,255)";
            l_dom_timeline_context.beginPath();
            l_dom_timeline_context.moveTo(10, 0);
            l_dom_timeline_context.lineTo(0, 10);
            l_dom_timeline_context.lineTo(10, 20);
            l_dom_timeline_context.stroke();
            l_dom_timeline_context.beginPath();
            l_dom_timeline_context.moveTo(l_me_parent.clientWidth-12, 0);
            l_dom_timeline_context.lineTo(l_me_parent.clientWidth-2, 10);
            l_dom_timeline_context.lineTo(l_me_parent.clientWidth-12, 20);
            l_dom_timeline_context.stroke();
            l_dom_timeline_context.beginPath();
            l_dom_timeline_context.moveTo(0, 25);
            l_dom_timeline_context.lineTo(l_me_parent.clientWidth, 25);
            l_dom_timeline_context.font = "10px 微软雅黑, Verdana, Arial, Helvetica";
            l_dom_timeline_context.textBaseline = 'top';
            //l_dom_timeline_context.lineHeight = "10px";

            if(l_current_zoom=="minute")
            {
                start_time=parseInt(obj.selected_time);
                end_time=parseInt(obj.selected_time)+300;
                each_big_grid_num=6;
                each_hour_scale=3600;
                each_small_scale=5;//5s
            }
            else if(l_current_zoom=="hour")
            {
                start_time=parseInt(obj.selected_time);
                end_time=parseInt(obj.selected_time)+60;
                each_big_grid_num=5;
                each_hour_scale=60;
                each_small_scale=1;//1m
            }
            else if(l_current_zoom=="day")
            {
                start_time=0;
                end_time=2*24;
                each_big_grid_num=2;
                each_hour_scale=2;
                each_small_scale=1;//1h
            }
            for(var i=start_time;i<=end_time;(i=i+each_small_scale))
            {
                l_move_path_x=15+l_each_grid_width*(i-start_time); // left:15
                l_dom_timeline_context.moveTo(l_move_path_x, 25);
                if(i%each_big_grid_num==0)
                {
                    var hour=parseInt(i/each_hour_scale);
                    hour = hour.toString().length < 2 ? "0" + hour : hour;
                    var minute=parseInt((l_current_zoom=="minute")?((i-hour*each_hour_scale)/60):(i-hour*each_hour_scale));
                    minute = minute.toString().length < 2 ? "0"+ minute : minute;
                    var second=i-hour*each_hour_scale-minute*60;
                    second = second.toString().length < 2 ? "0"+ second : second;
                    var text_tmp=hour+":"+minute+((l_current_zoom=="minute")?(":"+second):"");
                    var move_text_x=l_dom_timeline_context.measureText(text_tmp).width/2;;
                    l_dom_timeline_context.lineTo(l_move_path_x, 25+11);
                    l_dom_timeline_context.fillText(text_tmp, l_move_path_x-move_text_x, 45);
                }
                else
                {
                    l_dom_timeline_context.lineTo(l_move_path_x, 25+6);
                }
            }
            l_dom_timeline_context.stroke();
        }
        function getCanvasEventPosition(ev){
          	var x, y;
          	if (ev.offsetX || ev.offsetX == 0) {
                x = ev.offsetX;
                y = ev.offsetY;
            }else if (ev.layerX || ev.layerX == 0) { // Opera
                x = ev.layerX;
                y = ev.layerY;
            }
          	return {x: x, y: y};
        }
        function getCanvasEventPositionForIE(ev){

          	return {x: ev.x, y: ev.y-37};
        }
        function ccm_segs_get(obj)
        {
            //clear_rect();
            l_select_dev_sn=obj.dev_sn;
            if(obj.get_calendar_data)
            {
                ms.send_msg("box_get",{box_sn:obj.box_sn,dev_sn:obj.dev_sn,flag:2,start_time:0,end_time:0},{box_sn:obj.box_sn,dev_sn:obj.dev_sn,flag:2,base_start_time:obj.start_time},ccm_calendar_data_ack);

            }
            //l_dom_scroll_later.style.display=(obj.start_time==l_base_start_time)?"none":"block";
            var end_time=obj.start_time+60*60*24*1000;
            var flag=8;
            ms.send_msg("box_get",{box_sn:obj.box_sn,dev_sn:obj.dev_sn,flag:flag,start_time:obj.start_time,end_time:end_time},{box_sn:obj.box_sn,dev_sn:obj.dev_sn,flag:flag,base_start_time:obj.start_time},ccm_segs_get_ack);
        }
        function ccm_segs_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if( msg && !msg.result && (msg.segs_sdc||msg.segs))
            {
                l_segs=[];
                if(ref.flag==4)
                {
                    l_segs=msg.segs;
                }
                else if(ref.flag==8)
                {
                    var cid,sid,stm,etm,f;
                    cid=sdc_decode(msg.segs_sdc.cid,msg.segs_sdc.record_num);
                    sid=sdc_decode(msg.segs_sdc.sid,msg.segs_sdc.record_num);
                    stm=sdc_decode(msg.segs_sdc.stm,msg.segs_sdc.record_num);
                    etm=sdc_decode(msg.segs_sdc.etm,msg.segs_sdc.record_num);
                    f=sdc_decode(msg.segs_sdc.f,msg.segs_sdc.record_num);
                    for(var i=0;i>(cid?cid.length:0);i++)
                    {
                        l_segs[i]={cid:cid[i],sid:sid[i],stm:stm[i],etm:etm[i],f:f[i]};
                    }
                }

                //l_segs={cid:cid,sid:sid,stm:stm,etm:etm,f:f};

                draw_data_rect({base_start_time:ref.base_start_time});
            }
        }
        function draw_data_rect(obj)
        {
            var each_fill_width=(l_current_zoom=="minute")?5*1000:((l_current_zoom=="hour")?1*60*1000:10*60*1000), //1小时精度时，1分钟内有数据就充满,1天精度，10分钟内有数据就充满
                rect_width=each_fill_width*l_each_second_width,
                rect_x=last_second=data_flag=end_flag=local_segs_index=local_alarm_segs_index=0,zoom_width=(l_current_zoom=="minute")?5*60*1000:1*60*60*1000;
            l_local_segs=[];
            l_local_alarm_segs=[];
            l_current_selected_time_save=obj.base_start_time;
            l_dom_timeline_context.beginPath();
            l_dom_timeline_context.fillStyle = "white";
            for(var i=0;i<l_segs.length;i++)
            {
                var start_date_ms=parseInt((l_segs[i].stm),16);
                if(l_current_zoom=="hour" || l_current_zoom=="minute")
                {
                    if(start_date_ms<obj.base_start_time) continue;
                    if(i != l_segs.length-1)
                    {
                        if(parseInt((l_segs[i+1].stm),16)>(obj.base_start_time+zoom_width))
                            end_flag=1;
                    }
                    else if(i == l_segs.length-1)   end_flag=1;
                }
                else if((i == l_segs.length-1)&&l_current_zoom=="day" ) end_flag=1;
                var end_date_ms=parseInt((l_segs[i].etm),16);
                var start_date=new Date(start_date_ms);
                var end_date=new Date(end_date_ms);
                var start_time_hour=start_date.getHours();
                var start_time_minute=start_date.getMinutes();
                var start_time_second=start_date.getSeconds();
                var end_time_hour=end_date.getHours();
                var end_time_minute=end_date.getMinutes();
                var end_time_second=end_date.getSeconds();
                var date_time_pos=start_time_hour*60+"/"+((start_time_hour*60+start_time_minute-2)<0?0:((start_time_hour*60+start_time_minute-2))*60+start_time_second);
                var pos_start=(start_date_ms-obj.base_start_time)*l_each_second_width+15;
                var pos_end=(end_date_ms-start_date_ms)*l_each_second_width;
                //var pos_end=parseInt((l_segs[i].etm-l_segs[i].stm),16)*l_each_second_width;
                l_local_segs[local_segs_index]=
                {
                    pos_start:pos_start,
                    pos_end:pos_start+pos_end,
                    token:l_select_dev_sn+"_"+l_segs[i].cid+"_"+l_segs[i].sid,
                    pic_token:l_select_dev_sn+"_p3_"+l_segs[i].cid+"_"+l_segs[i].sid,
                    f:l_segs[i].f,
                    date_time_pos:date_time_pos
                };
                if(l_segs[i].f)
                {
                    l_local_alarm_segs[local_alarm_segs_index]=
                    {
                        pos_start:pos_start,
                        pos_end:pos_start+pos_end,
                        start_date_ms:start_date_ms,
                        token:l_select_dev_sn+"_"+l_segs[i].cid+"_"+l_segs[i].sid,
                        pic_token:l_select_dev_sn+"_p3_"+l_segs[i].cid+"_"+l_segs[i].sid,
                        f:l_segs[i].f,
                        date_time_pos:date_time_pos
                    };
                    local_alarm_segs_index++;
                }
                local_segs_index++;

                if(l_current_zoom=="minute")
                {
                    if(end_flag && (local_segs_index==1)) break;
                    if(pos_end+pos_start>=l_me_parent.clientWidth-15)
                        pos_end=l_me_parent.clientWidth-pos_start-15;
                    l_dom_timeline_context.fillRect(pos_start, 18, pos_end+0.5, 5);
                    //var width_alarm_rect=l_current_zoom=="minute"?(pos_end+0.5):(rect_width/2+0.5);
                    //l_dom_timeline_context.fillRect(pos_start, 18,width_alarm_rect , 5);
                    if(end_flag) break;
                }
                else
                {
                    if(local_segs_index==1)
                    {
                            rect_x=pos_start;
                            data_flag=1;
                    }
                    else if((rect_x+rect_width)>=pos_start)
                    {
                        //rect_width+=pos_end;
                        //last_second=start_date_ms;
                        data_flag=1;
                        if(end_flag && rect_width&&rect_x)
                        {
                            l_dom_timeline_context.fillRect(rect_x, 18, rect_width+0.5, 5);

                            break;
                        }
                    }
                    else
                    {
                        if(data_flag==0)
                        {
                            i--;
                            if(rect_x>l_me_parent.clientWidth)
                                break;
                        }
                        if(rect_width&&rect_x&&data_flag)
                        {
                            data_flag=0;
                            l_dom_timeline_context.fillRect(rect_x, 18, rect_width+0.5, 5);

                        }

                        rect_x+=rect_width;

                    }
                }
            }
            if(local_segs_index)
            {
                //var x=pos_start+width_alarm_rect+0.5;
                var x=l_current_zoom=="minute"?(pos_start+pos_end+0.5):(rect_x+rect_width+0.5);
                l_dom_current_pos_line.style.display="block";
                l_dom_current_pos_line.style.left=x+"px";
                l_dom_current_pos_line.setAttribute("selected-time",l_local_segs[local_segs_index-1].date_time_pos);
            }
            draw_data_alarm_rect(obj);

        }
        function draw_data_alarm_rect(obj)
        {
            var each_fill_width=(l_current_zoom=="minute")?5*1000:((l_current_zoom=="hour")?1*60*1000:10*60*1000), //1小时精度时，1分钟内有数据就充满,1天精度，10分钟内有数据就充满
                rect_width=each_fill_width*l_each_second_width,
                zoom_width=(l_current_zoom=="minute")?5*60*1000:1*60*60*1000,
                end_flag=0,width_alarm_rect,rect_x,pos_end;
            l_dom_timeline_context.beginPath();
            l_dom_timeline_context.fillStyle = "yellow";

            for(var j=0;j<l_local_alarm_segs.length;j++)
            {
                if(l_current_zoom=="hour" || l_current_zoom=="minute")
                {
                    if(l_local_alarm_segs[j].start_date_ms<obj.base_start_time) continue;
                    if(j != l_local_alarm_segs.length-1)
                    {
                        if(l_local_alarm_segs[j].start_date_ms>(obj.base_start_time+zoom_width))
                            end_flag=1;
                    }
                    else if(j == l_local_alarm_segs.length-1)   end_flag=1;
                }
                else if((j == l_local_alarm_segs.length-1)&&l_current_zoom=="day" ) end_flag=1;

                if(end_flag && (local_segs_index==1)) break;
                pos_end=(l_local_alarm_segs[j].pos_end>=l_me_parent.clientWidth-15)?(l_me_parent.clientWidth-l_local_alarm_segs[j].pos_start-15):l_local_alarm_segs[j].pos_end;
                width_alarm_rect=l_current_zoom=="minute"?(pos_end-l_local_alarm_segs[j].pos_start+0.5):(rect_width/2+0.5);
                rect_x=l_local_alarm_segs[j].pos_start;
                l_dom_timeline_context.fillRect(rect_x, 0,width_alarm_rect , 15);
                if(end_flag) break;
            }
            l_dom_timeline_context.closePath();

        }
        function ccm_calendar_data_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if( msg && !msg.result&&msg.date_infos)
            {
                l_date_infos=[];
                l_date_infos=msg.date_infos;
                for(var i=0;i<l_date_infos.length;i++)
                {
                   l_local_date_infos[i]= new Date(l_date_infos[i].date);
                }
            }
        }
        function sdc_decode(pcomp,record_num)
        {
            var l_data=[],l_data_index=0,
            l_pcomp=mcodec.b64_2_binary(pcomp),
            l_sdc_len=l_pcomp.length,
            l_record_num=record_num,
            l_base,l_base_len,l_pcomp_index=0;
            if (sdc_base_decode()) return ;
            for(l_pcomp_index=l_base_len;l_pcomp_index<l_sdc_len;)
            {
                if (sdc_group_decode()) break;
            }
            return array_to_string();
            function sdc_base_decode()
            {
                var bytes,value;
                var pbase=l_pcomp[0];
                if (l_sdc_len < 1){
                    return 1;
                }
                bytes = pbase & 0xf;
                l_base_len = bytes + 1;
                if (l_base_len > l_record_num){
                    return 1;
                }
                l_base = pbase >> 4;
                if(bytes>0)
                {
                    if((bytes*8+4)>32)
                    {
                        l_base=big_number_operation(l_base,bytes,0);

                    }
                    else
                    {
                        for(i=1;i<l_base_len;i++)
                        {
                            l_base |= ((l_pcomp[i]) << ((i-1) * 8 + 4));
                        }
                    }

                }


                l_data[0]=l_base;
                return 0;
            }
            function sdc_group_decode()
            {
                var pdelta,is_compress,plen,i,pdata,value;

                if (l_sdc_len < 1){
                    return 1;
                }

                is_compress=(l_pcomp[l_pcomp_index]>=128);
                plen = l_pcomp[l_pcomp_index+3];
                pdelta=l_pcomp[l_pcomp_index+4]>> 4;
                var delta_num = l_pcomp[l_pcomp_index+4] & 0xf;
                if (plen > l_record_num){
                    return 1;
                }
                if(!is_compress&&delta_num!=0)
                {

                    var max_count =(delta_num-1)*8+4;
                    if(max_count>32)
                    {
                        var pdelta_array=big_number_operation(pdelta,delta_num,1);

                    }
                    else
                    {
                        for (i = 0; i < delta_num; i++){

                            pdelta |= ((l_pcomp[l_pcomp_index+5+i]) << (i * 8 + 4));
                        }
                    }
                }
                for(i=0;i<plen;i++)
                {
                    l_data_index++;
                    if(l_data_index>=l_record_num) return 1;

                    l_data[l_data_index]=(typeof(l_data[l_data_index-1])=="number" && !pdelta_array)?
                        (l_data[l_data_index-1]+pdelta):(big_number_add(l_data[l_data_index-1],pdelta_array?pdelta_array:pdelta));

                }
                l_pcomp_index=l_pcomp_index+5+delta_num;

                return 0;
            }
            function array_to_string()
            {
                for(var i=0;i<l_data.length;i++)
                {
                    if(l_data[i] instanceof Array)
                    {
                        l_data[i]="0x"+(l_data[i][0].toString(16))+(int_to_string_4(l_data[i][1]))+(int_to_string_4(l_data[i][2]))+(int_to_string_4(l_data[i][3]));
                    }
                }
                return l_data;
            }
            function int_to_string_4(data_int)
            {
                var ret_data=data_int.toString(16);
                return ret_data=(ret_data.length==4)?ret_data:(ret_data.length==3)?("0"+ret_data):(ret_data.length==2)?("00"+ret_data):("000"+ret_data);
            }
            function big_number_add(num_a,num_b)
            {
                var num=[];
                num_a=to_big_number(num_a);
                num_b=to_big_number(num_b);
                var a="0x"+(num_a[0].toString(16))+(int_to_string_4(num_a[1]))+(int_to_string_4(num_a[2]))+(int_to_string_4(num_a[3]));
                var b="0x"+(num_b[0].toString(16))+(int_to_string_4(num_b[1]))+(int_to_string_4(num_b[2]))+(int_to_string_4(num_b[3]));
                var sum=(parseInt(a,16)+parseInt(b,16)).toString(16);
                for(var i=3;i>-1;i--)
                {
                    if(sum)
                    {
                        num[i]=parseInt(sum.substring((((sum.length-4)>0)?(sum.length-4):0),sum.length),16);
                        sum=sum.substring(0,(((sum.length-4)>0)?(sum.length-4):0));
                    }
                    else num[i]=0;
                }
                return num;
            }
            function to_big_number(num)
            {
                var ret=[];
                if(typeof(num)=="number")
                {
                    var tem_num=num.toString(2);
                    if(tem_num.length<16)
                    {
                        return ret=[0,0,0,num];
                    }
                    else if(tem_num.length<32)
                    {
                        return ret=[0,0,num>>16,num&0xffff];
                    }
                }
                else return num;
            }
            function big_number_operation(pdelta,delta_num,ptype)
            {
                var type_num=ptype?5:1;
                var tdelta=[0,0,0,pdelta];
                for (i = 0; i < delta_num; i++)
                {
                    var tcomp=l_pcomp[l_pcomp_index+type_num+i];
                    var move_num=(i*8+4)+8;
                    if(move_num<16)
                    {
                        tdelta[3] |= (tcomp << (move_num-8));
                    }
                    else if(move_num>16&&move_num<32)
                    {
                        if(move_num<24)
                        {
                            var digit=16-(32-move_num);
                            var tcomp_2=tcomp.toString(2);
                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                            for(var j=0;j<32-move_num;j++)
                            {
                                tcomp_2+="0";
                            }
                            tdelta[3] |=parseInt(tcomp_2,2);
                            tdelta[2]|=tcomp>>(32-move_num-8);
                        }
                        else
                        {
                            tdelta[2] |= (tcomp << (move_num-16-8));
                        }
                    }
                    else if (move_num>32&&move_num<48)
                    {
                        if(move_num<40)
                        {
                            var digit=16-(48-move_num);
                            var tcomp_2=tcomp.toString(2);
                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                            for(var j=0;j<48-move_num;j++)
                            {
                                tcomp_2+="0";
                            }
                            tdelta[2] |=parseInt(tcomp_2,2);
                            tdelta[1]|=tcomp>>(48-move_num-8);
                        }
                        else
                        {
                            tdelta[1] |= (tcomp << (move_num-32-8));
                        }
                    }
                    else if(move_num>48&&move_num<72)
                    {
                        if(move_num<56)
                        {
                            var digit=16-(64-move_num);
                            var tcomp_2=tcomp.toString(2);
                            tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                            for(var j=0;j<64-move_num;j++)
                            {
                                tcomp_2+="0";
                            }
                            tdelta[1] |=parseInt(tcomp_2,2);
                            tdelta[0]|=tcomp>>(64-move_num-8);
                        }
                        else
                        {
                            tdelta[0] |= (tcomp << (move_num-48-8));
                        }
                    }

                }
                return tdelta;
            }

        }

        function ccm_ipcs_get()
        {
            ms.send_msg("box_get",{box_sn:g_select_device_ipc,flag:1},{flag:1},ccm_ipcs_get_ack);
        }
        function ccm_ipcs_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if( msg && !msg.result && msg.ipcs)
            {
                l_parent_callback({type:"refresh_box_device_list",data:{ipcs:msg.ipcs}});
                /*l_select_dev_sn=msg.ipcs[0].sn;
                ccm_segs_get({start_time:l_base_start_time,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                */
            }
        }
        function getDateWeek(datetimes)
        {
            var selectedDate=new Date(datetimes);
            var year = selectedDate.getFullYear();
            year = year.toString().length < 2 ? "0" + year : year;
            var month= selectedDate.getMonth() + 1;
            month= month.toString().length < 2 ? "0" + month : month;
            var day = selectedDate.getDate();
            day = day.toString().length < 2 ? "0" + day : day;
            var dateInfo = new Date(year+"/"+month+"/"+day+" 00:00:00");
            var week = "";
             switch(dateInfo.getDay())
             {
                case 0:
                    week="Sun";
                    break;
                case 1:
                    week="Mon";
                    break;
                case 2:
                    week="Tue";
                    break;
                case 3:
                    week="Wed";
                    break;
                case 4:
                    week="Thu";
                    break;
                case 5:
                    week="Fri";
                    break;
                case 6:
                    week="Sat";
                    break;
             }
             return {year:year,month:month,day:day,week:week,date_times:datetimes};
        }
        function clear_rect()
        {
            l_dom_timeline_context.clearRect(0,0,l_me_parent.clientWidth,60);
            l_dom_current_pos_line.style.display="none";
            l_local_segs=[];
            l_local_alarm_segs=[];
        }
        function get_current_index(evt)
        {
            var flag=-1;
            var precision=(l_current_zoom=="minute")?5:((l_current_zoom=="hour")?30:60);
            for(var i=0;i<l_local_segs.length;i++)
            {
                if(evt.offsetX >= l_local_segs[i].pos_start && evt.offsetX <= l_local_segs[i].pos_end)
                {
                    flag=i;
                    break;
                }
                else if(i>0 && i<l_local_segs.length-1)
                {
                    if(evt.offsetX < l_local_segs[i+1].pos_start && evt.offsetX > l_local_segs[i].pos_end
                        &&(l_local_segs[i+1].pos_start - l_local_segs[i].pos_end)<precision*l_each_second_width)
                    {
                        if((evt.offsetX-l_local_segs[i].pos_end)<(l_local_segs[i+1].pos_start-evt.offsetX))
                        {
                            flag=i;
                            break;
                        }
                        else if((evt.offsetX-l_local_segs[i].pos_end)>(l_local_segs[i+1].pos_start-evt.offsetX))
                        {
                            flag=i+1;
                            break;
                        }
                    }
                }
            }
            return flag;
        }
        function get_current_index_num(start_pos)
        {
            var flag=-1;
            var num=0;
            var each_fill_width=(l_current_zoom=="hour")?30*1000:5*60*1000, //1小时精度时，1分钟内有数据就充满,1天精度，10分钟内有数据就充满
                rect_width=each_fill_width*l_each_second_width;
            for(var i=0;i<l_local_alarm_segs.length;i++)
            {
                if(l_current_zoom=="minute")
                {
                    if(start_pos >= l_local_alarm_segs[i].pos_start && start_pos <= l_local_alarm_segs[i].pos_end)
                    {
                        flag=i;
                        num++;
                    }
                }
                else if((start_pos >= l_local_alarm_segs[i].pos_start && start_pos <= (l_local_alarm_segs[i].pos_start+rect_width))
                    ||(start_pos <= l_local_alarm_segs[i].pos_start && start_pos >= (l_local_alarm_segs[i].pos_start-rect_width)))
                {
                    flag=i;
                    num++;
                }
                //else if(start_pos > (l_local_alarm_segs[i].pos_start+rect_width))    break;
            }

            return {flag:flag+1-num,num:num};
        }
        function pic_base64_get(obj)
        {
            l_b64_str_array=[];
            l_canvas_dom_array=[];
            l_dom_preview_slide.innerHTML="";
            l_dom_preview_slide.style.marginLeft="0px";
            l_dom_preview_right_slider.style.visibility="hidden";
            var c_index=0;
            var show_num=obj.num<5?obj.num:5;
            if(obj.num>5)
                l_dom_preview_right_slider.setAttribute("right_num",obj.num-5);
            l_dom_preview_left_slider.setAttribute("left_num",0);
            l_canvas_index=0;
            for(var i=0;i<show_num;i++)
            {
                var current_pos_time=formatTime(parseInt((l_local_alarm_segs[obj.flag+i].date_time_pos).split("/")[1])+(2*60));
                l_dom_preview_slide.innerHTML+=
                    "<div class='preview-event' flag="+(obj.flag+i)+">"
                        //+"<div class='category-label'> Motion Detected</div>"
                        +"<div class='image' style='border-bottom: 5px solid rgb(238, 203, 3);'>"
                          +"<img id='preview_pic'></img>"
                          +"<div class='event-overlay' data-time='1430896902' style='height: 90px;'><svg height='50' version='1.1' width='50' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' preserveAspectRatio='xMinYMin' style='overflow: hidden; position: relative;'><desc style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0);'>Created with Rapha?l 2.1.0</desc><defs style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0);'></defs><path fill='none' stroke='none' d='M256,92.481C300.433,92.481,342.18,109.54899999999999,373.553,140.545C404.794,171.411,422,212.41299999999998,422,255.99899999999997S404.794,340.587,373.552,371.45399999999995C342.18,402.448,300.432,419.518,256,419.518S169.821,402.448,138.44799999999998,371.45399999999995C107.20599999999997,340.58699999999993,89.99999999999997,299.5849999999999,89.99999999999997,255.99899999999997S107.20599999999997,171.41099999999997,138.44799999999998,140.54599999999996C169.82099999999997,109.54999999999997,211.56799999999998,92.48099999999997,256,92.48099999999997M256,52.480999999999966C142.22899999999998,52.480999999999966,50,143.59799999999996,50,255.99899999999997C50,368.39699999999993,142.22899999999998,459.519,256,459.519C369.772,459.519,462,368.398,462,255.999C462,143.599,369.772,52.480999999999995,256,52.480999999999995ZM206.54399999999998,357.16099999999994V159.83299999999994L367.46299999999997,258.4989999999999L206.54399999999995,357.16099999999994Z' opacity='0' style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0); opacity: 0;'></path></svg></div>"
                        +"</div>"
                        +"<div class='timestamp'>"+current_pos_time+"</div>"
                    +"</div>";
                ms.send_msg("pic_base64_get",{sn:g_select_device_ipc,token:l_local_alarm_segs[obj.flag+i].pic_token,flag:1},{c_index:i,flag:obj.flag+i,current_pos_time:current_pos_time},
                    function(msg,ref)
                    {
                        if( msg && !msg.result && msg.frame)
                        {
                            l_b64_str_array[c_index]=msg.frame;
                            c_index++;


                            if(c_index>=show_num)
                            {
                                l_canvas_dom_array=mx("/img",l_dom_preview_slide);
                                l_dom_preview_event_array=mx(".preview-event",l_dom_preview_slide);
                                if( !g_old_browser_version&& !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
                                    mjme_init(l_b64_str_array[0],l_canvas_dom_array[0]);
                                }
                                l_dom_preview.style.display="block";
                                for(var k=0;k<l_dom_preview_event_array.length;k++)
                                {
                                    l_dom_preview_event_array[k].onclick=function()
                                    {
                                        var segs_flag=parseInt(this.getAttribute("flag"));
                                        l_dom_current_pos_line.style.left=l_local_alarm_segs[segs_flag].pos_start+"px";
                                        l_dom_current_pos_line.setAttribute("selected-time",l_local_alarm_segs[segs_flag].date_time_pos);
                                        l_parent_callback({type:"RecordingToken",data:l_local_alarm_segs[segs_flag].token});
                                        l_parent_callback({type:"create_ipc"});
                                    }
                                }
                            }
                        }

                    }
                );
            }
        }
        function mjme_on_decode(buf, width, height,img_dom) {
            if (!buf/* || !this.render*/) {
              return;
            }
            function image(w, h) {
        				this.header = '';
        				this.data = Array();
        				this.width = w;
        				this.height = h;
        			}
        			// Convert a value to a little endian hexadecimal value
        			function getLittleEndianHex(value) {
        				var result = [];

        				for (var bytes = 4; bytes > 0; bytes--) {
        					result.push(String.fromCharCode(value & 255));
        					value >>= 8;
        				}

        				return result.join('');
        			}
        			// Set the required bitmap header
        			function setImageHeader(img)
        			{
        				var numFileBytes = getLittleEndianHex(img.width * img.height);
        				var w = getLittleEndianHex(img.width);
        				var h = getLittleEndianHex(img.height);

        				img.header =
        					'BM' +              		// Signature
        					numFileBytes +     			// size of the file (bytes)*
        				   '\x00\x00' +         		// reserved
        				   '\x00\x00' +         		// reserved
        				   '\x36\x00\x00\x00' + 		// offset of where BMP data lives (54 bytes)
        				   '\x28\x00\x00\x00' + 		// number of remaining bytes in header from here (40 bytes)
        				   w +       					// the width of the bitmap in pixels*
        				   h +      					// the height of the bitmap in pixels*
        				   '\x01\x00' +         		// the number of color planes (1)
        				   '\x20\x00' +         		// 32 bits / pixel
        				   '\x00\x00\x00\x00' + 		// No compression (0)
        				   '\x00\x00\x00\x00' + 		// size of the BMP data (bytes)*
        				   '\x13\x0B\x00\x00' + 		// 2835 pixels/meter - horizontal resolution
        				   '\x13\x0B\x00\x00' + 		// 2835 pixels/meter - the vertical resolution
        				   '\x00\x00\x00\x00' + 		// Number of colors in the palette (keep 0 for 32-bit)
        				   '\x00\x00\x00\x00';  		// 0 important colors (means all colors are important)
        			}
        			// Fill a rectangle
        			function fillRectangle(img,color) {
        				/*for (var ny = y; ny < y + h; ny++) {
        					for (var nx = x; nx < x + w; nx++) {
        					  var pix_data=String.fromCharCode(color[nx],color[nx],color[nx],255);
        						img.data[ny * img.width + nx] = pix_data;
        					}
        					}*/
        					for (var i = 0; i < color.length; i++) {
        					  var pix_data=String.fromCharCode(color[i],color[i],color[i],255);
        						img.data[i] = pix_data;
        					}

        			}
        			// Flip image vertically
        			function flipImage(img) {
        				var newImgData = new Array();

        				for(var x = 0; x < img.width; x++) {
        					for(var y = 0; y < img.height; y ++) {
        						var ny = img.height - 1 - y;
        						newImgData[(ny * img.width) + x] = img.data[(y * img.width) + x];
        					}
        				}

        				img.data = newImgData;
        			}
        			// Main draw function
        			function drawImage() {
        				var img = new image(160, 90);

        				setImageHeader(img);

        				fillRectangle(img,buf);

        				// Flip image vertically
        				flipImage(img);

        				// If window.btoa is supported, use it since it's often faster
        				if(window.btoa != undefined) {
        					return 'data:image/bmp;base64,' + btoa(img.header + img.data.join(""));
        				}
        				// If not, use our base64 library
        				else {
        					return 'data:image/bmp;base64,' + jQuery.base64.encode(img.header + img.data.join(""));
        				}
        			}

               img_dom.src=drawImage();

        }
        function mjme_init(b64_str,canvas_dom)
        {
            l_ctx==null;
            if(l_timer){ clearInterval(l_timer); l_timer = null; };
            l_start=l_frame=l_loop_num=l_nal_len=0;
            g_avc.onPictureDecoded = mjme_on_decode;
            l_ctx=canvas_dom;

            var m_data=mcodec.b64_2_binary(b64_str);
            if(!m_data) return;
            l_u8_data = new Uint8Array(m_data);
            l_nal = new Uint8Array(0x10000);
            l_nal_len = 0;
            if(l_timer){ clearInterval(l_timer); l_timer = null; };
            //l_timer = setInterval(mjme_frame, 10);
            for(var i=0;i<2;i++)
            {
                l_timer = setTimeout(mjme_frame(canvas_dom), 100);
            }
        }
        function mjme_frame(canvas_dom)
        {
            var i;
            l_frame = 0;
            l_loop_num++;
            if(l_loop_num>1)
            {
                l_canvas_index++;
                if(l_canvas_index<l_b64_str_array.length&&l_canvas_index<l_canvas_dom_array.length)
                    mjme_init(l_b64_str_array[l_canvas_index],l_canvas_dom_array[l_canvas_index]);
                else
                {

                    l_dom_preview.style.display="block";
                    //l_dom_preview_left_slider.style.visibility="hidden";
                    if(parseInt(l_dom_preview_right_slider.getAttribute("right_num")))
                        l_dom_preview_right_slider.style.visibility="visible";
                    var pos_coordinate=l_rect_pos_x-(l_dom_preview.clientWidth/2);
                    if(pos_coordinate>-90&&(pos_coordinate+l_dom_preview.clientWidth)<1210)
                    {
                        l_dom_preview.style.left=pos_coordinate+"px";
                        l_dom_preview_pointer_shadow.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer_shadow.offsetWidth)/2+"px";
                        l_dom_preview_pointer.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer.offsetWidth)/2+"px";
                    }
                    else if(pos_coordinate<=-90)
                    {
                        l_dom_preview.style.left="-90px";
                        l_dom_preview_pointer_shadow.style.left=l_rect_pos_x+90-12+"px";
                        l_dom_preview_pointer.style.left=l_rect_pos_x+90-12+"px";
                    }
                    else if(pos_coordinate>=180)
                    {
                        l_dom_preview.style.left="180px";
                        l_dom_preview_pointer_shadow.style.left=l_rect_pos_x-192+"px";
                        l_dom_preview_pointer.style.left=l_rect_pos_x-192+"px";
                    }
                    for(var m=0;m<l_canvas_dom_array.length;m++)
                    {
                        if(l_canvas_dom_array[m].src==""&&l_canvas_dom_array[m-1]&&l_canvas_dom_array[m-1].src!="")l_canvas_dom_array[m].src=l_canvas_dom_array[m-1].src;
                    }
                    for(var m=l_canvas_dom_array.length-1;m>=0;m--)
                    {
                        if(l_canvas_dom_array[m].src==""&&l_canvas_dom_array[m+1]&&l_canvas_dom_array[m+1].src!="")l_canvas_dom_array[m].src=l_canvas_dom_array[m+1].src;
                    }
                    return;

                }
            }
            if(!l_u8_data)return;
            for(i = l_start; i < l_u8_data.length;)
            {
                if((0 != l_u8_data[i]) || (0 != l_u8_data[i+1]) || (0 != l_u8_data[i+2]) || (1 != l_u8_data[i+3]))
                {
                    l_nal[l_nal_len++] = l_u8_data[i++];
                    continue;
                }
                if(l_nal_len)
                {
                    g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),canvas_dom);
                }
                i += 4;
                l_start = i;
                l_nal_len = 0;
                if(l_frame)
                {
                    break;
                }
            }
            if(l_nal_len)
            {
                g_avc.decode(new Uint8Array(l_nal.buffer, 0, l_nal_len),canvas_dom);
            }
            if((0 == l_frame) && (l_start < l_u8_data.length))
            {
                l_start = 0;
                l_nal_len = 0;
            }
        }
        function clear_timeline(event)
        {
            var evt = event || window.event;
            var elem = evt.srcElement||evt.target;
            //elem.setAttribute("fill","green");
            var flag=get_current_index(evt);
            if(flag>=0)
            {
                l_dom_current_pos_line.style.left=l_local_segs[flag].pos_start+"px";
                l_dom_current_pos_line.setAttribute("selected-time",l_local_segs[flag].date_time_pos);
                l_parent_callback({type:"RecordingToken",data:l_local_segs[flag].token});
                l_parent_callback({type:"create_ipc"});
            }
        }
        function rect_onmousemove(event)
        {
            var pos_coordinate=evt.offsetX-(l_dom_preview.clientWidth/2);
            if(pos_coordinate>-90&&pos_coordinate<180)
            {
                l_dom_preview.style.left=pos_coordinate+"px";
                l_dom_preview_pointer_shadow.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer_shadow.offsetWidth)/2+"px";
                l_dom_preview_pointer.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer.offsetWidth)/2+"px";
            }
            else if(pos_coordinate<=-90)
            {
                l_dom_preview.style.left="-90px";
                l_dom_preview_pointer_shadow.style.left=evt.offsetX+80+"px";
                l_dom_preview_pointer.style.left=evt.offsetX+80+"px";
            }
            else if(pos_coordinate>180)
            {
                l_dom_preview.style.left="180px";
                l_dom_preview_pointer_shadow.style.left=evt.offsetX-192+"px";
                l_dom_preview_pointer.style.left=evt.offsetX-192+"px";
            }
            l_is_preview_show=1;
        }
        function rect_onmouseover(event)
        {
            var evt = event || window.event;
            var elem = evt.srcElement||evt.target;
            elem.setAttribute("fill","rgb(150, 200, 40)");
            l_rect_pos_x=evt.offsetX;
            var start_time=(l_current_zoom=="minute")?l_selected_time:((l_current_zoom=="hour")?l_selected_time*60:0);
            var current_pos_time=formatTime(start_time+parseInt((evt.offsetX-15.5)*l_each_pixel_time));
            var start_pos=parseInt(elem.getAttribute("x"));
            var index_num=get_current_index_num(start_pos,parseInt(elem.getAttribute("width"))+start_pos);
            if(index_num.flag>=0)
            {
                pic_base64_get(index_num);
            }
            l_is_preview_show=1;
            //var flag= get_current_index(evt);
           // pic_base64_get({flag:flag});

        }
        function rect_onmouseout(event)
        {
            var evt = event || window.event;
            var elem = evt.srcElement||evt.target;
            elem.setAttribute("fill","#ffffff");
            var divx1 = l_dom_preview.offsetLeft;
            var divy1 = l_dom_preview.offsetTop;
            var divx2 = l_dom_preview.offsetLeft + l_dom_preview.offsetWidth;
            var divy2 = l_dom_preview.offsetTop + l_dom_preview.offsetHeight;
            if(evt.offsetX < divx1 || evt.offsetX > divx2 || evt.offsetY < divy1 || evt.offsetY > divy2)
            {
                elem.setAttribute("fill","#ffffff");
                l_dom_preview.style.display="none";
                l_dom_preview_right_slider.style.visibility="hidden";
                l_dom_preview_left_slider.style.visibility="hidden";
            }
            l_is_preview_show=0;
        }
        function change_calendar_table_select(dom)
        {
            for(var j=0;j<l_calendar_table_tds.length;j++)
            {
                l_calendar_table_tds[j].className="";
            }
            dom.className="selected";
            l_selected_calendar_dom=dom;
        }
        function scroll_calendar_table(start_time,scroll_dom,flag)
        {

            for(var i=0;i<l_calendar_table_tds.length;i++)
            {
                var table_data_time=parseInt(l_calendar_table_tds[i].getAttribute("data-time"));
                if(table_data_time==start_time)
                {
                    change_calendar_table_select(l_calendar_table_tds[i]);
                    break;
                }
                if(i==l_calendar_table_tds.length-1)
                {
                    if(flag) return;
                    jQuery(scroll_dom).click();
                    scroll_calendar_table(start_time,scroll_dom,1);
                }
            }
        }
        function clear_timeline()
        {
            l_dom_timeline_context.clearRect(0,0,l_me_parent.clientWidth,60);
            l_dom_current_pos_line.style.display="none";
            l_local_segs=[];
            l_local_alarm_segs=[];
        }

        function get_start_time_hour()
        {
            var each_hour_scale=(l_current_zoom=="minute")?3600:60;
            var hour=parseInt((l_selected_time)/each_hour_scale);
            //hour = (hour>=0)?hour:(24+hour);
            hour = hour.toString().length < 2 ? "0" + hour : hour;
            var minute=parseInt((l_current_zoom=="minute")?((l_selected_time-hour*each_hour_scale)/60):(l_selected_time-hour*each_hour_scale));
           // minute = (minute>=0)?minute:(60+minute);
            minute = minute.toString().length < 2 ? "0" + minute : minute;
            var temp_date=(l_selected_calendar_dom.getAttribute("data-date")).split("/");
            return (new Date(temp_date[0]+"/"+temp_date[1]+"/"+temp_date[2]+" "+hour+":"+minute+":"+"00")).getTime();
        }
        function formatTime(second)
        {
        	//return [Math.floor(second / 60 / 60), Math.floor(second / 60 % 60)].join(":").replace(/\b(\d)\b/g, "0$1");
        	return [Math.floor(second / 60 / 60), Math.floor(second / 60 % 60), Math.floor(second % 60)].join(":").replace(/\b(\d)\b/g, "0$1");
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {

                        break;
                    }
                case "get_data":
                    {
                        return {local_segs:l_local_segs,segs:l_segs,today_index:l_today_index,
                            current_zoom:l_current_zoom,current_selected_time_save:l_current_selected_time_save};
                        break;
                    }
                case "change_select_ipc"://切换设备
                {
                    l_parent_callback({type:"delete_ipc"});
                    l_parent_callback({type:"destroy_box_dev_list"});
                    clear_rect();
                    var dev_img_ver=mcloud_agent.devs.get(g_select_device_ipc).img_ver;
                    if(dev_img_ver.substring(0,2)>="v2")
                    {
                        var dev_type=mcloud_agent.devs.get(g_select_device_ipc).type;
                        if(g_select_device_ipc && dev_type != "BOX"){
                            ccm_segs_get({start_time:l_base_start_time,box_sn:g_select_device_ipc,dev_sn:g_select_device_ipc,get_calendar_data:1});
                        }
                        else if(g_select_device_ipc && dev_type == "BOX")
                        {
                            ccm_ipcs_get();
                        }
                    }

                    break;
                }
                case "device_list_click":
                    {
                        //ccm_calendar_data_get({box_sn:g_select_device_ipc,dev_sn:obj.dev_sn});
                        ccm_segs_get({start_time:l_base_start_time,box_sn:g_select_device_ipc,dev_sn:obj.dev_sn,get_calendar_data:1});
                        break;
                    }
                case "destroy":
                {
                    if(l_me_parent)
                    {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        mx("#status_bar").style.position="relative";
                        mx("#status_bar").style.bottom="0px";
                    }
                    break;
                }
                default:
                    log("error:ctrl's obj.type is not exist in class_timeline_box.");
            }
        }
        function add_event(obj)
        {

            //添加canvas事件响应
            if(window.addEventListener)
            {
                l_dom_timeline_canvas.addEventListener('click', function(e){
            			var p = getCanvasEventPosition(e);
            			if(p.x>=0&&p.x<=10&&p.y>=0&&p.y<=20)
            			{
            			      mx("#view_range").style.marginLeft="-20px";
                        jQuery("#view_range").animate({marginLeft:'+=20px'},100);
                        if(l_current_zoom=="minute")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time-300;
                            if(l_selected_time<0)
                            {
                                l_selected_time=23*60*60+55*60;
                                l_today_index=l_today_index-1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});

                        }
                        else if(l_current_zoom=="hour")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time-60;
                            if(l_selected_time<0)
                            {
                                l_selected_time=23*60;
                                l_today_index=l_today_index-1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});

                        }
                        else if(l_current_zoom=="day")
                        {
                            clear_rect();
                            l_today_index=l_today_index-1;
                            var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                            scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                            draw_timeline_scale();
                            ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                        }

            			}
            			if(p.x>=(l_me_parent.clientWidth-10)&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=20)
            			{
            			      mx("#view_range").style.marginLeft="+20px";
                        jQuery("#view_range").animate({marginLeft:'-=20px'},100);
                        if(l_current_zoom=="minute")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time+300;
                            if(l_selected_time>(23*60*60+55*60))
                            {
                                l_selected_time=0;
                                l_today_index=l_today_index+1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});
                        }
                        else if(l_current_zoom=="hour")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time+60;
                            if(l_selected_time>23*60)
                            {
                                l_selected_time=0;
                                l_today_index=l_today_index+1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});
                        }
                        else if(l_current_zoom=="day")
                        {
                            clear_rect();
                            l_today_index=l_today_index+1;
                            var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                            scroll_calendar_table(start_time_day,l_dom_calendar_scroll_later);
                            draw_timeline_scale();
                            ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                        }
            			}
            			else if(p.y>=0&&p.y<=20)
        			    {
        			        var flag=get_current_index({offsetX:p.x,offsetY:p.y});
                        if(flag>=0)
                        {
                            l_dom_current_pos_line.style.left=l_local_segs[flag].pos_start+"px";
                            l_dom_current_pos_line.setAttribute("selected-time",l_local_segs[flag].date_time_pos);
                            l_parent_callback({type:"RecordingToken",data:l_local_segs[flag].token});
                            l_parent_callback({type:"create_ipc"});
                        }
        			    }
            		}, false);

            		l_dom_timeline_canvas.addEventListener('mousemove', function(e){
            			var p = getCanvasEventPosition(e);
            			l_dom_timeline_canvas.style.cursor=(p.x>=0&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=20)?"pointer":"default";
            			if(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")return;
            			var each_fill_width=(l_current_zoom=="minute")?3*1000:((l_current_zoom=="hour")?30*1000:5*60*1000), //1小时精度时，1分钟内有数据就充满,1天精度，10分钟内有数据就充满
                    rect_width=each_fill_width*l_each_second_width;
                  if(p.y<0||p.y>15)
                  {
                    l_dom_preview.style.display="none";
                    l_last_pos_in_canvas_x=0;
                    return;
                  }

            			if(p.x>=0&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=15)
        			    {
                        var pos_coordinate=p.x-(l_dom_preview.clientWidth/2);
                        if(pos_coordinate>-90&&(pos_coordinate+l_dom_preview.clientWidth)<1210)
                        {
                            l_dom_preview.style.left=pos_coordinate+"px";
                            l_dom_preview_pointer_shadow.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer_shadow.offsetWidth)/2+"px";
                            l_dom_preview_pointer.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer.offsetWidth)/2+"px";
                        }
                        else if(pos_coordinate<=-90)
                        {
                            l_dom_preview.style.left="-90px";
                            l_dom_preview_pointer_shadow.style.left=p.x+80+"px";
                            l_dom_preview_pointer.style.left=p.x+80+"px";
                        }
                        else if(pos_coordinate>180)
                        {
                            l_dom_preview.style.left="180px";
                            l_dom_preview_pointer_shadow.style.left=p.x-192+"px";
                            l_dom_preview_pointer.style.left=p.x-192+"px";
                        }
                        if(Math.abs(l_last_pos_in_canvas_x-p.x)<rect_width && Math.abs(l_last_pos_in_canvas_x-p.x)<50) return;
                        l_last_pos_in_canvas_x=p.x;
                        l_rect_pos_x=p.x;
                        var index_num=get_current_index_num(p.x);
                        if(index_num.flag>=0&&index_num.num>0)
                        {
                            pic_base64_get(index_num);
                        }
                        else
                        {
                            l_dom_preview.style.display="none";
                            l_last_pos_in_canvas_x=0;
                            return;
                        }
                        l_is_preview_show=1;
        			    }
            			//reDraw(p,context);
            		}, false);
            }
            else    //ie support
            {
                l_dom_timeline_canvas.attachEvent('onclick', function(e){
            			var p = getCanvasEventPositionForIE(e);
            			if(p.x>=0&&p.x<=10&&p.y>=0&&p.y<=20)
            			{
            			      mx("#view_range").style.marginLeft="-20px";
                        jQuery("#view_range").animate({marginLeft:'+=20px'},100);
                        if(l_current_zoom=="minute")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time-300;
                            if(l_selected_time<0)
                            {
                                l_selected_time=23*60*60+55*60;
                                l_today_index=l_today_index-1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});

                        }
                        else if(l_current_zoom=="hour")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time-60;
                            if(l_selected_time<0)
                            {
                                l_selected_time=23*60;
                                l_today_index=l_today_index-1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});

                        }
                        else if(l_current_zoom=="day")
                        {
                            clear_rect();
                            l_today_index=l_today_index-1;
                            var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                            scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                            draw_timeline_scale();
                            ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                        }

            			}
            			if(p.x>=(l_me_parent.clientWidth-10)&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=20)
            			{
            			      mx("#view_range").style.marginLeft="+20px";
                        jQuery("#view_range").animate({marginLeft:'-=20px'},100);
                        if(l_current_zoom=="minute")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time+300;
                            if(l_selected_time>(23*60*60+55*60))
                            {
                                l_selected_time=0;
                                l_today_index=l_today_index+1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});
                        }
                        else if(l_current_zoom=="hour")
                        {
                            clear_timeline();
                            l_selected_time=l_selected_time+60;
                            if(l_selected_time>23*60)
                            {
                                l_selected_time=0;
                                l_today_index=l_today_index+1;
                                var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                                scroll_calendar_table(start_time_day,l_dom_calendar_scroll_earlier);
                                ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                            }
                            draw_timeline_scale({selected_time:l_selected_time});
                            var start_time_hour=get_start_time_hour();
                            draw_data_rect({base_start_time:start_time_hour});
                        }
                        else if(l_current_zoom=="day")
                        {
                            clear_rect();
                            l_today_index=l_today_index+1;
                            var start_time_day=parseInt(l_calendar_table_tds[0].getAttribute("data-time"))+60*60*24*1000*l_today_index;
                            scroll_calendar_table(start_time_day,l_dom_calendar_scroll_later);
                            draw_timeline_scale();
                            ccm_segs_get({start_time:start_time_day,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                        }
            			}
            			else if(p.y>=0&&p.y<=20)
        			    {
        			        var flag=get_current_index({offsetX:p.x,offsetY:p.y});
                        if(flag>=0)
                        {
                            l_dom_current_pos_line.style.left=l_local_segs[flag].pos_start+"px";
                            l_dom_current_pos_line.setAttribute("selected-time",l_local_segs[flag].date_time_pos);
                            l_parent_callback({type:"RecordingToken",data:l_local_segs[flag].token});
                            l_parent_callback({type:"create_ipc"});
                        }
        			    }
            		}, false);

            		l_dom_timeline_canvas.attachEvent('onmousemove', function(e){
            			var p = getCanvasEventPositionForIE(e);
            			l_dom_timeline_canvas.style.cursor=(p.x>=0&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=20)?"pointer":"default";
            			if(g_old_browser_version)return;
            			var each_fill_width=(l_current_zoom=="minute")?3*1000:((l_current_zoom=="hour")?30*1000:5*60*1000), //1小时精度时，1分钟内有数据就充满,1天精度，10分钟内有数据就充满
                    rect_width=each_fill_width*l_each_second_width;
                  if(p.y<0||p.y>15)
                  {
                    l_dom_preview.style.display="none";
                    l_last_pos_in_canvas_x=0;
                    return;
                  }

            			if(p.x>=0&&p.x<=l_me_parent.clientWidth&&p.y>=0&&p.y<=15)
        			    {
                        var pos_coordinate=p.x-(l_dom_preview.clientWidth/2);
                        if(pos_coordinate>-90&&(pos_coordinate+l_dom_preview.clientWidth)<1210)
                        {
                            l_dom_preview.style.left=pos_coordinate+"px";
                            l_dom_preview_pointer_shadow.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer_shadow.offsetWidth)/2+"px";
                            l_dom_preview_pointer.style.left=(l_dom_preview.clientWidth-l_dom_preview_pointer.offsetWidth)/2+"px";
                        }
                        else if(pos_coordinate<=-90)
                        {
                            l_dom_preview.style.left="-90px";
                            l_dom_preview_pointer_shadow.style.left=p.x+80+"px";
                            l_dom_preview_pointer.style.left=p.x+80+"px";
                        }
                        else if(pos_coordinate>180)
                        {
                            l_dom_preview.style.left="180px";
                            l_dom_preview_pointer_shadow.style.left=p.x-192+"px";
                            l_dom_preview_pointer.style.left=p.x-192+"px";
                        }
                        if(Math.abs(l_last_pos_in_canvas_x-p.x)<rect_width&& Math.abs(l_last_pos_in_canvas_x-p.x)<50) return;
                        l_last_pos_in_canvas_x=p.x;
                        l_rect_pos_x=p.x;
                        var index_num=get_current_index_num(p.x);
                        if(index_num.flag>=0&&index_num.num>0)
                        {
                            pic_base64_get(index_num);
                        }
                        else
                        {
                            l_dom_preview.style.display="none";
                            l_last_pos_in_canvas_x=0;
                            return;
                        }
                        l_is_preview_show=1;
        			    }
            			//reDraw(p,context);
            		}, false);
            }
            l_dom_zoom_minutes.onclick=function()
            {
                l_dom_zoom_hour.className="button";
                l_dom_zoom_day.className="button";
                this.className="button  selected";
                l_current_zoom="minute";
                l_selected_time=l_dom_current_pos_line.getAttribute("selected-time")?parseInt((l_dom_current_pos_line.getAttribute("selected-time")).split("/")[1]):(23*60*60+55*60);
                l_selected_time=parseInt(l_selected_time/60)*60;
                clear_timeline();
                l_each_grid_width=(l_me_parent.clientWidth-30)/(5*60);
                l_each_second_width=(l_me_parent.clientWidth-30)/(5*60*1000);
                l_each_pixel_time=(5*60)/(l_me_parent.clientWidth-30);
                draw_timeline_scale({selected_time:l_selected_time});
                var start_time=get_start_time_hour();
                draw_data_rect({base_start_time:start_time});
            };
            l_dom_zoom_hour.onclick=function()
            {
                l_dom_zoom_minutes.className="button";
                l_dom_zoom_day.className="button";
                this.className="button  selected";
                l_current_zoom="hour";
                l_selected_time=l_dom_current_pos_line.getAttribute("selected-time")?parseInt((l_dom_current_pos_line.getAttribute("selected-time")).split("/")[0]):(23*60);
                clear_timeline();
                l_each_grid_width=(l_me_parent.clientWidth-30)/(60);
                l_each_second_width=(l_me_parent.clientWidth-30)/(60*60*1000);
                l_each_pixel_time=(60*60)/(l_me_parent.clientWidth-30);
                //l_dom_timeline_svg.style.width=24*60*l_each_grid_width+30+"px";
                //l_dom_base_line_path.setAttribute("d","M0,40H"+(24*60*l_each_grid_width+30));

                draw_timeline_scale({selected_time:l_selected_time});
                var start_time=get_start_time_hour();
                draw_data_rect({base_start_time:start_time});
            };
            l_dom_zoom_day.onclick=function()
            {
                l_dom_zoom_hour.className="button";
                l_dom_zoom_minutes.className="button";
                this.className="button  selected";
                l_current_zoom="day";
                l_each_grid_width=(l_me_parent.clientWidth-30)/(2*24);
                l_each_second_width=(l_me_parent.clientWidth-30)/(24*3600*1000);
                l_each_pixel_time=(24*3600)/(l_me_parent.clientWidth-30);
                clear_timeline();
                draw_timeline_scale();
                var temp_date=(l_selected_calendar_dom.getAttribute("data-date")).split("/");
                var start_time=(new Date(temp_date[0]+"/"+temp_date[1]+"/"+temp_date[2]+" 00:00:00")).getTime();
                draw_data_rect({base_start_time:start_time});
            };
            l_dom_calendar_scroll_earlier.onclick=function()
            {
                //l_dom_calendar_range.style.display="none";
                //jQuery("#calendar_range").fadeOut(0);
                l_dom_calendar_table.style.marginLeft="-6px";
                //jQuery("#calendar_range").fadeIn(300);
                jQuery("#calendar_table").animate({marginLeft:'+=6px'},50);

                l_current_temp_date_ms=l_current_temp_date_ms-60*60*24*1000*l_calendar_table_tds.length;
                l_dom_calendar_scroll_later.style.display="block";
                for(var i=0;i<l_calendar_table_tds.length;i++)
                {
                    l_calendar_table_tds[i].className="";
                    l_current_temp_date=getDateWeek(l_current_temp_date_ms-60*60*24*1000*i);
                    l_calendar_table_tds[i].setAttribute('data-time', l_current_temp_date.date_times);
                    l_calendar_table_tds[i].setAttribute('data-date', l_current_temp_date.year+"/"+l_current_temp_date.month+"/"+l_current_temp_date.day);
                    l_calendar_table_tds[i].innerHTML=l_current_temp_date.month+"/"+l_current_temp_date.day+"<span>"+l_current_temp_date.week+"</span>";
                }
                l_today_index=0;
            };
            l_dom_calendar_scroll_later.onclick=function()
            {
                l_dom_calendar_table.style.marginLeft="6px";
                jQuery("#calendar_table").animate({marginLeft:'-=6px'},50);
                l_current_temp_date_ms=l_current_temp_date_ms+60*60*24*1000*l_calendar_table_tds.length;
                if(l_current_temp_date_ms==l_base_start_time) l_dom_calendar_scroll_later.style.display="none";
                for(var i=0;i<l_calendar_table_tds.length;i++)
                {
                    l_calendar_table_tds[i].className="";
                    l_current_temp_date=getDateWeek(l_current_temp_date_ms-60*60*24*1000*i);
                    l_calendar_table_tds[i].setAttribute('data-time', l_current_temp_date.date_times);
                    l_calendar_table_tds[i].setAttribute('data-date', l_current_temp_date.year+"/"+l_current_temp_date.month+"/"+l_current_temp_date.day);
                    l_calendar_table_tds[i].innerHTML=l_current_temp_date.month+"/"+l_current_temp_date.day+"<span>"+l_current_temp_date.week+"</span>";
                }
                l_today_index=-18;
            };
            for(var i=0;i<l_calendar_table_tds.length;i++)
            {
                l_calendar_table_tds[i].onclick=function()
                {
                    change_calendar_table_select(this);
                    l_today_index=-parseInt(this.id.substring(17,this.id.length));
                    var date_temp=(l_selected_calendar_dom.getAttribute("data-date")).split("/");
                    var date_ms_temp=(new Date(date_temp[0]+"/"+date_temp[1]+"/"+date_temp[2]+" 00:00:00")).getTime();
                    clear_rect();
                    draw_timeline_scale({selected_time:0});
                    ccm_segs_get({start_time:date_ms_temp,box_sn:g_select_device_ipc,dev_sn:l_select_dev_sn});
                };
            }
            l_dom_preview.onmousemove=function(evt)
            {
                //l_dom_preview.style.display="block";
                l_is_preview_show=1;
            }
            l_dom_preview.onmouseover=function(evt)
            {
                l_dom_preview.style.display="block";
                l_is_preview_show=1;
            }
            l_dom_preview.onmouseout=function(event)
            {
                var evt = event || window.event;
                var elem = evt.srcElement||evt.target;
                elem.setAttribute("fill","#ffffff");
                l_dom_preview.style.display="none";
                l_is_preview_show=0;
            }
            l_dom_preview_right_slider.onclick=function()
            {
                var right_num=parseInt(this.getAttribute("right_num"));
                if(right_num==0||l_canvas_dom_array.length<5)return;
                if(right_num<5)
                {
                    this.style.visibility="hidden";
                    this.setAttribute("right_num",0);
                }
                else
                {
                    this.setAttribute("right_num",right_num-5);
                }
                var left_num=parseInt(l_dom_preview_left_slider.getAttribute("left_num"));
                l_dom_preview_left_slider.setAttribute("left_num",left_num+5);
                l_dom_preview_left_slider.style.visibility="visible";
                var flag=parseInt(l_dom_preview_event_array[(left_num-1)<0?4:(left_num-1)].getAttribute("flag"))+1;
                var show_num=right_num>5?5:right_num;
                //l_b64_str_array=[];
                l_canvas_dom_array=[];
                var c_index=0;
                l_canvas_index=0;
                for(var i=0;i<show_num;i++)
                {
                    var current_pos_time=formatTime(parseInt((l_local_alarm_segs[flag+i].date_time_pos).split("/")[1]));
                    l_dom_preview_slide.innerHTML+=
                        "<div class='preview-event' flag="+(flag+i)+">"
                            //+"<div class='category-label'> Motion Detected</div>"
                            +"<div class='image' style='border-bottom: 5px solid rgb(238, 203, 3);'>"
                              +"<img id='preview_pic'></img>"
                              +"<div class='event-overlay' data-time='1430896902' style='height: 90px;'><svg height='50' version='1.1' width='50' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' preserveAspectRatio='xMinYMin' style='overflow: hidden; position: relative;'><desc style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0);'>Created with Rapha?l 2.1.0</desc><defs style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0);'></defs><path fill='none' stroke='none' d='M256,92.481C300.433,92.481,342.18,109.54899999999999,373.553,140.545C404.794,171.411,422,212.41299999999998,422,255.99899999999997S404.794,340.587,373.552,371.45399999999995C342.18,402.448,300.432,419.518,256,419.518S169.821,402.448,138.44799999999998,371.45399999999995C107.20599999999997,340.58699999999993,89.99999999999997,299.5849999999999,89.99999999999997,255.99899999999997S107.20599999999997,171.41099999999997,138.44799999999998,140.54599999999996C169.82099999999997,109.54999999999997,211.56799999999998,92.48099999999997,256,92.48099999999997M256,52.480999999999966C142.22899999999998,52.480999999999966,50,143.59799999999996,50,255.99899999999997C50,368.39699999999993,142.22899999999998,459.519,256,459.519C369.772,459.519,462,368.398,462,255.999C462,143.599,369.772,52.480999999999995,256,52.480999999999995ZM206.54399999999998,357.16099999999994V159.83299999999994L367.46299999999997,258.4989999999999L206.54399999999995,357.16099999999994Z' opacity='0' style='-webkit-tap-highlight-color: rgba(0, 0, 0, 0); opacity: 0;'></path></svg></div>"
                            +"</div>"
                            +"<div class='timestamp'>"+current_pos_time+"</div>"
                        +"</div>";
                    ms.send_msg("pic_base64_get",{sn:g_select_device_ipc,token:l_local_alarm_segs[flag+i].pic_token,flag:1},{flag:flag+i,array_index:left_num+5,current_pos_time:current_pos_time},
                        function(msg,ref)
                        {
                            if( msg && !msg.result && msg.frame)
                            {
                                l_b64_str_array[ref.array_index+c_index]=msg.frame;
                                c_index++;

                                if(c_index>=show_num)
                                {
                                    jQuery(l_dom_preview_slide).animate({marginLeft:'-=853px'},1200);
                                    //l_dom_preview_slide.style.left=l_dom_preview_slide.offsetLeft-853+"px";
                                    l_canvas_dom_array=mx("/img",l_dom_preview_slide);
                                    l_dom_preview_event_array=mx(".preview-event",l_dom_preview_slide);
                                    if( !g_old_browser_version&& !(navigator.appName == "Microsoft Internet Explorer" && navigator.appVersion.match(/9./i)=="9.")){
                                        mjme_init(l_b64_str_array[ref.array_index],l_canvas_dom_array[ref.array_index]);
                                    }
                                    for(var k=0;k<l_dom_preview_event_array.length;k++)
                                    {
                                        l_dom_preview_event_array[k].onclick=function()
                                        {
                                            var segs_flag=parseInt(this.getAttribute("flag"));
                                            l_dom_current_pos_line.style.left=l_local_alarm_segs[segs_flag].pos_start+"px";
                                            l_dom_current_pos_line.setAttribute("selected-time",l_local_alarm_segs[segs_flag].date_time_pos);
                                            l_parent_callback({type:"RecordingToken",data:l_local_alarm_segs[segs_flag].token});
                                            l_parent_callback({type:"create_ipc"});
                                        }
                                    }
                                }
                            }

                        }
                    );
                }
            }
            l_dom_preview_left_slider.onclick=function()
            {
                var left_num=parseInt(this.getAttribute("left_num"));
                if(left_num==0)return;
                if(left_num<5)
                {
                    this.style.visibility="hidden";
                    this.setAttribute("left_num",0);
                }
                else
                {
                    this.setAttribute("left_num",left_num-5);
                }
                var right_num=parseInt(l_dom_preview_right_slider.getAttribute("right_num"));
                l_dom_preview_right_slider.setAttribute("right_num",right_num+5);
                l_dom_preview_right_slider.style.visibility="visible";
                jQuery(l_dom_preview_slide).animate({marginLeft:'+=853px'},1000);
            }

        }
        function remove_event(obj)
        {
            //l_dom_scroll_earlier.onclick=null;
            //l_dom_scroll_later.onclick=null;
            l_dom_zoom_minutes.onclick=null;
            l_dom_zoom_hour.onclick=null;
            l_dom_zoom_day.onclick=null;
            l_dom_calendar_scroll_earlier.onclick=null;
            l_dom_calendar_scroll_later.onclick=null;
            l_dom_preview.onmousemove=null;
            l_dom_preview.onmouseover=null;
            l_dom_preview.onmouseout=null;
        }
        add_event(obj);
        if(g_select_device_ipc && l_type != "BOX"){
            ccm_segs_get({start_time:l_base_start_time,box_sn:g_select_device_ipc,dev_sn:g_select_device_ipc,get_calendar_data:1});
        }
        else if(g_select_device_ipc && l_type == "BOX")
        {
            ccm_ipcs_get();
        }
    }
/*-----------------Setting options pages--------------------*/
    //设置中的关于
    function class_options_product_info(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_input_manufacturer,
            l_dom_input_model,
            l_dom_input_firmware_version,
            l_dom_input_plugin_version,
            l_dom_input_device_serial_number,
            l_dom_input_device_name,
            l_dom_input_mfc,
            l_dom_logo_content,
            l_dom_mfc_content,
            l_dom_device_status_content,l_dom_device_status;
        if(g_domain_oems_vimtag)
        {
	        	l_me_parent[s_innerHTML] =
	        	"<div id = 'about_info' class = 'list_right_box'>"
	          //+"<div id = 'logo_box'>"
	          //+"<img id = 'logo_img'>"
	          //+"</div>"
	          +     "<div class = 'list_right_item'>"
	          +        "<span class = 'attribute_key_text'>"+mcs_model+"</span>"
	          +        "<span class = 'attribute_value_text'></span>"
	          +     "</div>"
	          +     "<div class = 'list_right_item'>"
	          +        "<span class = 'attribute_key_text'>"+mcs_manufacturer+"</span>"
	          +        "<span class = 'attribute_value_text'></span>"
	          +     "</div>"
	          +     "<div class = 'list_right_item'>"
	          +        "<span class = 'attribute_key_text'>"+mcs_software_version+"</span>"
	          +        "<span class = 'attribute_value_text'></span>"
	          +     "</div>"
	          +     "<div class = 'list_right_item'>"
	          +        "<span class = 'attribute_key_text'>"+mcs_plugin_version+"</span>"
	          +        "<span class = 'attribute_value_text'></span>"
	          +     "</div>"
	          +     "<div class = 'list_right_item'>"
	          +        "<span class = 'attribute_key_text'>"+mcs_device_id+"</span>"
	          +        "<span class = 'attribute_value_text'></span>"
	          +     "</div>"
	          +"</div>";

          var dom_text = jQuery(".attribute_value_text");
        }
        //获取插件版本
        function check_plug_install_ack(ref, version)
        {
            var ver = version? version : mcs_not_installed;
            if(g_domain_oems_vimtag)
            {
            	 dom_text[3].innerHTML = ver;
            }
        }
        //获取设备信息
        function ccm_dev_info_get_ack(msg,ref)
        {
            if(!l_me_parent || msg.result != "") return;
            if(msg && msg.result == "")
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	  	  dom_text[0].innerHTML = msg.model;
                    dom_text[1].innerHTML = msg.mfc;
                    dom_text[2].innerHTML = msg.ver;
                    dom_text[4].innerHTML = msg.sn;
            	  }
            }
            else
            {
                log("error:GetDeviceInformationResponse return Result error in class_options_product_info.");
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        //获取设备信息
        ms.send_msg("dev_info_get",{sn:g_select_device_ipc},null,ccm_dev_info_get_ack);
        //获取插件版本
        mme.prototype.check_plug_install("", check_plug_install_ack);
    }
    //设置中的昵称
    function class_options_device_nickname(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_input_device_name,
            l_dom_button_setup;
        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	      "<div id = 'dev_name_info' class = 'list_right_box'>"
                +     "<div class = 'list_right_item_ex'>"
                +        "<span class = 'attribute_key_text'>"+mcs_nickname+":</span>"
                +        "<input type = 'text' id = 'dev_name_input' class = 'list_right_input' value='" + (mcloud_agent.devs.get(g_select_device_ipc).nick?mcloud_agent.devs.get(g_select_device_ipc).nick:g_select_device_ipc)+ "'>"
                +     "</div>"
                +     "<input id = 'set_dev_name' value = "+mcs_action_apply+" class = 'list_right_button' type = 'button'>"
                +"</div>";

            l_dom_input_device_name = mx("#dev_name_input");
            l_dom_button_setup = mx("#set_dev_name");
        }

        function ccm_nick_set_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {  //弹出设置成功
            	 if(g_domain_oems_vimtag)
            	 {
            	 	  msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
            	 }
               if(l_dom_input_device_name.value && (l_dom_input_device_name.value != mcs_input_nick))
               {
               	  mcloud_agent.devs.get(g_select_device_ipc).nick = l_dom_input_device_name.value;
               	  l_parent_callback({type:"change_device_name",sn:g_select_device_ipc});
               }
               else
               {
               	  mcloud_agent.devs.get(g_select_device_ipc).nick = g_select_device_ipc;
               	  l_parent_callback({type:"change_device_name",sn:g_select_device_ipc});
               }
            }
            else
            {
                log("error:CcmSetDeviceNickResponse return Result error in class_options_device.");
            }
        }
        function add_event()
        {
            l_dom_button_setup.onclick = function() {
                 ms.send_msg("nick_set",{sn:g_select_device_ipc,name:l_dom_input_device_name.value},null,ccm_nick_set_ack);
            };
            l_dom_input_device_name.onfocus = function() {
               if(this.value == g_select_device_ipc)
               {
                    this.value = "";
               }
               if(g_standard_input_box_onfocus)
                  g_standard_input_box_onfocus(this);
            };
            l_dom_input_device_name.onblur = function() {
            	 if(this.value == "")
               {
                    this.value = g_select_device_ipc;
               }
               if(g_standard_input_box_onblur)
                  g_standard_input_box_onblur(this);
            };
        }
        function remove_event()
        {
            l_dom_button_setup.onclick = "";
            l_dom_input_device_name.onfocus = "";
            l_dom_input_device_name.onblur = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                }
            }
        }
        add_event();
    }
    //设置中的管理密码
    function class_options_password_page(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_input_current_password,
            l_dom_input_new_password,
            l_dom_input_confirm_password,
            l_dom_button_setup;

         if(g_domain_oems_vimtag)
         {
         	  l_me_parent[s_innerHTML] =
         	        "<div id = 'admin_pwd_info' class = 'list_right_box'>"
                  +     "<div class = 'list_right_item'>"
                  +        "<span class = 'attribute_key_text'>"+mcs_admin_password+":</span>"
                  +        "<input type = 'password' id = 'admin_pwd_input' class = 'list_right_input' value='@M!N*T'>"
                  +     "</div>"
                  +     "<div class = 'list_right_item_ex'>"
                  +        "<span class = 'attribute_key_text'>"+mcs_new_password+":</span>"
                  +        "<input type = 'password' id = 'new_admin_pwd_input' class = 'list_right_input' value='@M!N*T'>"
                  +     "</div>"
                  +     "<div class = 'list_right_item_ex'>"
                  +        "<span class = 'attribute_key_text'>"+mcs_confirm_new_password+":</span>"
                  +        "<input type = 'password' id = 'new_admin_pwd_input_re' class = 'list_right_input' value='@M!N*T'>"
                  +     "</div>"
                  +     "<input id='admin_pwd_button_setup' type = 'button' value = "+mcs_action_apply+" class = 'list_right_button'>"
                  +"</div>";

             l_dom_input_current_password = mx("#admin_pwd_input");
		         l_dom_input_new_password = mx("#new_admin_pwd_input");
		         l_dom_input_confirm_password = mx("#new_admin_pwd_input_re");
		         l_dom_button_setup = mx("#admin_pwd_button_setup");
         }

        function add_event()
        {  //应用按键事件
           l_dom_button_setup.onclick=function()
           {
           	  if(l_dom_input_current_password.value == "amdin")
           	  {
           	  	  l_dom_input_current_password.value = "admin";
           	  }
              if(l_dom_input_current_password.value == "@M!N*T")
              {
              	  if(g_domain_oems_vimtag)
              	  {
              	  	 msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
              	  }
                  return;
              }
              if(l_dom_input_new_password.value == "@M!N*T")
              {
              	  if(g_domain_oems_vimtag)
              	  {
              	  	 msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
              	  }
                  return;
              }
              if(l_dom_input_new_password.value != l_dom_input_confirm_password.value)
              {
              	  if(g_domain_oems_vimtag)
              	  {
              	  	 msg_tips({msg:mcs_two_password_input_inconsistent + ".", type:"error", timeout:3000});
              	  }
                  return;
              }
              else
              {
                  reg = /^\S{6,20}$/;
                  if(!reg.exec(l_dom_input_new_password.value))
                  {
		                  if(g_domain_oems_vimtag)
		              	  {
		              	  	 msg_tips({msg:mcs_password_demand + ".", type:"error", timeout:3000});
		              	  }
                      return;
                  }
              }
              ms.send_msg("dev_passwd_set",{sn:g_select_device_ipc,old_pass:l_dom_input_current_password.value,new_pass:l_dom_input_new_password.value,is_guest:0},null,dev_passwd_set_ack);
           }
           l_dom_input_current_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
           };
           l_dom_input_current_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
           };
           l_dom_input_new_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
           };
           l_dom_input_new_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
           };
           l_dom_input_confirm_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
           };
           l_dom_input_confirm_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
           };
        }
        //设置设备管理密码
        function dev_passwd_set_ack(msg,ref)
        {
            if(!msg) return;
            if(msg.result == "")
            {   //如果是用户登录 更改设备管理密码 需要重新添加设备
                if(g_login_status == "register_user")
                {
                   ms.send_msg("dev_add",{sn:g_select_device_ipc ,pass:l_dom_input_new_password.value},null,function(msg,ref){
                   		if(msg && msg.result=="")
                      {
                      	 if(g_domain_oems_vimtag)
                      	 {
                      	 	   msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
                      	 }
                         mcloud_agent.devs.get(msg.info.sn).stat = msg.info.stat;
                      }
                   });
                }
                else//如果是ipc登录，则退出登录
                {
                   if(g_domain_oems_vimtag)
                	 {
                	 	   msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
                	 }
                   jQuery("#system_logout").click();
                }
            }
            else if(msg.result =="accounts.pass.invalid")
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	 	    msg_tips({msg:mcs_invalid_password + ".", type:"warning", timeout:3000});
            	  }
            }
        }
        function remove_event()
        {
            l_dom_button_setup.onclick = "";
            l_dom_input_current_password.onfocus = "";
            l_dom_input_current_password.onblur = "";
            l_dom_input_new_password.onfocus = "";
            l_dom_input_new_password.onblur = "";
            l_dom_input_confirm_password.onfocus = "";
            l_dom_input_confirm_password.onblur = "";
        }
        l_me.ctrl=function(obj)
        {
           switch(obj.type)
           {
             case "destroy":
                {
                    remove_event();
                    l_me_parent[s_innerHTML] = "";
                    l_me_parent = null;
                }
           }
        }
        add_event();
    }
    function class_options_guest_password(obj)
    {
         var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_input_current_password,
            l_dom_input_new_password,
            l_dom_input_confirm_password,
            l_dom_button_setup;

        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	      "<div id = 'visitor_pwd_info' class = 'list_right_box'>"
                +      "<div class = 'list_right_item'>"
                +         "<span class = 'attribute_key_text'>"+mcs_admin_password+":</span>"
                +         "<input type = 'password' id = 'visitor_pwd_input' class = 'list_right_input' value='@M!N*T'>"
                +      "</div>"
                +      "<div class = 'list_right_item_ex'>"
                +         "<span class = 'attribute_key_text'>"+mcs_guest_password+":</span>"
                +         "<input type = 'password' id = 'new_visitor_pwd_input' class = 'list_right_input' value='@M!N*T'>"
                +      "</div>"
                +      "<div class = 'list_right_item_ex'>"
                +         "<span class = 'attribute_key_text'>"+mcs_confirm_new_password+":</span>"
                +         "<input type = 'password' id = 'new_visitor_pwd_input_re' class = 'list_right_input' value='@M!N*T'>"
                +      "</div>"
                +      "<input id='visitor_pwd_button_setup' type = 'button' value = "+mcs_action_apply+" class = 'list_right_button'>"
                +"</div>";

            l_dom_input_current_password = mx("#visitor_pwd_input");
		        l_dom_input_new_password = mx("#new_visitor_pwd_input");
		        l_dom_input_confirm_password = mx("#new_visitor_pwd_input_re");
		        l_dom_button_setup = mx("#visitor_pwd_button_setup");
        }
        function add_event()
        {
            l_dom_button_setup.onclick=function()
            {
            	 if(l_dom_input_current_password.value == "amdin")
            	 {
            	 	  l_dom_input_current_password.value = "admin";
            	 }
               if(l_dom_input_current_password.value == "@M!N*T")
               {
	               	if(g_domain_oems_vimtag)
	            	  {
	            	 	    msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
	            	  }
                  return;
               }
               if(l_dom_input_new_password.value == "@M!N*T")
               {
	               	if(g_domain_oems_vimtag)
	            	  {
	            	 	    msg_tips({msg:mcs_the_password_is_empty + ".", type:"error", timeout:3000});
	            	  }
                  return;
               }
               if(l_dom_input_new_password.value != l_dom_input_confirm_password.value)
               {
	               	if(g_domain_oems_vimtag)
	            	  {
	            	 	    msg_tips({msg:mcs_two_password_input_inconsistent + ".", type:"error", timeout:3000});
	            	  }
                  return;
               }
               else
               {
                  reg = /^\S{6,20}$/;
                  if(!reg.exec(l_dom_input_new_password.value))
                  {
			                if(g_domain_oems_vimtag)
			            	  {
			            	 	    msg_tips({msg:mcs_password_demand + ".", type:"error", timeout:3000});
			            	  }
                      return;
                  }
               }
               ms.send_msg("dev_passwd_set",{sn:g_select_device_ipc,old_pass:l_dom_input_current_password.value,new_pass:l_dom_input_new_password.value,is_guest:1},null,dev_guest_passwd_set_ack);
            }
            l_dom_input_current_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_current_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_new_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_new_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_confirm_password.onfocus = function() {
                if(this.value == "@M!N*T")
                {
                    this.value = "";
                }
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_confirm_password.onblur = function() {
                if(this.value == "")
                {
                    this.value = "@M!N*T";
                }
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
        }
        //访客密码设置
        function dev_guest_passwd_set_ack(msg)
        {
            if(!msg) return;
            if(msg.result=="")
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	 	    msg_tips({msg:mcs_set_successfully + ".", type:"warning", timeout:3000});
            	  }
            }
            else if(msg.result == "accounts.pass.invalid")
            {
            	  if(g_domain_oems_vimtag)
            	  {
            	 	    msg_tips({msg:mcs_invalid_password + ".", type:"error", timeout:3000});
            	  }
            }
        }
        function remove_event()
        {
            l_dom_button_setup.onclick = "";
            l_dom_input_current_password.onfocus = "";
            l_dom_input_current_password.onblur = "";
            l_dom_input_new_password.onfocus = "";
            l_dom_input_new_password.onblur = "";
            l_dom_input_confirm_password.onfocus = "";
            l_dom_input_confirm_password.onblur = "";
        }
        l_me.ctrl=function(obj)
        {
           switch(obj.type)
           {
             case "destroy":
                {
                    remove_event();
                    l_me_parent[s_innerHTML] = "";
                    l_me_parent = null;
                }
           }
        }
        add_event();
    }
    //设置界面的网络设置
    function class_options_network(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_sni_bind_func = null,
            l_ndg_bind_func = null,
            l_dns_bind_func = null,
            l_swc_bind_func = null,
            l_network_token = "",
            l_set_network_interfaces_response_ok = 1,
            l_set_network_default_gateway_response_ok = 1,
            l_set_dns_response_ok = 1,
            l_set_wifi_config_response_ok = 1,
            l_ip_is_DHCP = 0,
            l_dns_is_DHCP = 0,
            l_origin_ethernet_addr = "",
            l_origin_wireless_addr = "",
            l_timeout_count = 0,
            l_refresh_timer,
            l_nic_enabled_status_flag = 0,
            l_nic_conn_status_flag = 0,
            l_old_version = 0,
            l_dom_select_nic,
            l_dom_input_mac_address,
            l_dom_input_ap_start_address,
            l_dom_input_ap_end_address,
            l_dom_input_ap_gateway,
            l_dom_select_network_li,
            l_dom_select_network,
            l_dom_button_refresh,
            l_dom_select_network_password_li,
            l_dom_select_network_password,
            l_dom_button_connect,
            l_dom_radio_auto_obtain_ip,
            l_dom_auto_obtain_ip_content,
            l_dom_input_auto_ip_address,
            l_dom_input_auto_gateway,
            l_dom_input_auto_subnet_mask,
            l_dom_radio_use_following_ip,
            l_dom_use_following_ip_content,
            l_dom_input_following_ip_address,
            l_dom_input_following_gateway,
            l_dom_input_following_subnet_mask,
            l_dom_radio_auto_obtain_dns,
            l_dom_auto_obtain_dns_content,
            l_dom_input_auto_dns,
            l_dom_input_auto_alternate_dns,
            l_dom_radio_use_following_dns,
            l_dom_use_following_dns_content,
            l_dom_input_following_dns,
            l_dom_input_following_alternate_dns,
            l_dom_button_setup,l_dom_input_status,
			      l_select_net;
        if(g_domain_oems_vimtag)
        {
        	l_me_parent[s_innerHTML] =
        	    "<div id='network_info' class='list_right_box'>"
	            +"<div id='nic_select_div' class = 'list_right_item'>"
	            +   "<div class='attribute_key_text'>" + mcs_network_interface + "</div>"
	            +   "<div class='options_float_right select_block' style='margin-top:0px;'><select id='select_nic'></select></div>"
	            +"</div>"
	            +"<div class='list_right_item_ex'>"
	            +   "<div class='attribute_key_text'>" + mcs_enabled + "</div>"
	            +   "<div id='nic_enabled_switch' class='options_float_right' style='margin-top:0px;'>"
	            +       "<input id='nic_switch_checkbox' type='checkbox' checked/>"
	            +   "</div>"
	            +"</div>"
	            +"<div id='nic_enabled_content'>"
	            +   "<div id='mac_address' class='list_right_item'>"
	            +       "<div class='attribute_key_text'>" + mcs_mac_address + "</div>"
	            +       "<div class='options_float_right'><input type='text' id='input_mac_address' class='input_read_only' disabled></input></div>"
	            +   "</div>"
	            +   "<div id='nic_mode_select' class='list_right_item_ex' style='clear:both'>"
	            +       "<div class='attribute_key_text'>" + mcs_wifi_mode + "</div>"
	            +       "<div class='options_float_right'>"
	            +            "<select id='select_wifi_mode'>"
	            +               "<option value='1'>" + mcs_client + "</option>"
	            +               "<option value='2'>" + mcs_ap + "</option>"
	            +            "</select>"
	            +       "</div>"
	            +   "</div>"
	            +   "<div id='nic_not_conn_content' class='list_right_item' style='display:none'>"
	            +       "<div class='attribute_key_text'>" + mcs_network_status + "</div>"
	            +       "<div class='options_float_right'><input type='text' id='input_status' value='" + mcs_not_connected + "' class='input_read_only' disabled></input></div>"
	            +   "</div>"
	            +   "<div id='nic_ap_mode_content' style='display:none'>"
	            +       "<div class='list_right_item_ex'>"
	            +          "<div class='attribute_key_text'>" + mcs_dhcp + "</div>"
	            +       "</div>"
	            +       "<div class='list_right_item'>"
	            +          "<div class='attribute_key_text'>- " + mcs_start_address + "</div>"
	            +          "<div class='options_float_right'><input id='input_ap_start_address' type='text' class='input_read_only' disabled></input></div>"
	            +       "</div>"
	            +       "<div class='list_right_item'>"
	            +          "<div class='attribute_key_text'>- " + mcs_end_address + "</div>"
	            +          "<div class='options_float_right'><input id='input_ap_end_address' type='text' class='input_read_only' disabled></input></div>"
	            +       "</div>"
	            +       "<div class='list_right_item'>"
	            +          "<div class='attribute_key_text'>- " + mcs_gateway + "</div>"
	            +          "<div class='options_float_right'><input id='input_ap_gateway' type='text' class='input_read_only' disabled></input></div>"
	            +       "</div>"
	            +   "</div>"
	            +   "<div id='select_network_li' style='display:none'>"
	            +       "<div class='list_right_item_ex'>"
	            +          "<div class='attribute_key_text'>" + mcs_select_network+ " :</div><div id='ssid_status' class='options_float_right options_status'></div>"
	            +       "</div>"
	            +       "<div class='list_right_item_ex'>"
	            +          "<div class='attribute_key_text'>- " + mcs_wifi_list + "</div>"
	            +          "<div class='options_float_right'>"
	            +             "<select id='select_network' style='float:none;'></select>"
	            +             "<button id='button_refresh' class='list_right_button' style='margin-top:0px;'>" + mcs_refresh + "</button>"
	            +          "</div>"
	            +       "</div>"
	            +       "<div id='select_network_password_li' style='display:none' class = 'list_right_item'>"
	            +           "<div class='attribute_key_text'>- " + mcs_password + "</div>"
	            +           "<div class='options_float_right'>"
	            +               "<input type='password' id='select_network_password' class='normal_input_right' style='width:155px;color:#EEE'></input><span style='font-size:12px;color:#E5393F'></span>"
	            +               "<button id='button_connect' class='standard_buttons_white'>" + mcs_connect + "</button>"
	            +           "</div>"
	            +       "</div>"
	            +   "</div>"
	            +   "<div id='nic_conn_content' style='display:none;clear:both'>"
	            +       "<div id='ip_address_content'>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='options_left_title'>IP :</div><div id='ip_status' class='options_float_right options_status'></div>"
	            +           "</div>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='attribute_key_text'>- " + mcs_auto_obtain + "</div>"
	            +               "<div class='options_float_right'><input type='radio' id='radio_auto_obtain_ip' name='ip'/></div>"
	            +           "</div>"
	            +           "<div id='auto_obtain_ip_content' style='display:none'>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_ip_address+ "</div>"
	            +                   "<div class='options_float_right'><input id='input_auto_ip_address' type='text' class='input_read_only' disabled=true></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_gateway +"</div>"
	            +                   "<div class='options_float_right'><input id='input_auto_gateway' type='text' class='input_read_only' disabled=true></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_network_mask + "</div>"
	            +                   "<div class='options_float_right'><input id='input_auto_subnet_mask' type= 'text' class='input_read_only' disabled=true></input></div>"
	            +               "</div>"
	            +           "</div>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='attribute_key_text'>- " + mcs_manually_set + "</div>"
	            +               "<div class='options_float_right'><input type='radio' id='radio_use_following_ip' name='ip'/></div>"
	            +           "</div>"
	            +           "<div id='use_following_ip_content' style='display:none' class = 'list_right_item'>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_ip_address + "</div>"
	            +                   "<div class='options_float_right'><input id='input_following_ip_address' type='text' class='normal_input_right'></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_gateway + "</div>"
	            +                   "<div class='options_float_right'><input id='input_following_gateway' type='text' class='normal_input_right'></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_network_mask + "</div>"
	            +                   "<div class='options_float_right'><input id='input_following_subnet_mask' type='text' class='normal_input_right'></input></div>"
	            +               "</div>"
	            +           "</div>"
	            +       "</div>"
	            +       "<div id='dns_content'>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='options_left_title'>DNS :</div><div id='dns_status' class='options_float_right options_status'></div>"
	            +           "</div>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='attribute_key_text'>- " + mcs_auto_obtain + "</div>"
	            +               "<div class='options_float_right'><input type='radio' id='radio_auto_obtain_dns' name='dns'/></div>"
	            +           "</div>"
	            +           "<div id='auto_obtain_dns_content' style='display:none'>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_dns + "</div>"
	            +                   "<div class='options_float_right'><input id='input_auto_dns' type='text' class='input_read_only' disabled=true></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_secondary_dns + "</div>"
	            +                   "<div class='options_float_right'><input id='input_auto_alternate_dns' type='text' class='input_read_only' disabled=true></input></div>"
	            +               "</div>"
	            +           "</div>"
	            +           "<div class='list_right_item_ex'>"
	            +               "<div class='attribute_key_text'>- " + mcs_manually_set + "</div>"
	            +               "<div class='options_float_right'><input type='radio' id='radio_use_following_dns' name='dns'/></div>"
	            +           "</div>"
	            +           "<div id='use_following_dns_content' style='display:none' class='list_right_item'>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_dns + "</div>"
	            +                   "<div class='options_float_right'><input id='input_following_dns' type='text' class='normal_input_right'></input></div>"
	            +               "</div>"
	            +               "<div class='list_right_item'>"
	            +                   "<div class='attribute_key_text'>&nbsp;&nbsp;- " + mcs_secondary_dns + "</div>"
	            +                   "<div class='options_float_right'><input id='input_following_alternate_dns' type='text' class='normal_input_right'></input></div>"
	            +               "</div>"
	            +           "</div>"
	            +       "</div>"
	            +   "</div>"
	            +"</div>"
	            +"<div>"
	            +   "<div class='options_float_right' style='clear:both'>"
	            +       "<button id='button_setup' class='list_right_button' >" + mcs_apply + "</button>"
	            +   "</div>"
	            +"</div>"
	            +"</div>";
        }
        jQuery(l_me_parent).hide().fadeIn(500);

        l_dom_select_nic = mx("#select_nic");
        l_dom_select_wifi_mode = mx("#select_wifi_mode");
        l_dom_input_mac_address = mx("#input_mac_address");
        l_dom_input_ap_start_address = mx("#input_ap_start_address");
        l_dom_input_ap_end_address = mx("#input_ap_end_address");
        l_dom_input_ap_gateway = mx("#input_ap_gateway");
        l_dom_select_network_li = mx("#select_network_li");
        l_dom_select_network = mx("#select_network");
        l_dom_button_refresh = mx("#button_refresh");
        l_dom_select_network_password_li = mx("#select_network_password_li");
        l_dom_select_network_password = mx("#select_network_password");
        l_dom_button_connect = mx("#button_connect");
        l_dom_radio_auto_obtain_ip = mx("#radio_auto_obtain_ip");
        l_dom_auto_obtain_ip_content = mx("#auto_obtain_ip_content");
        l_dom_input_auto_ip_address = mx("#input_auto_ip_address");
        l_dom_input_auto_gateway = mx("#input_auto_gateway");
        l_dom_input_auto_subnet_mask = mx("#input_auto_subnet_mask");
        l_dom_radio_use_following_ip = mx("#radio_use_following_ip");
        l_dom_use_following_ip_content = mx("#use_following_ip_content");
        l_dom_input_following_ip_address = mx("#input_following_ip_address");
        l_dom_input_following_gateway = mx("#input_following_gateway");
        l_dom_input_following_subnet_mask = mx("#input_following_subnet_mask");
        l_dom_radio_auto_obtain_dns = mx("#radio_auto_obtain_dns");
        l_dom_auto_obtain_dns_content = mx("#auto_obtain_dns_content");
        l_dom_input_auto_dns = mx("#input_auto_dns");
        l_dom_input_auto_alternate_dns = mx("#input_auto_alternate_dns");
        l_dom_radio_use_following_dns = mx("#radio_use_following_dns");
        l_dom_use_following_dns_content = mx("#use_following_dns_content");
        l_dom_input_following_dns = mx("#input_following_dns");
        l_dom_input_following_alternate_dns = mx("#input_following_alternate_dns");
        l_dom_button_setup = mx("#button_setup");
        l_dom_input_status=mx("#input_status");
        jQuery(l_dom_select_nic).tzSelect();
        jQuery(l_dom_select_wifi_mode).tzSelect();
        //启用状态  切换
       jQuery("#nic_switch_checkbox").iButton({
            labelOn:"On",
            labelOff:"Off",
            change:function(){
                if(!l_nic_enabled_status_flag)
                {
                    jQuery("#nic_enabled_content").fadeOut();
                    return;
                }
                if(mx("#nic_switch_checkbox").checked)
                {
                    jQuery("#nic_enabled_content").fadeIn();
                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet)
                    {
                        jQuery("#mac_address").fadeIn(450);
                        jQuery("#nic_mode_select").fadeOut();
                        if(l_nic_conn_status_flag)
                        {
                            jQuery("#nic_not_conn_content").fadeIn(450);
                            l_dom_input_status.value=mcs_connnected;
                            jQuery("#nic_conn_content").fadeIn(450, function(){
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                        }
                        else
                        {
                            jQuery("#nic_not_conn_content").fadeIn(450);
                            l_dom_input_status.value= mcs_not_connected;
                            jQuery("#nic_conn_content").fadeIn(450, function(){
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                        }
                    }
                    else if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi)
                    {
                        if(!l_nic_conn_status_flag)
                        {
                           l_nic_conn_status_flag = 0;
                           trigger_click(l_dom_radio_auto_obtain_ip);
                           jQuery("#nic_mode_select").fadeOut();
                           jQuery("#nic_ap_mode_content").fadeOut();
                           jQuery(l_dom_select_network_li).fadeOut();
                           jQuery("#nic_conn_content").fadeOut(300);
                           l_dom_input_status.value=mcs_fault;
                           jQuery("#mac_address").fadeOut();
                           jQuery("#nic_not_conn_content").fadeIn(450);
                           return;
                        }
                        jQuery("#nic_mode_select").fadeIn()
                        l_dom_select_wifi_mode.change_value();
                    }
                }
                else
                {
                    jQuery("#nic_enabled_content").fadeOut();
                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi)
                    {
                        jQuery(l_dom_select_network_li).fadeOut();
                        jQuery("#nic_mode_select").fadeOut();
                    }
                    jQuery("#nic_not_conn_content").fadeOut(300);
                    jQuery("#nic_conn_content").fadeOut(350, function() {
                        jQuery("#manager_page").mCustomScrollbar("update");
                    });
                }
            }
        });
        //无线模式切换
        l_dom_select_wifi_mode.change_value = function(){
            if(l_dom_select_wifi_mode[l_dom_select_wifi_mode.selectedIndex].text == mcs_client)
            {
            	 jQuery("#nic_ap_mode_content").fadeOut(300);
                    if(l_nic_conn_status_flag)
                    {
                        jQuery("#nic_not_conn_content").fadeIn(450);
                        l_dom_input_status.value=mcs_connnected;
                        jQuery("#nic_conn_content").fadeIn(450, function(){
                            jQuery("#manager_page").mCustomScrollbar("update");
                        });
                    }
                    else
                    {
                        jQuery("#nic_conn_content").fadeIn(450);
                        l_dom_input_status.value= mcs_not_connected;
                        jQuery("#nic_not_conn_content").fadeIn(450, function() {
                            jQuery("#manager_page").mCustomScrollbar("update");
                        });
                    }
                    if(l_old_version)
                    {
                        network_Business.ctrl({type:"ccm_get_wifi_list_request"});
                        jQuery(l_dom_button_setup).unbind();
                        jQuery(l_dom_button_setup).bind("click", l_swc_bind_func);
                    }
                    else
                    {
                        jQuery(l_dom_select_network_li).fadeIn();
                        jQuery("#nic_not_conn_content").fadeIn(450);
                        jQuery("#nic_conn_content").fadeIn(450, function(){
                            jQuery("#manager_page").mCustomScrollbar("update");
                        });
                    }
                    l_dom_button_refresh.onclick();
            }
            else if(l_dom_select_wifi_mode[l_dom_select_wifi_mode.selectedIndex].text == mcs_ap)
            {
            	 jQuery("#mac_address").fadeIn(450);
                    jQuery(l_dom_select_network_li).fadeOut();
                    jQuery("#nic_conn_content").fadeOut(300);
                    jQuery("#nic_not_conn_content").fadeIn(450);
                    jQuery("#nic_ap_mode_content").fadeIn(450, function() {
                        jQuery("#manager_page").mCustomScrollbar("update");
                    });

                    if(l_old_version)
                    {
                        jQuery(l_dom_button_setup).unbind();
                        jQuery(l_dom_button_setup).bind("click", l_swc_bind_func);
                    }
            }
        }

        function subnet_mask_available_and_trans(obj)
        {
            var ip_pattern = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
            if(!ip_pattern.test(obj.data)) return -1;

            var ip_array = obj.data.split("."),
                i, length, value, ip, ip_binary="";
            length = ip_array.length;
            for(i = 0; i < length; ++i)
            {
                value = parseInt(ip_array[i]);
                if(value < 0 || value > 255)
                {
                    return -1;
                }
                ip_binary += (value + 256).toString(2).substring(1);
            }
            if(-1 != ip_binary.indexOf("01"))
                return -1;
            return ip_binary.replace(/0/g, '').length;
        }
        function generate_subnet_mask(length)
        {
            var i, prefixed_IPv4_addr = "", ip_binary = "";
            for(i = 0; i < 32; ++i)
            {
                if(i < length)
                    ip_binary += '1';
                else
                    ip_binary += '0';
                if( (i + 1) % 8 == 0)
                {
                    prefixed_IPv4_addr += parseInt(ip_binary, 2).toString(10);
                    if(i != 31)
                        prefixed_IPv4_addr += ".";
                    ip_binary = "";
                }
            }
            return prefixed_IPv4_addr;
        }
        function generate_eth_setup(net_itfs)
        {
            jQuery(l_dom_select_network_li).fadeOut();
            jQuery("#nic_ap_mode_content").fadeOut();
            if(net_itfs.enable)
            {
                l_nic_enabled_status_flag = 1;
                l_network_token = net_itfs.token;
              //  get_network_default_gateway_request();
                network_Business.ctrl({type:"get_network_default_gateway_request"});
               // get_dns_request();
               network_Business.ctrl({type:"get_dns_request"});
                if(net_itfs.IPv4)
                {
                    if(net_itfs.IPv4.ConnStatus)
                    {
                        l_nic_conn_status_flag = 1;
                        if(net_itfs.Info)
                        {
                            l_dom_input_mac_address.value = net_itfs.Info.HwAddress;
                        }
                        else
                        {
                            log("info:GetNetworkInterfacesResponse return NetworkInterfaces.Info is null in class_options_network.");
                        }

                        if(net_itfs.IPv4.Config.DHCP)
                        {
                            if(net_itfs.IPv4.Config.FromDHCP)
                            {
                                l_ip_is_DHCP = 1;
                                l_dom_input_auto_ip_address.value = net_itfs.IPv4.Config.FromDHCP.Address;
                                l_dom_input_auto_subnet_mask.value = generate_subnet_mask(net_itfs.IPv4.Config.FromDHCP.PrefixedIPv4Address);
                                trigger_click(l_dom_radio_auto_obtain_ip);
                            }
                            else
                            {
                                log("info:GetNetworkInterfacesResponse return NetworkInterfaces.IPv4.Config.FromDHCP is null in class_options_network.");
                            }
                        }
                        else
                        {
                            if(net_itfs.IPv4.Config.Manual)
                            {
                                l_ip_is_DHCP = 0;
                                l_dom_input_following_ip_address.value = net_itfs.IPv4.Config.Manual[0].Address;
                                l_dom_input_following_subnet_mask.value = generate_subnet_mask(net_itfs.IPv4.Config.Manual[0].PrefixedIPv4Address);
                                trigger_click(l_dom_radio_use_following_ip);
                            }
                            else
                            {
                                log("info:GetNetworkInterfacesResponse return NetworkInterfaces.IPv4.Config.Manual is null in class_options_network.");
                            }
                        }
                        l_origin_ethernet_addr = l_ip_is_DHCP ? net_itfs.IPv4.Config.FromDHCP.Address : net_itfs.IPv4.Config.Manual[0].Address;
                    }
                }
                else
                {
                    log("info:GetNetworkInterfacesResponse return msg.NetworkInterfaces.IPv4 is null in class_options_network.");
                }
                jQuery("#nic_switch_checkbox").iButton("toggle", true);
            }
            else
            {
                jQuery("#nic_switch_checkbox").iButton("toggle", false);
            }
        }
        //加载以太网 界面
        function generate_eth_setup_ex(now_ifs)
        {
            jQuery(l_dom_select_network_li).fadeOut();
            jQuery("#nic_ap_mode_content").fadeOut();
            if(now_ifs.enabled)
            {
                l_nic_enabled_status_flag = 1;
                if(now_ifs.phy)
                {
                    l_dom_input_mac_address.value = now_ifs.phy.info.mac;
                    if(now_ifs.phy.info.stat == "ok")
                    {
                        l_nic_conn_status_flag = 1;
                        if(now_ifs.ipv4)
                        {
                            if(now_ifs.ipv4.info.stat == "ok")
                            {
                                mx("#ip_status").setAttribute("title", mcs_connnected);
                            }
                            else if(now_ifs.ipv4.info.stat == "err")
                            {
                            }
                            if(now_ifs.ipv4.conf.mode == "dhcp")
                            {
                                l_ip_is_DHCP = 1;
                                l_dom_input_auto_ip_address.value = now_ifs.ipv4.info.ip.addr || "0.0.0.0";
                                l_dom_input_auto_subnet_mask.value = now_ifs.ipv4.info.ip.mask || "0.0.0.0";
                                l_dom_input_auto_gateway.value = now_ifs.ipv4.info.ip.gw || "0.0.0.0";
                                trigger_click(l_dom_radio_auto_obtain_ip);
                            }
                            else if(now_ifs.ipv4.conf.mode == "static")
                            {
                                l_ip_is_DHCP = 0;
                                l_dom_input_following_ip_address.value = now_ifs.ipv4.conf.static_ip.addr || "0.0.0.0";
                                l_dom_input_following_subnet_mask.value = now_ifs.ipv4.conf.static_ip.mask || "0.0.0.0";
                                l_dom_input_following_gateway.value = now_ifs.ipv4.conf.static_ip.gw || "0.0.0.0";
                                trigger_click(l_dom_radio_use_following_ip);
                            }
                            l_origin_ethernet_addr = l_ip_is_DHCP ? now_ifs.ipv4.info.ip.addr:now_ifs.ipv4.conf.static_ip.addr;
                        }
                        else
                        {
                            log("info:GetDeviceInformationResponse return net_info.ifs.ipv4 || ipv4.conf || ipv4.info is null in class_options_network.");
                        }
                    }
                    else if(now_ifs.internet.info.stat == "err")
                    {
                        l_nic_conn_status_flag = 0;
                        if(now_ifs.ipv4)
                        {
                            if(now_ifs.ipv4.info.stat == "ok")
                            {
                                mx("#ip_status").setAttribute("title", mcs_connnected);
                            }
                            else if(now_ifs.ipv4.info.stat  == "err")
                            {
                            }
                            if(now_ifs.ipv4.conf.mode == "dhcp")
                            {
                                l_ip_is_DHCP = 1;
                                l_dom_input_auto_ip_address.value = now_ifs.ipv4.info.ip.addr || "0.0.0.0";
                                l_dom_input_auto_subnet_mask.value = now_ifs.ipv4.info.ip.mask || "0.0.0.0";
                                l_dom_input_auto_gateway.value = now_ifs.ipv4.info.ip.gw || "0.0.0.0";
                                trigger_click(l_dom_radio_auto_obtain_ip);
                            }
                            else if(now_ifs.ipv4.conf.mode == "static")
                            {
                                l_ip_is_DHCP = 0;
                                l_dom_input_following_ip_address.value = "0.0.0.0";
                                l_dom_input_following_subnet_mask.value = "0.0.0.0";
                                l_dom_input_following_gateway.value = "0.0.0.0";
                                trigger_click(l_dom_radio_use_following_ip);
                            }
                            l_origin_ethernet_addr = l_ip_is_DHCP ? now_ifs.ipv4.info.ip.addr : now_ifs.ipv4.conf.static_ip.addr;
                        }
                    }
                }
                else
                {
                    log("info:GetDeviceInformationResponse return net_info.ifs.phy || ifs.phy.conf || ifs.phy.info is null in class_options_network.");
                }
                jQuery("#nic_switch_checkbox").iButton("toggle", true);
            }
            else
            {
                jQuery("#nic_switch_checkbox").iButton("toggle", false);
            }
        }
        function generate_wireless_setup(net_itfs)
        {
            if(net_itfs.Enabled)
            {
                l_nic_enabled_status_flag = 1;
             //   ccm_get_wifi_configuration_request({net_itfs:net_itfs});

                 network_Business.ctrl({type:"ccm_get_wifi_configuration_request",data:{net_itfs:net_itfs}});
                jQuery("#nic_switch_checkbox").iButton("toggle", true);
            }
            else
            {
                jQuery("#nic_switch_checkbox").iButton("toggle", false);
            }
        }
        //加载无线网页面
        function generate_wireless_setup_ex(now_ifs)
        {
            if(now_ifs.enabled)
            {
                l_nic_enabled_status_flag = 1;
                l_network_token = now_ifs.token;
                if(now_ifs.phy && now_ifs.phy.conf && now_ifs.phy.info)
                {
                    if(now_ifs.phy.info.stat == "ok")
                    {
                        l_nic_conn_status_flag = 1;
                        if(now_ifs.phy.conf.mode == "wificlient")
                        {
                        	  l_dom_select_wifi_mode[0].selected = true;
                        	  jQuery(l_dom_select_wifi_mode).tzSelect();
                            l_dom_input_mac_address.value = now_ifs.phy.info.mac;
                            if(now_ifs.ipv4)
                            {
                                if(now_ifs.ipv4.info.stat == "ok")
                                {
                                    mx("#ip_status").setAttribute("title", mcs_connnected);
                                }
                                else if(now_ifs.ipv4.info.stat == "err")
                                {
                                }
                                if(now_ifs.ipv4.conf.mode == "dhcp")
                                {
                                    l_ip_is_DHCP = 1;
                                    l_dom_input_auto_ip_address.value = now_ifs.ipv4.info.ip.addr|| "0.0.0.0";
                                    l_dom_input_auto_subnet_mask.value = now_ifs.ipv4.info.ip.mask || "0.0.0.0";
                                    l_dom_input_auto_gateway.value = now_ifs.ipv4.info.ip.gw || "0.0.0.0";
                                    trigger_click(l_dom_radio_auto_obtain_ip);
                                }
                                else if(now_ifs.ipv4.conf.mode == "static")
                                {
                                    l_ip_is_DHCP = 0;
                                    l_dom_input_following_ip_address.value = now_ifs.ipv4.conf.static_ip.addr || "0.0.0.0";
                                    l_dom_input_following_subnet_mask.value = now_ifs.ipv4.conf.static_ip.mask || "0.0.0.0";
                                    l_dom_input_following_gateway.value = now_ifs.ipv4.conf.static_ip.gw || "0.0.0.0";
                                    trigger_click(l_dom_radio_use_following_ip);
                                }
                                l_origin_wireless_addr = l_ip_is_DHCP ? now_ifs.ipv4.info.ip.addr : now_ifs.ipv4.conf.static_ip.addr;
                            }
                            else
                            {
                                log("info:GetDeviceInformationResponse return msg.ifs.ipv4 || ipv4.conf || ipv4.info is null in class_options_network.");
                            }
                            l_dom_input_ap_start_address.value = "192.168.188.100";
                            l_dom_input_ap_end_address.value = "192.168.188.253";
                            l_dom_input_ap_gateway.value = "192.168.188.254";

                            l_dom_select_wifi_mode.change_value();
                        }
                        else if(now_ifs.phy.conf.mode == "adhoc")
                        {
                        	  l_dom_select_wifi_mode[1].selected = true;
                        	  jQuery(l_dom_select_wifi_mode).tzSelect();
                            if(now_ifs.dhcp_srv)
                            {
                                l_dom_input_ap_start_address.value = now_ifs.dhcp_srv.conf.ip_start;
                                l_dom_input_ap_end_address.value = now_ifs.dhcp_srv.conf.ip_end;
                                l_dom_input_ap_gateway.value = now_ifs.dhcp_srv.conf.gw;

                                mx("#ip_status").style.cssText = "";
                                l_dom_input_following_ip_address.value = "";
                                l_dom_input_following_subnet_mask.value = "";
                                l_dom_input_following_gateway.value = "";

                                if(now_ifs.ipv4.conf.mode == "dhcp")
                                {
                                    trigger_click(l_dom_radio_auto_obtain_ip);
                                }
                                else if(now_ifs.ipv4.conf.mode == "static")
                                {
                                    l_dom_input_following_ip_address.value = now_ifs.ipv4.conf.static_ip.addr || "0.0.0.0";
                                    l_dom_input_following_subnet_mask.value = now_ifs.ipv4.conf.static_ip.mask || "0.0.0.0";
                                    l_dom_input_following_gateway.value = now_ifs.ipv4.conf.static_ip.gw || "0.0.0.0";
                                    trigger_click(l_dom_radio_use_following_ip);
                                }
                            }
                            else
                            {
                                log("info:GetDeviceInformationResponse return ifs.dhcp_srv || ifs.dhcp_srv.conf || ifs.dhcp_srv.info is null in class_options_network.");
                            }
                            l_dom_select_wifi_mode.change_value();
                        }
                        else if(now_ifs.phy.conf.mode == "monitor")
                        {
                        	  l_dom_select_wifi_mode[2].selected = true;
                        	  jQuery(l_dom_select_wifi_mode).tzSelect();
                        	  //处于WiFi智能配置模式时，隐藏选项
                        	  l_dom_select_wifi_mode.change_value();
                        }

                        if(now_ifs.wifi_client.ap_list)
                        {
                              var i, length, signal_level = 0, inner_html = "",
                                   wifi_list = now_ifs.wifi_client.ap_list;

                              inner_html += "<option>" + mcs_not_select + "</option>";
                              length = wifi_list.length;

                              if(now_ifs.wifi_client.info.stat == "ok")
                              {
                                  mx("#ssid_status").setAttribute("title", mcs_connnected);
                                  mx("/span", l_dom_select_network_password_li)[0].innerHTML = "";
                                  for(i = 0; i < length; ++i)
                                  {
                                  	    if(wifi_list[i].ssid == "") continue;
                                        if(wifi_list[i].quality >= 0 && wifi_list[i].quality <= 100)
                                        {
                                            signal_level = Math.floor(wifi_list[i].quality / 20);
                                            signal_level = (signal_level >= 5 ? 4 : signal_level);
                                        }
                                        else
                                        {
                                            log("info:GetDeviceInformationResponse return signal_level is illegal in class_options_network.");
                                        }
                                        if(wifi_list[i].connect)
                                        {
                                            inner_html += "<option value='" + wifi_list[i].ssid + "' selected='selected' front_img='./imgs/device_status_green.png' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + wifi_list[i].ssid + "</option>";
                                        }
                                        else
                                        {
                                            inner_html += "<option value='" + wifi_list[i].ssid + "' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + wifi_list[i].ssid + "</option>";
                                        }
                                  }
                                  l_dom_select_network_password.value = now_ifs.wifi_client.conf.key;
                              }
                              else
                              {
                                    jQuery(l_dom_select_network_password_li).fadeIn("normal", function() {
                                        jQuery("#manager_page").mCustomScrollbar("update");
                                    });
                                    if(now_ifs.wifi_client.info.stat== "err")
                                    {
                                        mx("#ssid_status").setAttribute("title", mcs_connect_fail);
                                        mx("/span", l_dom_select_network_password_li)[0].innerHTML = "&nbsp;&nbsp;&nbsp; " + mcs_connect_fail;
                                    }
                                    else if(now_ifs.wifi_client.info.stat == "info.connecting")
                                    {
                                        mx("#ssid_status").setAttribute("title", mcs_connecting);
                                        mx("/span", l_dom_select_network_password_li)[0].innerHTML = "&nbsp;&nbsp;&nbsp; " + mcs_connecting;
                                    }
                                    else
                                        mx("/span", l_dom_select_network_password_li)[0].innerHTML = "";
                                    for(i = 0; i < length; ++i)
                                    {
                                    	  if(wifi_list[i].ssid == "") continue;
                                        if(wifi_list[i].quality >= 0 && wifi_list[i].quality <= 100)
                                        {
                                            signal_level = Math.floor(wifi_list[i].quality / 20);
                                            signal_level = (signal_level >= 5 ? 4 : signal_level);
                                        }
                                        else
                                        {
                                            log("info:GetDeviceInformationResponse return signal_level is illegal in class_options_network.");
                                        }
                                        if(wifi_list[i].ssid == now_ifs.wifi_client.conf.ssid)
                                        {
                                            inner_html += "<option value='" + wifi_list[i].ssid + "' selected='selected' front_img='./imgs/device_status_yellow.png' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + wifi_list[i].ssid + "</option>";
                                        }
                                        else
                                        {
                                            inner_html += "<option value='" + wifi_list[i].ssid + "' rear_img='./imgs/wifi_signal"+ signal_level + ".png'><pre>" + wifi_list[i].ssid + "</pre></option>";
                                        }
                                    }
                              }
                              jQuery(l_dom_select_network).html(inner_html);
                        }
                        else
                        {
                            log("info:GetDeviceInformationResponse return msg.ifs.wifi_client || wifi_client.conf || wifi_client.info is null in class_options_network.");
                        }
                        jQuery(l_dom_select_network).tzSelect(null,1);
                    }
                    else if(now_ifs.phy.info.stat == "err")
                    {
                       l_nic_conn_status_flag = 0;
                       trigger_click(l_dom_radio_auto_obtain_ip);
                       jQuery("#nic_mode_select").fadeOut();
                       jQuery("#nic_ap_mode_content").fadeOut();
                       jQuery(l_dom_select_network_li).fadeOut();
                       jQuery("#nic_conn_content").fadeOut(300);
                       l_dom_input_status.value=mcs_fault;
                       jQuery("#mac_address").fadeOut();
                       return;
                    }
                }
                else
                {
                    log("info:GetDeviceInformationResponse return ifs.phy || ifs.phy.conf || ifs.phy.info is null in class_options_network.");
                }
                jQuery("#nic_switch_checkbox").iButton("toggle", true);
            }
            else
            {
                jQuery("#nic_switch_checkbox").iButton("toggle", false);
            }
        }

        function on_cacs_check_nid_ack(type, msg, ref)
        {
            if(!l_me_parent) return;
            g_system_stop_wait();
            if(!msg.result)
            {
                clearInterval(l_refresh_timer);
            }
            else
            {
                log("error:on_cacs_check_nid_ack return result error in class_options_network.");
                return -1;
            }
            location = window.location.protocol+"//" + ref.ip;
        }
        function get_network_default_gateway_response(type, msg, ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.ret&&msg.ret.code == "")
            {
                if(msg.NetworkGateway.IPv4Address)
                {
                    l_dom_input_auto_gateway.value = msg.NetworkGateway.IPv4Address[0];
                    l_dom_input_following_gateway.value = msg.NetworkGateway.IPv4Address[0];

                    if(l_ndg_bind_func)
                    {
                        jQuery(l_dom_button_setup).unbind("click", l_ndg_bind_func);
                        l_ndg_bind_func = null;
                    }

                    l_ndg_bind_func = function(obj) {
                        l_set_network_default_gateway_response_ok = 0;
                        network_Business.ctrl({type:"set_network_default_gateway_request",data:{token:l_network_token, NetworkGateway:[{IPv4Address:l_dom_input_following_gateway.value}]}})
                     //   set_network_default_gateway_request({IPv4Address:l_dom_input_following_gateway.value});
                    };

                    jQuery(l_dom_button_setup).bind("click", l_ndg_bind_func);
                }
                else
                {
                    log("info:GetNetworkDefaultGatewayResponse return NetworkGateway.IPv4Address is null in class_options_network.");
                }
            }
            else
            {
                log("error:GetNetworkDefaultGatewayResponse return Result error in class_options_network.");
                return -1;
            }
        }
        function set_network_default_gateway_response(type, msg, ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.ret&&msg.ret.code == "")
            {
                l_set_network_default_gateway_response_ok = 1;
                if(l_set_network_interfaces_response_ok && l_set_dns_response_ok && l_set_wifi_config_response_ok)
                {
                    l_set_network_interfaces_response_ok = 0;
                    l_set_dns_response_ok = 0;
                    l_set_wifi_config_response_ok = 0;
                    l_set_network_default_gateway_response_ok = 0;

                    g_system_prompt_box(mcs_set_successfully, 240, -200);
                }
            }
            else
            {
                log("error:SetNetworkDefaultGatewayResponse return Result error in class_options_network.");
                return -1;
            }
        }
        function get_dns_response(type, msg, ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.ret&&msg.ret.code == "")
            {
                if(msg.DNSInformation.FromDHCP)
                {
                    if(msg.DNSInformation.DNSFromDHCP)
                    {
                        l_dom_input_auto_dns.value = msg.DNSInformation.DNSFromDHCP[0];
                        if(msg.DNSInformation.DNSFromDHCP.length > 1)
                            l_dom_input_auto_alternate_dns.value = msg.DNSInformation.DNSFromDHCP[1];
                    }
                    else
                    {
                        log("info:GetDNSResponse return DNSInformation.DNSFromDHCP is null in class_options_network.");
                    }
                    l_dns_is_DHCP = 1;
                    trigger_click(l_dom_radio_auto_obtain_dns);
                }
                else
                {
                    if(msg.DNSInformation.DNSManual)
                    {
                        l_dom_input_following_dns.value = msg.DNSInformation.DNSManual[0];
                        if(msg.DNSInformation.DNSManual.length > 1)
                            l_dom_input_following_alternate_dns.value = msg.DNSInformation.DNSManual[1];
                    }
                    else
                    {
                        log("info:GetDNSResponse return DNSInformation.DNSManual is null in class_options_network.");
                    }
                    l_dns_is_DHCP = 0;
                    trigger_click(l_dom_radio_use_following_dns);
                }
                if(l_dns_bind_func)
                {
                    jQuery(l_dom_button_setup).unbind("click", l_dns_bind_func);
                    l_dns_bind_func = null;
                }

                l_dns_bind_func = function(obj) {
                    var DHCP_flag, input_dns, input_alternate_dns;

                    if(l_dom_radio_auto_obtain_dns.checked)
                    {
                        DHCP_flag = 1;
                        input_dns = l_dom_input_auto_dns.value;
                        input_alternate_dns = l_dom_input_auto_alternate_dns.value;
                    }
                    else if(l_dom_radio_use_following_dns.checked)
                    {
                        DHCP_flag = 0;
                        input_dns = l_dom_input_following_dns.value;
                        input_alternate_dns = l_dom_input_following_alternate_dns.value;
                    }
                   // set_dns_request({FromDHCP:DHCP_flag, DNS:input_dns, Alternate_DNS:input_alternate_dns})
                  //  FramDHCP:obj.FromDHCP, DNSManual:[obj.DNS, obj.Alternate_NDS]
                    network_Business.ctrl({type:"set_dns_request",data:{FramDHCP:FramDHCP,DNSManual:[input_dns,input_alternate_dns]}});
                };
                jQuery(l_dom_button_setup).bind("click", l_dns_bind_func);
            }
            else
            {
                log("error:GetDNSResponse return Result error in class_options_network.");
                return -1;
            }
        }
        function set_dns_response(type, msg, ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.ret&&msg.ret.code == "")
            {
                l_set_dns_response_ok = 1;
                if(l_set_network_interfaces_response_ok && l_set_network_default_gateway_response_ok && l_set_wifi_config_response_ok)
                {
                    l_set_network_interfaces_response_ok = 0;
                    l_set_network_default_gateway_response_ok = 0;
                    l_set_dns_response_ok = 0;
                    l_set_wifi_config_response_ok = 0;

                    g_system_prompt_box(mcs_set_successfully, 240, -200);
                }
            }
            else
            {
                log("error:SetDNSResponse return Result error in class_options_network.");
                return -1;
            }
        }
        //wifi刷新 返回列表
        function ccm_get_wifi_list_response(msg,ref)
        {
            if(!l_me_parent) return;
            var i, length, inner_html = "";
            if(msg && msg.result=="")
            {
                if(msg.networks && msg.networks[1].token=="ra0" &&  msg.networks[1].wifi_client.ap_list)
                {
				            var msg_wifi_list=msg.networks[1].wifi_client.ap_list;
                    inner_html += "<option>" + mcs_not_select + "</option>";
                    length = msg_wifi_list.length;
                    for(i = 0; i < length; ++i)
                    {
                    	  if(msg_wifi_list[i].ssid == "") continue;

                        signal_level = Math.floor(msg_wifi_list[i].quality / 20);
                        signal_level = (signal_level >= 4 ? 4 : signal_level);
  
                        if(msg_wifi_list[i].connect)
                        {
                            inner_html += "<option value='"+ msg_wifi_list[i].ssid  +"' selected='selected' front_img='./imgs/device_status_green.png' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + msg_wifi_list[i].ssid + "</option>";
                        }
                        else
                        {
                            inner_html += "<option value='" + msg_wifi_list[i].ssid + "' rear_img='./imgs/wifi_signal"+ signal_level + ".png'>" + msg_wifi_list[i].ssid + "</option>";
                        }
                    }
                    jQuery(l_dom_select_network).html(inner_html);
                    l_dom_select_network.change_value();
                }
                else
                {
                    log("info:CcmGetWifiListResponse return WifiList is null in class_options_network.");
                }
                jQuery(l_dom_select_network).tzSelect(null,1);
                jQuery(l_dom_select_network_li).fadeIn();
                //jQuery("#nic_not_conn_content").fadeOut(450);
                jQuery("#nic_conn_content").fadeIn(450, function(){
                    jQuery("#manager_page").mCustomScrollbar("update");
                });
            }
        }

        function ccm_dev_info_get_ack(msg , ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {   //新版本v开头 老版本没有v 有v的字符串比较一定大于没v的
                if(msg.ver < "12.10.17.23.45")
                {
                   l_old_version = 1;
                   ms.send_msg("net_get",{sn:g_select_device_ipc,force_scan:0},{select:mcs_ethernet},dev_net_get_ack);
                }
                else
                {
                    l_old_version = 0;
                    ms.send_msg("net_get",{sn:g_select_device_ipc,force_scan:0,filter:"all"},{ip:g_server_device,select:(ref ==null?null:ref.select)},dev_net_get_ack);
                    l_dom_button_connect.style.display = "none";
                }
            }
            else
            {
                log("error:GetDeviceInformationResponse return Result error in class_options_network.");
            }
        }
        //设备网络获取
        function dev_net_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            g_system_stop_wait();
            clearInterval(l_refresh_timer);
            if(msg && msg.result=="")
            {
                var net_info;
                net_info = msg.networks;
                if(net_info)
                {
                    var i, length = net_info.length, inner_html = "";
                    for(i = 0; i < length; ++i)
                    {
                        if(net_info[i].token == "eth0")
                            if(ref && ref.select == mcs_ethernet)
                                inner_html += "<option value ='" + i + "' selected='selected'>" + mcs_ethernet + "</option>";
                            else
                                inner_html += "<option value ='" + i + "'>" + mcs_ethernet + "</option>";
                        else if(net_info[i].token == "ra0")
                            if(ref && ref.select == mcs_wifi)
                                inner_html += "<option value ='" + i + "' selected='selected'>" +mcs_wifi + "</option>";
                            else
                                inner_html += "<option value ='" + i + "'>" + mcs_wifi + "</option>";
                    }
                    jQuery(l_dom_select_nic).html(inner_html);
                    //以太网 和无线网选择
                    l_dom_select_nic.change_value = function(obj){
                    	  if(l_select_net==mcs_wifi)
                        {
                            l_dom_select_nic[1].selected=true;
                            l_select_net="";
                        }
                        else if (l_select_net==mcs_connnected)
                        {
                            l_dom_select_nic[0].selected=true;
                            l_select_net="";
                        }
                        jQuery(l_dom_select_nic).tzSelect();
                        l_nic_enabled_status_flag = 0;
                        l_nic_conn_status_flag = 0;
                        l_ip_is_DHCP = 0;
                        //选择的是以太网
                        if(this[this.selectedIndex].text == mcs_ethernet)
                        {
                            jQuery(l_dom_button_setup).unbind();
                            generate_eth_setup_ex(net_info[this.selectedIndex]);
                        }
                        //选择的是无线网
                        else if(this[this.selectedIndex].text == mcs_wifi)
                        {
                            jQuery(l_dom_button_setup).unbind();
                            generate_wireless_setup_ex(net_info[this.selectedIndex]);
                        }
                        if(msg.dns)
                        {
                            if(msg.dns.info.stat == "ok")
                            {
                                mx("#dns_status").setAttribute("title", mcs_connnected);
                            }
                            else if(msg.dns.info.stat == "err")
                            {
                            }
                            if(msg.dns.conf.mode == "dhcp")
                            {
							                  //net_dns=msg.dns;
                                l_dom_input_auto_dns.value = msg.dns.info.dns[0] || "0.0.0.0";
                                if(msg.dns.info.dns.length > 1)
                                    l_dom_input_auto_alternate_dns.value = msg.dns.info.dns[1] || "0.0.0.0";
                                l_dns_is_DHCP = 1;
                                trigger_click(l_dom_radio_auto_obtain_dns);
                            }
                            else if(msg.dns.conf.mode == "static")
                            {
                                l_dom_input_following_dns.value = msg.dns.conf.static_dns[0] || "0.0.0.0";
                                if(msg.dns.conf.static_dns.length > 1)
                                    l_dom_input_following_alternate_dns.value = msg.dns.conf.static_dns[1] || "0.0.0.0";
                                l_dns_is_DHCP = 0;
                                trigger_click(l_dom_radio_use_following_dns);
                            }
                        }
                        else
                        {
                            log("info:GetDeviceInformationResponse return net_info.dns || dns.conf || dns.info is null in class_options_network.");
                        }
                        //应用点击事件
                        jQuery(l_dom_button_setup).bind("click", function() {
                            var ip_address, ip_refresh = "", origin_connected = "";
                            if(g_select_device_ipc && g_network_environ == "private")          //直连
                            {
                                if(l_origin_ethernet_addr == window.location.host)
                                {
                                    origin_connected = l_origin_ethernet_addr;
                                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet && l_dom_radio_auto_obtain_ip.checked && !l_ip_is_DHCP)
                                    {
                                        ip_refresh = origin_connected;
                                    }
                                }
                                else if(l_origin_wireless_addr == window.location.host)
                                {
                                    origin_connected = l_origin_wireless_addr;
                                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi && l_dom_radio_auto_obtain_ip.checked && !l_ip_is_DHCP)
                                    {
                                        ip_refresh = origin_connected;
                                    }
                                }
                                if(l_dom_radio_use_following_ip.checked)
                                {
                                    ip_address = l_dom_input_following_ip_address.value;
                                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet)
                                    {
                                        if((ip_address != l_origin_ethernet_addr) && (origin_connected == l_origin_ethernet_addr))
                                            ip_refresh = ip_address;
                                    }
                                    else if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi)
                                    {
                                        if((ip_address != l_origin_wireless_addr) && (origin_connected == l_origin_wireless_addr))
                                            ip_refresh = ip_address;
                                    }
                                }
                            }
                            else
                            {
                                if(l_dom_radio_auto_obtain_ip.checked)
                                {
                                    if(!l_ip_is_DHCP)
                                    {
                                        if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi)
                                        {
                                            ip_refresh = l_origin_wireless_addr;
                                        }
                                        else if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet)
                                        {
                                            ip_refresh = l_origin_ethernet_addr;
                                        }
                                    }
                                }
                                else if(l_dom_radio_use_following_ip.checked)
                                {
                                    ip_address = l_dom_input_following_ip_address.value;
                                    if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_wifi)
                                    {
                                        if(ip_address != l_origin_wireless_addr)
                                            ip_refresh = ip_address;
                                    }
                                    else if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet)
                                    {
                                        if(ip_address != l_origin_ethernet_addr)
                                            ip_refresh = ip_address;
                                    }
                                }
                            }
                            if(ip_refresh)
                            {
                                var type = mcloud_agent.devs.get(g_select_device_ipc).type;
                                if(type == "IPC" && g_network_environ == "private" || type == "BOX")                //Direct Connect
                                {
                                    system_pop_confirm_box({str:mcs_modify_network_prompt, callback_func:function(){
                                        ccm_set_network_info_request({type:l_dom_select_nic[l_dom_select_nic.selectedIndex].text,
                                            ori_net_info:msg, to:ip_refresh + ":" + location.port, select:l_dom_select_nic[l_dom_select_nic.selectedIndex].text});
                                    }});
                                }
                                else                                                                                                //Through the server
                                {
                                    system_pop_confirm_box({str:mcs_modify_network_prompt, callback_func:function(){
                                        ccm_set_network_info_request({type:l_dom_select_nic[l_dom_select_nic.selectedIndex].text,
                                            ori_net_info:msg, to:ref.ip, select:l_dom_select_nic[l_dom_select_nic.selectedIndex].text});
                                    }});
                                }
                            }
                            else
                            {
                                system_pop_confirm_box({str:mcs_modify_network_prompt, callback_func:function(){
                                    ccm_set_network_info_request({type:l_dom_select_nic[l_dom_select_nic.selectedIndex].text,
                                        ori_net_info:msg, to:ip_refresh, select:l_dom_select_nic[l_dom_select_nic.selectedIndex].text});
                                }});
                            }
                        });
                    };
                    l_dom_select_nic.change_value();
                }
                else
                {
                    log("error:CcmGetNetworkInfoResponse return ifaces is null in class_options_network.");
                    return -1;
                }
            }
            else
            {
                log("eror:CcmGetNetworkInfoResponse return Result error in class_options_network.");
            }
        }
        //设置网络参数
        function ccm_set_network_info_request(obj)
        {
            var node, node_sn,
                i, length, count = 0, net_info = {}, now_ifs, now_net_info = {},dns={};

            node_sn = g_select_device_ipc;
            node = mcloud_agent.devs.get(node_sn);
            if(!node)  return;
            //obj_merge(net_info, obj.ori_net_info);
            net_info = obj.ori_net_info.networks;
            //确定有多少个网络连接可用
            for(i = 0; i < net_info.length; ++i)
            {
                if(net_info[i].enabled)
                    ++ count;
            }
            now_ifs = net_info[l_dom_select_nic.selectedIndex];
            if(obj.type == mcs_ethernet)
            {
                if(nic_switch_checkbox.checked)
                {
                    if(l_nic_enabled_status_flag)
                    {
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
                        //自动获取ip
                        if(l_dom_radio_auto_obtain_ip.checked)
                        {
                            now_net_info.ifs["ipv4"] = {conf:{enabled:now_ifs.ipv4.conf.enabled, mode:"dhcp", static_ip:"" ,debug_ip:""}};
                        }
                        else if(l_dom_radio_use_following_ip.checked)//手动设置ip
                        {
                            now_net_info.ifs["ipv4"] = {conf:{enabled:now_ifs.ipv4.conf.enabled, mode:"static",
                                static_ip:{addr:l_dom_input_following_ip_address.value, gw:l_dom_input_following_gateway.value,
                                    mask:now_ifs.ipv4.conf.static_ip ? now_ifs.ipv4.conf.static_ip.mask : ""},
                                    debug_ip:now_ifs.ipv4.conf.debug_ip
                            }};
                            if(subnet_mask_available_and_trans({data:l_dom_input_following_subnet_mask.value}) >= 0)
                                now_net_info.ifs.ipv4.conf.static_ip.mask = l_dom_input_following_subnet_mask.value;
                            else
                            {
                                system_pop_confirm_box({alert:true, str:mcs_subnet_mask_wrong_format});
                                return;
                            }
                        }
                    }
                    else
                    {
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
                    }
                }
                else//关闭以太网连接
                {
                    if(count < 1)
                    {
                        system_pop_confirm_box({alert:true, str:mcs_not_allowed_close_two_network_cards});
                        return;
                    }
                    else
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:0};
                }
            }
            else if(obj.type == mcs_wifi)
            {
                if(nic_switch_checkbox.checked)
                {
                    if(l_nic_enabled_status_flag)
                    {
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
                        //if(mx("#nic_mode_switch_checkbox").checked)             //client
                        if(l_dom_select_wifi_mode[l_dom_select_wifi_mode.selectedIndex].text == mcs_client)
                        {
                            now_net_info.ifs["phy"] = {conf:{mode:"wificlient", mtu:now_ifs.phy.conf.mtu}};
                            if(l_dom_radio_auto_obtain_ip.checked)
                            {
                                now_net_info.ifs["ipv4"] = {conf:{enabled:now_ifs.ipv4.conf.enabled, mode:"dhcp", static_ip:"", debug_ip:""}};
                            }
                            else if(l_dom_radio_use_following_ip.checked)
                            {
                                now_net_info.ifs["ipv4"] = {conf:{enabled:now_ifs.ipv4.conf.enabled, mode:"static",
                                    static_ip:{addr:l_dom_input_following_ip_address.value, gw:l_dom_input_following_gateway.value,
                                        mask:now_ifs.ipv4.conf.static_ip ? now_ifs.ipv4.conf.static_ip.mask : ""},
                                    debug_ip:now_ifs.ipv4.conf.debug_ip}};
                                if(subnet_mask_available_and_trans({data:l_dom_input_following_subnet_mask.value}) >= 0)
                                    now_net_info.ifs.ipv4.conf.static_ip.mask = l_dom_input_following_subnet_mask.value;
                                else
                                {
                                    system_pop_confirm_box({alert:true, str:mcs_subnet_mask_wrong_format});
                                    return;
                                }
                            }

                            now_net_info.ifs["wifi_client"] = {conf:{enabled:1, ssid:l_dom_select_network[l_dom_select_network.selectedIndex].value,
                                usr:l_dom_select_network[l_dom_select_network.selectedIndex].value,
                                key:l_dom_select_network_password.value}};
                        }
                        else if(l_dom_select_wifi_mode[l_dom_select_wifi_mode.selectedIndex].text == mcs_ap)                                                   //adhoc
                        {
                            now_net_info.ifs["phy"] = {conf:{mode:"adhoc", mtu:now_ifs.phy.conf.mtu}};
                            now_net_info.ifs["dhcp_srv"] = {conf:{enabled:now_ifs.dhcp_srv.conf.enabled, gw:l_dom_input_ap_gateway.value,
                                ip_start:l_dom_input_ap_start_address.value, ip_end:l_dom_input_ap_end_address.value}}
                        }
                    }
                    else
                    {
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:1};
                    }
                }
                else
                {
                    if(count < 1)
                    {
                        system_pop_confirm_box({alert:true, str:mcs_not_allowed_close_two_network_cards});
                        return;
                    }
                    else
                        now_net_info["ifs"] = {token:now_ifs.token, enabled:0};
                }
            }
            if(l_nic_enabled_status_flag)
            {
                if(l_dom_radio_auto_obtain_dns.checked)
                {
                    now_net_info["dns"] = {conf:{enalbed:obj.ori_net_info.dns.conf.enabled, mode:"dhcp", static_dns:obj.ori_net_info.dns.conf.static_dns}};
                }
                else if(l_dom_radio_use_following_dns.checked)
                {
                    now_net_info["dns"] = {conf:{enalbed:obj.ori_net_info.dns.conf.enabled, mode:"static",
                        static_dns:[l_dom_input_following_dns.value, l_dom_input_following_alternate_dns.value]}};
                }
            }
            ms.send_msg("net_set",{sn:g_select_device_ipc,networks:now_net_info.ifs,dns:now_net_info.dns},{sn:node_sn, ip_refresh:obj.to, select:obj.select,ip:obj.to},ccm_net_set_ack);
        }
        function ccm_net_set_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                g_system_prompt_box(mcs_set_successfully, 240, -200);

                l_refresh_timer = setInterval(function() {
                   ms.send_msg("dev_info_get",{sn:g_select_device_ipc},ref,ccm_dev_info_get_ack);
                }, 3500);
            }
            else
            {
                log("eror:CcmSetNetworkInfoResponse return Result error in class_options_network.");
            }
        }
        function add_event()
        {
            //wifi 选择
            l_dom_select_network.change_value = function() {
                //if(this[this.selectedIndex].text == mcs_not_select)
                //   jQuery(l_dom_select_network_password_li).fadeOut();
                //else
                   jQuery(l_dom_select_network_password_li).fadeIn("normal", function() {
                       jQuery("#manager_page").mCustomScrollbar("update");
                   });
                jQuery(l_dom_select_network).tzSelect(null,1);
            };
            //wifi刷新按键
            l_dom_button_refresh.onclick = function(){
                ms.send_msg("net_get",{sn:g_select_device_ipc,force_scan:0,filter:"wifi_client"},null,ccm_get_wifi_list_response);
            };
            //wifi 连接按键
            l_dom_button_connect.onclick = function() {
                //confirm函数的作用是询问是否连接到网络 返回
                if(confirm(mcs_continue_switch_wireless_network))
                {
                    //network_Business.ctrl({type:"ccm_connect_wifi_request",data:{info:{ssid:l_dom_select_network[l_dom_select_network.selectedIndex].value, psk:l_dom_select_network_password.value}}});
                    //ccm_connect_wifi_request({ssid:l_dom_select_network[l_dom_select_network.selectedIndex].value, psk:l_dom_select_network_password.value});
                }
            };
            l_dom_radio_auto_obtain_ip.onclick = function() {
                if(this.checked)
                {
                    jQuery(l_dom_use_following_ip_content).fadeOut("normal", function() {
                        if(l_ip_is_DHCP)
                            jQuery(l_dom_auto_obtain_ip_content).slideDown("normal", function() {
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                        else
                            jQuery(l_dom_auto_obtain_ip_content).slideUp("normal", function() {
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                    });
                }
            };
            l_dom_radio_use_following_ip.onclick = function() {
                if(this.checked)
                {
                    jQuery(l_dom_auto_obtain_ip_content).fadeOut("normal", function() {
                        jQuery(l_dom_use_following_ip_content).slideDown("normal", function() {
                            jQuery("#manager_page").mCustomScrollbar("update");
                        });
                    });
                }
            };
            l_dom_input_ap_start_address.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_ap_start_address.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_ap_end_address.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_ap_end_address.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_ap_gateway.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_ap_gateway.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_select_network_password.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_select_network_password.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_following_ip_address.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_following_ip_address.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_following_gateway.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_following_gateway.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_following_subnet_mask.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_following_subnet_mask.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_radio_auto_obtain_dns.onclick = function() {
                if(this.checked)
                {
                    jQuery(l_dom_use_following_dns_content).slideUp("normal", function() {
                        if(l_dns_is_DHCP)
                            jQuery(l_dom_auto_obtain_dns_content).slideDown("normal", function() {
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                        else
                            jQuery(l_dom_auto_obtain_dns_content).slideUp("normal", function() {
                                jQuery("#manager_page").mCustomScrollbar("update");
                            });
                    });
                }
            };
            l_dom_radio_use_following_dns.onclick = function() {
                if(this.checked)
                {
                    jQuery(l_dom_use_following_dns_content).slideDown("normal", function() {
                        jQuery(l_dom_auto_obtain_dns_content).slideUp("normal", function() {
                            jQuery("#manager_page").mCustomScrollbar("update");
                        });
                    });
                }
            };
            l_dom_input_following_dns.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_following_dns.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_following_alternate_dns.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_following_alternate_dns.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
        }
        function remove_event()
        {
            l_dom_select_network.change_value = "";
            l_dom_button_refresh.onclick = "";
            l_dom_button_connect.onclick = "";
            l_dom_radio_auto_obtain_ip.onclick = "";
            l_dom_radio_use_following_ip.onclick = "";
            l_dom_input_ap_start_address.onfocus = "";
            l_dom_input_ap_start_address.onblur = "";
            l_dom_input_ap_end_address.onfocus = "";
            l_dom_input_ap_end_address.onblur = "";
            l_dom_input_ap_gateway.onfocus = "";
            l_dom_input_ap_gateway.onblur = "";
            l_dom_select_network_password.onfocus = "";
            l_dom_select_network_password.onblur = "";
            l_dom_input_following_ip_address.onfocus = "";
            l_dom_input_following_ip_address.onblur = "";
            l_dom_input_following_gateway.onfocus = "";
            l_dom_input_following_gateway.onblur = "";
            l_dom_input_following_subnet_mask.onfocus = "";
            l_dom_input_following_subnet_mask.onblur = "";
            l_dom_radio_auto_obtain_dns.onclick = "";
            l_dom_radio_use_following_dns.onclick = "";
            l_dom_input_following_dns.onfocus = "";
            l_dom_input_following_dns.onblur = "";
            l_dom_input_following_alternate_dns.onfocus = "";
            l_dom_input_following_alternate_dns.onblur = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
            	  case "select_net":
                    {
                        if(l_dom_select_nic[l_dom_select_nic.selectedIndex].text == mcs_ethernet )
                        {
                              l_select_net = mcs_ethernet;
                        }
                        else
                        {
                              l_select_net= mcs_wifi;
                        }
                        ms.send_msg("net_get",{sn:g_select_device_ipc,force_scan:0,filter:"all"},{ip:g_server_device},dev_net_get_ack);
                        break;
                    }
                case "destroy":
                    {
                        clearInterval(l_refresh_timer);
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                    }
            }
        }
        add_event();
        //先获取设备基本信息
        ms.send_msg("dev_info_get",{sn:g_select_device_ipc},null,ccm_dev_info_get_ack);
    }

    function class_options_notification(obj)
    {
    	 var l_me = this,
    		 l_me_parent = obj.parent,
    	     j_me_parent = jQuery(obj.parent),
    	     //dom
    	     l_dom_alert_enable,
    	     l_dom_record_enable,
    	     l_dom_button_setup;

    	 l_me_parent[s_innerHTML] =
    	 	"<div>"
            +   "<div class='options_float_left'>" + mcs_alert + "</div>"
            +   "<div  class='options_float_right'>"
            +       "<input id='alert_switch_checkbox' type='checkbox' />"
            +   "</div>"
            + "</div>"
            + "<div class='manager_split_bar_2px_2'></div>"
            + "<div>"
            +   "<div class='options_float_left'>" + mcs_record + "</div>"
            +   "<div  class='options_float_right'>"
            +       "<input id='record_switch_checkbox' type='checkbox' />"
            +   "</div>"
            + "</div>"
            +"<div class='options_float_right' style='clear:both'><button id='button_setup' class='standard_buttons_white' >" + mcs_apply + "</button>";

         l_dom_alert_enable = mx("#alert_switch_checkbox");
         l_dom_record_enable = mx("#record_switch_checkbox");
         l_dom_button_setup = mx("#button_setup");

         function ccm_notification_get( msg, ref)
         {
            if( msg && msg.result == "" )
            {
               if( msg.alert_enable )
               {
                 jQuery(l_dom_alert_enable).iButton("toggle",true);
               }
               else
               {
                 jQuery(l_dom_alert_enable).iButton("toggle",false);
               }

               if( msg.record_enable )
               {
                 jQuery(l_dom_record_enable).iButton("toggle",true);
               }
               else
               {
                 jQuery(l_dom_record_enable).iButton("toggle",false);
               }
            }
         }

         function add_event()
         {
            jQuery(l_dom_alert_enable).iButton({
                labelOn:"On",
                labelOff:"Off"
            });
            jQuery(l_dom_record_enable).iButton({
                labelOn:"On",
                labelOff:"Off"
            });
            l_dom_button_setup.onclick = function(){
                ms.send_msg("msg_filter_set",{sn:g_select_device_ipc,alert_enable:l_dom_alert_enable.checked,record_enable:l_dom_record_enable.checked},null,function(msg,ref){
                    if( msg.result == "" )
                    {
                        g_system_prompt_box(mcs_set_successfully, 240, -200);
                    }
                });
            }
         }

         function remove_event()
         {
            l_dom_button_setup.onclick = "";
         }

         l_me.ctrl = function(obj)
         {
            switch(obj.type)
            {
                case "destroy":
                {
                    remove_event();
                    l_me_parent.innerHTMl = "";
                    l_me_parent = null;
                    break;
                }
            }
         }
    	 add_event();
    	 ms.send_msg("msg_filter_get",{sn:g_select_device_ipc},null,ccm_notification_get);
    }

    function class_options_OSD(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_dom_checkbox_display_name,
            l_dom_input_display_name,
            l_dom_checkbox_display_date,
            l_dom_select_date,
            l_dom_checkbox_display_time,
            l_dom_select_hour,
            l_dom_checkbox_display_weeks,
            l_dom_button_setup,
            l_dom_input_display_name_content,
            l_dom_display_date_content,
            l_dom_time_format_content,
            g_switch_flag = new Array();

        if(g_domain_oems_vimtag)
        {
                l_me_parent[s_innerHTML] =
		            "<div class='list_right_item_ex'>"
		            +   "<div class='attribute_key_text'>" + mcs_display_text + "</div>"
		            +   "<div id='checkbox_display_name_div' class='options_float_right' style='margin-top:0px;'><input type='checkbox'  id='checkbox_display_name'/></div>"
		            +"</div>"
		            +"<div id='input_display_name_content' class='list_right_item'>"
		            +   "<div class='attribute_key_text'>" + mcs_name + "</div>"
		            +   "<div class='options_float_right' style='margin-top:0px;'><input type='text' id='input_display_name' onkeyup=\"value=value.replace(/[^\a-\z\A-\Z]/g,'')\"onpaste=\"value=value.replace(/[^\a-\z\A-\Z]/g,'')\" oncontextmenu = \"value=value.replace(/[^\a-\z\A-\Z]/g,'')\" maxlength='16' class='normal_input_right'></input></div>"
		            +"</div>"
		            +"<div class='list_right_item_ex'>"
		            +   "<div class='attribute_key_text'>" + mcs_display_date + "</div>"
		            +   "<div id='checkbox_display_date_div' class='options_float_right' style='margin-top:0px;'><input type='checkbox' id='checkbox_display_date'/></div>"
		            +"</div>"
		            +"<div id='display_date_content' class='list_right_item'>"
		            +   "<div class='attribute_key_text'>" + mcs_date_format + "</div>"
		            +   "<div class='options_float_right' style='margin-top:0px;'>"
		            +       "<select id='select_date' style='margin-top:0px;'>"
		            +           "<option>MM-DD-YYYY</option>"
		            +           "<option>YYYY-MM-DD</option>"
		            +       "</select>"
		            +   "</div>"
		            +"</div>"
		            +"<div class = 'list_right_item_ex'>"
		            +   "<div class='attribute_key_text'>" + mcs_display_time + "</div>"
		            +   "<div id='checkbox_display_time_div' class='options_float_right' style='margin-top:0px;'><input type='checkbox' id='checkbox_display_time'/></div>"
		            +"</div>"
		            +"<div id='time_format_content' class='list_right_item'>"
		            +   "<div class='attribute_key_text'>" + mcs_time_format + "</div>"
		            +   "<div class='options_float_right' style='margin-top:0px;'>"
		            +       "<select id='select_hour' style='width:300px;'><option value='12h'>" + mcs_12_hour + "</option><option value='24h'>" + mcs_24_hour + "</option></select>"
		            +   "</div>"
		            +"</div>"
		            +"<div class='list_right_item_ex'>"
		            +   "<div class='attribute_key_text'>" + mcs_display_weeks + "</div>"
		            +   "<div id='checkbox_display_weeks_div' class='options_float_right' style='margin-top:0px;'><input type='checkbox' id='checkbox_display_weeks'/></div>"
		            +"</div>"
		            +"<div class='options_float_right' style='clear:both'><button id='button_setup' class='list_right_button' >" + mcs_apply + "</button>"
		            +"</div>";
        }	    
                jQuery(l_me_parent).hide().fadeIn(500);

		        l_dom_checkbox_display_name      = mx("#checkbox_display_name");
		        l_dom_input_display_name         = mx("#input_display_name");
		        l_dom_checkbox_display_date      = mx("#checkbox_display_date");
		        l_dom_select_date                = mx("#select_date");
		        l_dom_checkbox_display_time      = mx("#checkbox_display_time");
		        l_dom_checkbox_display_weeks     = mx("#checkbox_display_weeks");
		        l_dom_select_hour                = mx("#select_hour");
		        l_dom_button_setup               = mx("#button_setup");
		        l_dom_input_display_name_content = mx("#input_display_name_content");
		        l_dom_display_date_content       = mx("#display_date_content");
		        l_dom_time_format_content        = mx("#time_format_content");
		        jQuery(l_dom_select_date).tzSelect();
		        jQuery(l_dom_select_hour).tzSelect();

        //设备osd获取
        function dev_osd_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg&&msg.result=="")
            {            	  
                if(msg.text_enable)
                {
                    jQuery(l_dom_checkbox_display_name).iButton("toggle", true);
                }
                else
                {
                	jQuery(l_dom_checkbox_display_name).iButton("toggle", false);
                }
                l_dom_input_display_name.value = msg.text;
                if(msg.date_enable)
                {
                    jQuery(l_dom_checkbox_display_date).iButton("toggle", true);
                    var i,length = l_dom_select_date.length;
                    for(i = 0; i < length; ++i)
                    {
                        if(l_dom_select_date[i].text == msg.date_format)
                        {
                            l_dom_select_date[i].selected = true;
                        }
                    }
                }
                else
                {
                    jQuery(l_dom_checkbox_display_date).iButton("toggle", false);
                }
                if(msg.time_enable)
                {
                    jQuery(l_dom_checkbox_display_time).iButton("toggle", true);
                    if(msg.time_12h)
                        l_dom_select_hour[0].selected = true;
                     else
                        l_dom_select_hour[1].selected = true;
                }
                else
                {
                    jQuery(l_dom_checkbox_display_time).iButton("toggle", false);
                }
                if(msg.week_enable)
                {
                    jQuery(l_dom_checkbox_display_weeks).iButton("toggle", true);
                }else
                {
                	jQuery(l_dom_checkbox_display_weeks).iButton("toggle", false);
                }
                jQuery(l_dom_select_date).tzSelect();
                jQuery(l_dom_select_hour).tzSelect();
            }
        }
        function add_event(obj)
        {
            l_dom_input_display_name.onfocus = function() {
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_display_name.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_button_setup.onclick = function() {
                 ms.send_msg("osd_set",{sn:g_select_device_ipc,text:l_dom_input_display_name.value,text_enable:Number(l_dom_checkbox_display_name.checked),week_enable:Number(l_dom_checkbox_display_weeks.checked),
                  date_format:l_dom_select_date[l_dom_select_date.selectedIndex].text,date_enable:Number(l_dom_checkbox_display_date.checked),
                  time_12h:Number(!l_dom_select_hour.selectedIndex),time_enable:Number(l_dom_checkbox_display_time.checked)},null,function(msg,ref){
                       if(msg.result=="")
                       {
                               if(g_domain_oems_vimtag)
                               {
                                   msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                               }
                       }
                           else if(msg.result == "permission.denied" && g_domain_oems_vimtag)
                       {
                          msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
                       }
                 });
            };
            jQuery(l_dom_checkbox_display_name).iButton({
               labelOn:"On",
               labelOff:"Off",
               change:function(){
	               	if(l_dom_checkbox_display_name.checked)
	                {
	                   //l_dom_input_display_name_content.style.display="inline";
	                       jQuery(l_dom_input_display_name_content).fadeIn();
	                }else
	                {
	                   jQuery(l_dom_input_display_name_content).fadeOut();
	                }
               }
            });
            jQuery(l_dom_checkbox_display_date).iButton({
               labelOn:"On",
               labelOff:"Off",
               change:function(){
	               	if(l_dom_checkbox_display_date.checked)
	                {
	                   //l_dom_display_date_content.style.display="inline";
	                       jQuery(l_dom_display_date_content).fadeIn();
	                }else
	                {
	                   jQuery(l_dom_display_date_content).fadeOut();
	                }
               }
            });
            jQuery(l_dom_checkbox_display_time).iButton({
               labelOn:"On",
               labelOff:"Off",
               change:function(){
	               	if(l_dom_checkbox_display_time.checked)
	                {
	                   //l_dom_time_format_content.style.display="inline";
	                       jQuery(l_dom_time_format_content).fadeIn();
	                }else
	                {
	                   jQuery(l_dom_time_format_content).fadeOut();
	                }
               }
            });
            jQuery(l_dom_checkbox_display_weeks).iButton({
               labelOn:"On",
               labelOff:"Off"
            });
        }
        function remove_event(obj)
        {
            l_dom_input_display_name.onfocus = "";
            l_dom_input_display_name.onblur = "";
            l_dom_button_setup.onclick = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                        remove_event(obj);
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                    }
            }
        };
        add_event();
        ms.send_msg("osd_get",{sn:g_select_device_ipc},null,dev_osd_get_ack);
    }

    function class_options_SD_card(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_dom_input_status,
            l_dom_input_capacity,
            l_dom_input_usage,
            l_dom_format_content,
            l_dom_umount_content,
            l_dom_mount_content,
            l_dom_repair_content,
            l_dom_button_format,
            l_dom_button_umount,
            l_dom_button_mount,
            l_dom_button_repair,
            l_dom_disk_button_setup,
            g_switch_flag,
            l_dom_input_usage_content,l_dom_input_capacity_content,l_dom_input_available_content,l_dom_input_available;

        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	      "<div id = 'sd_info' class = 'list_right_box'>"
                +       "<div class = 'list_right_item'>"
                +          "<span class = 'attribute_key_text'>"+mcs_enabled+"</span>"
                +          "<div class = 'label_sd' >"
                +             "<span id = 'label_text_left_sd' class = 'label_text_left'>ON</span>"
                +             "<div id = 'label_img_sd' class = 'label_img'></div>"
                +             "<span id = 'label_text_right_sd' class = 'label_text_right'>OFF</span>"
                +          "</div>"
                +       "</div>"
                +       "<div id = 'open_switch'>"
                +          "<div class = 'list_right_item'>"
                +             "<span class = 'attribute_key_text'>"+mcs_status+"</span>"
                +             "<div class='options_float_right'><input type='text' id='input_status' class='input_read_only'  disabled></input></div>"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<span class = 'attribute_key_text'>"+mcs_capacity+"</span>"
                +             "<div class='options_float_right'><input type='text' id='input_capacity' class='input_read_only' disabled></input></div>"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<span class = 'attribute_key_text'>"+mcs_usage+"</span>"
                +             "<div class='options_float_right'><input type='text' id='input_usage' class='input_read_only' disabled></input></div>"
                +          "</div>"
                +          "<div class = 'list_right_item'>"
                +             "<span class = 'attribute_key_text'>"+mcs_valid+"</span>"
                +             "<div class='options_float_right'><input type='text' id='input_available' class='input_read_only' disabled></input></div>"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<span class = 'attribute_key_text'>-"+mcs_format+"</span>"
                +             "<input id='format_btn' type = 'button' class = 'list_right_button_ex' style='margin-top:5px;' value = "+mcs_format+">"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<span class = 'attribute_key_text'>-"+mcs_unmount+"</span>"
                +             "<input id='unmount_btn' type = 'button' class = 'list_right_button_ex' style='margin-top:5px;' value = "+mcs_unmount+">"
                +          "</div>"
                +       "</div>"
                +       "<input id='sd_apply' type = 'button' class = 'list_right_button' value = "+mcs_action_apply+">"
                +"</div>";

                l_dom_input_status     = mx("#input_status");
		            l_dom_input_capacity   = mx("#input_capacity");
		            l_dom_input_usage      = mx("#input_usage");
                l_dom_button_format   = mx("#format_btn");
                l_dom_button_umount    = mx("#unmount_btn");
                l_dom_disk_button_setup= mx("#sd_apply");
                l_dom_input_available  = mx("#input_available");

                var dom_labels = jQuery(".label_sd"),
                    dom_text=jQuery(".attribute_value_text");
        }

        function dev_sd_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result=="")
            {
               jQuery(l_dom_mount_content).hide();
               jQuery(l_dom_umount_content).hide();
               jQuery(l_dom_format_content).hide();
               jQuery(l_dom_repair_content).hide();
               jQuery(l_dom_input_available_content).hide();
               jQuery(l_dom_input_capacity_content).hide();
               jQuery(l_dom_input_usage_content).hide();
                if(msg)
                {
                   l_dom_input_capacity.value  =  msg.capacity +"MB";
                   l_dom_input_usage.value     =  msg.usage +"MB";
                   l_dom_input_available.value =  msg.availableSize +"MB";
                   //根据sd卡状态来显示按键
                    switch(msg.status)
                    {
                         case "empty":
                         {
                             (mcloud_agent.devs.get(g_select_device_ipc)).type=="BOX"?l_dom_input_status.value=mcs_no_hard_disk:l_dom_input_status.value=mcs_no_sdcard;
                             break;
                         }
                         case "ro":
                         case "readonly":
                         {
                         	  l_dom_input_status.value=mcs_fault;
                         	  jQuery(l_dom_repair_content).show();
                         	  jQuery(l_dom_format_content).show();
                         	  break;
                         }
                         case "mount":
                         {
                         	  l_dom_input_status.value=mcs_connnected;
                         	  jQuery(l_dom_input_capacity_content).show();
                              jQuery(l_dom_input_usage_content).show();
                              jQuery(l_dom_input_available_content).show();
                         	  jQuery(l_dom_umount_content).show();
                              jQuery(l_dom_format_content).show();
                         	  break;
                         }
                         case "repairing":
                         {
                         	  l_dom_input_status.value=mcs_repairing;
                         	  break;
                         }
                         case "formating":
                         {
                         	  l_dom_input_status.value=mcs_formating;
                         	  break;
                         }
                         case "umount":
                         {
                         	  l_dom_input_status.value=mcs_unmounted;
                         	  jQuery(l_dom_mount_content).show();
                         	  break;
                         }
                         default:
                            log("error:ctrl's obj.type is not exist in class_options_SD_card.");
                    }
                    if(msg.enable)
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	 g_switch_flag = 1;
	                	       jQuery("#label_text_right_sd").fadeOut("fast");
	                         jQuery("#label_img_sd").animate({ marginRight: "0px"});
	                         jQuery("#label_text_left_sd").fadeIn("fast");
	                         jQuery("#open_switch").fadeIn("slow");
                    	  }
                    }else
                    {
                    	  if(g_domain_oems_vimtag)
                    	  {
                    	  	 g_switch_flag = 0;
                	         jQuery("#label_text_right_sd").fadeIn("fast");
                           jQuery("#label_img_sd").animate({ marginRight: "40px"});
                           jQuery("#label_text_left_sd").fadeOut("fast");
                           jQuery("#open_switch").fadeOut("slow");
                    	  }
                    }
                }
                else
                {
                    l_dom_input_status.value = mcs_not_connected;
                    jQuery(l_dom_mount_content).hide();
                    jQuery(l_dom_umount_content).hide();
                    jQuery(l_dom_format_content).hide();
                    jQuery(l_dom_repair_content).hide();
                }
            }
            else
            {
                log("error:ccm_get_DisksResponse return Result error in class_options_SD_card.");
            }
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                    	  remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        function ccm_disk_ctl_ack(msg,ref)
        {
        	 if(msg && msg.result=="")
        	 {
        	       //"format"与"repair"需要重启设备
        	     if(determine_the_version({type:"Anti",version:version_Category.curise_motion_version})&&(mcloud_agent.devs.get(g_select_device_ipc).img_ver < "v2"))//如果摄像机版本大于V2就不需要重启
        	     {
        	        if(ref.ctrl_type=="format" || ref.ctrl_type=="repair")
        	       {
                		system_pop_confirm_box({str:mcs_need_to_restart_the_camera_to_take_effect, button_left:mcs_reset_now, button_right:mcs_reset_later,
                       callback_func:function(obj){
            							ms.send_msg("reboot",{sn:g_select_device_ipc},null,function(msg,ref){
                							if(msg.result=="")
                							{
                                  if(g_domain_oems_vimtag)
                                  {
                                      msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                                  }
                							}
            							});
                       }
                    });
                 }
               }
               else
               {
                  if(g_domain_oems_vimtag)
                  {
                      msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                  }
      	          //等待5秒钟再去获取SD卡信息
      	          setTimeout(function(){
      	             ms.send_msg("sd_get",{sn:g_select_device_ipc},null,dev_sd_get_ack);
      	          },5000)
      	       }
        	 }
        }
        function remove_event()
        {
        	 l_dom_button_format.onclick = "";
        	 l_dom_button_umount.onclick = "";
        	 l_dom_disk_button_setup.onclick = "";
        }
        function add_event(obj)
        {
        	   if(g_domain_oems_vimtag)
        	   {
		        	   dom_labels[0].onclick = function(){
		        	      if(g_switch_flag == 0)
		        	      {
		        	      	 g_switch_flag = 1;
		        	      	 jQuery("#label_text_right_sd").fadeOut("fast");
		                   jQuery("#label_img_sd").animate({ marginRight: "0px"});
		                   jQuery("#label_text_left_sd").fadeIn("fast");
		                   jQuery("#open_switch").fadeIn("slow");
		        	      }
		        	      else
		        	      {
		        	      	 g_switch_flag = 0;
		        	      	 jQuery("#label_text_right_sd").fadeIn("fast");
		                   jQuery("#label_img_sd").animate({ marginRight: "40px"});
		                   jQuery("#label_text_left_sd").fadeOut("fast");
		                   jQuery("#open_switch").fadeOut("slow");
		        	      }
		        	   };
        	   }
             //sd卡格式化按键
             l_dom_button_format.onclick=function()
             {
             	 if(g_domain_oems_vimtag)
             	 {
             	 	   system_pop_confirm_box({str:((mcloud_agent.devs.get(g_select_device_ipc)).type=="BOX"?mcs_format_disk_prompt:mcs_format_prompt), callback_func:function(){
                     ms.send_msg("sd_set",{sn:g_select_device_ipc,ctrl_type:"format",enable:(g_switch_flag == 1)?1:0},{ctrl_type:"format"},ccm_disk_ctl_ack);
                   }});
             	 }
             }
             //sd卡卸载按键
             l_dom_button_umount.onclick=function()
             {
             	 if(g_domain_oems_vimtag)
             	 {
             	 	   system_pop_confirm_box({str:((mcloud_agent.devs.get(g_select_device_ipc)).type=="BOX"?mcs_umount_disk_prompt:mcs_umount_prompt), callback_func:function(){
	                    ms.send_msg("sd_set",{sn:g_select_device_ipc,ctrl_type:"umount",enable:(g_switch_flag == 1)?1:0},{ctrl_type:"umount"},ccm_disk_ctl_ack);
	                 }});
             	 }
             }
             //应用按键事件
             l_dom_disk_button_setup.onclick=function()
             {
             	 if(g_domain_oems_vimtag)
             	 {
             	 	   ms.send_msg("sd_set",{sn:g_select_device_ipc,enable:(g_switch_flag == 1)?1:0},{ctrl_type:"conf"},ccm_disk_ctl_ack);
             	 }
             }
        }
        add_event();
        ms.send_msg("sd_get",{sn:g_select_device_ipc},null,dev_sd_get_ack);
    }
    //设置存储设备
     function class_options_storage_device(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_j_me_parent = jQuery(obj.parent),
            l_dom_input_device_id,l_dom_input_password,
            l_dom_storage_device_button_setup,l_dom_input_status;

        if(g_domain_oems_vimtag)
        {
            l_me_parent[s_innerHTML] =
                "<div id = 'storage_device_info' class = 'list_right_box'>"
                +       "<div class = 'list_right_item'>"
                +          "<div class='options_float_left'>" + mcs_enabled + "</div>"
		            +          "<div class='options_float_right' style='margin-top:0px;'><input id='storage_device_switch_checkbox' type='checkbox' checked/></div>"
                +       "</div>"
                +       "<div id = 'storage_device_content'>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<div class='options_float_left'>" + mcs_device_id + "</div>"
		            +             "<div class='options_float_right'><input type='text' id='input_device_id' class='list_right_input'></input></div>"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
                +             "<div class='options_float_left'><label for='input_password'>" + mcs_password + "</label></div>"
		            +             "<div class='options_float_right'>"
		            +                "<input type='password' name='input_password' id='input_password' class='list_right_input'></input>"
		            +             "</div>"
                +          "</div>"
                +          "<div class = 'list_right_item_ex'>"
             		+             "<div class='options_float_left'>" + mcs_network_status + "</div>"
		            +             "<div class='options_float_right'><input type='text' id='input_status' value='" + mcs_not_connected + "' class='input_read_only' disabled></input></div>"
                +          "</div>"
                +       "</div>"
                +       "<button id='storage_device_button_setup' class='list_right_button' >" + mcs_apply + "</button>"
                +"</div>";
        }
        l_dom_input_device_id=mx("#input_device_id");
        l_dom_input_password=mx("#input_password");
        l_dom_storage_device_button_setup= mx("#storage_device_button_setup");
        l_dom_storage_device_content= mx("#storage_device_content");
        l_dom_input_status = mx("#input_status");

        jQuery("#storage_device_switch_checkbox").iButton({
            labelOn:"On",
            labelOff:"Off",
            change:function(){
                if(mx("#storage_device_switch_checkbox").checked)
                {
                    jQuery("#storage_device_content")[0].style.display="inline";
                }
                else
                {
                    jQuery("#storage_device_content").fadeOut();
                }
            }
        });

        function box_login_ack(msg, ref)
        {
            if(!l_me_parent) return;

            if(msg.result == "")
            {
                g_system_prompt_box(mcs_set_successfully, 240, -200);
            }
            else if(msg.result == "accounts.pass.invalid")
            {
            	  system_tooltip({parent:l_dom_input_password, color:"red", position:"left", disappear_way:"time", str:mcs_invalid_password});
            }
            else if(msg.result == "accounts.user.offline")
            {
            	  system_tooltip({parent:l_dom_input_device_id, color:"red", position:"left", disappear_way:"time", str:mcs_offline});
            }
            else if(msg.result == "accounts.user.unknown")
            {
            	  system_tooltip({parent:l_dom_input_device_id, color:"red", position:"left", disappear_way:"time", str:mcs_invalid_dev});
            }

            else
            {
              	log("error:box_login_ack return Result error in class_options_storage_device.");
              	return -1;
            }
        }

        function box_conf_get_ack(msg, ref)
        {
            if(!l_me_parent) return;
            if(msg.result == "")
            {
                l_dom_input_device_id.value=msg.conf.conf.username;  //show the BOX ID 
                l_dom_input_password.value=msg.conf.conf.password; //show the BOX  password
            }
            else
            {
              	log("error:box_login_ack return Result error in class_options_storage_device.");
              	return -1;
            }

            if(msg.conf.connect == 1)
            {
            	  l_dom_input_status.value = mcs_connnected;
            }
        }

        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                    {
                        break;
                    }
                case "destroy":
                    {
                        l_me_parent.innerHTMl = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_options_storage_device.");
            }
        };
        function add_event()
        {
           l_dom_storage_device_button_setup.onclick=function()
           {
           	   if(!l_dom_input_device_id.value)
           	    {
           	    	  system_tooltip({parent:l_dom_input_device_id, color:"red", position:"left", disappear_way:"time", str:mcs_blank_device_id + "."});
           	    }
               if(!l_dom_input_password.value)
                {
                    system_tooltip({parent:l_dom_input_password, color:"red", position:"left", disappear_way:"time", str:mcs_the_password_is_empty + "."});
                    return;
                }
                else
                {
                    reg = /^\S{6,20}$/;
                    if(!reg.exec(l_dom_input_password.value))
                    {
                        system_tooltip({parent:l_dom_input_password, color:"red", position:"left", disappear_way:"time", str:mcs_password_demand + "."});
                        return;
                    }
                }

                ms.send_msg( "box_login", {box_sn:g_select_device_ipc,enable:mx("#storage_device_switch_checkbox").checked?1:0,username:l_dom_input_device_id.value,password:l_dom_input_password.value},null,box_login_ack);
           };
        }
        add_event();
        ms.send_msg( "box_conf_get",{box_sn:g_select_device_ipc},null,box_conf_get_ack);
    }
    //设置中的报警设备
    function class_options_alarm(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_parent_callback = obj.on_event,
            l_dom_checkbox_deployment_div,
            l_dom_select_input_level,
            l_dom_select_linkage_level,
            l_dom_input_threshold,
            l_dom_button_setup,
            l_view_page_obj,
            l_mask_data_get = "",
            l_dom_input_thresholdLevelNight;
        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	      "<div id = 'alert_dev_info' class = 'list_right_box' >"
                +      "<div class = 'list_right_item_ex'>"
                +         "<div class='options_float_left'>" + mcs_i_o_alarm + ":</div>"
		            +         "<div id='checkbox_deployment_div' class='options_float_right'></div>"
                +      "</div>"
                +      "<div class = 'list_right_item_ex'>"
                +         "<div class='options_float_left'>- " + mcs_input + "</div>"
		            +         "<div class='options_float_right select_block'>"
		            +            "<input type='text' id='select_input_level' class='input_read_only'  disabled/>"
		            +         "</div>"
                +      "</div>"
                +      "<div class = 'list_right_item'>"
                +         "<div class='options_float_left'>- " + mcs_outinput + "</div>"
		            +         "<div class='options_float_right '>"
		            +            "<input  id='select_linkage_level' class='input_read_only'  disabled/>"
		            +         "</div>"
                +      "</div>"
                +      "<div class = 'list_right_item_ex'>"
                +         "<span class = 'attribute_key_text'>"+mcs_motion_detection_sensitivity+"</span>"
                +      "</div>"
                +      "<div class = 'list_right_item_ex'>"
                +         "<div class='options_float_left'></input>&nbsp;&nbsp;- " + mcs_daytime + "</div>"
		            +         "<div class='options_float_right' style='width:200px;>"
		            +            "<label for='input_threshold'></label>"
		            +            "<input name='slider' type='text' id='input_threshold' class='fd_tween fd_classname_extraclass fd_hide_input "
		            +            "fd_slider_cb_create_ms.TT-init fd_slider_cb_update_ms.TT-update fd_slider_cb_move_ms.TT-update' value='0%'</input>"
		            +         "</div>"
                +      "</div>"
                +      "<div class = 'list_right_item'>"
               	 +         "<div class='options_float_left'></input>&nbsp;&nbsp;- " + mcs_night + "</div>"
                +         "<div class='options_float_right' style='width:200px;'>"
		            +            "<label for='input_thresholdLevelNight'></label>"
		            +            "<input name='slider' type='text' id='input_thresholdLevelNight' class='fd_tween fd_classname_extraclass fd_hide_input "
		            +            "fd_slider_cb_create_ms.TT-init fd_slider_cb_update_ms.TT-update fd_slider_cb_move_ms.TT-update' value='0%'</input>"
		            +         "</div>"
                +      "</div>"
                +      "<div class='options_float_right' style='clear:both'>"
		            +         "<button id='button_setup' class='list_right_button' >" + mcs_apply + "</button>"
		            +      "</div>"
                +"</div>";
        }
        l_dom_checkbox_deployment_div = mx("#checkbox_deployment_div");
        l_dom_select_input_level = mx("#select_input_level");
        l_dom_select_linkage_level = mx("#select_linkage_level");
        l_dom_input_threshold = mx("#input_threshold");
        l_dom_input_thresholdLevelNight = mx("#input_thresholdLevelNight");
        l_dom_button_setup = mx("#button_setup");
        fdSliderController.create();
        function dev_alarm_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                if(msg.io_input=="Open")
                {
                    l_dom_select_input_level.value=mcs_normally_open;
                }
                else
                {
                	  l_dom_select_input_level.value=mcs_normally_close;
                }
                if(msg.io_output=="Open")
                {
                    l_dom_select_linkage_level.value=mcs_normally_open;
                }
                else
                {
                	l_dom_select_linkage_level.value=mcs_normally_close;
                }
                jQuery(l_dom_input_thresholdLevelNight).addClass("fd_range_" + 0 + "_" + 100);
                jQuery(l_dom_input_threshold).addClass("fd_range_" + 0 + "_" + 100);
                if(l_dom_input_thresholdLevelNight)
                    fdSliderController.increment("input_thresholdLevelNight", msg.night_sensitivity - l_dom_input_thresholdLevelNight.value );
                if(l_dom_input_threshold)
                    fdSliderController.increment("input_threshold", msg.sensitivity - l_dom_input_threshold.value );
            }
            else
            {
                log("error:CcmMDGetResponse return Result error in class_options_alarm.");
            }
        }
        function remove_event()
        {
        	 l_dom_input_threshold.onfocus = "";
        	 l_dom_input_threshold.onblur = "";
        	 l_dom_button_setup.onclick = "";
        }
        function ccm_motion_mask_get_response(msg, ref)
        {
        	if(!l_me_parent) return;
          if(msg.result == "")
          {
          	if(msg.conf.enable==1)
          	{
          		 jQuery("#mask_switch_checkbox").iButton("toggle", true);
          	}
          	else
          	{
          		 jQuery("#mask_switch_checkbox").iButton("toggle", false);
          	}
          }
          else
          {
          	log("error:CcmMotionMaskGetResponse return Result error in class_options_alarm.");
          	return -1;
          }
        }
        function add_event()
        {
            l_dom_input_threshold.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_threshold.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };

            l_dom_button_setup.onclick = function() {
            	var IoInputMode,IoOutputMode;
            	l_dom_select_input_level.value==1 ? IoInputMode="Close" : IoInputMode="Open";
            	l_dom_select_linkage_level.value==1 ? IoOutputMode="Colse" : IoOutputMode="Open";
                var conf={sn:g_select_device_ipc,io_input:IoInputMode,io_output:IoOutputMode , sensitivity:l_dom_input_threshold.value,night_sensitivity:l_dom_input_thresholdLevelNight.value};
                ms.send_msg("alarm_trigger_set",conf,null,function(msg,ref){
                    if(msg && msg.result == ""){
                    	if(g_domain_oems_vimtag)
                    	{
                    		 msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
                    	}
                    }
                });
            };
        }
        function motion_mask()
   		  {
			    var dom_mask_box = jQuery("#mask_box");
			    if(!dom_mask_box[0])
			    {
				    ms.send_msg("motion_mask_get",{sn:g_select_device_ipc},null,function(msg, ref)
				    {
					    if(!l_me_parent) return;
					    if(msg.result == "")
					    {
						    var dom_mask_pic ,dom_background;

						    dom_mask_box = dom_create_child(mx("#main_page"),"div","mask_box");
						    dom_mask_pic = document.createElement("div");
						    dom_mask_pic.setAttribute("id","mask_pic");
						    dom_background = document.createElement("div");
						    dom_background.setAttribute("id","mask_bg");
						    dom_mask_box.appendChild(dom_mask_pic);
						    dom_mask_box.appendChild(dom_background);
						    describe_mask(dom_mask_pic,msg.conf);
					    }
				      else
				      {
				    	  log("error:CcmMotionMaskGetResponse return Result error in class_options_alarm.");
				        return -1;
				      }
				    });
	        }
	       	else
			    {
				    dom_mask_box.remove();
			    }
	       	function describe_mask(dom,conf)
	       	{
	           var i, j,width,height,top,left,dom_play_box=jQuery("#play_box"),
	            		dom_button_box,dom_draw,dom_clean,dom_point, data=new Array();

	        	 width = dom_play_box.width();
	         	 height = dom_play_box.height();
	         	 top=dom_play_box.offset().top;
	       		 left=dom_play_box.offset().left;

	           dom.style.cssText="width:"+width+"px;height:"+height+"px;top:"+top+"px;left:"+left+"px;position:absolute;";
	           if(conf.pos)
	           {
	          	  l_mask_data_get = conf.pos;
	          	  for(i=0;i<conf.pos.length;i++)
		            {
		          	  var temp;
		           	  data[i]=new Array();
		              temp=conf.pos[i].bitmap;
		              for(j=0;j<=15;j++)
		              {
		                data[i][j]=temp[j];
		              }
		            }
	           }
	           for(i=0;i<9;i++)
	           {
	              for(j=0;j<16;j++)
	              {
	              	dom_point = document.createElement("div");
	              	dom_point.setAttribute("class","mask_point");
	                dom_point.style.cssText="width:"+(width/16-2)+"px;height:"+(height/9-2)+"px;";
	                if(conf.pos)
	                {
	                	for(var k=0;k<conf.pos.length;k++)
		                {
		                  if(conf.pos[k].index==i&&data[k][j]==1)
		                  {
		                    dom_point.style.backgroundColor="#000000";
		                    break;
		                  }
		              	}
	              	}
	              	dom.appendChild(dom_point);
	              }
	           }
	           dom_button_box=dom_create_child(dom,"div","mask_button_box");
	           dom_confirm = dom_create_child(dom_button_box,"div","mask_confirm","standard_buttons_green");
				     dom_confirm.innerHTML = mcs_ok;
				     dom_reset = dom_create_child(dom_button_box,"div","mask_reset","standard_buttons_green");
				     dom_reset.innerHTML = mcs_reset;
	           dom_cancel = dom_create_child(jQuery("#mask_pic")[0],"div","mask_cancel");
	           var dom_points=jQuery(".mask_point") , draw_flag = false;
	           g_mask_pic_pos = jQuery("#mask_pic").offset();
				     dom_points.mousemove();
	        	 dom_points.mousedown(function(e)
	           {
	      			  var evt = window.event || e,
	              mouseX = evt.clientX,mouseY = evt.clientY;
	              x_pos = Math.ceil((mouseX - g_mask_pic_pos.left)/dom_point.offsetWidth) -1;
		            y_pos = Math.ceil((mouseY- g_mask_pic_pos.top)/dom_point.offsetHeight) -1;
	          		g_start_pos={x_pos:x_pos,y_pos:y_pos};
	          		g_mouse_start_pos = {x_pos:mouseX,y_pos:mouseY};
	          		draw_flag = true;
	         	 });

	         	 jQuery("#mask_box")[0].onselectstart=function(){return false;}

	         	 jQuery("#mask_box").mousemove(function(e)
         		 {
         			  if(draw_flag)
         			  {
         				   var evt = window.event || e,
                       mouseX = evt.clientX,mouseY = evt.clientY,
                       dom_rect,max_x,max_y,min_x,min_y;

	                 if(!(dom_rect = jQuery("#rect_box")[0]))
	                 {
	                		dom_rect = dom_create_child(jQuery("#mask_box")[0],"div","rect_box");
	                 }

	               	 max_x =	(g_mouse_start_pos.x_pos > mouseX) ? g_mouse_start_pos.x_pos : mouseX;
	               	 min_x =	(g_mouse_start_pos.x_pos < mouseX) ? g_mouse_start_pos.x_pos : mouseX;
	               	 max_y =	(g_mouse_start_pos.y_pos > mouseY) ? g_mouse_start_pos.y_pos : mouseY;
	               	 min_y = 	(g_mouse_start_pos.y_pos < mouseY) ? g_mouse_start_pos.y_pos : mouseY;

                   dom_rect.style.cssText = "left:"+min_x+"px; top:"+min_y+"px;width:"+(max_x-min_x)+"px;height:"+(max_y-min_y)+"px;" ;
             		}
         		 });

	         	 jQuery("#mask_box").mouseup(function(e)
	         	 {
	         		  if(draw_flag)
	         		  {
	         			   var evt = window.event || e,
	                     mouseX = evt.clientX,mouseY = evt.clientY,
	                     x_pos,y_pos;
	                 draw_flag =false;
		               jQuery("#rect_box").remove();
		               x_pos = Math.ceil((mouseX - g_mask_pic_pos.left)/dom_point.offsetWidth) -1;
		               y_pos = Math.ceil((mouseY- g_mask_pic_pos.top)/dom_point.offsetHeight) -1;

		               jQuery("#mask_pic").focus;
		          		 g_end_pos={x_pos:x_pos,y_pos:y_pos};

		               if(g_start_pos.x_pos == g_end_pos.x_pos && g_start_pos.y_pos == g_end_pos.y_pos )
		               {
		                	var pos = g_start_pos.x_pos+16*g_start_pos.y_pos;
		                	if(dom_points[pos].style.background=="")
			          		  {
			          			   dom_points[pos].style.background = "#000000";
			          		  }
			           		  else
			           		  {
			           			   dom_points[pos].style.background = "";
			           		  }
		               }
		               else
		               {
		               		var max_x,max_y,min_x,min_y;
		               		max_x = (g_start_pos.x_pos > g_end_pos.x_pos)?g_start_pos.x_pos:g_end_pos.x_pos;
		               		min_x = (g_start_pos.x_pos < g_end_pos.x_pos)?g_start_pos.x_pos:g_end_pos.x_pos;
		               		max_y = (g_start_pos.y_pos > g_end_pos.y_pos)?g_start_pos.y_pos:g_end_pos.y_pos;
		               		min_y = (g_start_pos.y_pos < g_end_pos.y_pos)?g_start_pos.y_pos:g_end_pos.y_pos;
		               		for(var i = min_y ; i <= max_y; i++)
		               		{
		               			for(var j = min_x ; j <= max_x;j++)
		               			{
		               				if(dom_points[i*16+j].style.background == "")
		               				{
		               					 dom_points[i*16+j].style.background = "#000000";
		               				}
		               				else
		               				{
		               					 dom_points[i*16+j].style.background = "";
              			      }
		               			}

		               		}
		               }
	         		  }
	         	 });
	           dom_cancel.onclick = function()
	           {
	            	l_parent_callback({type:"delete_ipc", data:{node_sn:g_select_device_ipc}}); //结束遮罩视频流
	             	jQuery("#mask_box").remove();
	             	jQuery("#play_box").remove();
	             	g_now_page = "manager";
	           };
	           dom_cancel.onmouseover = function()
	           {
	           		this.style.background ="url(./imgs/mipc_img.png?v1.9.5.1412231038) -360px -146px no-repeat";
	           };
	           dom_cancel.onmouseout = function()
	           {
	           		this.style.background ="url(./imgs/mipc_img.png?v1.9.5.1412231038) -390px -146px no-repeat";
	           };
	        	 dom_confirm.onclick = function()
	           {
	              var data=new Array(),i,j,k,pos=new Array(),mask_data=new Array(),line_counts=0,
	              dom_mask_points=jQuery(".mask_point"),cover_enable,cover_flag,count;
	              length=dom_mask_points.length;
	              for(i = 0; i<9; i++)
	              {
	                 cover_enable = false;
	                 count = 0;
	                 data[i] = new Array();
	                 cover_flag = false;
	                 for(k = 0;k < l_mask_data_get.length; k++)
	                 {
	                		if(i == l_mask_data_get[k].index)
	                		{
	                			 cover_flag = true;
	                			 break;
	                		}
	                 }
	                 for(j = 0;j <= 15;j++)
	                 {
	                		if(dom_mask_points[i*16+j].style.backgroundColor!= "")
		                	{
		                		 data[i][j]=1;
		                		 count++;
		                	}
		                	else
		                	{
		                		 data[i][j]=0;
		                	}
		                	if(cover_flag&&data[i][j] != l_mask_data_get[k].bitmap[j])
		                	{
		                		 cover_enable = true;
		                	}
	                 }

	                 if(cover_enable)
	                 {
	                		pos[line_counts]={index:i,bitmap:data[i]};
	                		line_counts++;
	                 }
	                 else if(!cover_flag&&count>0)
	                 {
	                		pos[line_counts]={index:i,bitmap:data[i]};
	                		line_counts++;
	                 }
	              }
	              if(line_counts <= 5)
	              {
	                 if(line_counts == 0)
	                 {
	                		conf={matrix_width:16,matrix_height:9,enable:1};
	                 }
	                 else
	                 {
	                		conf={matrix_width:16,matrix_height:9,enable:1,pos:pos};
	                 }
	                 set_motion_mask(conf);
		            }
	           		else
	           		{
	           		 	 var conf_1, conf_2,i,pos_=new Array();
	           		 	 conf_1={matrix_width:16,matrix_height:9,enable:1,pos:[pos[0],pos[1],pos[2],pos[3],pos[4]]};
	           		 	 for(i=5;i<line_counts;i++)
	           		 	 {
	           		 	    pos_.push(pos[i]);
	           		 	 }
	           		 	 conf_2 = {matrix_width:16,matrix_height:9,enable:1,pos:pos_};
	           		 	 set_motion_mask(conf_1,conf_2);
	           		}
	           		//l_parent_callback({type:"delete_ipc", data:{node_sn:g_select_device_ipc}}); //结束遮罩视频流
	           		inner_window_info = l_view_page_obj.ctrl({type:"get_inner_window_info", data:{index:(g_view_link.pos(g_select_device_ipc) + 1) - g_view_split_count * (g_now_view_page - 1)}});
	           		l_view_page_obj.ctrl({type:"remove_ipc", data:{inner_window_info:inner_window_info}});
				     };

				     dom_reset.onclick = function()
				     {
					      dom_points.css("backgroundColor","");
				     };

			    }
		    }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                    	  remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        add_event();
        ms.send_msg("alarm_trigger_get",{sn:g_select_device_ipc},null,dev_alarm_get_ack);
        if(determine_the_version({type:"Positive",version:version_Category.curise_motion_version}))
				{
					 ms.send_msg("motion_mask_get",{sn:g_select_device_ipc},null,function(msg, ref){ccm_motion_mask_get_response(msg, ref);});
				}
    }

    function set_motion_mask(obj1,obj2)
    {
    	if(obj2)
    	{
    		 ms.send_msg("motion_mask_set",{conf:obj1,sn:g_select_device_ipc},null,function(msg, ref)
			   {
			     if(msg.result == "")
				   {
					   ms.send_msg("motion_mask_set",{conf:obj2,sn:g_select_device_ipc},null,function(msg, ref)
					   {
					 	   jQuery("#mask_box").remove();
					     jQuery("#play_box").remove();
					     g_now_page = "manager";
					     if(msg.result == "")
						   {
					     	  g_system_prompt_box(mcs_set_successfully, 240, -200);
					     }
					     else
					     {
					     	  g_system_prompt_box(mcs_failed_to_set_the, 240, -200);
					     }
				     });
			     }
			     else
			     {
			     	 g_system_prompt_box(mcs_failed_to_set_the, 240, -200);
			     }
			   });
    	}
    	else
    	{
    		ms.send_msg("motion_mask_set",{conf:obj1,sn:g_select_device_ipc},null,function(msg, ref)
			  {
			 	  jQuery("#mask_box").remove();
			    jQuery("#play_box").remove();
			    g_now_page = "manager";
			    if(msg.result == "")
				  {
			     	 g_system_prompt_box(mcs_set_successfully, 240, -200);
			    }
			    else
			    {
			     	g_system_prompt_box(mcs_failed_to_set_the, 240, -200);
			    }
			  });
    	}
    }

    //设置中的报警联动
    function class_options_alarm_linkage(obj)
    {
    	  var l_me = this,
            l_me_parent = obj.parent,
            l_dom_IoOutputEnable,l_dom_SnapShotEnable,
            l_dom_RecordEnable,
            l_dom_Action,
            l_dom_Arming_button,
            l_dom_select_input_devices,
            l_dom_button_setup,l_dom_alarm_sources;

        if(g_domain_oems_vimtag)
        {
        	 l_me_parent[s_innerHTML] =
        	  "<div id = 'alert_linkage_info' class = 'list_right_box'>"
            +      "<div class = 'list_right_item'>"
            +         "<div class='options_float_left'>"+mcs_name+"</div>"
            +         "<div  class='options_float_right select_block' style='margin-top:0px;'><select id='select_input_devices'></select></div>"
            +      "</div>"
            +      "<div class = 'list_right_item'>"
            +         "<div class='options_float_left'>" + mcs_enabled + "</div>"
            +         "<div  class='options_float_right' style='margin-top:0px;'>"
            +            "<input id='alarm_switch_checkbox' type='checkbox' />"
            +         "</div>"
            +      "</div>"
            +      "<div id = 'open_switch'>"
            +         "<div class = 'list_right_item'>"
            +            "<div class='options_float_left'>"+mcs_alarm_sources+"</div>"
            +            "<div class='options_float_right' style='margin-top:13px;'><input type='text' id='alarm_sources' class='input_read_only'  disabled/></div>"
            +         "</div>"
            +         "<div class = 'list_right_item_ex'>"
            +            "<div class='options_float_left'>"+mcs_alarm_action+":</div>"
            +            "<div class='options_float_right'></div>"
            +         "</div>"
            +         "<div class = 'list_right_item_ex'>"
            +            "<div class='options_float_left'>- "+mcs_i_o_alarm+"</div>"
            +            "<div class='options_float_right'><input type='checkbox' id='IoOutputEnable'/></div>"
            +         "</div>"
            +         "<div class = 'list_right_item_ex'>"
            +            "<div class='options_float_left'>- "+mcs_snapshot+"</div>"
            +            "<div class='options_float_right'><input type='checkbox' id='SnapShotEnable' /></div>"
            +         "</div>"
            +         "<div class = 'list_right_item_ex'>"
            +            "<div class='options_float_left'>- "+mcs_record+"</div>"
            +            "<div class='options_float_right'><input type='checkbox' id='RecordEnable' /></div>"
            +         "</div>"
            +     "</div>"
            +     "<div class='options_float_right' style='clear:both'>"
            +        "<button id='Arming_button' class='list_right_button'>"+mcs_alert_on+"</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
            +        "<button id='button_setup' class='list_right_button' >" + mcs_apply + "</button>"
            +     "</div>"
            +"</div>";
        }
            jQuery(l_me_parent).hide().fadeIn(500);
            l_dom_IoOutputEnable                 = mx("#IoOutputEnable");
            l_dom_SnapShotEnable                 = mx("#SnapShotEnable");
            l_dom_RecordEnable                   = mx("#RecordEnable");
            l_dom_select_input_devices           = mx("#select_input_devices");
            l_dom_button_setup                   = mx("#button_setup");
            l_dom_alarm_sources                  = mx("#alarm_sources");
            l_dom_Arming_button                  = mx("#Arming_button");
            jQuery(l_dom_select_input_devices).tzSelect();


        //报警联动获取
        function dev_alarm_action_get_ack(msg,ref)
        {
        	if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
            	if(msg.actions)
            	{
            	     var innerhtml;
            		 for(var i=0;i<msg.actions.length;i++)
            		 {
            		    if(msg.actions[i].name=="io_alert")
            		    {
            		    	innerhtml+="<option value='io_alert'>"+mcs_i_o_alarm+"</option>";
            		    }
            		    else if(msg.actions[i].name=="motion_alert")
            		    {
            		    	innerhtml+="<option value='motion_alert'>"+mcs_motion+"</option>";
            		    }
            		    else if(msg.actions[i].name=="pir")
            		    {
            		    	innerhtml+="<option value='pir'>"+mcs_pir+"</option>";
            		    }else
            		    {
            		        innerhtml+="<option value='"+msg.actions[i].name+"'>"+msg.actions[i].name+"</option>";
            		    }
            		 }
            		 jQuery(l_dom_select_input_devices).html(innerhtml);
            		 jQuery(l_dom_select_input_devices).tzSelect();

            		 ccm_AlertAction_Info(msg.actions[0]);
            		 l_dom_select_input_devices.change_value=function(obj)
            		 {
            		   jQuery(l_dom_select_input_devices).tzSelect();
            		   for(var i=0;i<msg.actions.length;i++)
            		   {
            		      if(l_dom_select_input_devices.value==msg.actions[i].name)
            		      {
            		          ccm_AlertAction_Info(msg.actions[i]);
            		      }
            		   }
            		 }
            	}
            	if(msg.enable)
            	{
            	     l_dom_Arming_button[s_innerHTML]=mcs_alert_off;
            	}else
            	{
            	     l_dom_Arming_button[s_innerHTML]=mcs_alert_on;
            	}
            }
            else
            {
            	 log("error:ctrl's obj.type is not exist in class_options_alarm_linkage.");
            }
        }
        function ccm_AlertAction_Info(obj)
        {
                l_dom_Action=obj;
                     if(l_dom_Action.enable)
            		 {
            		 	    jQuery("#alarm_switch_checkbox").iButton("toggle",true);
            		    	jQuery("#alarm_info").fadeIn();
            		 }else
            		 {
            		 	    jQuery("#alarm_switch_checkbox").iButton("toggle",false);
            		 		jQuery("#alarm_info").fadeOut();
            		 }
            		 if(l_dom_Action.io_out_enable)
            		 {
            		 	    jQuery(l_dom_IoOutputEnable).iButton("toggle", true);
            		 }else
            		 {
            		 	    jQuery(l_dom_IoOutputEnable).iButton("toggle", false);
            		 }
            		 if(l_dom_Action.snapshot_enable)
            		 {
            		 	    jQuery(l_dom_SnapShotEnable).iButton("toggle",true);

            		 }else
            		 {
            		 	    jQuery(l_dom_SnapShotEnable).iButton("toggle",false);

            		 }
            		 if(l_dom_Action.record_enable)
            		 {
            		   	    jQuery(l_dom_RecordEnable).iButton("toggle",true);
            		   	    //jQuery("#PreRecordTime_content").fadeIn();
            		 }else
            		 {
            		 		jQuery(l_dom_RecordEnable).iButton("toggle",false);
            		 		//jQuery("#PreRecordTime_content").fadeOut();
            		 }
            		 //PreRecordTime.value    = l_dom_Action.pre_record_time;
               if(l_dom_Action.srcs)
               {
                var innerhtml="";
                  for(var i=0;i<l_dom_Action.srcs.length;i++)
                  {
                       if(!l_dom_Action.srcs[i].devs)continue;
                       for(j=0;j<l_dom_Action.srcs[i].devs.length;j++)
                       {
                         if(l_dom_Action.srcs[i].devs[j]=="motion")
                            innerhtml+=mcs_motion;
                         else if(l_dom_Action.srcs[i].devs[j]=="io")
                            innerhtml+=mcs_i_o_alarm;
                         else if(l_dom_Action.srcs[i].devs[j]=="pir")
                            innerhtml+=mcs_pir;

                         if(l_dom_Action.srcs[i].devs[j+1])
                              innerhtml+="/";
                       }
                       if(l_dom_Action.srcs[i+1])
                         innerhtml+="  |  ";
                  }
                  l_dom_alarm_sources.value=innerhtml;
               }

        }
        //布防 & 撤防 系统回应
        function dev_alarm_action_set_ack(msg)
        {
             if(msg.result =="")
             {
             	  if(g_domain_oems_vimtag)
             	  {
             	  	 msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
             	  }
                ms.send_msg("alarm_action_get",{sn:g_select_device_ipc},null,dev_alarm_action_get_ack);
             }
             else if(msg.result == "permission.denied")
             {
                 if(g_domain_oems_vimtag)
                 {
                     msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
                 }
             }
        }
        function remove_event()
        {
        	 l_dom_Arming_button.onclick = "";
        	 l_dom_button_setup.onclick = "";
        }
        function add_event()
        {
           jQuery(l_dom_IoOutputEnable).iButton({
               labelOn:"On",
               labelOff:"Off"
           });
           jQuery(l_dom_SnapShotEnable).iButton({
               labelOn:"On",
               labelOff:"Off",
               change:function(){
               	  if(l_dom_SnapShotEnable.checked)
               	  {
               	  	 jQuery("#SnapShotInterval_content").fadeIn();
               	  }else
               	  {
               	  	 jQuery("#SnapShotInterval_content").fadeOut();
               	  }
               }
           });
           jQuery(l_dom_RecordEnable).iButton({
               labelOn:"On",
               labelOff:"Off",
               change:function(){
                  if(l_dom_RecordEnable.checked)
               	  {
               	  	 //jQuery("#PreRecordTime_content").fadeIn();
               	  }
               	  else
               	  {
               	  	 //jQuery("#PreRecordTime_content").fadeOut();
               	  }
               }
           });
           jQuery("#alarm_switch_checkbox").iButton({
           	   labelOn:"On",
               labelOff:"Off",
               change:function(){
                 if(mx("#alarm_switch_checkbox").checked)
            	 {
            		jQuery("#alarm_info").fadeIn();
            	 }
            	 else
            	 {
            		jQuery("#alarm_info").fadeOut();
            	 }
               }
           });
           //布防&撤防按键事件
           l_dom_Arming_button.onclick=function()
           {  //布防
              if(l_dom_Arming_button[s_innerHTML] == mcs_alert_on)
              {
                   system_pop_confirm_box({str:mcs_prompt_alert_on, callback_func:function(){
                      ms.send_msg("alarm_action_set",{sn:g_select_device_ipc,enable:1},null,dev_alarm_action_set_ack);
                   }});
              }
              else//撤防
              {
                   system_pop_confirm_box({str:mcs_prompt_alert_off, callback_func:function(){
                      ms.send_msg("alarm_action_set",{sn:g_select_device_ipc,enable:0},null,dev_alarm_action_set_ack);
                   }});
              }
           }
           //应用按键事件
           l_dom_button_setup.onclick=function()
           {
              var Actions_one = new Object();
              var Arming_Enable;
           	  Actions_one.token=l_dom_Action.token;
           	  Actions_one.enable=mx("#alarm_switch_checkbox").checked?1:0;
           	  Actions_one.name=l_dom_Action.name;
           	  Actions_one.srcs=l_dom_Action.srcs;
           	  Actions_one.io_out_enable=l_dom_IoOutputEnable.checked?1:0;
           	  Actions_one.snapshot_enable=l_dom_SnapShotEnable.checked?1:0;
           	  Actions_one.record_enable=l_dom_RecordEnable.checked?1:0;
           	  Actions_one.snapshot_interval=l_dom_Action.snapshot_interval;
           	  //Actions_one.pre_record_time=PreRecordTime.value;
           	  if(l_dom_Arming_button[s_innerHTML] == mcs_alert_on)
              {
                   Arming_Enable=0;
              }
              else
              {
                   Arming_Enable=1;
              }
              ms.send_msg("alarm_action_set",{sn:g_select_device_ipc,enable:Arming_Enable,actions:Actions_one},null,dev_alarm_action_set_ack);
           }
        }
        l_me.ctrl =function(obj)
        {
        	switch(obj.type)
            {
                case "destroy":
                    {
                    	  remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        add_event();
        if(g_select_device_ipc)
          ms.send_msg("alarm_action_get",{sn:g_select_device_ipc},null,dev_alarm_action_get_ack);
    }
    //设置中的计划录像
    function class_options_record_setting(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_dom_checkbox_schedule,
            l_dom_schedule_record_content,
            l_dom_radio_H7_24,
            l_dom_radio_schedule,
            l_dom_radio_schedule_content,
            l_dom_button_setup,
            l_dom_input_begin_time1,l_dom_input_end_time1,l_dom_input_begin_time2,l_dom_input_end_time2,l_dom_input_begin_time3,l_dom_input_end_time3,l_dom_input_begin_time4,l_dom_input_end_time4,
            l_dom_schedule_record1,l_dom_schedule_record2,l_dom_schedule_record3,l_dom_schedule_record4,
            l_dom_schedule_record1_content,l_dom_schedule_record2_content,l_dom_schedule_record3_content,l_dom_schedule_record4_content,
            l_dom_week_checkbox1,l_dom_week_checkbox2,l_dom_week_checkbox3,l_dom_week_checkbox4,
            l_week_array=["0x1","0x2","0x4","0x8","0x10","0x20","0x40"];

            if(g_domain_oems_vimtag)
            {
            	  l_me_parent[s_innerHTML] =
            	  "<div id = 'plan_info' class = 'list_right_box'>"
                +      "<div class = 'list_right_item'>"
                +         "<div class='options_float_left'>" + mcs_enabled + "</div>"
		            +         "<div id='checkbox_schedule_div' class='options_float_right' style='margin-top:0px;'><input type='checkbox' id='checkbox_schedule'/></div>"
                +      "</div>"
                +      "<div id = 'schedule_record_content'>"
                +         "<div class = 'list_right_item'>"
                +            "<div class='options_float_left'>" + mcs_7x24_hours + "</div>"
		            +            "<div class='options_float_right' id='div_radio_H7_24' style='margin-top:15px;'><input id='radio_H7_24' type='radio' name='record_type' ></input></div>"
                +         "</div>"
                +         "<div class = 'list_right_item'>"
                +            "<div class='options_float_left'>" + mcs_scheduled_recording + "</div>"
		            +            "<div class='options_float_right' id='div_radio_schedule' style='margin-top:15px;'><input id='radio_schedule' type='radio' name='record_type'></input></div>"
                +         "</div>"
                +         "<div id='radio_schedule_content'>"
                +               "<div class = 'list_right_item_ex'>"
                +                  "<div class='options_float_left'>"+mcs_scheduled_one+":</div>"
		            +                  "<div class='options_float_right' style='margin-top:0px;'>"
		            +                     "<input id='schedule_record1' type='checkbox'/>"
		            +                  "</div>"
		            +               "</div>"	            
                +               "<div id='schedule_record1_content'>"
                +                  "<div class = 'list_right_item_ex'>"
                +                     "<span class = 'attribute_key_text'>"+mcs_begin_time+"</span>"
                +                     "<input id='input_begin_time1' type = 'text' value = '00:00' class = 'time_input'>"
                +                  "</div>"
                +                  "<div class = 'list_right_item_ex'>"
                +                     "<span class = 'attribute_key_text'>"+mcs_end_time+"</span>"
                +                     "<input id='input_end_time1' type = 'text' value = '00:00' class = 'time_input'>"
                +                  "</div>"
                +                   "<div class = 'list_right_item_ex'>"
                +                      "<span class = 'attribute_key_text'>"+mcs_week+"</span>"
                +                   "</div>"
                +                   "<div class = 'list_right_item'>"
                +                       "<div class='vimtag_week_checkbox_div1' style='margin-left:0px;'><input type='checkbox' class='week_checkbox_class1'  value='0'></input>" + mcs_sun+"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='1'></input>" + mcs_mon+"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='2'></input>" + mcs_tue  +"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='3'></input>" + mcs_wed  +"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='4'></input>" + mcs_thu  +"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='5'></input>" + mcs_fri +"</div>"
		            +                       "<div class='vimtag_week_checkbox_div1'><input type='checkbox' class='week_checkbox_class1' value='6'></input>" + mcs_sat  +"</div>"
		            +                       "<div id='week_checkbox1_div' style='float:left;margin-left:10px;'><input type='checkbox' id='week_checkbox1'></input>" + mcs_all+"</div>"
                +                   "</div>"
                +                "</div>"
                +                   "<div class = 'list_right_item_ex'>"
                +                      "<div class='options_float_left'>"+mcs_scheduled_two+":</div>"
		            +                      "<div class='options_float_right' style='margin-top:0px;'><input id='schedule_record2' type='checkbox' /></div>"
		            +                   "</div>"
                +                   "<div id='schedule_record2_content'>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_begin_time+"</span>"
                +                         "<input id='input_begin_time2' type='text' value='00:00' class='time_input'>"
                +                      "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_end_time+"</span>"
                +                         "<input id='input_end_time2' type='text' value='00:00' class='time_input'>"
                +                      "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_week+"</span>"
                +                      "</div>"
                +                      "<div class = 'list_right_item'>"
                +                         "<div class='vimtag_week_checkbox_div2' style='margin-left:0px;'><input type='checkbox' class='week_checkbox_class2' value='0'></input>" + mcs_sun+"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='1'></input>" + mcs_mon+"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='2'></input>" + mcs_tue  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='3'></input>" + mcs_wed +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='4'></input>" + mcs_thu +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='5'></input>" + mcs_fri  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div2'><input type='checkbox' class='week_checkbox_class2' value='6'></input>" + mcs_sat +"</div>"
		            +                         "<div id='week_checkbox2_div' style='float:left;margin-left:10px;'><input type='checkbox' id='week_checkbox2'></input>" + mcs_all+"</div>"
                +                      "</div>"
                +                   "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                        "<div class='options_float_left'>"+mcs_scheduled_three+":</div>"
		            +                        "<div class='options_float_right' style='margin-top:0px;'><input id='schedule_record3' type='checkbox' /></div>"
		            +                      "</div>"
                +                   "<div id='schedule_record3_content'>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_begin_time+"</span>"
                +                         "<input id='input_begin_time3' type = 'text' value = '00:00' class = 'time_input'>"
                +                      "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_end_time+"</span>"
                +                         "<input id='input_end_time3' type = 'text' value = '00:00' class = 'time_input'>"
                +                      "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<span class = 'attribute_key_text'>"+mcs_week+"</span>"
                +                      "</div>"
                +                      "<div class = 'list_right_item'>"
                +                         "<div class='vimtag_week_checkbox_div3' style='margin-left:0px;'><input type='checkbox' class='week_checkbox_class3' value='0'></input>" + mcs_sun+"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='1'></input>" + mcs_mon+"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='2'></input>" + mcs_tue  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='3'></input>" + mcs_wed  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='4'></input>" + mcs_thu  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='5'></input>" + mcs_fri  +"</div>"
		            +                         "<div class='vimtag_week_checkbox_div3'><input type='checkbox' class='week_checkbox_class3' value='6'></input>" + mcs_sat +"</div>"
		            +                         "<div id='week_checkbox3_div' style='float:left;margin-left:10px;'><input type='checkbox'  id='week_checkbox3'></input>" + mcs_all+"</div>"
                +                      "</div>"
                +                   "</div>"
                +                      "<div class = 'list_right_item_ex'>"
                +                         "<div class='options_float_left'>"+mcs_scheduled_four+":</div>"
		            +                         "<div class='options_float_right' style='margin-top:0px;'><input id='schedule_record4' type='checkbox' /></div>"
		            +                      "</div>"
                +                      "<div id='schedule_record4_content'>"
                +                         "<div class = 'list_right_item_ex'>"
                +                            "<span class = 'attribute_key_text'>"+mcs_begin_time+"</span>"
                +                            "<input id='input_begin_time4' type = 'text' value = '00:00' class = 'time_input'>"
                +                         "</div>"
                +                         "<div class = 'list_right_item_ex'>"
                +                            "<span class = 'attribute_key_text'>"+mcs_end_time+"</span>"
                +                            "<input id='input_end_time4' type = 'text' value = '00:00' class = 'time_input'>"
                +                         "</div>"
                +                         "<div class = 'list_right_item_ex'>"
                +                            "<span class = 'attribute_key_text'>"+mcs_week+"</span>"
                +                         "</div>"
                +                         "<div class = 'list_right_item'>"
                +                            "<div class='vimtag_week_checkbox_div4' style='margin-left:0px;'><input type='checkbox' class='week_checkbox_class4' value='0'></input>" + mcs_sun+"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='1'></input>" + mcs_mon+"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='2'></input>" + mcs_tue +"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='3'></input>" + mcs_wed +"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='4'></input>" + mcs_thu  +"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='5'></input>" + mcs_fri  +"</div>"
		            +                            "<div class='vimtag_week_checkbox_div4'><input type='checkbox' class='week_checkbox_class4' value='6'></input>" + mcs_sat  +"</div>"
		            +                            "<div id='week_checkbox4_div' style='float:left;margin-left:10px;' ><input type='checkbox'  id='week_checkbox4'></input>" + mcs_all+"</div>"
                +                         "</div>"
                +                      "</div>"
                +                   "</div>"
                +                "</div>"
                +                "<input class = 'list_right_button' id='button_setup' type = 'button' value = "+mcs_action_apply+">"
                +"</div>";
            }
            jQuery(l_me_parent).hide().fadeIn(500);
            l_dom_checkbox_schedule         = mx("#checkbox_schedule");
            l_dom_schedule_record_content   = mx("#schedule_record_content");
            l_dom_radio_H7_24               = mx("#radio_H7_24");
            l_dom_radio_schedule            = mx("#radio_schedule");

            l_dom_input_begin_time1         = mx("#input_begin_time1");
            l_dom_input_end_time1           = mx("#input_end_time1");
            l_dom_input_begin_time2         = mx("#input_begin_time2");
            l_dom_input_end_time2           = mx("#input_end_time2");
            l_dom_input_begin_time3         = mx("#input_begin_time3");
            l_dom_input_end_time3           = mx("#input_end_time3");
            l_dom_input_begin_time4         = mx("#input_begin_time4");
            l_dom_input_end_time4           = mx("#input_end_time4");

            l_dom_schedule_record1          = mx("#schedule_record1");
            l_dom_schedule_record2          = mx("#schedule_record2");
            l_dom_schedule_record3          = mx("#schedule_record3");
            l_dom_schedule_record4          = mx("#schedule_record4");

            l_dom_week_checkbox1            = mx("#week_checkbox1");
            l_dom_week_checkbox2            = mx("#week_checkbox2");
            l_dom_week_checkbox3            = mx("#week_checkbox3");
            l_dom_week_checkbox4            = mx("#week_checkbox4");

            l_dom_schedule_record1_content  = mx("#schedule_record1_content");
            l_dom_schedule_record2_content  = mx("#schedule_record2_content");
            l_dom_schedule_record3_content  = mx("#schedule_record3_content");
            l_dom_schedule_record4_content  = mx("#schedule_record4_content");

            l_dom_radio_schedule_content    = mx("#radio_schedule_content");
            week_checkbox = mx("#week_checkbox");
            l_dom_button_setup = mx("#button_setup");
            jQuery(l_dom_radio_schedule_content).hide();
            jQuery(l_dom_schedule_record1_content).hide();
            jQuery(l_dom_schedule_record2_content).hide();
            jQuery(l_dom_schedule_record3_content).hide();
            jQuery(l_dom_schedule_record4_content).hide();
            jQuery("#week_checkbox1_div").jNice({callback:checkbox_checkbox1_callback});
            jQuery("#week_checkbox2_div").jNice({callback:checkbox_checkbox2_callback});
            jQuery("#week_checkbox3_div").jNice({callback:checkbox_checkbox3_callback});
            jQuery("#week_checkbox4_div").jNice({callback:checkbox_checkbox4_callback});
            jQuery(".week_checkbox_div1").jNice();
            jQuery(".week_checkbox_div2").jNice();
            jQuery(".week_checkbox_div3").jNice();
            jQuery(".week_checkbox_div4").jNice();

        function checkbox_checkbox1_callback()
        {
            week_checkbox_class = mx(".week_checkbox_class1");
            if(l_dom_week_checkbox1.checked)
            {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=true;
                }
            }
            else
            {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=false;
                }
            }
            jQuery(".week_checkbox_div1").jNice();
        }
        function checkbox_checkbox2_callback()
        {
              week_checkbox_class = mx(".week_checkbox_class2");
              if(l_dom_week_checkbox2.checked)
              {
                 for(i=0;i<week_checkbox_class.length;i++)
                 {
                      week_checkbox_class[i].checked=true;
                 }
              }
              else
              {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=false;
                }
              }
             jQuery(".week_checkbox_div2").jNice();
        }
        function checkbox_checkbox3_callback()
        {
              week_checkbox_class = mx(".week_checkbox_class3");
              if(l_dom_week_checkbox3.checked)
              {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=true;
                }
              }
              else
              {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=false;
                }
              }
             jQuery(".week_checkbox_div3").jNice();
        }
        function checkbox_checkbox4_callback()
        {
              week_checkbox_class = mx(".week_checkbox_class4");
              if(l_dom_week_checkbox4.checked)
              {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=true;
                }
              }
              else
              {
                for(i=0;i<week_checkbox_class.length;i++)
                {
                      week_checkbox_class[i].checked=false;
                }
              }
             jQuery(".week_checkbox_div4").jNice();
        }
        //获取设备计划录像返回
        function dev_record_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                if(msg.enable)
                {
                   jQuery(l_dom_checkbox_schedule).iButton("toggle",true);
                }else
                {
                   jQuery(l_dom_checkbox_schedule).iButton("toggle",false);
                }
                if(msg.full_time)
                {
                    jQuery(l_dom_radio_H7_24).click();
                    jQuery(l_dom_radio_schedule_content).hide();
                }
                else if(msg.times)
                {
                    jQuery(l_dom_radio_schedule).click();
                    jQuery(l_dom_radio_schedule_content).show();
                    for(i=0;i<msg.times.length;i++)
                    {
                       if(msg.times[i].wday)
                       {
                            jQuery("#schedule_record"+(i+1)).iButton("toggle",true);
                            week_checkbox_class=mx(".week_checkbox_class"+(i+1));

                            mx("#input_begin_time"+(i+1)).value=input_time_change({type:"int",data:msg.times[i].start});
                            mx("#input_end_time"+(i+1)).value=input_time_change({type:"int",data:msg.times[i].end});
                            for(j=0;j<l_week_array.length;j++)
                            {
                               if(msg.times[i].wday & l_week_array[j])
                                {
                                   for(k=0;k<week_checkbox_class.length;k++)
                                   {
                                      if(week_checkbox_class[k].value==j)
                                      {
                                          week_checkbox_class[k].checked=true;
                                      }
                                   }
                                }
                            }
                       }
                       else
                       {
                           jQuery("#schedule_record"+(i+1)).iButton("toggle",false);
                       }
                    }
                }
            }
            jQuery("#manager_page").mCustomScrollbar("update");
            jQuery(".week_checkbox_div1").jNice();
            jQuery(".week_checkbox_div2").jNice();
            jQuery(".week_checkbox_div3").jNice();
            jQuery(".week_checkbox_div4").jNice();
        }
        function input_time_change(obj)
        {
           if(obj.type=="string")
           {
             return  obj.data.substring(obj.data.indexOf(":"),0)*60*60+obj.data.substring(obj.data.indexOf(":")+1,obj.data.length)*60;
           }
           else if(obj.type=="int")
           {
              var hour,Minute;
              hour=parseInt(obj.data/3600);
              Minute=(obj.data%3600)/60;
              if(hour<10)
              {
                hour="0"+hour;
              }
              if(Minute<10)
              {
                Minute="0"+Minute;
              }
              return hour+":"+Minute;
           }
        }
        function remove_event()
        {
        	 l_dom_radio_H7_24.onclick = "";
        	 l_dom_radio_schedule.onclick = "";
        	 l_dom_button_setup.onclick = "";
        }
        function time_check()
        {
            time_Standard=/^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;
            if( l_dom_schedule_record1.checked )
            {
                if(!time_Standard.test(l_dom_input_begin_time1.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(!time_Standard.test(l_dom_input_end_time1.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(l_dom_input_begin_time1.value >= l_dom_input_end_time1.value)
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_end_time_should_lt_begin + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
            }
            if( l_dom_schedule_record2.checked )
            {
                if(!time_Standard.test(l_dom_input_begin_time2.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(!time_Standard.test(l_dom_input_end_time2.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(l_dom_input_begin_time2.value >= l_dom_input_end_time2.value)
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_end_time_should_lt_begin + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
            }
            if( l_dom_schedule_record3.checked )
            {
                if(!time_Standard.test(l_dom_input_begin_time3.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(!time_Standard.test(l_dom_input_end_time3.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(l_dom_input_begin_time3.value >= l_dom_input_end_time3.value)
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_end_time_should_lt_begin + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
            }
            if( l_dom_schedule_record4.checked )
            {
                if(!time_Standard.test(l_dom_input_begin_time4.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(!time_Standard.test(l_dom_input_end_time4.value))
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_format_error + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
                if(l_dom_input_begin_time4.value >= l_dom_input_end_time4.value)
                {
                	 if(g_domain_oems_vimtag)
                	 {
                	 	  msg_tips({msg:mcs_end_time_should_lt_begin + ".", type:"error", timeout:3000});
                	 }
                   return false;
                }
            }

            return true;
        }
        function add_event()
        {
            l_dom_radio_H7_24.onclick=function()
            {
                if(this.checked)
                {
                   jQuery(l_dom_radio_schedule_content).hide();
                   jQuery("#manager_page").mCustomScrollbar("update");
                }
            }
            l_dom_radio_schedule.onclick=function()
            {
                if(this.checked)
                {
                   jQuery(l_dom_radio_schedule_content).show();
                   jQuery("#manager_page").mCustomScrollbar("update");
                }
            }
            l_dom_button_setup.onclick=function(){
                if(!time_check())return;
                week_checkbox_array=Array();
                if(l_dom_radio_schedule.checked)
                {
                   for(i=0;i<4;i++)
                   {
                      if(mx("#schedule_record"+(i+1)).checked)
                      {
                        week_checkbox_class=mx(".week_checkbox_class"+(i+1));
                        var wday=0;
                        for(j=0;j<week_checkbox_class.length;j++)
                        {
                          if(week_checkbox_class[j].checked)
                          {
                             wday=wday|l_week_array[week_checkbox_class[j].value];
                          }
                        }
                        if( wday == 0 )
                        {
                            //system_tooltip({parent:mx("#week_checkbox"+(i+1)+"_div"), color:"red", position:"right", disappear_way:"time", str:mcs_end_time_should_lt_begin + "."});
                            //return;
                        }
                        var input_begin_time = mx("#input_begin_time"+(i+1)).value;
                        var input_end_time =  mx("#input_end_time"+(i+1)).value;
                        week_checkbox_array.push({wday:wday,start:input_time_change({type:"string",data:input_begin_time}),end:input_time_change({type:"string",data:input_end_time})});
                      }
                   }

                }
                ms.send_msg("record_set",{sn:g_select_device_ipc,enable:l_dom_checkbox_schedule.checked?1:0,full_time:l_dom_radio_H7_24.checked?1:0,times:week_checkbox_array},null,function(msg,ref){
                    if(msg && msg.result=="")
                    {
                       if(g_domain_oems_vimtag)
                       {
                           msg_tips({msg:mcs_set_successfully, type:"success", timeout:3000});
                       }
                    }
                    else if(msg.result == "permission.denied")
                    {
                        if(g_domain_oems_vimtag)
                        {
                            msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
                        }
                    }
                    ms.send_msg("record_get",{sn:g_select_device_ipc},null,dev_record_get_ack);
                });
            }
            jQuery(l_dom_schedule_record1).iButton({
               change:function(){
                     if(l_dom_schedule_record1.checked)
            		 {
            		    jQuery(l_dom_schedule_record1_content).fadeIn();
            		 }else
            		 {
            		 		jQuery(l_dom_schedule_record1_content).fadeOut();
            		 }
            		 jQuery("#manager_page").mCustomScrollbar("update");
               }
           	});
           	jQuery(l_dom_checkbox_schedule).iButton({
               change:function(){
                     if(l_dom_checkbox_schedule.checked)
            		 {
            		    jQuery(l_dom_schedule_record_content).fadeIn();
            		 }else
            		 {
            		 		jQuery(l_dom_schedule_record_content).fadeOut();
            		 }
            		 jQuery("#manager_page").mCustomScrollbar("update");
               }
           	});
           	jQuery(l_dom_schedule_record2).iButton({
               change:function(){
                     if(l_dom_schedule_record2.checked)
            		 {
            		    jQuery(l_dom_schedule_record2_content).fadeIn();
            		 }else
            		 {
            		 	  jQuery(l_dom_schedule_record2_content).fadeOut();
            		 }
            		 jQuery("#manager_page").mCustomScrollbar("update");
               }
           	});
           	jQuery(l_dom_schedule_record3).iButton({
               change:function(){
                 if(l_dom_schedule_record3.checked)
            		 {
            		    jQuery(l_dom_schedule_record3_content).fadeIn();
            		 }else
            		 {
            		 		jQuery(l_dom_schedule_record3_content).fadeOut();
            		 }
            		 jQuery("#manager_page").mCustomScrollbar("update");
               }
           	});
           	jQuery(l_dom_schedule_record4).iButton({
                change:function(){
                 		if(l_dom_schedule_record4.checked)
            		 		{
            		    		jQuery(l_dom_schedule_record4_content).fadeIn();
            		 		}else
            		 		{
            		 				jQuery(l_dom_schedule_record4_content).fadeOut();
            		 		}
            		 		jQuery("#manager_page").mCustomScrollbar("update");
                }
           	});
        }
        l_me.ctrl = function(obj)
        {
           switch(obj.type)
            {
                case "destroy":
                    {
                    	  remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        add_event();
        ms.send_msg("record_get",{sn:g_select_device_ipc},null,dev_record_get_ack);
    }
    //设置中的时间和日期
    function class_options_time_date(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            l_refresh_time_id,//刷新时间的计时器
            l_dom_input_year,
            l_dom_input_month,
            l_dom_input_day,
            l_dom_input_hour,
            l_dom_input_minute,
            l_dom_input_second,
            l_dom_time_zone_selevt,
            l_dom_ntp,
            l_dom_button_setup,
            l_dom_time_zone_selevt_content;

        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	  "<div id = 'date_info' class = 'list_right_box'>"
            +       "<div class = 'list_right_item_ex'>"
            +          "<div class='options_float_left'>" + mcs_date + "</div>"
            +          "<div class='options_float_right'>"
            +             "<input id='input_date_year' class='vimtag_date' type='text' style='width:43px' ></input>"
            +             "<span id='date_year_span' style='padding:0 2px 0 2px'>" + mcs_year + "</span>"
            +             "<input id='input_date_month' class='vimtag_date' type='text' style='width:38px'></input>"
            +             "<span id='date_month_span' style='padding:0 2px 0 2px'>" + mcs_month + "</span>"
            +             "<input id='input_date_day' class='vimtag_date' type='text' style='width:38px'></input>"
            +             "<span id='date_day_span' style='padding:0 2px 0 2px'>" + mcs_day + "</span>"
            +          "</div>"
            +       "</div>"
            +       "<div class = 'list_right_item'>"
            +          "<div class='options_float_left'>" + mcs_time + "</div>"
            +          "<div class='options_float_right'>"
            +             "<input id='input_time_hour' class='vimtag_date' type='text' style='width:54px'></input>"
            +             "<span id='time_hour_span' style='padding:0 2px 0 2px'>:</span>"
            +             "<input id='input_time_minute' class='vimtag_date' type='text' style='width:53px'></input>"
            +             "<span id='time_minute_span' style='padding:0 2px 0 2px'>:</span>"
            +             "<input id='input_time_second' class='vimtag_date' type='text' style='width:53px'></input>"
            +          "</div>"
            +       "</div>"
            +       "<div id='time_zone_selevt_content'>"
            +          "<div class='options_float_left'>" + mcs_time_zone + "</div>"
            +          "<div class='options_float_right select_block'><select id='time_zone_selevt'>"
            +             "<option value='UTC+00:00'>UTC+00:00</option>"
            +             "<option value='UTC+01:00'>UTC+01:00</option>"
            +             "<option value='UTC+02:00'>UTC+02:00</option>"
            +             "<option value='UTC+03:00'>UTC+03:00</option>"
            +             "<option value='UTC+03:30'>UTC+03:30</option>"
            +             "<option value='UTC+04:00'>UTC+04:00</option>"
            +             "<option value='UTC+04:30'>UTC+04:30</option>"
            +             "<option value='UTC+05:00'>UTC+05:00</option>"
            +             "<option value='UTC+05:30'>UTC+05:30</option>"
            +             "<option value='UTC+05:45'>UTC+05:45</option>"
            +             "<option value='UTC+06:00'>UTC+06:00</option>"
            +             "<option value='UTC+06:30'>UTC+06:30</option>"
            +             "<option value='UTC+07:00'>UTC+07:00</option>"
            +             "<option value='UTC+08:00'>UTC+08:00</option>"
            +             "<option value='UTC+09:00'>UTC+09:00</option>"
            +             "<option value='UTC+09:30'>UTC+09:30</option>"
            +             "<option value='UTC+10:00'>UTC+10:00</option>"
            +             "<option value='UTC+10:30'>UTC+10:30</option>"
            +             "<option value='UTC+11:00'>UTC+11:00</option>"
            +             "<option value='UTC+12:00'>UTC+12:00</option>"
            +             "<option value='UTC+13:00'>UTC+13:00</option>"
            +             "<option value='UTC+14:00'>UTC+14:00</option>"
            +             "<option value='UTC-01:00'>UTC-01:00</option>"
            +             "<option value='UTC-02:00'>UTC-02:00</option>"
            +             "<option value='UTC-03:00'>UTC-03:00</option>"
            +             "<option value='UTC-03:30'>UTC-03:00</option>"
            +             "<option value='UTC-04:00'>UTC-04:00</option>"
            +             "<option value='UTC-05:00'>UTC-05:00</option>"
            +             "<option value='UTC-06:00'>UTC-06:00</option>"
            +             "<option value='UTC-07:00'>UTC-07:00</option>"
            +             "<option value='UTC-08:00'>UTC-08:00</option>"
            +             "<option value='UTC-09:00'>UTC-09:00</option>"
            +             "<option value='UTC-09:30'>UTC-09:30</option>"
            +             "<option value='UTC-10:00'>UTC-10:00</option>"
            +             "<option value='UTC-11:00'>UTC-11:00</option>"
            +             "<option value='UTC-12:00'>UTC-12:00</option>"
            +             "</select>"
            +          "</div>"
            +       "</div>"
            +       "<div class = 'list_right_item_ex'>"
            +          "<div>"
            +             "<div class='options_float_left'>" + mcs_auto_sync_date_time + "</div>"
            +             "<div id='checkbox_auto_sync_div' class='options_float_right'><input id='checkbox_auto_sync' type='checkbox'/></div>"
            +          "</div>"
            +          "<div id='ntp' class='clear'>"
            +             "<div class='options_float_left'>" + mcs_ntp + "</div>"
            +             "<div class='options_float_right'><input id='input_ntp' class='vimtag_service_address' type='text' style='width:145px'></input></div>"
            +          "</div>"
            +          "<div class='options_float_right' style='clear:both'><button id='button_setup' class='list_right_button' >" + mcs_apply + "</button></div>"
            +"</div>";
        }
        jQuery(l_me_parent).hide().fadeIn(500);

        l_dom_input_year = mx("#input_date_year");
        l_dom_input_month = mx("#input_date_month");
        l_dom_input_day = mx("#input_date_day");
        l_dom_input_hour = mx("#input_time_hour");
        l_dom_input_minute = mx("#input_time_minute");
        l_dom_input_second = mx("#input_time_second");
        l_dom_time_zone_selevt =mx("#time_zone_selevt");
        l_dom_time_zone_selevt_content =mx("#time_zone_selevt_content");
        l_dom_ntp = mx("#input_ntp");
        l_dom_button_setup = mx("#button_setup");

        if(determine_the_version({type:"Positive",version:version_Category.Schedule_recording}))
        {
          l_dom_time_zone_selevt_content.style.display="inline";
        }
        var stop_time={input_year:"",input_month:"",input_day:"",input_hour:"",input_minute:"",input_second:""};
        //刷新显示的时间
        function refresh_time_func(obj)
        {
            var me = this,
                year, month, day, hour, minute, second,
                leap_year = false;

            year = parseInt(obj.year, 10);
            month = parseInt(obj.month, 10);
            day = parseInt(obj.day, 10);
            hour = parseInt(obj.hour, 10);
            minute = parseInt(obj.minute, 10);
            second = parseInt(obj.second, 10);
            clearTimeout(l_refresh_time_id);
            if((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0))
            {
                leap_yaer = true;
            }
            if(++second >= 60)
            {
                minute += 1;
                second = 0;
                if(minute >= 60)
                {
                    hour += 1;
                    minute = 0;
                    if(hour >= 24)
                    {
                        day += 1;
                        hour = 0;
                        if((month == 1 || month == 3 || month == 5 || month == 7
                                    || month == 8 || month == 10 || month == 12) && (day > 31))
                        {
                            month +=1;
                            day = 0;
                        }
                        else if((month == 2) && (day > (leap_year? 29:28)))
                        {
                            month += 1;
                            day = 0;
                        }
                        else if(day > 30)
                        {
                            month += 1;
                            day = 0;
                        }
                        if(month > 12)
                        {
                            year += 1;
                            month = 0;
                        }
                    }
                }
            }
            if(second < 10)
                second = "0" + second;
            if(minute < 10)
                minute = "0" + minute;
            filling_time({year:year,month:month,day:day,hour:hour,minute:minute,second:second});
            l_refresh_time_id = setTimeout(function(){refresh_time_func({year:year,month:month,day:day,hour:hour,minute:minute,second:second})}, 1000);
        }
        //将时间显示出来
        function filling_time(obj)
        {
             focus_id=document.activeElement.id;
             if(focus_id!="input_date_year" && focus_id!="input_date_month" && focus_id!="input_date_day" && focus_id!="input_time_hour" && focus_id!="input_time_minute" && focus_id!="input_time_second")
             {
                if(stop_time.input_year)
                {
                    if(stop_time.input_year != l_dom_input_year.value  || stop_time.input_month != l_dom_input_month.value ||stop_time.input_day != l_dom_input_day.value ||stop_time.input_hour != l_dom_input_hour.value || l_dom_input_minute.value != stop_time.input_minute ||l_dom_input_second.value != stop_time.input_second)
                    return;
                }
                if(stop_time.input_year)
                {
                   stop_time.input_year = "";
                   stop_time.input_month= "";
                   stop_time.input_day  = "";
                   stop_time.input_hour = "";
                   stop_time.input_minute = "";
                   stop_time.input_second = "";
                }
                l_dom_input_year.value = obj.year;
                l_dom_input_month.value =obj.month;
                l_dom_input_day.value = obj.day;
                l_dom_input_hour.value = obj.hour;
                l_dom_input_minute.value = obj.minute;
                l_dom_input_second.value = obj.second;
             }else if(focus_id=="input_date_year" || focus_id=="input_date_month" || focus_id=="input_date_day" || focus_id=="input_time_hour" || focus_id=="input_time_minute" || focus_id=="input_time_second")
             {
                if(stop_time.input_year=="")
                {
                   stop_time.input_year = l_dom_input_year.value;
                   stop_time.input_month= l_dom_input_month.value;
                   stop_time.input_day  = l_dom_input_day.value;
                   stop_time.input_hour = l_dom_input_hour.value;
                   stop_time.input_minute = l_dom_input_minute.value;
                   stop_time.input_second = l_dom_input_second.value;
                }
             }
        }
        function dev_time_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result=="")
            {
                 l_dom_input_year.value = msg.year;
                 l_dom_input_month.value = msg.mon;
                 l_dom_input_day.value = msg.day;
                 l_dom_input_hour.value = msg.hour;
                 l_dom_input_minute.value = msg.min;
                 l_dom_input_second.value = msg.sec;
                 if(msg.auto_sync)
                   jQuery("#checkbox_auto_sync").iButton("toggle", true);
                 else
                   jQuery("#checkbox_auto_sync").iButton("toggle", false);
                 if(msg.ntp_addr)
                 {
                    l_dom_ntp.value = msg.ntp_addr;
                 }
                 if(msg.timezone)
                 {
                    l_dom_time_zone_selevt.value= msg.timezone;
                 }
                 refresh_time_func({year:l_dom_input_year.value,month:l_dom_input_month.value,day:l_dom_input_day.value,hour:l_dom_input_hour.value
                      ,minute:l_dom_input_minute.value,second:l_dom_input_second.value});
            }
        }
        function add_event()
        {
            l_dom_input_year.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_year.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_month.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
                mx("#date_year_span").style.paddingRight = "1px";
                mx("#date_month_span").style.paddingLeft = "1px";
            };
            l_dom_input_month.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
                mx("#date_year_span").style.paddingRight = "2px";
                mx("#date_month_span").style.paddingLeft = "2px";
            };
            l_dom_input_day.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
                mx("#date_month_span").style.paddingRight = "1px";
                mx("#date_day_span").style.paddingLeft = "1px";
            };
            l_dom_input_day.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
                mx("#date_month_span").style.paddingRight = "2px";
                mx("#date_day_span").style.paddingLeft = "2px";
            };
            l_dom_input_hour.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_hour.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            l_dom_input_minute.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
                mx("#time_hour_span").style.paddingRight = "1px";
                mx("#time_minute_span").style.paddingLeft = "1px";
            };
            l_dom_input_minute.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
                mx("#time_hour_span").style.paddingRight = "2px";
                mx("#time_minute_span").style.paddingLeft = "2px";
            };
            l_dom_input_second.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
                mx("#time_minute_span").style.paddingRight = "0px";
            };
            l_dom_input_second.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
                mx("#time_minute_span").style.paddingRight = "2px";
            };
            l_dom_ntp.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_ntp.onblur = function() {
                if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            jQuery("#checkbox_auto_sync").iButton({
            	  labelOn:"On",
                labelOff:"Off",
                change:function(){
                 if(mx("#checkbox_auto_sync").checked)
                  {
                  	jQuery("#input_date_year").attr("disabled","disabled");
                    jQuery("#input_date_day").attr("disabled","disabled");
                    jQuery("#input_time_hour").attr("disabled","disabled");
                    jQuery("#input_date_month").attr("disabled","disabled");
                    jQuery("#input_time_minute").attr("disabled","disabled");
                    jQuery("#input_time_second").attr("disabled","disabled");
                    mx("#ntp").style.display="inline";
                  }
                  else{
                    jQuery("#input_date_year").removeAttr("disabled");
                    jQuery("#input_date_day").removeAttr("disabled");
                    jQuery("#input_time_hour").removeAttr("disabled");
                    jQuery("#input_date_month").removeAttr("disabled");
                    jQuery("#input_time_minute").removeAttr("disabled");
                    jQuery("#input_time_second").removeAttr("disabled");
                    jQuery("#ntp").fadeOut(500);
                  }
                }
            });
            l_dom_button_setup.onclick= function(){
                ms.send_msg("time_set",{sn:g_select_device_ipc,type:mx("#checkbox_auto_sync").checked?"NTP":"manually",
                          timezone:l_dom_time_zone_selevt.value, hour:l_dom_input_hour.value, min:l_dom_input_minute.value, sec:l_dom_input_second.value,
                          year:l_dom_input_year.value,mon:l_dom_input_month.value,day:l_dom_input_day.value,auto_sync:Number(mx("#checkbox_auto_sync").checked),ntp_addr:l_dom_ntp.value},null,function(msg,ref){
                             if(msg.result=="")
                             {
                             	 if(g_domain_oems_vimtag)
                             	 {
                             	 	  msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
                             	 }
                               ms.send_msg("time_get",{sn:g_select_device_ipc},null,dev_time_get_ack);
                             }
                          }
                );
            };
            l_dom_time_zone_selevt.change_value=function()
            {
            }
        }
        function remove_event()
        {
            l_dom_input_year.onfocus = "";
            l_dom_input_year.onblur = "";
            l_dom_input_month.onfocus = "";
            l_dom_input_month.onblur = "";
            l_dom_input_day.onfocus = "";
            l_dom_input_day.onblur = "";
            l_dom_input_hour.onfocus = "";
            l_dom_input_hour.onblur= "";
            l_dom_input_minute.onfocus = "";
            l_dom_input_minute.onblur = "";
            l_dom_input_second.onfocus = "";
            l_dom_input_second.onblur = "";
            l_dom_button_setup.onclick = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                        clearTimeout(l_refresh_time_id);
                        remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
                default:
                    log("error:ctrl's obj.type is not exist in class_options_time_date.");
            }
        }
        add_event();
        if(g_select_device_ipc){
           ms.send_msg("time_get",{sn:g_select_device_ipc},null,dev_time_get_ack);
        }
    }
    //设置中的系统
    function class_options_system_maintenance(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            //data
            l_extra_timer = 1,
            l_inner_html = "",
            l_refresh_timer,
            //dom
            l_dom_system_upgrade_div,//显示在线升级或最新版本
            l_dom_input_activation,//激活码输入框
            l_dom_button_activation,//激活按键
            l_dom_button_restore,//恢复出厂设置
            l_dom_button_restart,//重启按键
            l_dom_system_upgrade_left,
            l_dom_detail_div_page,
            l_dom_detail_div_inner;

        if(g_domain_oems_vimtag)
        {	            
	            l_inner_html =
		            "<div class='list_right_item'>"
		            +   "<div class='options_float_left' id='system_upgrade_left'></div>"
		            +   "<div id='system_upgrade_div' class='options_float_right' style='margin-top:5px;'></div>"
		            +"</div>";
		        //直连显示 上传升级功能
		        if( g_network_environ == "private" )
		        {
		            l_inner_html +=
		                "<div class='list_right_item'>"
		                +   "<div class='options_float_left'>" + mcs_upload_upgrade + "</div>"
		                +   "<div id='file_upload_div' class='options_float_right' style='position:relative;right:40px;top:10px;cursor:pointer;'></div>"
		                +"</div>";
		        }
		        l_inner_html +=
		            "<div id='activation_div' class='list_right_item'>"
		            +   "<div class='options_float_left'>" + mcs_activation + "</div>"
		            +   "<div class='options_float_right'>"
		            +       "<input type='text' id='input_activation' class='vimtag_service_address'></input>"
		            +       "<button id='button_activation' class='list_right_button_ex'>" + mcs_activate + "</button>"
		            +   "</div>"
		            +"</div>"
		            +"<div class='list_right_item'>"
		            +   "<div class='options_float_left'>" + mcs_restore_the_factory_settings + "</div>"
		            +   "<div class='options_float_right' style='margin-top:5px;'><button id='button_restore_default_settings' class='list_right_button_ex'>" + mcs_restore + "</button></div>"
		            +"</div>"
		            +"<div class='list_right_item'>"
		            +   "<div class='options_float_left'>" + mcs_reboot + "</div>"
		            +   "<div class='options_float_right' style='margin-top:5px;'><button id='button_restart_device' class='list_right_button_ex'>" + mcs_reboot + "</button></div>"
		            +"</div>";

		        l_me_parent[s_innerHTML] = l_inner_html;
        }
        jQuery(l_me_parent).hide().fadeIn(500);

        l_dom_detail_div_page = dom_create_child(l_me_parent, "div", "detail_div_page");
        l_dom_detail_div_page[s_innerHTML]="<div id='detail_div_inner'><div>";
        l_dom_detail_div_inner=mx("#detail_div_inner");
        l_dom_system_upgrade_div  = mx("#system_upgrade_div");
        l_dom_input_activation    = mx("#input_activation");
        l_dom_button_activation   = mx("#button_activation");
        l_dom_button_restore      = mx("#button_restore_default_settings");
        l_dom_button_restart      = mx("#button_restart_device");
        l_dom_system_upgrade_left = mx("#system_upgrade_left");

        //如果设备编号是以166开头，则需要使用激活码激活
        if(g_select_device_ipc.substr(0, 3) != "166")
           mx("#activation_div").style.display = "none";

        function dev_upgrade_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                var msg_status = msg.status;
                if(ref.check_ver && msg_status == "fail" )
                {
                   msg_status="free";
                }
                if(ref.type == "online" && msg_status == "")
                {
                   l_dom_system_upgrade_div[s_innerHTML] = mcs_already_latest_version;
                }
                else if(msg_status == "fail" )
                {
                   system_pop_confirm_box({alert:true, str:mcs_fail + ":" +　msg.remark});
                }
                else if(msg_status != "free" && msg_status != "" && msg_status != "finish" )
                {
                    var wait_div = mx("#system_wait_div"), str_div = mx("#cl_str_div"),
                        i, extra = "";
                    setTimeout(function(){
                       ms.send_msg("upgrade_get",{sn:g_select_device_ipc},{type:""},dev_upgrade_get_ack);
                    }, 1000);
                    if(ref.type == "online")
                        l_dom_system_upgrade_div[s_innerHTML] = mcs_upgrading + "...";
                    if(!wait_div) g_system_wait_div("");
                    else
                    {
                        for(i = 1; i <= l_extra_timer; ++i)
                        {
                            extra += "."
                        }
                        l_extra_timer = ++l_extra_timer > 3 ? 1 : l_extra_timer;
                        if(msg_status == "download")
                        {
                            str_div[s_innerHTML] = mcs_downloading+ extra;
                        }
                        else if(msg_status == "erase")
                        {
                            str_div[s_innerHTML] = mcs_erasing + extra;
                        }
                        else if(msg_status == "write")
                        {
                            str_div[s_innerHTML] =  mcs_writing + " " + msg.progress + "%";  //下载显示百分比
                        }
                    }
                }
                else
                {
                    g_system_stop_wait();
                    l_extra_timer = 1;
                    if(ref.check_ver)
                    {
                        if(msg.ver_current < "12.09.13.04.04")
                        {
                            l_dom_system_upgrade_div.parentNode[s_style].display = "none";
                        }
                        if(msg.ver_valid == msg.ver_current)
                        {
                            l_dom_system_upgrade_left[s_innerHTML]= mcs_online_upgrade;
                            l_dom_system_upgrade_div[s_innerHTML] = mcs_already_latest_version;
                        }
                        else
                        {
                            l_dom_system_upgrade_left[s_innerHTML]= mcs_online_upgrade;
                            if(g_domain_oems_vimtag)
                            {
                            	l_dom_system_upgrade_div[s_innerHTML] = "<div style='float:left;margin-top:8px;'>"+mcs_new_version+msg.ver_valid+mcs_valid + "</div><div style='padding-top:20px;;float:left'><div  id='Detail_id'></div></div>&nbsp;<button class='list_right_button_ex'>" + mcs_upgrade + "</button>";
                            }
                            background_img_set(mx("#Detail_id"), sub_img_arrow);
                            mx("#Detail_id").onclick=function(){
                               jQuery(l_dom_detail_div_page).toggle();
                               jQuery(l_dom_detail_div_inner).mCustomScrollbar("update");
                            }
                            //升级按键 点击事件
                            mx("/button", l_dom_system_upgrade_div)[0].onclick = function(){
                                system_pop_confirm_box({str:mcs_upgrade_to_the_latest_version+msg.ver_valid,
                                    callback_func:function(){
                                        ms.send_msg("upgrade_set",{sn:g_select_device_ipc,check:1},{type:"",check_ver:1},function(msg,ref){
                                          if(msg.result==""){
                                            ms.send_msg("upgrade_get",{sn:g_select_device_ipc,check:1},{type:"online",check_ver:0},dev_upgrade_get_ack);
                                          }
                                        });
                                    }
                                });
                            }
                            jQuery("#Detail_id").hide();
                        }
                    }
                    else
                    {
                        //升级成功 重启设备
                        system_pop_confirm_box({str:mcs_upgrade_successful_restart_to_take_effect, button_left:mcs_reset_now, button_right:mcs_reset_later,
                            callback_func:function(obj){
                                ms.send_msg("reboot",{sn:g_select_device_ipc},null,function(msg,ref){
                                    if(msg.result=="")
                                    {
                                       g_system_prompt_box(mcs_set_successfully, 240, -200);
                                       setTimeout(function(){
                                          ms.send_msg("upgrade_get",{sn:g_select_device_ipc,check:1},{type:"",check_ver:1},dev_upgrade_get_ack);
                                       },1000);
                                    }
                                });
                            }
                        });
                    }
                }
            }
            else
            {
                log("error:CcmGetUpgradeStatusResponse return Result error in class_options_system_maintenance.");
            }
        }
        function on_cacs_check_nid_ack(type, msg, ref)
        {
            g_system_stop_wait();
            if(!msg.result)
            {
                clearInterval(l_refresh_timer);
                if(g_device_list_obj["sn_" + g_select_device_ipc.toUpperCase()]){
                   if(!g_device_list_obj["sn_" + g_select_device_ipc.toUpperCase()].parent_sn)
                       window.location.reload(true);
                   else
                    log("Rebooting.");
                }
                else if(g_device_list_obj["sn_" + g_select_device_ipc.toLowerCase()])
                {
                    if(!g_device_list_obj["sn_" + g_select_device_ipc.toLowerCase()].parent_sn)
                       window.location.reload(true);
                   else
                    log("Rebooting.");
                }
            }
            else
            {
                log("error:on_cacs_check_nid_ack return result error in class_options_system_maintenance.");
            }
        }
        function restore_pop_confirm_box(obj)
        {
            var pop_confirm_box = mx("#system_pop_confirm_box"),
             pop_confirm_content, pop_confirm_div,
             l_client_w, l_client_h,save_configuration,
             button_left = obj.button_left || mcs_ok, button_right = obj.button_right || mcs_cancel;

            if(!pop_confirm_box)
            {
                l_client_h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                l_client_w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                if(l_client_h < g_client_division_h)
                {
                    l_client_h = g_client_division_h;
                }
                if(l_client_w < g_client_division_w)
                {
                    l_client_w = g_client_division_w;
                }
                document.documentElement.onkeydown = function(e) {var evt = e || window.event; if(evt.keyCode != 116) return false;};
                pop_confirm_box = document.createElement("div");
                pop_confirm_box[s_setAttribute]("id", "system_pop_confirm_box");
                page.parentNode.insertBefore(pop_confirm_box, page);

                pop_confirm_content = dom_create_child(pop_confirm_box, "div", "system_pop_confirm_cotent");
                pop_confirm_div = dom_create_child(pop_confirm_box, "div", "system_pop_confirm_div");

                pop_confirm_div[s_style][s_cssText] = "position:absolute;width:" + l_client_w + "px;height:" + l_client_h + "px;background-color:#fff;opacity:0.1;"
                    + "filter:alpha(opacity=10);z-index:100";
                if(g_domain_oems_vimtag)
                {
                	  pop_confirm_content[s_style][s_cssText] = "position:absolute;top:" + ((l_client_h - 168) / 3) + "px;left:" + ((l_client_w - 286) / 2) + "px;z-index:101;"
		                    + " background-color:#ffffff;width:286px;height:168px;";
		
		
		                pop_confirm_content[s_innerHTML] =
		                     "<div style='padding-left:15px;padding-top:20px;font-weight:900;font-size:16px;color:#ff4136'><div style='height:70px;'>" + mcs_restore_factory_settings_prompt +"</div><input type='checkbox' id='save_configuration' checked='checked'></input>&nbsp;"+mcs_keep_network_settings+"</div>"
		                    +"<div style='position:absolute;bottom:15px'>"
		                    +   "<button class='vimtag_standard_buttons_green' style='margin-left:25px'>" + button_left + "</button>"
		                    +   "<button class='vimtag_standard_buttons_red' style='margin-left:45px'>" + button_right + "</button>"
		                    +"</div>";
		                    
		                mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = function() {
		                    var pop_confirm_box = mx("#system_pop_confirm_box"),
		                        pop_confirm_content = mx("#system_pop_confirm_content"),
		                        pop_confirm_div = mx("#system_pop_confirm_div");
		
		                    document.documentElement.onkeydown = null;
		                    mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = null;
		                    mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = null;
		                    if(mx("#save_configuration").checked)
		                    {
		                        save_configuration=1;
		                    }else
		                    {
		                        save_configuration=0;
		                    }
		                    pop_confirm_box[s_innerHTML] = "";
		                    pop_confirm_box.parentNode[s_removeChild](pop_confirm_box);
		                    pop_confirm_box = null;
		
		                    obj.callback_func({save_configuration:save_configuration});
		                };
		                mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = function() {
		                    var pop_confirm_box = mx("#system_pop_confirm_box"),
		                        pop_confirm_content = mx("#system_pop_confirm_content"),
		                        pop_confirm_div = mx("#system_pop_confirm_div");
		
		                    document.documentElement.onkeydown = null;
		                    mx(".vimtag_standard_buttons_green", pop_confirm_content)[0].onclick = null;
		                    mx(".vimtag_standard_buttons_red", pop_confirm_content)[0].onclick = null;
		
		                    pop_confirm_box[s_innerHTML] = "";
		                    pop_confirm_box.parentNode[s_removeChild](pop_confirm_box);
		                    pop_confirm_box = null;
		                };
                }
            }
        }
        function add_event()
        {
            //输入激活码框 事件
            l_dom_input_activation.onfocus = function() {
                this.select();
                if(g_standard_input_box_onfocus)
                    g_standard_input_box_onfocus(this);
            };
            l_dom_input_activation.onblur = function() {
                 if(g_standard_input_box_onblur)
                    g_standard_input_box_onblur(this);
            };
            //激活按键 点击事件
            l_dom_button_activation.onclick = function() {
                ms.send_msg("dev_activate",{sn:g_select_device_ipc,activationCode:l_dom_input_activation.value},null,function(msg,ref){
                	if(msg && msg.result == ""){
                		 g_system_prompt_box(mcs_set_successfully, 240, -200);
                	}
                });
            };
            //恢复出场设置
            l_dom_button_restore.onclick = function() {
                restore_pop_confirm_box({str:"", callback_func:function(obj){
                     ms.send_msg("restore",{sn:g_select_device_ipc,keep_extends_cofig:obj.save_configuration},null,function(msg,ref){
                         if(msg.result=="")
                         {
                             device_reboot();
                         }
                     });
                }});
            };
            //重启设置
            l_dom_button_restart.onclick = function() {
                system_pop_confirm_box({str:mcs_restart_prompt, callback_func:function(obj){device_reboot();}});
            };
            jQuery(document).bind("click", function (event)
            {
               var e = event || window.event;
               var elem = e.srcElement||e.target;
               while(elem)
               {
                   if(elem.id == "Detail_id" || elem.id ==  "detail_div_page")
                   {
                       return;
                   }
                   elem = elem.parentNode;
               }
               jQuery(l_dom_detail_div_page).hide();
            });
        }
        function remove_event()
        {
            l_dom_input_activation.onfocus = "";
            l_dom_input_activation.onblur = "";
            l_dom_button_activation.onclick = "";
            l_dom_button_restore.onclick = "";
            l_dom_button_restart.onclick = "";
        }
        function device_reboot()
        {
        	  ms.send_msg("reboot",{sn:g_select_device_ipc},null,function(msg,ref){
                if(msg.result=="")
                {
                   g_system_prompt_box(mcs_set_successfully, 240, -200);
                }
            });
        }
        function ccm_get_upgrade_status_request(obj)
        {
            var node, node_sn;
            node_sn = g_select_device_ipc;
            node = mcloud_agent.devs.get(node_sn);
            if(!node) return;
            ms.send_msg("upgrade_get",{sn:node_sn,check:0},{type:0,check_ver:0},dev_upgrade_get_ack);
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "destroy":
                    {
                        clearInterval(l_refresh_timer);
                        remove_event();
                        l_me_parent.innerHTML = "";
                        l_me_parent = null;
                        break;
                    }
            }
        }
        add_event();
        if(g_network_environ == "private")
           new class_file_upload({parent:mx("#file_upload_div"), callback:ccm_get_upgrade_status_request});
        ms.send_msg("upgrade_get",{sn:g_select_device_ipc,check:1},{type:"",check_ver:1},dev_upgrade_get_ack);
    }
    //设置中的其它
    function class_options_others(obj)
    {
        var l_me = this,
            l_me_parent = obj.parent,
            //dom
            l_dom_input_speaker,
            l_dom_input_microphone,
            l_dom_button_setup;

        if(g_domain_oems_vimtag)
        {
        	  l_me_parent[s_innerHTML] =
        	  "<div id = 'other_info' class = 'list_right_box'>"
        	  +"<div class='list_right_item'>"
            +   "<div class='vimtag_options_float_left'>" + mcs_audio + " :</div>"
            +"</div>"
            +"<div class = 'list_right_item_ex'>"
            +   "<div class='vimtag_options_float_left'>- " + mcs_speaker + "</div>"
            +   "<div class='options_float_right' style='width:200px;'>"
            +       "<label for='input_speaker'></label>"
            +       "<input name='slider' type='text' id='input_speaker' class='fd_tween fd_classname_extraclass fd_hide_input "
            +           "fd_slider_cb_create_ms.TT-init fd_slider_cb_update_ms.TT-update fd_slider_cb_move_ms.TT-update' value='0%'</input>"
            +   "</div>"
            +"</div>"
            +"<div class='list_right_item'>"
            +   "<div class='vimtag_options_float_left'>- " + mcs_mic + "</div>"
            +   "<div class='options_float_right' style='width:200px;'>"
            +       "<label for='input_microphone'></label>"
            +       "<input name='slider' type='text' id='input_microphone' class='fd_tween fd_classname_extraclass fd_hide_input "
            +           "fd_slider_cb_create_ms.TT-init fd_slider_cb_update_ms.TT-update fd_slider_cb_move_ms.TT-update' value='0%'</input>"
            +   "</div>"
            +"</div>"
            +"<div class='options_float_right' style='clear:both'><button id='button_setup' class='list_right_button' >" + mcs_apply + "</button>"
            +"</div>"
            +"</div>";
        }
        jQuery(l_me_parent).hide().fadeIn(500);
        // dom get
        l_dom_button_setup = mx("#button_setup");
        l_dom_input_speaker = mx("#input_speaker");
        l_dom_input_microphone = mx("#input_microphone");

        //音频获取
        function dev_audio_get_ack(msg,ref)
        {
            if(!l_me_parent) return;
            if(msg && msg.result == "")
            {
                if(l_dom_input_speaker)
                    fdSliderController.increment("input_speaker", msg.speaker_level - l_dom_input_speaker.value);
		            if(l_dom_input_microphone)
                    fdSliderController.increment("input_microphone", msg.mic_level - l_dom_input_microphone.value);
            }
            else
            {
                log("error:GetAudioOutputConfigurationResponse return Result error in class_options_others.");
            }
        }
        function add_event()
        {
            l_dom_button_setup.onclick = function() {
                var output_level,speaker_level;
                speaker_level  = parseInt(mx(".fd-slider-handle", mx("#fd-slider-input_speaker"))[0].getAttribute("aria-valuenow"), 10);
                output_level = parseInt(mx(".fd-slider-handle", mx("#fd-slider-input_microphone"))[0].getAttribute("aria-valuenow"), 10);

								ms.send_msg("audio_set",{sn:g_select_device_ipc,mic_level:output_level,speaker_level:speaker_level},null,function(msg,ref){
				   					if(msg && msg.result == ""){
				   						if(g_domain_oems_vimtag)
				   						{
				   							 msg_tips({msg:mcs_set_successfully, type:"warning", timeout:3000});
				   						}
				      			  ms.send_msg("audio_get",{sn:g_select_device_ipc},null,dev_audio_get_ack);
				   					}
								});
            };
        }
        function remove_event()
        {
            l_dom_button_setup.onclick = "";
        }
        l_me.ctrl = function(obj)
        {
            switch(obj.type)
            {
                case "update":
                   {
                   	   break;
                   }
                case "destroy"://删除
                   {
                        remove_event();
                        l_me_parent[s_innerHTML] = "";
                        l_me_parent = null;
                        break;
                   }
                default:
                    log("error:ctrl's obj.type is not exist in class_options_others.");
            }
        }
        add_event();
        fdSliderController.create();
        ms.send_msg("audio_get",{sn:g_select_device_ipc},null,dev_audio_get_ack);
    }
    //设置中删除设备
    function class_options_delete_device(obj)
    {
    	  var l_me = this,
    	      l_me_parent = obj.parent,
    	      l_parent_callback = obj.on_event,
    	      l_dom_button_setup;
    	      
    	      l_me_parent[s_innerHTML] =
    	      //"<div class = 'list_right_item_ex'>"
    	      "<div class='options_float_right' style='clear:both'><button id='button_setup' class='list_right_button'>" + mcs_delete_device + "</button>"
    	      +"</div>";
    	      //+"</div>";
    	      
    	      l_dom_button_setup = mx("#button_setup");
    	      
    	      function ccm_dev_del_ack(msg,ref)
            {
            	 if(!l_me_parent) return;
            	 if(msg && !msg.result)
            	 {
                  mcloud_agent.devs.del(ref.sn);
                  var del_g_device_list_obj = new Array();
                    g_device_list_obj = del_g_device_list_obj;
                  for(var i=0; i<mcloud_agent.devs.list.length; i++){
                     g_device_list_obj["sn_" + mcloud_agent.devs.list[i].sn] = {name:name,type:mcloud_agent.devs.get(mcloud_agent.devs.list[i].sn).type, ip:mcloud_agent.devs.get(mcloud_agent.devs.list[i].sn).addr, isParent:true,
                         state:{online:"Online", view:0, recording:0, call:0, playback:0,playback_download:0}};
                  }
                  
                  jQuery("#history_return").click();
            	 }
            	 else if(msg.result == "permission.denied")
            	 {
            	 	  msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000});
            	 }
            	 else
            	 {
            	 	  msg_tips({msg:"error:CcmAddSubDeviceResponse return Result error in class_device_list_box.", type:"error", timeout:3000});
            	 }
            }
    	      
    	      l_dom_button_setup.onclick = function(){
    	      	 system_pop_confirm_box({str:mcs_delete_device + "?",callback_func:function(){
		              ms.send_msg("dev_del",{sn:g_select_device_ipc},{sn:g_select_device_ipc},ccm_dev_del_ack)	
		           }});
    	      };
    	      
    	      function remove_event()
		        {
		            l_dom_button_setup.onclick = "";
		        }
		        l_me.ctrl = function(obj)
		        {
		            switch(obj.type)
		            {
		                case "update":
		                   {
		                   	   break;
		                   }
		                case "destroy"://删除
		                   {
		                        remove_event();
		                        l_me_parent[s_innerHTML] = "";
		                        l_me_parent = null;
		                        break;
		                   }
		                default:
		                    log("error:ctrl's obj.type is not exist in class_options_delete_device.");
		            }
		        }
    }
    function class_file_upload(obj)
    {
        var l_me_parent  = obj.parent,
            l_callback = obj.callback,
            l_flag    = 0,
            l_alpha   = 1.0,

            l_field_name = "dimg_content",
            icon    = document.createElement("img"),
            iframe  = document.createElement("iframe"),
            form,
            l_file;

        function iframe_build()
        {
            var file_content, alpha = 0.01, html_text,
                doc = iframe.contentDocument || iframe.contentWindow.document;

            /* it is very important, you should not delete these tow line codes */
            try {
                doc.open();
                doc.close();
            }catch(err){}

            doc.body[s_style][s_cssText] = "padding:0px;margin:0px;border:none;overflow:hidden;";
            html_text = "<form id='upf' method='post' action='/ccm/ccm_upgrade.js?dsess=1&dsess_nid=" + mcloud_agent.create_nid() + "&dimg_src=upload'"
                + " enctype='multipart/form-data' "
                + "style='padding:0px;margin:0px;border:none;width:32px;height:32px;overflow:hidden;'>"
                + "<input type='file' id='" + l_field_name +  "' hidefocus='true'"
                + " title='" + mcs_caption + "'"
                + " style='padding:0px;margin:0px;position:absolute;left:-5px;top:0px;verflow:hidden;cursor:f;"
                + "width:24px;height:24px;line-height:24px;"
                + mhack.css_alpha(alpha) + "'"
                + " name='" + l_field_name + "' "
                + "/>"
                + "</form>";

            doc.body.innerHTML = html_text;
            if(iframe.style.visibility == "hidden")
            {
                iframe.style.visibility = "";
            }

            form = doc.getElementById("upf");
            l_file = doc.getElementById(l_field_name);
            //文件更改事件
            l_file.onchange = function ()
            {
                if("" == l_file.value)
                {
                    system_pop_confirm_box({alert:true, str:"select nothing"});
                    return;
                }
                iframe.style.visibility = "hidden";

                form.submit();
                icon.src = "./imgs/loading.gif";
                l_flag = 1;
            };
            icon.src = "./imgs/plugin_install_ico_out.png";
        }

        function ifame_on_load()
        {
            var doc = iframe.contentDocument || iframe.contentWindow.document;
            if (doc && ((undefined == doc.readyState) || (doc.readyState == "complete")))
            {
                if(1 == l_flag)
                {
                    var msg = doc.body.innerHTML,
                        param = null,
                        s = msg, start = s.indexOf("("), end = s.lastIndexOf(")");

                    if ((end > (start + 2))
                            && ('{' == s.charAt(start + 1))
                            && ('}' == s.charAt(end - 1))) {
                        try {
                            param = meval(s.substring(start + 1, end));
                        } catch (err) {
                            param = "error";
                        }
                    }

                    if (("error" == param) || (null == param) || (null == param.data) || ("" != param.data.ret.code))
                    {
                        log("upload error");
                    }
                    else
                    {
                        l_callback();
                        log("upload succeed");
                        l_flag = 0;
                    }
                    iframe_build();
                }
            }
        }
        /* must use attach to iframe */
        l_me_parent.appendChild(icon);
        l_me_parent.appendChild(iframe);
        iframe.onload = ifame_on_load;

        icon[s_style][s_cssText] = "border:none;padding:0px;margin:0px;position:absolute;top:0px;";
        iframe[s_style][s_cssText] = "border:none;padding:0px;margin:0px;width:32px;height:32px;position:absolute;" +  mhack.css_alpha(l_alpha);
        iframe.title =  "upload file here";
        iframe.src = "";
        iframe_build();
    }
/*-----------------Setting options pages--------------------*/

    function software_init()
    {
    	var currheight = document.documentElement.clientHeight,
            currwidth = document.documentElement.clientWidth;
    	window.ms = new class_mining_software();
    	window.onresize = function() {
            hide_li();
          if(currheight != document.documentElement.clientHeight || currwidth != document.documentElement.clientWidth)
          {
            ms.ctrl({type:"update"});
          }
          currheight = document.documentElement.clientHeight;
       	  currwidth = document.documentElement.clientWidth;
    	};
    	window.onunload = function(){
          ms.ctrl({type:"destroy"});
    	};
    }

    window.software_init = software_init;
})(window, document);
mx(software_init);
