<!-- version v10.11.2.2311291533 -->
<!-- 版本号 v10.11.2.2311291533 -->
<html>
<!-- 发布到dcm服务器上用于测试入口服务器index文件 -->
<head>
  <meta http-equiv="content-type" content="text/html" charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <script type="text/javascript">
    if (location.href.indexOf("f=app") > -1) {
      document.write("<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'/>")
    }
    var m_hostname // 全局品牌名
    var web_url = window.location.href // 当前访问url地址
    var contain_https // https域名在返回值中固定位置获取
    var proto // 协议
    var host // 域名
    var serverArr = [] // 获取所有信令服务器地址数组
    var httpsTest // https协议测试结果
    var cmipcgwGetData // cmipcgw获取的全部数据
    var httpMapArr = [
      {
        httpIp: '45.120.103.34:7080',
        mapIp: 'https://wsbgp12.fujikam.com:7447'
      },
      {
        httpIp: '45.120.103.34:4080',
        mapIp: 'https://wsbgp12.fujikam.com:4447'
      },
      {
        httpIp: '45.120.103.34:3080',
        mapIp: 'https://wsbgp12.fujikam.com:3447'
      },
      {
        httpIp: '45.120.103.35:7080',
        mapIp: 'https://wsbgp13.fujikam.com:7447'
      },
      {
        httpIp: '45.120.103.35:4080',
        mapIp: 'https://wsbgp13.fujikam.com:4447'
      },
      {
        httpIp: '45.120.103.35:3080',
        mapIp: 'https://wsbgp13.fujikam.com:3447'
      },
      {
        httpIp: '45.120.103.36:7080',
        mapIp: 'https://wsbgp14.fujikam.com:7447'
      },
      {
        httpIp: '45.120.103.36:4080',
        mapIp: 'https://wsbgp14.fujikam.com:4447'
      },
      {
        httpIp: '45.120.103.36:3080',
        mapIp: 'https://wsbgp14.fujikam.com:3447'
      },
    ]
    // 拼接地址用于请求cmipcgw_get_req接口获取信令服务器地址
    function start() {
      var s, temp, tp = null, request, oem_domain
      if (web_url.indexOf("m=") > -1) { // 如果地址中有m参数,则品牌名称为m
        oem_domain = GetUrlParms().m
      }
      m_hostname = oem_domain ? oem_domain : window.location.hostname // 获取品牌名称
      var dit_len = m_hostname.split(".").length // 截取域名并获取分割的数组长度
      if (dit_len === 2) { // 域名不包含www则补全www
        m_hostname = "www." + m_hostname
      }
      var ran = Math.floor(Math.random()*10000) // handle为随机数变量,用于控制请求是否相同
      var appid = window.location.hostname.split('.') // 获取域名除去一级域名www/test/debug等
      if (appid.length === 3) {
        appid.shift()
      }
      appid = appid.join('.')
      // 仅请求信令服务器地址不需要其他参数暂定使用简单参数方法
      request = "/cmipcgw/cmipcgw_get_req.js?handle=" + ran + "&dclient=1&dclient_param__x_countz_=1&dclient_param=1&dclient_param_name=appid&dclient_param_value=" + appid
      // 如果地址中有apply_ip参数,说明cmipcgw接口需要多传递该参数
      if (web_url.indexOf('apply_ip=') > -1) {
        request += '&dclient_apply_ip=' + GetUrlParms().apply_ip
      }
      console.log(request, 'cmipcgwURL')
      if (window.location.hostname.indexOf("i-live.net.cn") > -1 || window.location.hostname === "58.61.153.230") {
        document.title = "Error"
        document.write("404: unable to display this page")
      } else {
        if (window.location.protocol === "https:") { // https协议入口服务器地址遍历
          var urls = ["www.mipcm.com:7443", "www.vimtag.com:7446", "www.ebitcam.com:7445", "www.vsmahome.com:7444"]
          function url_sort(url, data) {
            var test
            for (var i = 0; i < url.length; i++) {
              if (url[i].indexOf(data) !== -1) {
                test = url[0]
                url[0] = url[i]
                url[i] = test
              }
            }
            return url
          }
          url_sort(urls, m_hostname)
          function check_link_https(index) {
            var temp = urls[index]
            s = document.createElement("script")
            s.setAttribute("type", "text/javascript")
            s.setAttribute("src", "https://" + temp + request)
            s.onerror = function () {
              if ((index + 1) >= urls.length) {
                return false
              } else {
                check_link_https(index + 1)
              }
            }
            document.getElementsByTagName('head').item(0).appendChild(s)
          }
          check_link_https(0)
        }
        if (window.location.protocol === "http:") { // http协议入口服务器地址遍历
          var urls = ["52.8.41.82:7080", "209.133.212.170:7080", "149.202.201.87:7080", "119.23.57.95:7080"]
          function check_link(index) {
            var temp = urls[index]
            s = document.createElement("script")
            s.setAttribute("type", "text/javascript")
            s.setAttribute("src", "http://" + temp + request)
            s.onerror = function () {
              if ((index + 1) >= urls.length) {
                return false
              } else {
                check_link(index + 1)
              }
            }
            document.getElementsByTagName('head').item(0).appendChild(s)
          }
          check_link(0)
        }
      }
    }
    // cmipcgw_get_req接口返回处理
    function message(obj) {
      if (obj && obj.type === "cmipcgw_get_ack") { // 获取信令服务器接口回调截取
        if (obj && obj.data && obj.data.result == "" && obj.data.server.signal && obj.data.server.signal[0]) { // 筛选正确返回值的接口内容
          // 判断当前访问协议https/http
          let protoFlag = ("https:" === window.location.protocol) ? true : false
          // 返回的数组中是否包含https的标识
          let serverHttpsFlag = false
          let iframeHostArr = []
          let iframeHostName = ''
          serverArr = obj.data.server.signal // 将信令服务器地址全部存储
          cmipcgwGetData = obj.data // cmipcgw接口获取的全部数据信息
          // 循环遍历服务器数组寻找https域名, 格式化所有信令服务器地址保留http/https协议包含端口号
          serverArr.forEach(item => {
            iframeHostArr.push(extractBaseURL(item))
            if (item.indexOf('https') != -1) {
              serverHttpsFlag = true
            }
          })
          // 当前访问协议为https, 但没有返回https域名
          if (protoFlag && !serverHttpsFlag) {
            // 取出http域名项
            let httpHostName = iframeHostArr.find(item => item.indexOf('http') > -1)
            // 查询http域名是否有映射
            let httpMapIpObj = httpMapArr.find(item => item.httpIp == httpHostName)
            if (httpMapIpObj) {
              iframeHostArr.push(httpMapIpObj.mapIp)
              serverHttpsFlag = true
            } else {
              alert('error get server')
            }
          }
          // 经过筛选处理后的信令服务器数组
          serverArr = iframeHostArr
          // 有https协议地址
          if (serverHttpsFlag) {
            iframeHostName = serverArr.find(item => item.indexOf('https') > -1)
          } else {
            // 无https协议地址
            iframeHostName = serverArr.find(item => item.indexOf('http') > -1)
          }
          // 信令服务器地址
          iframeHostName
        }
      }
    }
    function GetUrlParms() { // url参数截取方法
      var args, query, pairs
      args = new Object()
      query = location.search.substring(1)
      pairs = query.split("&")
      for (var i = 0; i < pairs.length; i++) {
        var pos = pairs[i].indexOf('=')
        if (pos === -1) {
          continue
        }
        var argname = pairs[i].substring(0, pos)
        var value = pairs[i].substring(pos + 1)
        args[argname] = unescape(value)
      }
      return args
    }
    //截取字符串中包含端口号部分
    function extractBaseURL(url) {
      var parser = document.createElement('a')
      parser.href = url
      return parser.protocol + '//' + parser.host
    }
    window.addEventListener('message', function(e) { // 从子页面中接收需要修改的title值,并修改title
        console.log('get childPage postMessage change the browser title', e.data)
        console.log('e.data.sendEvalFunc', e.data.sendEvalFunc)
        document.title = e.data.pageTitle
        eval(e.data.sendEvalFunc)
    }, false)
  </script>

  <style type="text/css">
    html,
    body,
    #iframe_div,
    iframe {
      background: #fff;
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
      /*overflow:hidden; */
      position: relative;
      border: 0;
    }
  </style>
  <title></title>
</head>

<body onload="start()">
</body>

</html>