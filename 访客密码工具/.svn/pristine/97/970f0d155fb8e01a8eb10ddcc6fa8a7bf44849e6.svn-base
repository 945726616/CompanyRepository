///<jscompress sourcefile="config.js" />
function callNative(func, param, callback) {
    if (g_browser == "ios") {
        call_ios_native(func, param, callback);
    } else if (g_browser == "android") {
        call_android_native(func, param, callback);
    }else if(g_browser == "web"){
         var msdk = new MSdk(param)
        msdk.sdk_callNative(func, param, callback)
    }else {
        log("Unsupported system");
    }
}

function onEvent(param){
    //log(param)
    if (g_browser == "ios") {
        call_ios_event(param);
    } else if (g_browser == "android") {
        call_android_event(param);
    }else if(g_browser == "web"){
        call_web_event(param)
    } else {
        log("Unsupported system");
    }
}

function callback_live_play(param){
    var obj;
    if(typeof param === "string"){
        obj = eval("(" + param + ")");
    }else{
        obj = param;
    }
    var result = new Object();
    result.data = {"ref":obj.param.data.ref,"result":obj.result};
    result.ref = obj.param.ref;
    onEvent(JSON.stringify(result));
}

function callback_play_destory(param){
    var obj;
    if(typeof param === "string"){
        obj = eval("(" + param + ")");
    }else{
        obj = param;
    }
    var result = new Object();
    result.data = {"ref":obj.param.data.ref,"result":obj.result};
    result.ref = obj.param.ref;
    onEvent(JSON.stringify(result));
}

function call_android_native(func, param, callback){
    window.McldActivityNativeJS.callNative(func, param, callback);
}

function call_android_event(param){
    window.McldActivityNativeJS.onEvent(param);
}

function call_ios_native(func, param, callback){
    callOCNative(func,param,callback);
}

function call_ios_event(param){
    callOCOnEvent(param);
}

function call_web_event(param){
     var msdk = new MSdk(param)
    msdk.sdk_onEvent(param)
}


function log(string){
    if(g_isLog){
        console.log(string)
    }
};
///<jscompress sourcefile="global.variable.js" />
g_func = [];

g_version = "v6.6.1.1906101100";

g_browser = "";
g_appId = "";
g_isLog = false;
g_language = "en";
g_sdk_version = "";
g_time_zone = "";

msdk_agent = "";
g_user_name = "";
g_user_pass = "";

//var msdk_agent = "";
var g_server_https,g_server_http;
var g_server_device = "";
;
///<jscompress sourcefile="boxlist.func.js" />
function boxlist_func(obj){
    var _this = this;
	_this.boxlist_get = function (data){
		ms.send_msg("box_get",data,null,function (msg,ref){
            if (msg && msg.result == "") {
                var ipcs_length = msg.ipcs?msg.ipcs.length:0;
                for (var i = 0; i < ipcs_length; i++) {
                    msg.ipcs[i].nick = msg.ipcs[i].nick ? msg.ipcs[i].nick : msg.ipcs[i].sn;
                }
                data.func(msg);
            } else {
                data.func(msg);
            }
		})
	}
    _this.boxlist_img_url = function (data){
        var url = msdk_agent.pic_url_get({sn: data.sn, token: data.token});
        data.func(url);
    }
	_this.boxlist_img_get = function (data){
		var l_b64_str_array=[];
		var l_canvas_dom_array=[];
		var l_canvas_index=0;
		var c_index=0;
        l_canvas_dom_array=data.dom;
        var data_ipc_length = data.ipc?data.ipc.length:0;
		for(var i=0;i<data_ipc_length;i++){
		    var token=data.ipc[i].sn+"_"+data.resolution+"_"+Math.pow(2,31) +"_"+Math.pow(2,31);
		    if(g_local){
                var url = g_local_agent.pic_url_get({sn:data.sn,token:token,flag:2,is_history:1})               
		    }else{
		        var url = window.location.protocol + "//"+window.location.host+"/ccm/ccm_pic_get.js?dsess=1&dsess_nid="+msdk_agent.create_nid()+"&dsess_sn="+data.sn+"&dtoken="+token+"&dflag=2";
                l_canvas_dom_array[i].src = url;
		    }
		    
		}
	}
    function sdc_decode(pcomp,record_num){
        var l_data=[],l_data_index=0;
        var l_pcomp=mcodec.b64_2_binary(pcomp);
        var l_sdc_len=l_pcomp.length;
        var l_record_num=record_num;
        var l_base,l_base_len,l_pcomp_index=0;
        if (sdc_base_decode())
            return ;
        for(l_pcomp_index=l_base_len; l_pcomp_index<l_sdc_len;){
            if (sdc_group_decode()) 
                break;
        }
        return array_to_string();
        function sdc_base_decode()  /*decode the base area data解码基站数据*/
        {
            var bytes,value;
            var pbase=l_pcomp[0];
            if(l_sdc_len < 1){
                return 1;
            }
            bytes = pbase & 0xf;
            l_base_len = bytes + 1;
            l_base = pbase >> 4;
            if(bytes>0){
                if((bytes*8+4)>32){
                    l_base=big_number_operation(l_base,bytes,0);
                }else{
                    for(i=1;i<l_base_len;i++){
                        l_base |= ((l_pcomp[i]) << ((i-1) * 8 + 4));
                    }
                }
            }
            l_data[0]=l_base;
            return 0;
        }
        function sdc_group_decode()   /*decode the group area data解码组区域数据*/
        {
            var pdelta,is_compress,plen,i,pdata,value,plen_bytes;
            if(l_sdc_len < 1){
                return 1;
            }
            is_compress=(l_pcomp[l_pcomp_index]>=128); /*judge the group's first number is 1 or 0;*/
            for(i=0; i<4; i++)    /*get the item_num*/
            {
                if(i == 0){
                    plen = l_pcomp[l_pcomp_index] & 0x7f;
                }else{
                    plen =(plen << 8) | (l_pcomp[l_pcomp_index + i]);
                }
            }
            l_pcomp_index = l_pcomp_index +4;
            if(plen > l_record_num){
                return 1;
            }
            if(is_compress){
                var compress_data_delta = "";
                compress_data_delta = l_pcomp[l_pcomp_index]>> 4;
                var delta_num = l_pcomp[l_pcomp_index] & 0xf;
                var max_count = delta_num*8 +4;
                if(max_count>32){
                    var pdelta_array=big_number_operation(pdelta,delta_num,1);
                }else{
                    for (i = 0; i < delta_num; i++){
                        compress_data_delta |= ((l_pcomp[l_pcomp_index + 1 + i]) << (i * 8 + 4));
                    }
                }
                for(i=0;i<plen;i++){
                    l_data_index ++;
                    if(l_data_index >= l_record_num) return 1;
                    l_data[l_data_index]=(typeof(l_data[l_data_index -1])=="number" && !pdelta_array)?
                        (l_data[l_data_index-1]+compress_data_delta):(big_number_add(l_data[l_data_index-1],pdelta_array?pdelta_array:compress_data_delta));
                }
                l_pcomp_index = l_pcomp_index + 1 +delta_num;
            }
            if(!is_compress && (plen != 0)){
                for(i=0;i<plen;i++){
                    pdelta=l_pcomp[l_pcomp_index]>> 4;
                    var delta_num = l_pcomp[l_pcomp_index] & 0xf;

                    var max_count = delta_num*8 +4;
                    if(max_count>32){
                        var pdelta_array=big_number_operation(pdelta,delta_num,0);
                    }else{
                        for (var j = 0; j < delta_num; j++){
                            pdelta |= ((l_pcomp[l_pcomp_index + 1 + j]) << (j * 8 + 4));
                        }
                    }
                    l_data_index++;
                    if(l_data_index>=l_record_num) return 1;
                    l_data[l_data_index-1];
                    l_data[l_data_index]=(typeof(l_data[l_data_index-1])=="number" && !pdelta_array)?
                        (l_data[l_data_index-1]+pdelta):(big_number_add(l_data[l_data_index-1],pdelta_array?pdelta_array:pdelta));
                    l_pcomp_index = l_pcomp_index + 1 + delta_num;
                    pdelta = "";
                    pdelta_array = "";
                }
            }
            return 0;
        }
        function array_to_string()
        {
            for(var i=0;i<l_data.length;i++){
                if(l_data[i] instanceof Array){
                    l_data[i]="0x"+(l_data[i][0].toString(16))+(int_to_string_4(l_data[i][1]))+(int_to_string_4(l_data[i][2]))+(int_to_string_4(l_data[i][3]));
                }
            }
            return l_data;
        }
        function int_to_string_4(data_int)
        {
            var ret_data=data_int.toString(16);
            return ret_data=(ret_data.length==4)?ret_data:(ret_data.length==3)?("0"+ret_data):(ret_data.length==2)?("00"+ret_data):("000"+ret_data);
        }
        function trans_to_4(data_int)
        {
            var return_data;
            return return_data=(data_int.length==4)?data_int:(data_int.length==3)?("0"+data_int):(data_int.length==2)?("00"+data_int):("000"+data_int);
        }
        function big_number_add(num_a,num_b)
        {
            var num=[],sum;
            num_a=to_big_number(num_a);
            num_b=to_big_number(num_b);
            var num_add=[],carry_num=0;
            for(var j=3;j>-1;j--){
                var c="0x"+num_a[j].toString(16);
                var d="0x"+num_b[j].toString(16);
                num_add[j]=(parseInt(c)+parseInt(d)+(carry_num?1:0)).toString(16);
                carry_num = ("0x"+num_add[j])&0x10000;
                if(carry_num) num_add[j]=(("0x"+num_add[j])&0xffff).toString(16);
            }
            sum=("0x"+num_add[0]+(trans_to_4(num_add[1]))+(trans_to_4(num_add[2]))+(trans_to_4(num_add[3])));
            for(var i=3;i>-1;i--){
                if(sum){
                    num[i]=parseInt(sum.substring((((sum.length-4)>0)?(sum.length-4):0),sum.length),16);
                    sum=sum.substring(0,(((sum.length-4)>0)?(sum.length-4):0));
                }
                else num[i]=0;
            }
            return num;
        }
        function to_big_number(num)
        {
            var ret=[];
            if(typeof(num)=="number"){
                var tem_num=num.toString(2);
                if(tem_num.length<16){
                    return ret=[0,0,0,num];
                }else if(tem_num.length<32){
                    return ret=[0,0,num>>16,num&0xffff];
                }
            }
            else return num;
        }
        function big_number_operation(pdelta,delta_num,ptype)
        {
            var type_num=ptype?5:1;
            var tdelta=[0,0,0,pdelta];
            for (i = 0; i < delta_num; i++){
                var tcomp=l_pcomp[l_pcomp_index+type_num+i];
                var move_num=(i*8+4)+8;
                if(move_num<16){
                    tdelta[3] |= (tcomp << (move_num-8));
                }else if(move_num>16&&move_num<32){
                    if(move_num<24){
                        var digit=16-(32-move_num);
                        var tcomp_2=tcomp.toString(2);
                        tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                        for(var j=0;j<32-move_num;j++){
                            tcomp_2+="0";
                        }
                        tdelta[3] |=parseInt(tcomp_2,2);
                        tdelta[2]|=tcomp>>(32-move_num-8);
                    }else{
                        tdelta[2] |= (tcomp << (move_num-16-8));
                    }
                }else if (move_num>32&&move_num<48){
                    if(move_num<40){
                        var digit=16-(48-move_num);
                        var tcomp_2=tcomp.toString(2);
                        tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                        for(var j=0;j<48-move_num;j++){
                            tcomp_2+="0";
                        }
                        tdelta[2] |=parseInt(tcomp_2,2);
                        tdelta[1]|=tcomp>>(48-move_num-8);
                    }else{
                        tdelta[1] |= (tcomp << (move_num-32-8));
                    }
                }else if(move_num>48&&move_num<72){
                    if(move_num<56){
                        var digit=16-(64-move_num);
                        if(tcomp)
                            var tcomp_2=tcomp.toString(2);
                        tcomp_2=tcomp_2.substring(tcomp_2.length-digit,tcomp_2.length);
                        for(var j=0;j<64-move_num;j++){
                            tcomp_2+="0";
                        }
                        tdelta[1] |=parseInt(tcomp_2,2);
                        tdelta[0]|=tcomp>>(64-move_num-8);
                    }else{
                        tdelta[0] |= (tcomp << (move_num-48-8));
                    }
                }
            }
            return tdelta;
        }
    }
    function formatSeconds(value)
    {
        var theTime = parseInt(value);
        var theTime1 = 0;
        if(theTime > 60){
            theTime1 = parseInt(theTime/60);
            theTime = parseInt(theTime%60);
        }
        theTime = theTime>9?theTime:"0"+theTime;
        theTime1 = theTime1>9?theTime1:"0"+theTime1;
        var result = ":" + theTime;
        result = theTime1 +result;

        return result;
    }
	function cutVideo(obj){ //obj.msg就是第二次请求返回的加密数据
	    var l_local_segs= [],
	        l_segs = [],
	        local_segs_index = 0,
	        cid,sid,stm,etm,f;
	    cid=sdc_decode(obj.msg.segs_sdc.cid,obj.msg.segs_sdc.record_num); //将加密数据解析成数组，个数record_num
	    sid=sdc_decode(obj.msg.segs_sdc.sid,obj.msg.segs_sdc.record_num);
	    stm=sdc_decode(obj.msg.segs_sdc.stm,obj.msg.segs_sdc.record_num);
	    etm=sdc_decode(obj.msg.segs_sdc.etm,obj.msg.segs_sdc.record_num);
	    f=sdc_decode(obj.msg.segs_sdc.f,obj.msg.segs_sdc.record_num);
	    if(!cid || !sid || !stm || !etm || !f){
	        return;
	    }else{
	        for(var i=0;i<(cid?cid.length:0);i++){	                       
	            var flag=parseInt(f[i]);
	            var s_sid=parseInt(sid[i]);
	            l_segs[i]={cid:cid[i],sid:s_sid,stm:stm[i],etm:etm[i],f:flag}; 
	        }
        //将cid sid stm etm f这些数组的每项依次匹配形成一个数组
	    }
	    for(var i=0;i<l_segs.length;i++){
	        var video_segment_start_time = parseInt((l_segs[i].stm),16);
	        var video_segment_end_time = parseInt((l_segs[i].etm),16); 
             if(obj.search_type==0){ //如果按照时间检索在筛选视频
             //    console.log('进来了')
                // if(video_segment_start_time < obj.base_start_time) continue;//解决显示其他天日期视频问题
                 if(video_segment_start_time < obj.base_start_time||video_segment_end_time>obj.base_end_time) 
				 continue;//解决显示其他天日期视频问题
             }       
	        l_local_segs[local_segs_index]=
	        {
                cid:l_segs[i].cid,
                sid:l_segs[i].sid,
	            pos_start:video_segment_start_time,
	            pos_end:video_segment_end_time,
	            token:obj.dev_sn+"_"+l_segs[i].cid+"_"+l_segs[i].sid,
	            pic_token:obj.dev_sn+"_p3_"+l_segs[i].cid+"_"+l_segs[i].sid,
	            f:l_segs[i].f
	        };
	        local_segs_index++;
	    }
	    return l_local_segs;
	}
    /*To get the video*/
    function draw_data_rect(obj){
        var cut_video_data = [],
            cut_video_data_index = 0,
            cut_photo_data = [],
            cut_photo_data_index = 0,
            local_cut_video_data_index = 0,
            local_cut_video_data = [],
            local_video_time_duration = [],
            local_video_time_duration_index = 0,
            mark_video_segment_start_time=0,//标记视频段开始时间
            video_clip_start_time=0,//视频剪辑开始时间
            mark_alarm="",
            select_incise_time;
        var motion_flag_old = 1,
            motion_flag_new = 8,
            snapshot_flag = 2,
            io_flag = 4,
            door_flag = 16,
            sos_flag = 32;
        
        function set_flag(c,flag){
            flag = flag?flag:{};       
            flag.sos_flag = parseInt(c/sos_flag)?1:flag.sos_flag;
            flag.door_flag = parseInt((c%sos_flag)/door_flag)?1:flag.door_flag;
            flag.motion_flag = parseInt(((c%sos_flag)%door_flag)/motion_flag_new)?1:flag.motion_flag;
            flag.io_flag = parseInt((((c%sos_flag)%door_flag)%motion_flag_new)/io_flag)?1:flag.io_flag;
            flag.snapshot_flag = parseInt(((((c%sos_flag)%door_flag)%motion_flag_new)%io_flag)/snapshot_flag)?1:flag.snapshot_flag;
            flag.motion_flag = parseInt(((((c%sos_flag)%door_flag)%motion_flag_new)%io_flag)%snapshot_flag)?1:flag.motion_flag;
            return flag;
        }
        var flag = {
                sos_flag:0,
                door_flag:0,
                motion_flag:0,
                io_flag:0,
                snapshot_flag:0
            }
        if(obj.time_length == "5min"){
            select_incise_time = 5*60*1000;
        }else if(obj.time_length == "60min"){
            select_incise_time = 60*60*1000;
        }else{
            select_incise_time = 30*60*1000;
        }
        /*mark_ico mean the source of alarm, mark_ico[0] mean motion 1and8, mark_ico[1] mean snapshot 2, mark_ico[2] mean io 4, mark_ico[3] mean door 16, mark_ico[4] meansos 32*/
        function mark_alarm_info(a){
            var mark_ico=[0,0,0,0,0];
            var x=l_local_segs[a].f;
            for(var i=4;i>=0;i--)
            {
                if (x >= Math.pow(2, i+1)) {
                    mark_ico[i] = 1;
                    x = x % Math.pow(2, i);
                }
            }
            return mark_ico;
        }
        var l_local_segs = obj.videosegs, local_segs_index=obj.videosegs?obj.videosegs.length:0;
             mark_video_segment_start_time = l_local_segs[0].pos_start,
             video_clip_start_time = l_local_segs[0].pos_end;
       
        for(var j=0;j<local_segs_index;j++){
            if(obj.format==1||obj.format==0){
                if(l_local_segs[j].f>0){
                    cut_photo_data[0] = l_local_segs[j];
                    local_cut_video_data[local_cut_video_data_index]=
                    {
                        cut_video_data:cut_photo_data,
                        is_photo:1,
                        flag:set_flag(l_local_segs[j].f)
                    }
                    cut_photo_data = [];
                    local_cut_video_data_index++; 
                }
            }
            if(obj.format==2||obj.format==0){
                if(j==local_segs_index-1){
                    if(j!=0){
                        if(l_local_segs[j].f!=2 && l_local_segs[j].pos_start!=l_local_segs[j].pos_end && l_local_segs[j].pos_end-mark_video_segment_start_time< select_incise_time){
                            cut_video_data[cut_video_data_index]=l_local_segs[j];
                            cut_video_data_index++;
                        }
                    }
                }else if(j==0){
                    cut_video_data[cut_video_data_index] = l_local_segs[0];
                    cut_video_data_index++;
                }else{
					//当前一段的开始时间-前一段的结束时间
                    var end_to_start_time = Math.abs(l_local_segs[j].pos_start - l_local_segs[j-1].pos_end);
                    if(l_local_segs[j].f!=2){
                        if(l_local_segs[j].pos_start==l_local_segs[j].pos_end){
                            
                        }else if((end_to_start_time <= 7*1000)&&(l_local_segs[j].pos_end - mark_video_segment_start_time < select_incise_time)){
							//当前开始时间-之前结束时间<7s和当前结束时间-最开始开始时间<选择时间
                            cut_video_data[cut_video_data_index] = l_local_segs[j];
                            cut_video_data_index++;
                        }else{
                            if(cut_video_data.length){
                                var mark_flag = {};
                                for(var k=0;k<cut_video_data.length;k++){
                                    mark_flag = set_flag(cut_video_data[k].f,mark_flag);
                                }
                                local_cut_video_data[local_cut_video_data_index]=
                                {
                                    cut_video_data:cut_video_data,
                                    flag:mark_flag
                                }
                                local_cut_video_data_index++; 
                            }
                            cut_video_data=[];
                            cut_video_data_index = 0;
                            cut_video_data[cut_video_data_index] = l_local_segs[j];
                            cut_video_data_index++;
                            mark_video_segment_start_time = l_local_segs[j].pos_start;
                        }
                    }
                }
            }
        }
        if(cut_video_data.length)
        {
            var mark_flag = {};
            for(var k=0;k<cut_video_data.length;k++){
                mark_flag = set_flag(cut_video_data[k].f,mark_flag);
            }
            local_cut_video_data[local_cut_video_data_index]= 
            {
                cut_video_data:cut_video_data,
                flag:mark_flag
            }
            cut_video_data=[];
            cut_video_data_index = 0;
        }
        if(obj.category==1){
            var local_cut_video_data_tmp = local_cut_video_data;
            local_cut_video_data = [];
            for(var l=0;l<local_cut_video_data_tmp.length;l++){
                if(local_cut_video_data_tmp[l].flag.door_flag||local_cut_video_data_tmp[l].flag.io_flag||local_cut_video_data_tmp[l].flag.motion_flag||local_cut_video_data_tmp[l].flag.snapshot_flag||local_cut_video_data_tmp[l].flag.sos_flag){
                    local_cut_video_data.push(local_cut_video_data_tmp[l])
                }
            }      
        }
        for(var m=0;m<local_cut_video_data.length;m++)
        {
            var len = local_cut_video_data[m].cut_video_data.length;
            var video_time_duration_start = parseInt(local_cut_video_data[m].cut_video_data[0].pos_start);
            var video_time_duration_end = parseInt(local_cut_video_data[m].cut_video_data[len-1].pos_end);
            var video_time_duration = (video_time_duration_end - video_time_duration_start)/1000;
            var video_time_start = local_cut_video_data[m].cut_video_data[0].pos_start;
            var video_time_end = local_cut_video_data[m].cut_video_data[len-1].pos_end;
            local_video_time_duration[local_video_time_duration_index]=
            {
                time_duration:formatSeconds(video_time_duration),
                time_start:video_time_start,
                time_end:video_time_end
            };
            local_video_time_duration_index++;
        }
        var cutVideoData = {
			local_cut_video_data:local_cut_video_data,
			local_video_time_duration:local_video_time_duration,
		};
        return cutVideoData;
    }

    function ccm_segs_get_ack(msg,ref){//msg 第二次ccm_box_get返回的加密数据
        if( msg && !msg.result && (msg.segs_sdc||msg.segs)){
            var videosegs = cutVideo({
                msg:msg,
                base_start_time:ref.start_time,
                base_end_time:ref.end_time,
                dev_sn:ref.dev_sn,
                search_type:ref.search_type,
            });//解密成一个个seg 
            var videoData = draw_data_rect({
                videosegs:videosegs,
                time_length:ref.time_length,
                format:ref.format,
                category:ref.category,
            });//seg拼接，处理好的视频可以体现出数量 每个视频时间
            var recording_list = [];
            var data = videoData;
            for(var i = 0; i < data.local_video_time_duration.length; i++){
                recording_list[i] = {};
                recording_list[i].start_time = format(data.local_video_time_duration[i].time_start);
                recording_list[i].duration = dealSecond(data.local_video_time_duration[i].time_duration);
                recording_list[i].token = "";
            }
            for(var i = 0; i < data.local_cut_video_data.length; i++){
                var len = data.local_cut_video_data[i].cut_video_data.length;
                recording_list[i].token = ref.dev_sn+"-"+data.local_cut_video_data[i].cut_video_data[0].cid+"-"+data.local_cut_video_data[i].cut_video_data[0].sid+"-"+data.local_cut_video_data[i].cut_video_data[len-1].cid+"-"+data.local_cut_video_data[i].cut_video_data[len-1].sid+"-"+data.local_cut_video_data[i].cut_video_data[0].pic_token;
            }
            
            
            var result = new Object();
            result.data = {"result":"","recording_list":recording_list.reverse()};
            result.ref = ref;
            onEvent(JSON.stringify(result).toLowerCase())
            return;
        }
        
        function format(time){
            var time = new Date(time);
            var y = time.getFullYear(); //getFullYear方法以四位数字返回年份
            var M = time.getMonth() + 1; // getMonth方法从 Date 对象返回月份 (0 ~ 11)，返回结果需要手动加一
            var d = time.getDate(); // getDate方法从 Date 对象返回一个月中的某一天 (1 ~ 31)
            var h = addZero(time.getHours()); // getHours方法返回 Date 对象的小时 (0 ~ 23)
            var m = addZero(time.getMinutes()); // getMinutes方法返回 Date 对象的分钟 (0 ~ 59)
            var s = addZero(time.getSeconds()); // getSeconds方法返回 Date 对象的秒数 (0 ~ 59)
            return ( y + '-' + M + '-' + d + ' ' + h + ':' + m + ':' + s);
        }
        
        function dealSecond(time){
            var time = time.split(":");
            return time[0]*60+time[1]*1;
        }
        function addZero(time){
            if(time<10){
                return '0'+time;
            }else{
                return time;
            }
        }
	}
	function boxlist_device_messages_get_ack(msg,ref){
        if( msg && !msg.result&&msg.date_infos){
            var l_local_date_infos=[];
            var date_infos_time=[];
            var vedio_day=[]; //标记哪些天有视频 去了重
            var l_date_infos=msg.date_infos; //第一次知道哪些天有视频返回的日期
            var start_time,end_time,search_type,cid,sid;
            for(var i=0;i<l_date_infos.length;i++){
                var date_mis = new Date(l_date_infos[i].date * 1000).format("yyyy.MM.dd.00.00.00");
                if(i>0){
                    l_local_date_infos[l_local_date_infos.length]= date_mis;
                    date_infos_time[date_infos_time.length]= (getDateForStringDate(l_local_date_infos[l_local_date_infos.length-1])).getTime();
                }else if (i==0){
                    l_local_date_infos[i]= date_mis;
                    date_infos_time[i]= (getDateForStringDate(l_local_date_infos[i])).getTime();
                }
            }
            var nowtime=new Date().getTime(); //当前的时间 如果记录哪天有视频的返回时间超过该值，过滤掉
            for(var i=0;i<date_infos_time.length;i++){ //6.4.3 onvif录像
                if(date_infos_time[i]>nowtime){
                    continue;
                }else if(vedio_day.indexOf(date_infos_time[i])==-1){
                    vedio_day.push(date_infos_time[i]) 
                }             
            }
            vedio_day.sort(function(a,b){return a-b}); //从小到大排序
            if(ref.data.start_time==0){ 
                start_time = new Date(l_date_infos[l_date_infos.length-1].date*1000).format("yyyy.MM.dd.00.00.00");
                start_time = getDateForStringDate(start_time).getTime();
                if(start_time==-28800000){ 
                    start_time=0
                }
                end_time = start_time+60*60*24*1000; //第二次请求开始时间：最后一天凌晨 结束时间：次日凌晨 
                search_type=ref.data.search_type;
            }else{ //如果点击日期播放返回到该日期的录像
                start_time = ref.data.start_time;            
                end_time = ref.data.end_time;  
                search_type = ref.data.search_type;
            }  
            _this.history_list_get({
                box_sn:ref.data.box_sn,
                dev_sn:ref.data.dev_sn,
                start_time:start_time,
                end_time:end_time,
                date_infos_time:date_infos_time,
                format:2,
                category:0,
                time_length:"30min",
                search_type:search_type,
                cid:cid,sid:sid,
                vedio_day:vedio_day
            });
        }
	}
    _this.history_list_get = function (data){
        data.flag = 8;
        data.box_sn = data.data.sn;
        data.dev_sn = data.data.sn;
        var start_time = new Date(data.data.date).getTime()-1000*60*60*8;
        var end_time = start_time+60*60*24*1000;
        data.start_time = start_time;
        data.end_time = end_time;
        data.format = 2;
        data.category = 0;
        data.time_length = data.data.section;
        data.videoSize = data.data.duration;
        ms.send_msg("box_get",data,data,ccm_segs_get_ack);
    }
	_this.boxlist_device_messages_get = function (data){
        ms.send_msg("box_get",data.data,data,boxlist_device_messages_get_ack); 	
	}
    _this.history_img_url_get = function (data){
        data.func(window.location.protocol + "//" + window.location.host + "/ccm/ccm_pic_get.jpg?dsess=1&dsess_nid=" + msdk_agent.create_nid() + "&dsess_sn=" + data.sn + "&dtoken=" + data.token + "&dflag=" + data.flag)
    }
	_this.history_img_get = function (data){
        var data = data.data;
        var img = [];
        for(var i=0;i<data.token.length;i++){ 
            ms.send_msg("pic_url_get",{sn:data.sn,token:data.token[i],flag:data.flag,is_history:1},"",function(msg,ref){
                img[i] = msg;
            });
        } 
        var result = new Object();
        result.data = {"result":"","img_src":img};
        result.ref = data;
        onEvent(JSON.stringify(result))
        return;
	}
    
}
var boxlist_func_ctrl = new boxlist_func();
g_func.push(
    {type:"boxlist_device_messages_get",login:"0",action:boxlist_func_ctrl.boxlist_device_messages_get},//第一次
    {type:"sd_recording_list",login:"0",action:boxlist_func_ctrl.history_list_get},//第二次
    {type:"history_img_get",login:"1",action:boxlist_func_ctrl.history_img_get},//图片获取
    {type:"history_img_url_get",action:boxlist_func_ctrl.history_img_url_get},
    {type:"boxlist_get",action:boxlist_func_ctrl.boxlist_get},
    {type:"boxlist_img_get",action:boxlist_func_ctrl.boxlist_img_get},
    {type:"boxlist_img_url",action:boxlist_func_ctrl.boxlist_img_url}
)
;
///<jscompress sourcefile="devInfo.func.js" />
function devInfo_func(obj){
    var _this = this;
    _this.get_dev_info = function(param){
        ms.send_msg("devs_refresh",{},param.ref,function(msg,ref){
            var result = new Object();
            if(msg && msg.data.devs != ""){
                for (i=0;i<msg.data.devs.length;i++){
                    if(msg.data.devs[i].sn === param.data.sn){
                        result.data = {"result":"","sn":msg.data.devs[i].sn,"dev_stat":msg.data.devs[i].stat};
                        result.ref = ref;
                        onEvent(JSON.stringify(result).toLowerCase())
                        return;
                    }
                }
                result.data = {"result":"not find dev in list"};
                result.ref = ref;
                onEvent(JSON.stringify(result))
            }else{
                result.data = {"result":"not find dev in list"};
                result.ref = ref;
                onEvent(JSON.stringify(result))
            }
        });
    }
}
var devInfo_func_ctrl = new devInfo_func();
g_func.push(
    {type:"get_dev_info",login:"1",action:devInfo_func_ctrl.get_dev_info}
);
///<jscompress sourcefile="login.func.js" />
function login_func(obj) {
    var _this = this;
    _this.sign_in = function (param) {
        if (param.data.user == '' || param.data.pass == '') {
            var result = new Object();
            result.data = {"result": "param err"};
            result.ref = ref.ref_param;
            onEvent(JSON.stringify(result));
        }

        ms.send_msg("sign_in", {
            srv: g_server_device,
            user: param.data.user,
            password: mmd5.hex(param.data.pass)
        }, {
            "userName": param.data.user,
            "password": param.data.pass,
            "ref_param": param.ref
        }, function (msg, ref) {
            if (msg && msg.result == "") {
                g_user_name = ref.userName;
                g_user_pass = ref.password;
            }
            var result = new Object();
            result.data = {"result": msg.result};
            result.ref = ref.ref_param;
            onEvent(JSON.stringify(result));
        });
    };
}

var login_func_ctrl = new login_func();

g_func.push(
    {type: "login",login:"0", action: login_func_ctrl.sign_in}
);
///<jscompress sourcefile="play.func.js" />
function play_func(obj) {
    var _this = this;
    var l_plug_type = "";
    var flash_flag = false; //flash标记
    if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
        platform = 'phone'
    } else {
        platform = 'pc';
    }
    console.log(platform)

    _this.play = function (data) {
        console.log(data)
        if (platform == 'pc') { //flash播放
            var judge_enable_native_plug = true;
            var judge_enable_flash_plug = false;
            var ref_obj = create_play_ipc(data);
            var playback = data.playback ? 1 : 0;
            if(playback){
                var token = data.data.token.split("-");
                data.data.sn = token[0];
                data.data.token = token[0] + "_" + token[1] + "_" + token[2] + "_end.cid:" + token[3] + "_end.sid:" + token[4];
                data.data.videoSize = data.data.duration*1000;
            }
            var screen = document.getElementById('screen');
            screen.style.display = "block";
            var mme_params = {
                parent: screen,
                enable_native_plug: judge_enable_native_plug,
                enable_flash_plug: judge_enable_flash_plug,
                params: "{key:'data:application/octet-stream;base64,OenOl2/PvPX7EuqqZdvMsNf5PqEOlOJZ4sROOBtnvW8F6Fc+azokLNtti6Cb/oiuO9qhOxvDfL8cVpGY4UcCe81OIVHkbiNzuHKwiE+K6gmmWwIoHgSRn2RN4qsZO62QkqGePdR6L94n2ruSeixjqAgWFTW8AIlQptovRZSN1Dh/8M87RIRdYyVFqKqsZoZTYibPLyDFONKIqxzrFkJPtqR/wn8jnYMc1qUH/w3IYJZh/OqctPTDp8tYuQSWN3EE6+kVmDIMV9F92SZJORMnvxy+zYzpbO7Gz44fBQNQSGMelsf7yQpfTF/X8t1Qn73fu53xp3MTIGH0kklFH2tMPkO/Raelhw5A4JQbczWg0n4pcNxpRl6mCEIjFprTboJ/B2eI0qUX/zTPM7l1hBmxjxsewORsXp0y2+NnCRH0uVBGUq6fOWrdhJwotIIu5ZAZwdoDZZu6eaycol2TIS5smusoD0ODPtQ2xZoCy7djIC4MVhB5uKe0zDXbLr+Serdlq6en5HyvUN0EEmYle0fORmgNFn0DTqqTab6cx8WfFkysciJSveN4swoR66qMQUi9+TfkHTnZ/REp3kHJtSq8XJyzTe+KCXlJXGx07nAbK4svIPanx39A5o5XlpLK/ohxiMpEJZ6OhmWb9yAnL+8Bedw+epvbNQkhADh2QqB4ItsIq5KTOsNzA0aNn3FEXzyd7WLVBqcF1lUVxu1vpYRPKv01im1ORbVhDoJ9eiqkfchutpAGYOwhYzxFWOIhTMouY+m/oQhc1d8FF4T+zSx6WVmj2f+RDUdOKbQVxJdEeiGKyIDm14K34Kz+RdzF0fY50sbs/SUfMWwuKQsEPFU5KQ'}",
                on_event: function (e) {
                    e.sn = data.sn;
                    on_plug_event(e)
                },
                ref_obj: ref_obj,
                debug: 0
            };
            var me1 = new mme(mme_params);

            function on_plug_event(obj) {
                console.log(obj.type)
                switch (obj.type) {
                    case "missing": {
                        if (!playback) {
                            if ((navigator.userAgent.toLowerCase().match(/chrome\/[\d.]+/gi) + "").replace(/[^0-9.]/ig, "") > "44") {
                                location.href = "https://www.adobe.com/go/getflashplayer";
                            }
                        }

                        flash_flag = !flash_flag;
                        if (flash_flag == false) { //flash失败hls
                            var resolution = "p3"
                            if (data.data.stream === "major") {
                                resolution = "p1"
                            }
                            if (data.data.key_mme == '' || data.data.sn == '') {
                                var result = new Object();
                                result.data = {
                                    "result": "param err"
                                };
                                result.ref = data.ref;
                                onEvent(JSON.stringify(result))
                            }
                            var var_protocol = "rtdp"
                            if (g_browser == "web") {
                                var_protocol = "http";
                            }
                            
                            if (!playback) {
                                ms.send_msg("play", {
                                    sn: data.data.sn,
                                    token: resolution,
                                    protocol: var_protocol,
                                    ref: ""
                                }, data.ref, function (msg, ref) {
                                    var result = new Object();
                                    result.data = {
                                        "sn": data.data.sn,
                                        "url": msg.url,
                                        "type": "hls",
                                        "key_mme": data.data.key_mme,
                                        "param": data
                                    };
                                    result.ref = ref;
                                    callNative("livePlay", JSON.stringify(result), "callback_live_play");
                                });
                            } else {
                                ms.send_msg("playback", {
                                    sn: data.data.sn,
                                    token: data.data.token,
                                    protocol: var_protocol,
                                    ref: ""
                                }, data.ref, function (msg, ref) {
                                    var result = new Object();
                                    result.data = {
                                        "sn": data.data.sn,
                                        "url": msg.url,
                                        "type": "hls",
                                        "key_mme": data.data.key_mme,
                                        "param": data
                                    };
                                    result.ref = ref;
                                    callNative("livePlay", JSON.stringify(result), "callback_live_play");
                                });
                            }
                        }
                        break;
                    }
                    case "ready": {
                        var proto = obj.ref_obj.protocol;
                        if (obj.plug.type.name == "flash") {
                            l_plug_type = "flash";
                            proto = "rtmp";
                        } else {
                            if (proto == "auto")
                                proto = "rtdp";
                        }
                        if (playback) {
                            ref_obj = ref_obj.data;
                            ms.send_msg("playback", {
                                sn: ref_obj.sn,
                                token: ref_obj.token,
                                protocol: proto,
                                ref: obj.ref_obj
                            }, obj.ref_obj, function (msg, ref) {
                                msg.type = "playback";
                                play_ack(msg, ref);
                            });
                        } else {
                            ms.send_msg("play", {
                                sn: ref_obj.data.sn,
                                token: obj.ref_obj.inner_window_info.profile_token,
                                protocol: proto,
                                ref: obj.ref_obj
                            }, obj.ref_obj, function (msg, ref) {
                                msg.type = "play";
                                play_ack(msg, ref);
                            });
                        }
                        break;
                    }
                    case "install_ui": {
                        obj.panel.id = "plugin_install_page";
                        break;
                    }

                }
            }

            function play_ack(msg, ref) {
                chl_video_create({
                    type: msg.type,
                    uri: msg.url,
                    me1: me1
                });
                var result = new Object();
                result.data = {
                    "sn": data.data.sn,
                    "url": msg.url,
                    "key_mme": data.data.key_mme,
                    "param": data
                };
                result.ref = ref;
                callNative("livePlay", JSON.stringify(result), "callback_live_play");
            }


            function chl_video_create(obj) {
                var uri = obj.uri,
                    chl_params = (obj.type == "publish") ? "" : ",thread:\"istream\", jitter:{max:3000}" /* for old version's mme plugin */ ,
                    trans_params = (obj.type == "play") ? ",trans:[{flow_ctrl:\"jitter\",thread:\"istream\"}]" :
                    ((obj.type == "playback") ? ",trans:[{flow_ctrl:\"delay\",thread:\"istream\"}]" : "");

                var params_data;
                var l_ipc_speed_time;
                var l_Last_speed = 0;
                var l_speed = 0;
                var l_progress = 0;

                params_data = "{" + ((obj.type == "publish") ? "dst" : "src") + ":[{url:\"" + uri + "\"}]" + trans_params + chl_params + "}";
                me1.video_chls = me1.chl_create({
                    params: params_data
                });
                if(me1.video_chls !== null){
                    if(l_ipc_speed_time){
                        clearInterval(l_ipc_speed_time);
                    }
                    if(l_plug_type !== "flash"){ // 该判断条件中需要添加!此为客户端逻辑(去掉!用于在浏览器中测试使用)
                        l_ipc_speed_time = setInterval(function(){
                            var string_speed = me1.ctrl(me1.video_chls,"query","{}");
                            if(string_speed.length >= 150){
                                var json_speed=eval("(" + string_speed + ")");
                                 if(playback){
                                    var duration2 = sessionStorage.getItem("duration");    	
                                    var kb = json_speed.data.p2ping ? "kB" : "KB";
                                    l_speed = json_speed.data.total_bytes > l_Last_speed ? parseInt((json_speed.data.total_bytes-l_Last_speed)/1000)+kb : l_Last_speed=0;
                                    if(duration2 == json_speed.data.played_duration){
                                        duration_tip = true;
                                        sessionStorage.setItem("duration_tip",duration_tip)
                                    }
                                    l_Last_speed = json_speed.data.total_bytes;
                                    l_progress = parseInt((json_speed.data.played_duration/data.videoSize)*100);
                                    sessionStorage.setItem("duration",json_speed.data.played_duration);
                                    
                                }else{
                                    var kb = json_speed.data.p2ping?"kB":"KB";
                                    l_speed = json_speed.data.total_bytes>l_Last_speed?parseInt((json_speed.data.total_bytes-l_Last_speed)/1000)+kb:l_Last_speed=0;
                                    l_Last_speed = json_speed.data.total_bytes;
                                }
                            }
                        },1000)
                    }
                }
                if(obj.type == "playback"){
                    setTimeout(function(){play_ipc(obj)},1000)
                }
            }

            function play_ipc(obj){
                me1.ctrl(me1.video_chls, "play", "");
                me1.playback_state = "play";
                return 0;
            }

            function create_play_ipc(obj) {
                obj.protocol = "auto";
                obj.videoSize = obj.videoSize?obj.videoSize:0;
        	    obj.localPath = obj.download_path?obj.download_path:null;
                obj.inner_window_info = {
                    dom_id: ("play_screen"),
                    index: 1,
                    video_chls: null,
                    audio_chls: null,
                    mme: null,
                    ipc_state: "",
                    node_sn: obj.sn,
                    profile_token: 'p0'
                };
                return obj;
            }

        } else {
            var resolution = "p3"
            if (data.data.stream === "major") {
                resolution = "p1"
            }
            if (data.data.key_mme == '' || data.data.sn == '') {
                var result = new Object();
                result.data = {
                    "result": "param err"
                };
                result.ref = data.ref;
                onEvent(JSON.stringify(result))
            }
            var var_protocol = "rtdp"
            if (g_browser == "web") {
                var_protocol = "http";
            }
            if (!playback) {
                ms.send_msg("play", {
                    sn: data.data.sn,
                    token: resolution,
                    protocol: var_protocol,
                    ref: ""
                }, data.ref, function (msg, ref) {
                    var result = new Object();
                    result.data = {
                        "sn": data.data.sn,
                        "url": msg.url,
                        "type": "hls",
                        "key_mme": data.data.key_mme,
                        "param": data
                    };
                    result.ref = ref;
                    callNative("livePlay", JSON.stringify(result), "callback_live_play");
                });
            } else {
                ms.send_msg("playback", {
                    sn: data.data.sn,
                    token: resolution,
                    protocol: var_protocol,
                    ref: ""
                }, data.ref, function (msg, ref) {
                    console.log(msg)
                    var result = new Object();
                    result.data = {
                        "sn": data.data.sn,
                        "url": msg.url,
                        "type": "hls",
                        "key_mme": data.data.key_mme,
                        "param": data
                    };
                    result.ref = ref;
                    callNative("livePlay", JSON.stringify(result), "callback_live_play");
                });
            }
        }

    }


    _this.play_destory = function (param) {
        var screen = document.getElementById('screen');
        screen.style.display = "none";
        var result = new Object();
        result.data = {
            "param": param
        };
        result.ref = param.ref;
        callNative("PlayDestory", JSON.stringify(result), "callback_play_destory");
    }
}


var play_func_ctrl = new play_func();

g_func.push(
    {type: "live_play",login: "1",action: play_func_ctrl.play}, 
    {type: "sd_recording_play",login: "1",action: function (data) {data.playback = 1;play_func_ctrl.play(data)}}, 
    {type: "sd_recording_play_destory",login: "0",action: play_func_ctrl.play_destory},
    {type: "live_play_destory",login: "0",action: play_func_ctrl.play_destory}
);
///<jscompress sourcefile="public.func.js" />
Date.prototype.format = function(format){
	var o = {
		"M+" : this.getMonth()+1, //month
		"d+" : this.getDate(),    //day
		"h+" : this.getHours(),   //hour
		"m+" : this.getMinutes(), //minute
		"s+" : this.getSeconds(), //second
		"q+" : Math.floor((this.getMonth()+3)/3),  //quarter
		"S" : this.getMilliseconds() //millisecond
	}
	if(/(y+)/.test(format)) format=format.replace(RegExp.$1,
		(this.getFullYear()+"").substr(4 - RegExp.$1.length));
	for(var k in o)if(new RegExp("("+ k +")").test(format))
		format = format.replace(RegExp.$1,
			RegExp.$1.length==1 ? o[k] : ("00"+ o[k]).substr((""+ o[k]).length));
    return format;
}

function getDateForStringDate(strDate){
	var s = strDate.split(".");
	return new Date(s[0],s[1]-1,s[2],s[3],s[4],s[5]);
};
///<jscompress sourcefile="sdkInfo.func.js" />
function sdkInfo_func(data){
    var _this = this;
    _this.get_sdk_info = function(param){
        var result = new Object();
        result.data = {"result":"","version":g_version};
        result.ref = param.ref;
        onEvent(JSON.stringify(result));
    }
}

var sdkInfo_func_ctrl = new sdkInfo_func();
g_func.push(
    {type:"get_info",login:"0",action:sdkInfo_func_ctrl.get_sdk_info}
);
///<jscompress sourcefile="route.js" />

function class_mining_software(){
    var l_me = this;
    l_me.send_msg=function(type,data,ref,callback)
    {   //Not mmq then create a progress bar rotation
        //console.log(type+":"+JSON.stringify(data))
        var on_ack=function(msg,ref){
            //Not mmq then delete the rotation progress bar
            switch(msg.result)
            {
                case "mcs_connection_is_interrupted":
                    system_pop_confirm_box({alert:true, str:mcs_connection_is_interrupted,callback_func:function(obj){window.location.reload(true);}});
                    return;
                case "DeviceOffline":
                case "InvalidAuth":
                    //l_device_list_box_obj.ctrl({type:"refresh"});
                    break;
                case "permission.denied":
                    if( type != "sd_set" && g_now_page != "login_page" )
                        g_domain_oems_vimtag?msg_tips({msg:mcs_permission_denied, type:"error", timeout:3000}):g_system_prompt_box(mcs_permission_denied);
                    break;
                //case "accounts.user.offline":
                //   g_system_prompt_box(mcs_device_offline);
                //   break;
                case "SdIsNotReady":
                    g_system_prompt_box(mcs_sdcard_not_ready);
                    break;
                case "":
                    break;
            }
            if(callback){
                callback(msg,ref);
            }
        }
        msdk_agent[type](data,ref,on_ack);
    }
}

function msdk_create(param){
    console.log(JSON.stringify(param));
    var obj;
    if(typeof param === "string"){
        obj = eval("(" + param + ")");
    }else{
        obj = param;
    }
    g_appId = obj.setting.appId;
    g_browser = obj.setting.platform;
    g_language = obj.setting.language;
    g_sdk_version = obj.setting.sdk_version;
    g_time_zone = obj.setting.timeZone;

    msdk_agent = new mcloud_agent();
    window.ms = new class_mining_software();
    var result = new Object();
    result.data = {"result":""};
    result.ref = obj.ref;
    onEvent(JSON.stringify(result));
}

function msdk_ctrl(param){
    var obj;
    if(typeof param === "string"){
        obj = eval("(" + param + ")");
    }else{
        obj = param;
    }
    console.log("msdk_ctrl : "+JSON.stringify(obj));
    for(var i=0;i<g_func.length;i++){
       if(g_browser/* && (g_browser === "android" || g_browser === "ios")*/){
            if(obj.data.func == g_func[i].type){
                if(g_func[i].login == "1"){
                    if(g_user_name && g_user_pass){
                        ms.send_msg("sign_in",{srv:g_server_device,user:g_user_name, password:mmd5.hex(g_user_pass)},{},
                            function (msg,ref){
                                if(msg && msg.result === ""){
                                    g_func[i].action(obj);
                                }
                            });
                    }else{
                        var result = new Object();
                        result.data = {"result":"is not login"};
                        result.ref = obj.ref;
                        onEvent(JSON.stringify(result));
                    }
                }else{
                    g_func[i].action(obj);
                }
                break;
            }
        }else{
           var result = new Object();
           result.data = {"result":"Unsupported system"};
           result.ref = obj.ref;
           onEvent(JSON.stringify(result));
        }
    }
}

function msdk_destory(){

};
///<jscompress sourcefile="cryptojs_tripledes.js" />
/*
CryptoJS v3.0.2
code.google.com/p/crypto-js
(c) 2009-2012 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(q,i){var h={},j=h.lib={},p=j.Base=function(){function a(){}return{extend:function(c){a.prototype=this;var b=new a;c&&b.mixIn(c);b.$super=this;return b},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.$super.extend(this)}}}(),l=j.WordArray=p.extend({init:function(a,c){a=
this.words=a||[];this.sigBytes=c!=i?c:4*a.length},toString:function(a){return(a||r).stringify(this)},concat:function(a){var c=this.words,b=a.words,g=this.sigBytes,a=a.sigBytes;this.clamp();if(g%4)for(var e=0;e<a;e++)c[g+e>>>2]|=(b[e>>>2]>>>24-8*(e%4)&255)<<24-8*((g+e)%4);else if(65535<b.length)for(e=0;e<a;e+=4)c[g+e>>>2]=b[e>>>2];else c.push.apply(c,b);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<32-8*(c%4);a.length=q.ceil(c/4)},clone:function(){var a=
p.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*q.random()|0);return l.create(c,a)}}),k=h.enc={},r=k.Hex={stringify:function(a){for(var c=a.words,a=a.sigBytes,b=[],g=0;g<a;g++){var e=c[g>>>2]>>>24-8*(g%4)&255;b.push((e>>>4).toString(16));b.push((e&15).toString(16))}return b.join("")},parse:function(a){for(var c=a.length,b=[],g=0;g<c;g+=2)b[g>>>3]|=parseInt(a.substr(g,2),16)<<24-4*(g%8);return l.create(b,c/2)}},o=k.Latin1={stringify:function(a){for(var c=
a.words,a=a.sigBytes,b=[],g=0;g<a;g++)b.push(String.fromCharCode(c[g>>>2]>>>24-8*(g%4)&255));return b.join("")},parse:function(a){for(var c=a.length,b=[],g=0;g<c;g++)b[g>>>2]|=(a.charCodeAt(g)&255)<<24-8*(g%4);return l.create(b,c)}},m=k.Utf8={stringify:function(a){try{return decodeURIComponent(escape(o.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return o.parse(unescape(encodeURIComponent(a)))}},d=j.BufferedBlockAlgorithm=p.extend({reset:function(){this._data=l.create();
this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=m.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,b=c.words,g=c.sigBytes,e=this.blockSize,n=g/(4*e),n=a?q.ceil(n):q.max((n|0)-this._minBufferSize,0),a=n*e,g=q.min(4*a,g);if(a){for(var d=0;d<a;d+=e)this._doProcessBlock(b,d);d=b.splice(0,a);c.sigBytes-=g}return l.create(d,g)},clone:function(){var a=p.clone.call(this);a._data=this._data.clone();return a},_minBufferSize:0});j.Hasher=d.extend({init:function(){this.reset()},
reset:function(){d.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);this._doFinalize();return this._hash},clone:function(){var a=d.clone.call(this);a._hash=this._hash.clone();return a},blockSize:16,_createHelper:function(a){return function(c,b){return a.create(b).finalize(c)}},_createHmacHelper:function(a){return function(c,b){return f.HMAC.create(a,b).finalize(c)}}});var f=h.algo={};return h}(Math);
(function(){var q=CryptoJS,i=q.lib.WordArray;q.enc.Base64={stringify:function(h){var j=h.words,i=h.sigBytes,l=this._map;h.clamp();for(var h=[],k=0;k<i;k+=3)for(var r=(j[k>>>2]>>>24-8*(k%4)&255)<<16|(j[k+1>>>2]>>>24-8*((k+1)%4)&255)<<8|j[k+2>>>2]>>>24-8*((k+2)%4)&255,o=0;4>o&&k+0.75*o<i;o++)h.push(l.charAt(r>>>6*(3-o)&63));if(j=l.charAt(64))for(;h.length%4;)h.push(j);return h.join("")},parse:function(h){var h=h.replace(/\s/g,""),j=h.length,p=this._map,l=p.charAt(64);l&&(l=h.indexOf(l),-1!=l&&(j=l));
for(var l=[],k=0,r=0;r<j;r++)if(r%4){var o=p.indexOf(h.charAt(r-1))<<2*(r%4),m=p.indexOf(h.charAt(r))>>>6-2*(r%4);l[k>>>2]|=(o|m)<<24-8*(k%4);k++}return i.create(l,k)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
(function(q){function i(d,f,a,c,b,g,e){d=d+(f&a|~f&c)+b+e;return(d<<g|d>>>32-g)+f}function h(d,f,a,c,b,g,e){d=d+(f&c|a&~c)+b+e;return(d<<g|d>>>32-g)+f}function j(d,f,a,c,b,g,e){d=d+(f^a^c)+b+e;return(d<<g|d>>>32-g)+f}function p(d,f,a,c,b,g,e){d=d+(a^(f|~c))+b+e;return(d<<g|d>>>32-g)+f}var l=CryptoJS,k=l.lib,r=k.WordArray,k=k.Hasher,o=l.algo,m=[];(function(){for(var d=0;64>d;d++)m[d]=4294967296*q.abs(q.sin(d+1))|0})();o=o.MD5=k.extend({_doReset:function(){this._hash=r.create([1732584193,4023233417,
2562383102,271733878])},_doProcessBlock:function(d,f){for(var a=0;16>a;a++){var c=f+a,b=d[c];d[c]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360}for(var c=this._hash.words,b=c[0],g=c[1],e=c[2],n=c[3],a=0;64>a;a+=4)16>a?(b=i(b,g,e,n,d[f+a],7,m[a]),n=i(n,b,g,e,d[f+a+1],12,m[a+1]),e=i(e,n,b,g,d[f+a+2],17,m[a+2]),g=i(g,e,n,b,d[f+a+3],22,m[a+3])):32>a?(b=h(b,g,e,n,d[f+(a+1)%16],5,m[a]),n=h(n,b,g,e,d[f+(a+6)%16],9,m[a+1]),e=h(e,n,b,g,d[f+(a+11)%16],14,m[a+2]),g=h(g,e,n,b,d[f+a%16],20,m[a+3])):48>a?(b=
j(b,g,e,n,d[f+(3*a+5)%16],4,m[a]),n=j(n,b,g,e,d[f+(3*a+8)%16],11,m[a+1]),e=j(e,n,b,g,d[f+(3*a+11)%16],16,m[a+2]),g=j(g,e,n,b,d[f+(3*a+14)%16],23,m[a+3])):(b=p(b,g,e,n,d[f+3*a%16],6,m[a]),n=p(n,b,g,e,d[f+(3*a+7)%16],10,m[a+1]),e=p(e,n,b,g,d[f+(3*a+14)%16],15,m[a+2]),g=p(g,e,n,b,d[f+(3*a+5)%16],21,m[a+3]));c[0]=c[0]+b|0;c[1]=c[1]+g|0;c[2]=c[2]+e|0;c[3]=c[3]+n|0},_doFinalize:function(){var d=this._data,f=d.words,a=8*this._nDataBytes,c=8*d.sigBytes;f[c>>>5]|=128<<24-c%32;f[(c+64>>>9<<4)+14]=(a<<8|a>>>
24)&16711935|(a<<24|a>>>8)&4278255360;d.sigBytes=4*(f.length+1);this._process();d=this._hash.words;for(f=0;4>f;f++)a=d[f],d[f]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360}});l.MD5=k._createHelper(o);l.HmacMD5=k._createHmacHelper(o)})(Math);
(function(){var q=CryptoJS,i=q.lib,h=i.Base,j=i.WordArray,i=q.algo,p=i.EvpKDF=h.extend({cfg:h.extend({keySize:4,hasher:i.MD5,iterations:1}),init:function(h){this.cfg=this.cfg.extend(h)},compute:function(h,k){for(var i=this.cfg,o=i.hasher.create(),m=j.create(),d=m.words,f=i.keySize,i=i.iterations;d.length<f;){a&&o.update(a);var a=o.update(h).finalize(k);o.reset();for(var c=1;c<i;c++)a=o.finalize(a),o.reset();m.concat(a)}m.sigBytes=4*f;return m}});q.EvpKDF=function(h,i,j){return p.create(j).compute(h,
i)}})();
CryptoJS.lib.Cipher||function(q){var i=CryptoJS,h=i.lib,j=h.Base,p=h.WordArray,l=h.BufferedBlockAlgorithm,k=i.enc.Base64,r=i.algo.EvpKDF,o=h.Cipher=l.extend({cfg:j.extend(),createEncryptor:function(a,e){return this.create(this._ENC_XFORM_MODE,a,e)},createDecryptor:function(a,e){return this.create(this._DEC_XFORM_MODE,a,e)},init:function(a,e,b){this.cfg=this.cfg.extend(b);this._xformMode=a;this._key=e;this.reset()},reset:function(){l.reset.call(this);this._doReset()},process:function(a){this._append(a);return this._process()},
finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){return function(a){return{encrypt:function(e,n,d){return("string"==typeof n?b:c).encrypt(a,e,n,d)},decrypt:function(e,n,d){return("string"==typeof n?b:c).decrypt(a,e,n,d)}}}}()});h.StreamCipher=o.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var m=i.mode={},d=h.BlockCipherMode=j.extend({createEncryptor:function(a,e){return this.Encryptor.create(a,
e)},createDecryptor:function(a,e){return this.Decryptor.create(a,e)},init:function(a,e){this._cipher=a;this._iv=e}}),m=m.CBC=function(){function a(g,e,b){var c=this._iv;c?this._iv=q:c=this._prevBlock;for(var d=0;d<b;d++)g[e+d]^=c[d]}var e=d.extend();e.Encryptor=e.extend({processBlock:function(e,b){var c=this._cipher,d=c.blockSize;a.call(this,e,b,d);c.encryptBlock(e,b);this._prevBlock=e.slice(b,b+d)}});e.Decryptor=e.extend({processBlock:function(e,b){var c=this._cipher,d=c.blockSize,f=e.slice(b,b+
d);c.decryptBlock(e,b);a.call(this,e,b,d);this._prevBlock=f}});return e}(),f=(i.pad={}).Pkcs7={pad:function(a,e){for(var b=4*e,b=b-a.sigBytes%b,c=b<<24|b<<16|b<<8|b,d=[],f=0;f<b;f+=4)d.push(c);b=p.create(d,b);a.concat(b)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};h.BlockCipher=o.extend({cfg:o.cfg.extend({mode:m,padding:f}),reset:function(){o.reset.call(this);var a=this.cfg,e=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var b=a.createEncryptor;else b=a.createDecryptor,
this._minBufferSize=1;this._mode=b.call(a,this,e&&e.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var a=h.CipherParams=j.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),m=(i.format={}).OpenSSL={stringify:function(a){var b=
a.ciphertext,a=a.salt,b=(a?p.create([1398893684,1701076831]).concat(a).concat(b):b).toString(k);return b=b.replace(/(.{64})/g,"$1\n")},parse:function(b){var b=k.parse(b),e=b.words;if(1398893684==e[0]&&1701076831==e[1]){var c=p.create(e.slice(2,4));e.splice(0,4);b.sigBytes-=16}return a.create({ciphertext:b,salt:c})}},c=h.SerializableCipher=j.extend({cfg:j.extend({format:m}),encrypt:function(b,e,c,d){var d=this.cfg.extend(d),f=b.createEncryptor(c,d),e=f.finalize(e),f=f.cfg;return a.create({ciphertext:e,
key:c,iv:f.iv,algorithm:b,mode:f.mode,padding:f.padding,blockSize:b.blockSize,formatter:d.format})},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a):a}}),i=(i.kdf={}).OpenSSL={compute:function(b,c,d,f){f||(f=p.random(8));b=r.create({keySize:c+d}).compute(b,f);d=p.create(b.words.slice(c),4*d);b.sigBytes=4*c;return a.create({key:b,iv:d,salt:f})}},b=h.PasswordBasedCipher=
c.extend({cfg:c.cfg.extend({kdf:i}),encrypt:function(a,b,d,f){f=this.cfg.extend(f);d=f.kdf.compute(d,a.keySize,a.ivSize);f.iv=d.iv;a=c.encrypt.call(this,a,b,d.key,f);a.mixIn(d);return a},decrypt:function(a,b,d,f){f=this.cfg.extend(f);b=this._parse(b,f.format);d=f.kdf.compute(d,a.keySize,a.ivSize,b.salt);f.iv=d.iv;return c.decrypt.call(this,a,b,d.key,f)}})}();
(function(){function q(a,c){var b=(this._lBlock>>>a^this._rBlock)&c;this._rBlock^=b;this._lBlock^=b<<a}function i(a,c){var b=(this._rBlock>>>a^this._lBlock)&c;this._lBlock^=b;this._rBlock^=b<<a}var h=CryptoJS,j=h.lib,p=j.WordArray,j=j.BlockCipher,l=h.algo,k=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],r=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,
55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],o=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],m=[{"0":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,
2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,
1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{"0":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,
75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,
276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{"0":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,
14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,
17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{"0":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,
98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,
1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{"0":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,
10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,
83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{"0":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,
2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{"0":1048576,
16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,
496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{"0":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,
2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,
2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],d=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],f=l.DES=j.extend({_doReset:function(){for(var a=this._key.words,c=[],b=0;56>b;b++){var d=k[b]-1;c[b]=a[d>>>5]>>>31-d%32&1}a=this._subKeys=[];for(d=0;16>d;d++){for(var e=a[d]=[],f=o[d],b=0;24>b;b++)e[b/6|0]|=c[(r[b]-1+f)%28]<<31-b%6,e[4+(b/6|0)]|=c[28+(r[b+24]-1+f)%28]<<31-b%6;e[0]=e[0]<<1|e[0]>>>31;for(b=1;7>b;b++)e[b]>>>=
4*(b-1)+3;e[7]=e[7]<<5|e[7]>>>27}c=this._invSubKeys=[];for(b=0;16>b;b++)c[b]=a[15-b]},encryptBlock:function(a,c){this._doCryptBlock(a,c,this._subKeys)},decryptBlock:function(a,c){this._doCryptBlock(a,c,this._invSubKeys)},_doCryptBlock:function(a,c,b){this._lBlock=a[c];this._rBlock=a[c+1];q.call(this,4,252645135);q.call(this,16,65535);i.call(this,2,858993459);i.call(this,8,16711935);q.call(this,1,1431655765);for(var f=0;16>f;f++){for(var e=b[f],h=this._lBlock,j=this._rBlock,k=0,l=0;8>l;l++)k|=m[l][((j^
e[l])&d[l])>>>0];this._lBlock=j;this._rBlock=h^k}b=this._lBlock;this._lBlock=this._rBlock;this._rBlock=b;q.call(this,1,1431655765);i.call(this,8,16711935);i.call(this,2,858993459);q.call(this,16,65535);q.call(this,4,252645135);a[c]=this._lBlock;a[c+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});h.DES=j._createHelper(f);l=l.TripleDES=j.extend({_doReset:function(){var a=this._key.words;this._des1=f.createEncryptor(p.create(a.slice(0,2)));this._des2=f.createEncryptor(p.create(a.slice(2,4)));this._des3=
f.createEncryptor(p.create(a.slice(4,6)))},encryptBlock:function(a,c){this._des1.encryptBlock(a,c);this._des2.decryptBlock(a,c);this._des3.encryptBlock(a,c)},decryptBlock:function(a,c){this._des3.decryptBlock(a,c);this._des2.encryptBlock(a,c);this._des1.decryptBlock(a,c)},keySize:6,ivSize:2,blockSize:2});h.TripleDES=j._createHelper(l)})();
;
///<jscompress sourcefile="cryptojs_pad-nopadding-min.js" />
/*
CryptoJS v3.0.2
code.google.com/p/crypto-js
(c) 2009-2012 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
CryptoJS.pad.NoPadding={pad:function(){},unpad:function(){}};
;
///<jscompress sourcefile="mlib.cloud.account.js" />
/*
    mcloud_account
    
    base on:
    cryptojs_tripledes.js
    cryptojs_pad-nopadding-min.js

    mlib.core.base.js
    mlib.core.codec.js
    mlib.core.evt.js
    mlib.core.rpc.js
    mlib.crypt.dh.js
    mlib.crypt.md5.js
    
    ----history----------
    author: chengzhiyong date: 2014-08-13 action: create
    
*/

function mcloud_account() {
    var l_srv = window.location.host/* set by kugle */, l_usr = "", l_pwd_md5_hex = "",
        l_qid = "",
        l_tid = 0, l_lid = 0, l_sid = 0, l_seq = 0, l_addr = "", l_share_key = "", l_host = "", l_from_handle = 0,
        ret_err_accounts_nid_invalid = "accounts.nid.invalid",
        ret_err_accounts_sid_invalid = "accounts.sid.invalid",
        ret_err_accounts_lid_invalid = "accounts.lid.invalid",
        ret_err_accounts_sess_invalid = "InvalidSession",
        s_cacs_login_req = "cacs_login_req",
        s_cacs_reg_req = "cacs_reg_req",
        ret_err_refer_relogin = [ret_err_accounts_nid_invalid, ret_err_accounts_sid_invalid, ret_err_accounts_lid_invalid, ret_err_accounts_sess_invalid],
        CryptoJS = window.CryptoJS,
        mmd5 = window.mmd5,
        mcodec = window.mcodec,
        mrpc = window.mrpc,
        mmq_pick_time, mmq_pick_time2, mmq_pick_time3, create_mmq;

    function get_share_key(share_key) {
        l_share_key = share_key;
    }

    function get_sid(sid) {
        l_sid = sid;
    }


    function set_srv(srv) {
        if (srv && (srv != l_srv)) {
            l_srv = srv;
            l_share_key = "";
        }
        ;
    }

    function get_srv_param(srv) {
        return l_srv = srv;
    }

    function get_srv() {
        return l_srv;
    }

    function pwd_encrypt(pwd_md5_hex) {
        var xxx = CryptoJS.enc.Hex.parse(pwd_md5_hex);
        return CryptoJS.DES.encrypt(CryptoJS.enc.Hex.parse(pwd_md5_hex), CryptoJS.enc.Hex.parse(mmd5.hex(l_share_key)),
            {iv: CryptoJS.enc.Hex.parse('0000000000000000'), padding: CryptoJS.pad.NoPadding}).ciphertext.toString();
    }

    function create_nid_ex(type/* 0:by sid, 2: by lid */) {/* \todo: if support type==>tid , plz change following line. */
        return mcodec.nid(++l_seq, type ? l_lid : l_sid, l_share_key, type, null, null, mmd5, "hex");
    }

    function create_nid() {
        return create_nid_ex(0);
    }

    function do_call(type, data, ref, on_ack) {
        if (type.to) {
            mrpc.call({
                srv: (window.location.protocol == "file:" ? "http:" : window.location.protocol) + "//" + (type.srv ? type.srv : l_srv) + "/",
                to: type.to,
                type: type.type,
                data: data,
                ref: ref,
                "static": false,
                way: (type.way ? type.way : "json"),
                qid: l_qid,
                on_ack: on_ack
            });
        }
        else {
            if (l_qid) {
                if (type == "cpns_get_req") {
                    mrpc.call({
                        srv: ref.remote_ip, to: "cpns", type: type, data: data,
                        ref: ref, "static": false, way: "json", qid: l_qid, on_ack: on_ack
                    });
                } else {
                    if (window.location.protocol == 'file:') {
                        mrpc.call({
                            srv: "http://" + l_srv + "/", to: "ccm", type: type, data: data,
                            ref: ref, "static": false, way: "json", qid: l_qid, on_ack: on_ack
                        });
                    } else {
                        mrpc.call({
                            srv: window.location.protocol + "//" + l_srv + "/", to: "ccm", type: type, data: data,
                            ref: ref, "static": false, way: "json", qid: l_qid, on_ack: on_ack
                        });
                    }
                }
            }
            else {
                if (type == "cpns_get_req") {
                    mrpc.call({
                        srv: ref.remote_ip, to: "cpns", type: type, data: data,
                        ref: ref, "static": false, way: "json", on_ack: on_ack
                    });
                }
                else {
                    if (window.location.protocol == 'file:') {
                        mrpc.call({
                            srv: "http://" + l_srv + "/", to: "ccm", type: type, data: data,
                            ref: ref, "static": false, way: "json", on_ack: on_ack
                        });
                    } else {
                        mrpc.call({
                            srv: window.location.protocol + "//" + l_srv + "/", to: "ccm", type: type, data: data,
                            ref: ref, "static": false, way: "json", on_ack: on_ack
                        });
                    }
                }
            }
        }
    }

    function get_uctx(data) {
        var json_buf = JSON.stringify(data);
        var key = CryptoJS.MD5(l_share_key);
        //to do 8 byte alignment
        var json_bufs = bytes_align(json_buf);
        var bytes_len = 8 * (parseInt(json_buf.length / 8) + 1), str_len = bytes_len / 4;

        var json_obj = {sigBytes: bytes_len, words: json_bufs, length: str_len};
        var json_uctx = CryptoJS.DES.encrypt(json_obj, key, {
            iv: CryptoJS.enc.Hex.parse('0000000000000000'),
            padding: CryptoJS.pad.NoPadding
        }).ciphertext.toString();
        var b = str_2_16bytes(json_uctx);

        var uctx = "data:application/octet-stream;base64," + mcodec.binary_2_b64(b);
        return uctx;
    }

    function do_sign_x(sign_type, srv, usr, pwd, pwd_md5_hex, ref, on_ack) {
        if (srv && (l_srv != srv)) {
            l_srv = srv;
            l_share_key = "";
            l_sid = 0;
        }
        ;
        if (usr && (usr != l_usr)) {
            l_usr = usr;
            l_sid = 0;
        }
        ;
        if (pwd && (l_pwd_md5_hex != pwd)) {
            l_pwd_md5_hex = pwd;
            l_sid = 0;
        }
        ;
        l_share_key = "";
        /* force dh now, by kugle */
        var lang = appid = name = "";
        if (sign_type == "cacs_reg_req" && ref) {
            lang = ref.lang;
            appid = ref.appid;
            name = ref.name;
        }

        function send_req() {
            if (name) {
                var json_buf = {app: {id: appid}};
                var uctx = get_uctx(json_buf);
                do_call(sign_type, {
                        lid: l_lid,
                        nid: create_nid_ex(2),
                        user: l_usr,
                        pass: pwd_encrypt(l_pwd_md5_hex),
                        session_req: 1,
                        p: [{n: "uctx", v: uctx}],
                        param: [{name: "spv", value: "v1"}]
                    }, ref,
                    function (msg, ref) {
                        var data = msg ? msg.data : null;
                        if ((sign_type == s_cacs_login_req) && data && data.result == "") {
                            l_sid = data.sid;
                            l_seq = data.seq;
                            l_addr = data.addr;
                        }
                        ;
                        on_ack(msg, ref);
                    });
            } else {
                do_call(sign_type, {
                        lid: l_lid,
                        nid: create_nid_ex(2),
                        user: l_usr,
                        pass: pwd_encrypt(l_pwd_md5_hex),
                        session_req: 1,
                        param: [{name: "spv", value: "v1"}]
                    }, ref,
                    function (msg, ref) {
                        var data = msg ? msg.data : null;
                        if ((sign_type == s_cacs_login_req) && data && data.result == "") {
                            l_sid = data.sid;
                            l_seq = data.seq;
                            l_addr = data.addr;
                        }
                        ;
                        on_ack(msg, ref);
                    });
            }
        }

        if (l_share_key) {
            send_req();
        } else {
            var secret_key = mdh.gen_private(), pub_key = mdh.gen_public(secret_key);
            do_call("cacs_dh_req", {bnum_prime: mdh.prime, root_num: mdh.g, key_a2b: pub_key, tid: l_tid}, ref,
                function (msg, ref) {
                    var data = msg ? msg.data : null;
                    if ((!data) || data.result) {
                        on_ack(msg, ref);
                        return;
                    }
                    ;
                    l_tid = data.tid;
                    l_lid = data.lid;
                    l_share_key = mdh.gen_shared_secret(secret_key, data.key_b2a);
                    send_req();
                });
        }
    }

    function check_ret_is_need_relogin(msg) {
        var i, ret, s_ret;
        if (msg && msg.data) {
            ret = msg.data.ret || msg.data.result || msg.data.Result;
            s_ret = ret ? (ret.reason || ret.sub || ret.code || ret.Reason || ret.SubCode || ret.Code) : null;
            for (i = 0; s_ret && (i < ret_err_refer_relogin.length); i++) {
                if (s_ret == ret_err_refer_relogin[i] && msg.type != "ccm_subscribe") {
                    return 1;
                }
                ;
            }
            return 0;
        }
        else if (msg == "timeout") {
            return 0;
        }
        else {
            return 1;
        }
    }

    function send_msg(type, data, ref, on_ack) {
        do_call(type, data, ref,
            function (msg, ref) {
                if (l_share_key && check_ret_is_need_relogin(msg)) {/* login again */
                    if (data && data.sess) {
                        data.sess.nid = create_nid_ex(0);
                    }
                    else if (data && data.Session) {
                        data.Session.Nid = create_nid_ex(0);
                    }
                    do_sign_x(s_cacs_login_req, l_srv, l_usr, null, l_pwd_md5_hex, ref,
                        function (msg2, ref) {
                            var ret = (msg2 && msg2.data) ? msg2.data.result : msg2;
                            if (ret) {/* error */
                                on_ack(msg2, ref);
                            }
                            else {
                                do_call(type, data, ref, on_ack);
                            }
                            ;
                        });
                } else if (msg != "timeout") {
                    on_ack(msg, ref);
                }
            });
    }

    function pwd_set(old_pass, new_pass, is_guest, ref, on_ack) {
        var old_pass = (old_pass && mmd5.hex(old_pass));
        var new_pass = (new_pass && mmd5.hex(new_pass));
        send_msg("cacs_passwd_req", {
                nid: create_nid(),
                old_pass: pwd_encrypt(old_pass),
                new_pass: pwd_encrypt(new_pass),
                guest: is_guest ? 1 : 0
            }, ref,
            function (msg, ref) {
                on_ack(msg, ref);
            });
    }

    function sign_out(ref, on_ack) {
        send_msg("cacs_logout_req", {nid: create_nid()}, ref,
            function (msg, ref) {
                on_ack(msg, ref);
            });
    }

    function binding_email(email, user, pass, lang, version, appid, name, ref, on_ack) {
        var json_buf = {app: {id: appid, name: name, ver: version}};
        var uctx = get_uctx(json_buf);
        send_msg("cacs_bind_req", {
            nid: create_nid(),
            email: email,
            user: user,
            pass: pwd_encrypt(pass),
            lang: lang,
            p: [{n: "uctx", v: uctx}]
        }, ref, function (msg, ref) {
            on_ack(msg, ref);
        });
    }

    function binding_email_get(user, appid, ref, on_ack) {
        if (ref.data == 1) {
            var secret_key = mdh.gen_private(), pub_key = mdh.gen_public(secret_key), json_buf = {app: {id: appid}};
            do_call("cacs_dh_req", {bnum_prime: mdh.prime, root_num: mdh.g, key_a2b: pub_key, tid: l_tid}, ref,
                function (msg, ref) {
                    var data = msg ? msg.data : null;
                    if ((!data) || data.result) {
                        on_ack(msg, ref);
                        return;
                    }
                    ;
                    l_tid = data.tid;
                    l_lid = data.lid;
                    l_share_key = mdh.gen_shared_secret(secret_key, data.key_b2a);

                    var uctx = get_uctx(json_buf);
                    send_msg("cacs_query_req", {
                        lid: l_lid,
                        nid: create_nid_ex(2),
                        user: user,
                        p: [{n: "uctx", v: uctx}]
                    }, ref, function (msg, ref) {
                        on_ack(msg, ref);
                    });
                });
        } else {
            var json_buf = {app: {id: appid}};
            var uctx = get_uctx(json_buf);
            send_msg("cacs_query_req", {
                nid: create_nid(),
                user: user,
                p: [{n: "uctx", v: uctx}]
            }, ref, function (msg, ref) {
                on_ack(msg, ref);
            });
        }
    }

    function recovery_binding_email(email, user, lang, appid, name, ref, on_ack) {
        var secret_key = mdh.gen_private(), pub_key = mdh.gen_public(secret_key),
            json_buf = {app: {id: appid, name: name}};
        ;
        do_call("cacs_dh_req", {bnum_prime: mdh.prime, root_num: mdh.g, key_a2b: pub_key, tid: l_tid}, ref,
            function (msg, ref) {
                var data = msg ? msg.data : null;
                if ((!data) || data.result) {
                    on_ack(msg, ref);
                    return;
                }
                ;
                l_tid = data.tid;
                l_lid = data.lid;
                l_share_key = mdh.gen_shared_secret(secret_key, data.key_b2a);

                var uctx = get_uctx(json_buf);
                send_msg("cacs_recovery_req", {
                    lid: l_lid,
                    nid: create_nid_ex(2),
                    email: email,
                    user: user,
                    lang: lang,
                    p: [{n: "uctx", v: uctx}]
                }, ref, function (msg, ref) {
                    on_ack(msg, ref);
                });
            });
    }

    function dev_msg_listener_add(ref, on_ack) {
        if (!create_mmq) {
            send_msg("mmq_create", {timeout: 30000}, ref,
                function (msg, ref) {
                    if (!msg.data.result) {
                        create_mmq = 1;
                        l_qid = msg.data.qid;
                        ccm_subscribe_req(ref, on_ack);
                    }
                    else {
                        //setTimeout(function() {dev_msg_listener_add (ref, on_ack);}, 3000);
                        return -1;
                    }
                });
        }
        else {
            mmq_pick_req(ref, on_ack);
        }

        function ccm_subscribe_req(ref, on_ack) {
            send_msg("ccm_subscribe", {sess: {nid: create_nid()}}, ref,
                function (msg2, ref) {
                    var result2 = (msg2.data && msg2.data.ret) ? msg2.data.ret.reason : null;
                    if (result2 == "") {
                        mmq_pick_req(ref, on_ack);
                    }
                    else {
                        //setTimeout(function() {ccm_subscribe_req (ref, on_ack);}, 3000);
                        return -1;
                    }
                });
        }

        function mmq_pick_req(ref, on_ack) {
            if (mmq_pick_time) {
                clearInterval(mmq_pick_time);
                mmq_pick_time = null;
            }
            send_msg("mmq_pick", {qid: l_qid, timeout: 300000}, ref,
                function (msg, ref) {
                    if (msg.type == "ccm_msg") {
                        on_ack({result: "", items: msg.data.items}, ref);
                        //mmq_pick_time2=setTimeout(function() {mmq_pick_req(ref, on_ack);}, 20000);
                        mmq_pick_req(ref, on_ack);//when the ccm_msg is finish, send mmq_pick to server at once
                    }
                    else if (msg.type == "mmq_pick_ack") {
                        create_mmq = 0;
                        mmq_pick_time3 = setTimeout(function () {
                            dev_msg_listener_add(ref, on_ack);
                        }, 3000);
                    }
                });
            mmq_pick_time = setInterval(function () {
                mmq_pick_req(ref, on_ack)
            }, 330000);
        }
    }

    function dev_msg_listener_del(ref, on_ack) {
        send_msg("mmq_destroy", {qid: l_qid}, ref,
            function (msg, ref) {
                if (msg.data.result == "") {
                    clearInterval(mmq_pick_time);
                    clearTimeout(mmq_pick_time2);
                    clearTimeout(mmq_pick_time3);
                }
                on_ack({result: msg.data.result}, ref);
            });
    }

    function bytes_align(str) {
        var val = [];
        for (var i = 0; i < str.length; i++) {
            val.push(str.charCodeAt(i).toString(16));
        }
        var get8bytes_num = parseInt(str.length / 8) + 1;
        var addbytes = 8 * get8bytes_num - str.length;
        var result = [];
        var trans_8bytes = "";
        var trans_val = "";
        for (var k = 0; k < addbytes; k++) {
            if (k == 0)
                trans_val = "0" + addbytes;
            else
                trans_val += "ff";

            if (trans_val.length == 8) {
                result.push("0x" + trans_val);
                trans_val = "";
            }
        }
        for (var j = 0; j < val.length; j++) {
            trans_val += val[j];
            if (trans_val.length == 8) {
                result.push("0x" + trans_val);
                trans_val = "";
            }
        }
        return result;
    }

    function str_2_16bytes(b) {
        if (!b) return;
        var len = b.length / 2, c = [];
        for (var i = 0; i < len; i++) {
            var a0 = b.charAt(2 * i);
            var a1 = b.charAt(2 * i + 1);
            var a2 = "0x" + a0 + a1;
            c.push(a2 & 0xff);
        }
        return c;
    }

    function cpns_get(srv, start, counts, user, appid, ref, on_ack) {
        var secret_key = mdh.gen_private(), pub_key = mdh.gen_public(secret_key);
        var share_key = mdh.gen_shared_secret(secret_key, "310105909413485164588026905566175959");

        var json_buf = {app: {id: appid}, user: user};
        json_buf = JSON.stringify(json_buf);
        var key = CryptoJS.MD5(share_key);
        //to do 8 byte alignment
        var json_bufs = bytes_align(json_buf);
        var bytes_len = 8 * (parseInt(json_buf.length / 8) + 1), str_len = bytes_len / 4;

        var json_obj = {sigBytes: bytes_len, words: json_bufs, length: str_len};
        var json_uctx = CryptoJS.DES.encrypt(json_obj, key, {
            iv: CryptoJS.enc.Hex.parse('0000000000000000'),
            padding: CryptoJS.pad.NoPadding
        }).ciphertext.toString();
        var b = str_2_16bytes(json_uctx);
        var urlProtocol = srv.substring(0, srv.indexOf(":"));

        var uctx = "data:application/octet-stream;base64," + mcodec.binary_2_b64(b);
        if (urlProtocol == "https")
            send_msg("cpns_get_req", {
                start: start,
                counts: counts,
                p: [{n: "uctx", v: uctx}, {n: "root", v: "5"}, {
                    n: "prime",
                    v: "791658605174853458830696113306796803"
                }, {n: "pubk", v: pub_key}, {n: "porto", v: "https"}]
            }, {remote_ip: srv}, function (msg, ref) {
                on_ack(msg, ref);
            });
        else
            send_msg("cpns_get_req", {
                start: start,
                counts: counts,
                p: [{n: "uctx", v: uctx}, {n: "root", v: "5"}, {
                    n: "prime",
                    v: "791658605174853458830696113306796803"
                }, {n: "pubk", v: pub_key}]
            }, {remote_ip: srv}, function (msg, ref) {
                on_ack(msg, ref);
            });
    }

    var _this = this;
    _this.qid = function () {
        return l_qid
    };
    _this.dev_msg_listener_add = dev_msg_listener_add;
    _this.dev_msg_listener_del = dev_msg_listener_del;
    _this.set_srv = set_srv;
    /* set_srv(srv) */
    _this.get_srv = get_srv;
    /* get_srv(srv) */
    _this.get_sharekey = get_share_key;
    _this.get_sid = get_sid;
    _this.pwd_encrypt = pwd_encrypt;
    /* pwd_encrypt(pwd_md5_hex) */
    _this.create_nid_ex = create_nid_ex;
    /* create_nid_ex(type) type:0 by sid, 2: by lid */
    _this.create_nid = create_nid;
    _this.sign_up = function (srv, usr, pwd, pwd_md5_hex, ref, on_ack) {
        do_sign_x(s_cacs_reg_req, srv, usr, pwd, pwd_md5_hex, ref, on_ack);
    };
    _this.sign_in = function (srv, usr, pwd, pwd_md5_hex, ref, on_ack) {
        do_sign_x(s_cacs_login_req, srv, usr, pwd, pwd_md5_hex, ref, on_ack);
    };
    _this.sign_out = sign_out;
    _this.pwd_set = pwd_set;
    _this.binding_email = binding_email;
    _this.recovery_binding_email = recovery_binding_email;
    _this.send_msg = send_msg;
    /* send_msg(type, data, ref, on_ack) */
    _this.cpns_get = cpns_get;
    _this.binding_email_get = binding_email_get;
}
;
///<jscompress sourcefile="mlib.cloud.agent.js" />
/*
    mcloud_agent
    depends:
        mlib.cloud.account.js
            cryptojs_tripledes.js
            cryptojs_pad-nopadding-min.js
            mlib.crypt.dh.js
            mlib.crypt.md5.js
            mlib.core.rpc.js
                mlib.core.codec.js
                mlib.core.evt.js
   
    ----history----------
    author: chengzhiyong date: 2014-08-13 action: create
*/
function mcloud_agent() {
    var l_srv = "", //域名
        l_devs = [],  //设备列表
        l_mcloud_account = new mcloud_account(),
        l_fix = null; //{type:funcion(type){},/* return fixed type; */req:{function(type,req){ /* return fixed req data */},ack:{function(type,ack){ /* return fixed ack data */}

    function ldev_get(sn) {
        for (var dev, i = 0; i < l_devs.length; ++i) {
            if ((dev = l_devs[i]) && (dev.sn == sn)) {
                return dev;
            }
        }
        return null;
    }

    function ldev_index_get(sn) {
        for (var i = 0, length = l_devs.length; i < length; i++) {
            if (mcloud_agent.devs.list[i].sn == sn) {
                return i;
            }
        }
    }

    function ldev_del(sn) {
        for (var i = 0; i < l_devs.length; ++i) {
            if (l_devs[i].sn == sn) {
                l_devs.splice(i, 1);
            }
        }
    }

    function ldev_add(dev) {
        var temp_dev = ldev_get(dev.sn);
        if (!temp_dev) {
            l_devs[l_devs.length] = dev;
        }
    }

    function sign_up(obj, ref, on_ack) {
        return l_mcloud_account.sign_up(obj.srv, obj.user, obj.password, null, ref, function (msg, ref) {
            on_ack({result: msg.data.result}, ref);
        });
    }

    function sign_in(obj, ref, on_ack) {
        console.log(JSON.stringify(obj))
        if (g_server_device == "") {
            mcloud_entry({"userName": obj.user}, function (msg) {
                return l_mcloud_account.sign_in(obj.srv, obj.user, obj.password, null, ref, function (msg, ref) {
                    on_ack({result: get_ret(msg)}, ref);
                });
            });
        } else {
            return l_mcloud_account.sign_in(obj.srv, obj.user, obj.password, null, ref, function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
        }
    }

    function sign_out(ref, on_ack) {
        return l_mcloud_account.sign_out(ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function send_msg(type, data, ref, on_ack) {
        if (!l_srv) {
            l_mcloud_account.set_srv(window.location.host);
        }
        return l_mcloud_account.send_msg(l_fix ? l_fix.type(type) : type, l_fix ? l_fix.req(type, data) : data, ref,
            l_fix ? function (ack, ref) {
                on_ack(l_fix.ack(type, ack), ref)
            } : on_ack);
    }

    function create_nid() {
        return l_mcloud_account.create_nid();
    }

    function pwd_encrypt(pwd_md5_hex) {
        return l_mcloud_account.pwd_encrypt(pwd_md5_hex);
    }

    function get_ret(msg) {
        var ret = (msg && msg.data) ? (msg.data.ret || msg.data.result) : null;
        if (Object.prototype.toString.call(ret) === "[object String]") {
            return ret;
        }
        else {
            return s_ret = ret ? (ret.reason || ret.sub || ret.code) : null;
        }
    }

    /* devs_refresh({filter:"xxx"}, ref, on_ack) ret:{}*/
    function devs_refresh(obj, ref, on_ack) {
        send_msg("ccm_devs_get", {sess: {nid: create_nid()}, start: 0, counts: 1024}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    l_devs.length = 0;
                    var devices = msg.data.devs;
                    if (devices) {
                        for (i = 0; i < devices.length; ++i) {
                            l_devs[i] = devices[i];
                        }
                    }
                }
                on_ack(msg, ref);
            });
    }

    function play(obj, ref, on_ack) {
        send_msg("ccm_play", {
                sess: {nid: create_nid(), sn: obj.sn},
                setup: {stream: "RTP_Unicast", trans: {proto: obj.protocol}}, token: obj.token
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg), url: (msg.data.uri ? msg.data.uri.url : "")}, ref);
            });
    }

    function record(obj, ref, on_ack) {
        send_msg("ccm_record_task_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if ((result == "") && msg.data.sd_ready == 1) {
                    /* >0:every set keep_time add record time , -1:stop */
                    msg.data.task.keep = obj.keep_time;
                    send_msg("ccm_record_task_set", {sess: {nid: create_nid(), sn: obj.sn}, task: msg.data.task}, ref,
                        function (msg2, ref) {
                            on_ack({result: get_ret(msg2)}, ref);
                        });
                }
                else {
                    on_ack({result: result, sd_ready: msg.data.sd_ready}, ref);
                }
            });
    }

    function pic_get(obj, ref, on_ack) {
        var srv = l_mcloud_account.get_srv();
        // send_msg("ccm_snapshot",{sess:{nid:create_nid(),sn:obj.sn},token:((obj.token=="p1")?"p0":obj.token)},ref,
        send_msg("ccm_snapshot", {sess: {nid: create_nid(), sn: obj.sn}, token: obj.token}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg), url: pic_url_get(obj)}, ref);
            });
    }

    function pic_url_get(obj,ref,on_ack) {
        if (obj.is_history) {
            if (window.location.protocol == "file:") {
                var url = "http://" + l_mcloud_account.get_srv() + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + create_nid() + "&dsess_sn=" + obj.sn + "&dtoken=" + obj.token + "&dflag=" + obj.flag;
                on_ack(url,ref);
            } else {
                var url = window.location.protocol + "//" + l_mcloud_account.get_srv() + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + create_nid() + "&dsess_sn=" + obj.sn + "&dtoken=" + obj.token + "&dflag=" + obj.flag;
                on_ack(url,ref);
            }
        } else {
            if (window.location.protocol == "file:") {
                var url = "http://" + l_mcloud_account.get_srv() + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + create_nid() + "&dsess_sn=" + obj.sn + "&dtoken=" + obj.token + "_xxxxxxxxxx";
                on_ack(url,ref);
            } else {
                var url = window.location.protocol + "//" + l_mcloud_account.get_srv() + "/ccm/ccm_pic_get.jpg?hfrom_handle=887330&dsess=1&dsess_nid=" + create_nid() + "&dsess_sn=" + obj.sn + "&dtoken=" + obj.token + "_xxxxxxxxxx";
                on_ack(url,ref);
            }
        }
    }

    function pushtalk(obj, ref, on_ack) {
        send_msg("ccm_talk", {
                sess: {nid: create_nid(), sn: obj.sn},
                setup: {stream: "RTP_Unicast", trans: {proto: obj.protocol}},
                token: obj.token
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg), url: (msg.data.uri ? msg.data.uri.url : "")}, ref);
            });
    }

    function ptz_ctrl(obj, ref, on_ack) {
        send_msg("ccm_ptz_ctl", {
                sess: {nid: create_nid(), sn: obj.sn},
                trans: {pan_tilt: {x: obj.x, y: obj.y}}, speed: {pan_tilt: {x: 30, y: 30}}
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function test_ptz_ctrl(obj, ref, on_ack) {
        send_msg("ccm_test", {sess: {nid: create_nid(), sn: obj.sn}, action: obj.action, param: obj.param}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function playback(obj, ref, on_ack) {
        send_msg("ccm_replay", {
                sess: {nid: create_nid(), sn: obj.sn},
                setup: {stream: "RTP_Unicast", trans: {proto: obj.protocol}}, token: obj.token
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg), url: (msg.data.url ? msg.data.url : "")}, ref);
            });
    }

    function msgs_get(obj, ref, on_ack) {
        send_msg("ccm_msg_get", {
                sess: {nid: create_nid(), sn: obj.sn},
                flag: 0, start: obj.start, filter: obj.filter, counts: obj.counts
            }, ref,
            function (msg, ref) {
                on_ack({
                    result: get_ret(msg),
                    max_id: msg.data.max_id,
                    min_id: msg.data.min_id,
                    total: msg.data.total,
                    bound: msg.data.bound,
                    messages: msg.data.messages
                }, ref);
            });
    }

    function dev_del(obj, ref, on_ack) {
        send_msg("ccm_dev_del", {sess: {nid: create_nid()}, sn: obj.sn}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function dev_add(obj, ref, on_ack) {
        var pwd_md5_hex = mmd5.hex(obj.pass || "");
        send_msg("ccm_dev_add", {sess: {nid: create_nid()}, sn: obj.sn, pwd: pwd_encrypt(pwd_md5_hex)}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var devices = msg.data.info;
                    if (devices) {
                        ldev_add(devices);
                    }
                }
                on_ack({result: result, info: msg.data.info}, ref);
            });
    }

    function account_passwd_set(obj, ref, on_ack) {
        l_mcloud_account.pwd_set(obj.old_pass, obj.new_pass, obj.is_guest, ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }


    function box_set(obj, ref, on_ack) {
        send_msg("ccm_box_set", {
                sess: {nid: create_nid(), sn: obj.box_sn},
                sn: obj.dev_sn,
                cmd: obj.cmd,
                start_time: obj.start_time,
                end_time: obj.end_time
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            })
    }

    function cam_get(obj, ref, on_ack) {
        var brightness, contrast, color_saturation, sharpness, day_night, flip, flicker_freq, resolute;
        send_msg("ccm_video_srcs_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                var vss = msg.data.vss;
                if ((result == "") && vss[0].extension.conf) {
                    brightness = vss[0].extension.conf.brightness;
                    contrast = vss[0].extension.conf.contrast;
                    color_saturation = vss[0].extension.conf.color_saturation;
                    sharpness = vss[0].extension.conf.sharpness;
                    day_night = vss[0].extension.conf.mode;
                    /* auto(default),day,night */
                    send_msg("ccm_misc_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
                        function (msg2, ref) {
                            var result2 = get_ret(msg2);
                            if (result2 == "") {
                                var msg = msg2.data ? msg2.data.info : "";
                                flip = msg.flip;
                                /* 0/1 0:none-flip, 1:filp */
                                flicker_freq = msg.power_freq;
                                /* 0/1 0:60hz, 1:50hz */
                                resolute = msg2.data.resolute;
                                /*0/1 0:(4:3) 1:(16:9) */
                            }
                            on_ack({
                                result: result2,
                                brightness: brightness,
                                contrast: contrast,
                                color_saturation: color_saturation,
                                sharpness: sharpness,
                                day_night: day_night,
                                flip: flip,
                                flicker_freq: flicker_freq,
                                resolute: resolute
                            }, ref);
                        });
                }
                else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function cam_set(obj, ref, on_ack) {
        send_msg("ccm_img_set", {
                sess: {nid: create_nid(), sn: obj.sn}, token: "vs0",
                conf: {
                    brightness: obj.brightness,
                    contrast: obj.contrast,
                    color_saturation: obj.color_saturation,
                    sharpness: obj.sharpness,
                    mode: obj.day_night
                }
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    send_msg("ccm_misc_set", {
                            sess: {nid: create_nid(), sn: obj.sn},
                            info: {flip: obj.flip, power_freq: obj.flicker_freq},
                            resolute: obj.resolute
                        }, ref,
                        function (msg2, ref) {
                            on_ack({result: get_ret(msg2)}, ref);
                        });
                } else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function dev_info_get(obj, ref, on_ack) {
        var sn = mfc = model = ver = name = logo = os = wifi = sensor = type = uptime = def = s_sensor = exdev = rffreq = exver = "";
        send_msg("ccm_dev_info_get", {sess: {nid: create_nid(), sn: obj.sn}, select: obj.select}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data : "";
                    sn = msg.sn;
                    ver = msg.img_ver;
                    name = msg.nick;
                    type = msg.type;//增加返回值的type属性
                    os = msg.os;
                    wifi = msg.wifi;
                    sensor = msg.sensor;
                    if (msg.p) {
                        for (var i = 0; i < msg.p.length; i++) {
                            if (msg.p[i].n == "s.logo") {
                                logo = msg.p[i].v;
                            }
                            if (msg.p[i].n == "s.mfc") {
                                mfc = msg.p[i].v;
                            }
                            if (msg.p[i].n == "model") {
                                model = msg.p[i].v;
                            }
                            if (msg.p[i].n == "uptime") {
                                uptime = msg.p[i].v;
                            }
                            if (msg.p[i].n == "p0") {
                                def = msg.p[i].v;
                            }
                            if (msg.p[i].n == "s.sensor") {
                                s_sensor = msg.p[i].v;
                            }
                            if (msg.p[i].n == "s.exdev") {
                                exdev = msg.p[i].v;
                            }
                            if (msg.p[i].n == "s.rffreq") {
                                rffreq = msg.p[i].v;
                            }
                            if (msg.p[i].n == "s.exver") {
                                exver = msg.p[i].v;
                            }
                        }
                    }
                }
                on_ack({
                    result: result,
                    sn: sn,
                    mfc: mfc,
                    model: model,
                    ver: ver,
                    name: name,
                    logo: logo,
                    type: type,
                    os: os,
                    wifi: wifi,
                    sensor: sensor,
                    uptime: uptime,
                    def: def,
                    s_sensor: s_sensor,
                    exdev: exdev,
                    rffreq: rffreq,
                    exver: exver
                }, ref);
            });
    }

    function nick_set(obj, ref, on_ack) {
        send_msg("ccm_nick_set", {sess: {nid: create_nid(), sn: obj.sn}, nick: obj.name}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function dev_passwd_set(obj, ref, on_ack) {
        var old_pass = (obj.old_pass && window.mmd5.hex(obj.old_pass));
        var new_pass = (obj.new_pass && window.mmd5.hex(obj.new_pass));
        send_msg("ccm_pwd_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                user: {
                    username: obj.sn,
                    old_pwd: pwd_encrypt(old_pass),
                    pwd: pwd_encrypt(new_pass),
                    level: "",
                    guest: obj.is_guest ? 1 : 0
                }
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function net_get(obj, ref, on_ack) {
        var networks, dns;
        send_msg("ccm_net_get", {
                sess: {nid: create_nid(), sn: obj.sn}, select: obj.select,
                tokens: ["eth0", "ra0"], items: ["all", "all"], force_scan: 1
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data.info : "";
                    networks = msg.ifs;
                    dns = msg.dns;
                }
                on_ack({result: result, networks: networks, dns: dns}, ref);
            });
    }

    function net_set(obj, ref, on_ack) {
        var info = {ifs: obj.networks, dns: obj.dns};
        send_msg("ccm_net_set", {sess: {nid: create_nid(), sn: obj.sn}, info: info}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function osd_get(obj, ref, on_ack) {
        var text, text_enable, week_enable, date_format, date_enable, time_12h, time_enable;
        send_msg("ccm_osd_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data.osd : "";
                    text = msg.text;
                    text_enable = msg.text_enable;
                    week_enable = msg.week;
                    date_format = msg.date.format;
                    date_enable = msg.date.date_enable;
                    time_12h = msg.date.enable_12h;
                    time_enable = msg.date.time_enable;
                }
                on_ack({
                    result: result,
                    text: text,
                    text_enable: text_enable,
                    week_enable: week_enable,
                    date_format: date_format,
                    date_enable: date_enable,
                    time_12h: time_12h,
                    time_enable: time_enable
                }, ref);
            });
    }

    function osd_set(obj, ref, on_ack) {
        send_msg("ccm_osd_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                osd: {
                    text: obj.text, text_enable: obj.text_enable, week: obj.week_enable,
                    date: {
                        format: obj.date_format,
                        date_enable: obj.date_enable,
                        enable_12h: obj.time_12h,
                        time_enable: obj.time_enable
                    }
                }
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function sd_get(obj, ref, on_ack) {
        var enable, status, capacity, usage, availableSize;
        send_msg("ccm_disk_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = (msg.data && msg.data.disks) ? msg.data.disks[0] : msg.data;
                    enable = msg.conf.enable;
                    status = msg.stat;
                    /* readonly/mount/repairing/formating/umount/empty */
                    capacity = msg.size;
                    /* Total disk size */
                    usage = msg.used_size;
                    /* Used size */
                    availableSize = msg.available_size;
                }
                on_ack({
                    result: result,
                    enable: enable,
                    status: status,
                    capacity: capacity,
                    usage: usage,
                    availableSize: availableSize
                }, ref);
            });
    }

    function sd_set(obj, ref, on_ack) {
        if (obj.no_conf) {
            send_msg("ccm_disk_ctl", {
                    sess: {nid: create_nid(), sn: obj.sn},
                    token: "sd", type: (obj.ctrl_type ? obj.ctrl_type : "")
                }, ref,
                function (msg, ref) {
                    on_ack({result: get_ret(msg)}, ref);
                });
        }
        else {
            send_msg("ccm_disk_ctl", {
                    sess: {nid: create_nid(), sn: obj.sn},
                    token: "sd", type: (obj.ctrl_type ? obj.ctrl_type : ""), conf: {enable: (obj.enable ? 1 : 0)}
                }, ref,
                function (msg, ref) {
                    on_ack({result: get_ret(msg)}, ref);
                });
        }
    }

    function alarm_trigger_get(obj, ref, on_ack) {
        var io_input, io_output, sensitivity, night_sensitivity;
        send_msg("ccm_alert_dev_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data.conf : "";
                    io_input = msg.io_in_mode;
                    /* Open:always open; Close:always close */
                    io_output = msg.io_out_mode;
                    /* Open:always open; Close:always close */
                    sensitivity = msg.motion_level;
                    /* level of sensitivity about motion detect at day 0-100 */
                    night_sensitivity = msg.motion_level_night;
                    /* level of sensitivity about motion detect at night */
                }
                on_ack({
                    result: result,
                    io_input: io_input,
                    io_output: io_output,
                    sensitivity: sensitivity,
                    night_sensitivity: night_sensitivity
                }, ref);
            });
    }

    function alarm_trigger_set(obj, ref, on_ack) {
        send_msg("ccm_alert_dev_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                conf: {
                    io_in_mode: obj.io_input,
                    io_out_mode: obj.io_output,
                    motion_level: obj.sensitivity,
                    motion_level_night: obj.night_sensitivity
                }
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function alarm_action_get(obj, ref, on_ack) {
        var enable, actions;
        send_msg("ccm_alert_action_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data : "";
                    enable = msg.enable;
                    actions = msg.actions;
                }
                on_ack({result: result, enable: enable, actions: actions}, ref);
            });
    }

    function alarm_action_set(obj, ref, on_ack) {
        send_msg("ccm_alert_action_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                enable: obj.enable, actions: obj.actions
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function alert_task_get(obj, ref, on_ack) {
        var enable, full_time, times, sd_ready;
        send_msg("ccm_alert_action_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data : "";
                    enable = msg.sch.enable;
                    full_time = msg.sch.full_time;
                    times = msg.sch.times;
                }
                on_ack({result: result, enable: enable, times: times}, ref);
            });
    }

    function alert_task_set(obj, ref, on_ack) {
        send_msg("ccm_alert_action_set", {
                sess: {nid: create_nid(), sn: obj.sn}, enable: obj.enable,
                sch: {enable: obj.sch_enable, full_time: obj.full_time, times: obj.times}
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function record_get(obj, ref, on_ack) {
        var enable, full_time, times, sd_ready;
        send_msg("ccm_record_task_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    sd_ready = msg.data.sd_ready;
                    var msg = msg.data ? msg.data.task.sch : "";
                    enable = msg.enable;
                    full_time = msg.full_time;
                    times = msg.times;
                }
                on_ack({result: result, enable: enable, full_time: full_time, times: times, sd_ready: sd_ready}, ref);
            });
    }

    function record_set(obj, ref, on_ack) {
        send_msg("ccm_record_task_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                task: {sch: {enable: obj.enable, full_time: obj.full_time, times: obj.times}}
            }, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function time_get(obj, ref, on_ack) {
        var timezone, auto_sync, ntp_addr, hour, min, sec, year, mon, day;
        send_msg("ccm_ntp_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data.info : "";
                    timezone = msg.timezone;
                    auto_sync = msg.auto_sync_enable;
                    ntp_addr = msg.manual[0].ip;
                    send_msg("ccm_date_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
                        function (msg2, ref) {
                            var result2 = get_ret(msg2);
                            if (result2 == "") {
                                var msg2 = msg2.data ? msg2.data.utc_date : "";
                                hour = msg2.time.hour;
                                min = msg2.time.min;
                                sec = msg2.time.sec;
                                year = msg2.date.year;
                                mon = msg2.date.mon;
                                day = msg2.date.day;
                            }
                            on_ack({
                                result: result2,
                                timezone: timezone,
                                auto_sync: auto_sync,
                                ntp_addr: ntp_addr,
                                hour: hour,
                                min: min,
                                sec: sec,
                                year: year,
                                mon: mon,
                                day: day
                            }, ref);
                        });
                } else {
                    on_ack({result: result}, ref);
                }

            });
    }

    function time_set(obj, ref, on_ack) {
        send_msg("ccm_date_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                type: obj.type,
                timezone: obj.timezone,
                utc_date: {
                    time: {hour: obj.hour, min: obj.min, sec: obj.sec},
                    date: {year: obj.year, mon: obj.mon, day: obj.day}
                }
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    send_msg("ccm_ntp_set", {
                            sess: {nid: create_nid(), sn: obj.sn},
                            auto_sync: obj.auto_sync, manual: {ip: obj.ntp_addr}
                        }, ref,
                        function (msg2, ref) {
                            on_ack({result: get_ret(msg2)}, ref);
                        });
                }
                else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function upgrade_get(obj, ref, on_ack) {
        var status, progress, ver_current, ver_valid, ver_extends, chang_history;
        send_msg("ccm_upgrade_get", {sess: {nid: create_nid(), sn: obj.sn}, check: obj.check ? obj.check : 0}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    var msg = msg.data ? msg.data : "";
                    status = msg.task ? msg.task.stat : msg.stat;
                    progress = msg.progress;
                    os_ver = msg.os_ver ? msg.os_ver : "";
                    ver_current = msg._cur_ver;
                    ver_valid = msg._valid_ver;
                    ver_extends = msg.remark;
                    chang_history = msg.changes;
                    ext_prj = msg.prj_ext;
                    ext_hw = msg.hw_ext;
                }
                on_ack({
                    result: result,
                    status: status,
                    progress: progress,
                    os_ver: os_ver,
                    ver_current: ver_current,
                    ver_valid: ver_valid,
                    ver_extends: ver_extends,
                    chang_history: chang_history,
                    ext_prj: ext_prj,
                    ext_hw: ext_hw
                }, ref);
            });
    }

    function upgrade_set(obj, ref, on_ack) {
        send_msg("ccm_upgrade", {sess: {nid: create_nid(), sn: obj.sn}, img_src: "download"}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function restore(obj, ref, on_ack) {
        send_msg("ccm_restore", {sess: {nid: create_nid(), sn: obj.sn}, backup: obj.keep_extends_cofig}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function reboot(obj, ref, on_ack) {
        send_msg("ccm_reboot", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function audio_get(obj, ref, on_ack) {
        var mic_level, speaker_level;
        send_msg("ccm_speaker_get", {sess: {nid: create_nid(), sn: obj.sn}, token: "ao0"}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    speaker_level = msg.data.conf.level;
                    send_msg("ccm_mic_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
                        function (msg2, ref) {
                            on_ack({
                                result: get_ret(msg2),
                                speaker_level: speaker_level,
                                mic_level: msg2.data.conf[0].level
                            }, ref);
                        });
                }
                else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function audio_set(obj, ref, on_ack) {
        send_msg("ccm_speaker_set", {
                sess: {nid: create_nid(), sn: obj.sn},
                conf: {token: "ao0", level: obj.speaker_level}, force_persistence: 1
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "") {
                    send_msg("ccm_mic_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref,
                        function (msg2, ref) {
                            var result2 = get_ret(msg2);
                            if (result2 == "") {
                                var msg2, entity, silent, token;
                                msg2 = msg2.data ? msg2.data.conf[0] : "";
                                entity = msg2.entity;
                                silent = msg2.silent;
                                token = msg2.token;
                                send_msg("ccm_mic_set", {
                                        sess: {nid: create_nid(), sn: obj.sn},
                                        conf: {entity: entity, token: token, silent: silent, level: obj.mic_level},
                                        force_persistence: 1
                                    }, ref,
                                    function (msg3, ref) {
                                        on_ack({result: get_ret(msg3)}, ref);
                                    });
                            } else {
                                on_ack({result: result2}, ref);
                            }
                        });
                }
                else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function dev_msg_listener_add(ref, on_ack) {
        l_mcloud_account.dev_msg_listener_add(ref, function (msg, ref) {
            on_ack(msg, ref);
        });
    }

    function dev_msg_listener_del(ref, on_ack) {
        l_mcloud_account.dev_msg_listener_del(ref, function (msg, ref) {
            on_ack(msg, ref);
        });
    }

    function dev_activate(obj, ref, on_ack) {
        send_msg("ccm_active", {sess: {nid: create_nid(), sn: obj.sn}, ActivationCode: obj.activationCode}, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function svr_dev_get(ref, on_ack) {
        send_msg("ccm_info_get", {}, ref,
            function (msg, ref) {
                msg.data ? on_ack({
                    result: get_ret(msg),
                    type: msg.data.type,
                    sn: msg.data.sn,
                    nick: msg.data.nick,
                    ver: msg.data.ver
                }, ref) : on_ack({result: get_ret(msg)});
            });
    }

    function set_srv(srv) {
        log("set_srv : " + srv)
        l_srv = srv;
        g_server_device = srv;
        l_mcloud_account.set_srv(srv)
    }

    function curise_get(obj, ref, on_ack) {
        send_msg("ccm_curise_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref, function (msg, ref) {
            var result = get_ret(msg);
            if (result == "") {
                /*var points;
                if(msg.data.curise_info.points){
                    points = msg.data.curise_info.points;
                }else{
                    points = null;
                }*/
                on_ack({result: result, points: msg.data.curise_info.points, enable: msg.data.curise_info.enable}, ref);
            } else {
                on_ack({result: result}, ref);
            }
        });
    }

    function curise_set(obj, ref, on_ack) {
        send_msg("ccm_curise_set", {
            sess: {nid: create_nid(), sn: obj.sn},
            type: obj.type,
            index: obj.index
        }, ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function motion_mask_set(obj, ref, on_ack) {
        send_msg("ccm_motion_mask_set", {
            sess: {nid: create_nid(), sn: obj.sn},
            conf: obj.conf
        }, ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function motion_mask_get(obj, ref, on_ack) {
        send_msg("ccm_motion_mask_get", {
            sess: {
                nid: l_mcloud_account.create_nid(),
                sn: obj.sn
            }
        }, ref, function (msg, ref) {
            on_ack({result: get_ret(msg), conf: msg.data.conf}, ref);
        });
    }

    function msg_filter_get(obj, ref, on_ack) {
        send_msg("ccm_msg_filter_get", {
            sess: {
                nid: l_mcloud_account.create_nid(),
                sn: obj.sn
            }
        }, ref, function (msg, ref) {
            var result = get_ret(msg),
                alert_enable = 0, record_enable = 0;
            if (result == "") {
                if (msg.data.pub_filter.indexOf("alert") < 0)
                    alert_enable = 1;
                if (msg.data.pub_filter.indexOf("record") < 0)
                    record_enable = 1;
            }
            on_ack({result: result, alert_enable: alert_enable, record_enable: record_enable}, ref);
        });
    }

    function msg_filter_set(obj, ref, on_ack) {
        var tmp_str = new Array();
        tmp_str[0] = obj.alert_enable ? "" : "'alert'";
        tmp_str[1] = (obj.alert_enable + obj.record_enable == 0) ? "," : "";
        tmp_str[2] = obj.record_enable ? "" : "'record'";
        send_msg("ccm_msg_filter_set", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            gen_filter: "{type:[]}",
            pub_filter: "{type:[" + tmp_str.join("") + "]}"
        }, null, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function box_get(obj, ref, on_ack) {
        var cid=obj.cid?obj.cid:-1;
        var sid=obj.sid?obj.sid:-1;
        var direction=obj.direction?1:0;
        send_msg("ccm_box_get", {
                sess: {nid: l_mcloud_account.create_nid(), sn: obj.box_sn},
                sn: obj.dev_sn, flag: obj.flag, start_time: obj.start_time, end_time: obj.end_time, cid:cid, sid:sid, search_type:obj.search_type, direction:direction
            }, ref,
            function (msg, ref) {
                //  document.getElementById(result1).innerHTML="121232312312312";
                var result = get_ret(msg);
                if (result == "" && msg.data) {
                    switch (obj.flag) {
                        case 1:
                            on_ack({result: result, ipcs: msg.data.ipcs}, ref);
                            break;
                        case 2:
                            on_ack({result: result, date_infos: msg.data.date_infos}, ref);
                            break;
                        case 4:
                            on_ack({result: result, segs: msg.data.segs}, ref);
                            break;
                        case 8:
                            on_ack({result: result, segs_sdc: msg.data.segs_sdc}, ref);
                            break;
                        default:
                            break;
                    }
                    //on_ack({result:result,date_infos:msg.data.date_infos,ipcs:msg.data.ipcs,segs:msg.data.segs,segs_sdc:msg.data.segs_sdc},ref);
                } else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function box_conf_get(obj, ref, on_ack) {
        send_msg("ccm_box_conf_get", {sess: {nid: l_mcloud_account.create_nid(), sn: obj.box_sn}}, null,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "" && msg.data) {
                    on_ack({result: get_ret(msg), conf: msg.data}, ref);
                } else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function box_login(obj, ref, on_ack) {
        send_msg("ccm_box_login", {
                sess: {nid: l_mcloud_account.create_nid(), sn: obj.box_sn},
                enable: obj.enable,
                username: obj.username,
                password: obj.password
            }, null,
            function (msg, ref) {
                on_ack({result: get_ret(msg)}, ref);
            });
    }

    function ipcs_get(obj, ref, on_ack) {
        send_msg("ccm_ipcs_get", {sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn}}, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "" && msg.data) {
                    on_ack({result: result, ipcs: msg.data.ipcs}, ref);
                } else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function pic_base64_get(obj, ref, on_ack) {
        send_msg("ccm_pic_get", {
                sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
                token: obj.token,
                flag: obj.flag
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                if (result == "" && msg.data) {
                    on_ack({result: result, frame: msg.data.frame}, ref);
                } else {
                    on_ack({result: result}, ref);
                }
            });
    }

    function binding_email(obj, ref, on_ack) {
        l_mcloud_account.binding_email(obj.email, obj.user, obj.pass, obj.lang, obj.version, obj.appid, obj.name, ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function recovery_binding_email(obj, ref, on_ack) {
        l_mcloud_account.recovery_binding_email(obj.email, obj.user, obj.lang, obj.appid, obj.name, ref, function (msg, ref) {
            on_ack({result: get_ret(msg)}, ref);
        });
    }

    function cpns_get(obj, ref, on_ack) {
        l_mcloud_account.cpns_get(obj.srv, obj.start, obj.counts, obj.user, obj.appid, ref,
            function (msg, ref) {
                on_ack({result: get_ret(msg), conf: msg.data}, ref);
            });
    }

    function binding_email_get(obj, ref, on_ack) {
        l_mcloud_account.binding_email_get(obj.user, obj.appid, ref, function (msg, ref) {
            on_ack({result: get_ret(msg), conf: msg.data}, ref);
        });
    }

    function desc_get(obj, ref, on_ack) {
        send_msg("ccvs_get_desc_req", {
                sess: {nid: l_mcloud_account.create_nid()},
                ver_type: obj.ver_type,
                ver_from: obj.ver_from,
                ver_to: obj.ver_to,
                lang: obj.lang
            }, ref,
            function (msg, ref) {
                var result = get_ret(msg);
                on_ack({result: result, data: msg.data}, ref);
            });
    }

    // function  get_download(obj, ref, on_ack){
    //     send_msg("ccvs_get_version_req",{sess:{},ver_sn:obj.ver_sn,ver_type:obj.ver_type,ver_from:obj.ver_from,lang:obj.lang,p:obj.p},ref,
    //         function(msg,ref){
    //             var result = get_ret(msg);
    //             on_ack({result:result,data:msg.data},ref);
    //         });
    // }

    function scene_get(obj, ref, on_ack) {
        send_msg("ccm_scene_get", {sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn}}, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function scene_set(obj, ref, on_ack) {
        send_msg("ccm_scene_set", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            all: obj.all,
            info: obj.info
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function exdev_set(obj, ref, on_ack) {
        send_msg("ccm_exdev_set", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            dev: obj.dev
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: get_ret(msg), data: msg.data}, ref);
        });
    }

    function exdev_get(obj, ref, on_ack) {
        send_msg("ccm_exdev_get", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            id: obj.id,
            flag: obj.flag,
            start: obj.start,
            counts: obj.counts
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: get_ret(msg), data: msg.data}, ref);
        });
    }

    function exdev_discover(obj, ref, on_ack) {
        send_msg("ccm_exdev_discover", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            flag: obj.flag,
            timeout: obj.timeout,
            interval: obj.interval
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function exdev_add(obj, ref, on_ack) {
        send_msg("ccm_exdev_add", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            id: obj.id,
            model: obj.model
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function exdev_del(obj, ref, on_ack) {
        send_msg("ccm_exdev_del", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            id: obj.id
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function schedule_get(obj, ref, on_ack) {
        send_msg("ccm_schedule_get", {
            sess: {
                nid: l_mcloud_account.create_nid(),
                sn: obj.sn
            }
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function schedule_set(obj, ref, on_ack) {
        send_msg("ccm_schedule_set", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            sch: obj.sch
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref);
        });
    }

    function exdev_del(obj, ref, on_ack) {
        send_msg("ccm_exdev_del", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            id: obj.id
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            if (result == "" && msg.data) {
                on_ack({result: result, data: msg.data}, ref);
            }
        });
    }

    function time_zone_get(obj, ref, on_ack) {
        send_msg("ccm_zone_get", {
            sess: {nid: l_mcloud_account.create_nid(), sn: obj.sn},
            dev_sn: obj.dev_sn
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            if (result == "" && msg.data) {
                on_ack({result: result, data: msg.data}, ref);
            }
        });
    }

    function hardware_test(obj, ref, on_ack) {
        send_msg("ccm_hardware_test", {
            sess: {nid: create_nid(), sn: obj.sn},
            exdev: obj.exdev
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref)
        });
    }

    function hardware_test_get(obj, ref, on_ack) {
        send_msg("ccm_hardware_test_get", {sess: {nid: create_nid(), sn: obj.sn}}, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref)
        });
    }

    function rf_test(obj, ref, on_ack) {
        send_msg("ccm_test", {
            sess: {nid: create_nid(), sn: obj.sn},
            action: obj.action,
            param: obj.param
        }, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result, data: msg.data}, ref)
        })
    }

    function get_download(obj, ref, on_ack) {
        send_msg({type: "ccvs_get_version_req", to: "ccms", srv: obj.srv}, {
                sess: {},
                ver_type: obj.ver_type,
                ver_from: obj.ver_from,
                lang: obj.lang,
                p: obj.p
            }, ref,
            function (msg, ref) {
                on_ack(msg.data, ref);
            });
    }

    function feedback_submit(obj, ref, on_ack) {
        send_msg({type: "ctck_create_ticket_req", to: "ctck", way: "from"}, {
            title: obj.title,
            series: obj.series,
            content_item: obj.content_item,
            upload_pic: obj.upload_pic
        }, ref, function (msg, ref) {
            if (msg.data.result == "" && msg.data) {
                on_ack({result: msg.data.result, data: msg.data}, ref);
            }
        });
    }

    function test_lang_set(obj, ref, on_ack) {
        var lang_type = obj.lang_type;
        var req = obj.ver == "old" ? {sess: {}, lang: obj.lang} : {sess: {}, lang: obj.lang}
        send_msg(obj.type, req, ref, function (msg, ref) {
            var result = get_ret(msg);
            on_ack({result: result}, ref);
        })
    }

    var _this = this;
    _this.test_lang_set = test_lang_set;
    _this.get_download = get_download;
    _this.set_srv = set_srv;
    /* refer l_mcloud_account */
    /* pwd_encrypt(pwd_md5_hex) */
    _this.pwd_encrypt = pwd_encrypt;
    /* create_nid() */
    _this.create_nid = create_nid;
    /* sign_up({srv:"",user:"",password:""}, ref, on_ack) ret:{result:""} */
    _this.sign_up = sign_up;
    /* sign_in({srv:"",user:"",password:""}, ref, on_ack) ret:{result:""} */
    _this.sign_in = sign_in;
    /* sign_out(ref, on_ack) ret:{result:""} */
    _this.sign_out = sign_out;
    /* send_msg("type", {xxx}, ref, on_ack) ret:{message}*/
    _this.send_msg = send_msg;
    /* account_passwd_set({old_pass:"xxx",new_pass:"xxx",is_guest:"xxx"},ref,on_ack) ret{result:""}*/
    _this.account_passwd_set = account_passwd_set;

    /* refer mipc */
    _this.devs = {list: l_devs, get: ldev_get, get_index: ldev_index_get, add: ldev_add, del: ldev_del};
    /* devs_refresh({filter:"xxx"}, ref, on_ack) ret:{result:""}*/
    /* filter:  Refresh sn list. null indicate refresh all */
    _this.devs_refresh = devs_refresh;
    /* play({sn:"xxx",protocol:"xxx",token:"xxx"},ref,on_ack) ret{result:"",url:""}*/
    _this.play = play;
    /* record({sn:"xxx",keep_time:"xxx"}, ref, on_ack) ret:{result:""}*/
    _this.record = record;
    /* pic_get({sn:"xxx",token:"xxx"}, ref, on_ack) ret:{result:"",url:""}*/
    _this.pic_get = pic_get;
    /* pic_url_get({sn:"xxx",token:"xxx"}) ret:{""}*/
    _this.pic_url_get = pic_url_get;
    /* pushtalk({sn:"xxx",protocol:"xxx",token:"xxx"},ref,on_ack) ret{result:"",url:""}*/
    _this.pushtalk = pushtalk;
    /* ptz_ctrl({sn:"xxx",x:"xxx",y:"xxx"},ref,on_ack) ret{result:""}*/
    _this.ptz_ctrl = ptz_ctrl;
    /* playback({sn:"xxx",protocol:"xxx",token:"xxx"},ref,on_ack) ret{result:"",url:""}*/
    _this.playback = playback;
    /* msgs_get({sn:"xxx",start:"xxx",counts:"xxx",filter:""},ref,on_ack) ret{result:"",max_id:"",min_id:"",total:"",bound:"",messages:""}*/
    _this.msgs_get = msgs_get;
    /* dev_del({sn:"xxx"},ref,on_ack) ret{result:""}*/
    _this.dev_del = dev_del;
    /* dev_add({sn:"xxx",pass:"xxx"},ref,on_ack) ret{result:""}*/
    _this.dev_add = dev_add;
    /* cam_get({sn:"xxx"},ref,on_ack) ret{result:"",brightness:"",contrast:"",color_saturation:"",sharpness:"",day_night:"",flip:"",flicker_freq:""}*/
    _this.cam_get = cam_get;
    /* cam_get({sn:"xxx",brightness:"",contrast:"",color_saturation:"",sharpness:"",day_night:"",flip:"",flicker_freq:""},ref,on_ack) ret{result:""}*/
    _this.cam_set = cam_set;
    /* dev_info_get({sn:"xxx"},ref,on_ack) ret{result:"",sn:"",mfc:"",model:"",ver:"",name:"",logo:""}*/
    _this.dev_info_get = dev_info_get;
    /* nick_set({sn:"xxx",name:""},ref,on_ack) ret{result:""}*/
    _this.nick_set = nick_set;
    /* dev_passwd_set({sn:"",old_pass:"xxx",new_pass:"xxx",is_guest:"xxx"},ref,on_ack) ret{result:""}*/
    _this.dev_passwd_set = dev_passwd_set;
    /* net_get({sn:"xxx"},ref,on_ack) ret{result:"",networks:"",dns:""}*/
    _this.net_get = net_get;
    /* net_set({sn:"xxx",networks:"",dns:""},ref,on_ack) ret{result:""}*/
    _this.net_set = net_set;
    /* osd_get({sn:"xxx"},ref,on_ack) ret{result:"",text:"",text_enable:"",week_enable:"",date_format:"",date_enable:"",time_12h:"",time_enable:""}*/
    _this.osd_get = osd_get;
    /* osd_set({sn:"xxx",text:"",text_enable:"",week_enable:"",date_format:"",date_enable:"",time_12h:"",time_enable:""},ref,on_ack) ret{result:""}*/
    _this.osd_set = osd_set;
    /* sd_get({sn:"xxx"},ref,on_ack) ret{result:"",enable:"",status:"",capacity:"",usage:"",availableSize:""}*/
    _this.sd_get = sd_get;
    /* sd_set({sn:"xxx",ctrl_type:"",enable:""},ref,on_ack) ret{result:""}*/
    _this.sd_set = sd_set;
    /*alarm_trigger_get({sn:"xxx"},ref,on_ack) ret{result:"",io_input:"",io_output:"",sensitivity:"",night_sensitivity:""}*/
    _this.alarm_trigger_get = alarm_trigger_get;
    /* alarm_trigger_get({sn:"xxx",io_input:"",io_output:"",sensitivity:"",night_sensitivity:""},ref,on_ack) ret{result:""}*/
    _this.alarm_trigger_set = alarm_trigger_set;
    /*alarm_action_get({sn:"xxx"},ref,on_ack) ret{result:"",enable:"",actions:""}*/
    _this.alarm_action_get = alarm_action_get;
    /* alarm_action_set({sn:"xxx",enable:"",actions:""},ref,on_ack) ret{result:""}*/
    _this.alarm_action_set = alarm_action_set;
    /* alert_task_set({sn:"xxx"},ref,on_ack) ret{result:"",enable:"",full_time:"",times:""}*/
    _this.alert_task_set = alert_task_set;
    /* alert_task_get({sn:"xxx",enable:"",full_time:"",times:""},ref,on_ack) ret{result:""}*/
    _this.alert_task_get = alert_task_get;
    /*motion_mask_get({sn:"xxx",ref,on_ack})*/
    _this.motion_mask_get = motion_mask_get;
    /*motion_mask_set({sn:"xxx",conf:""},ref,on_ack ret{result:"",})*/
    _this.motion_mask_set = motion_mask_set;
    /* record_get({sn:"xxx"},ref,on_ack) ret{result:"",enable:"",full_time:"",times:"",sd_ready:""}*/
    _this.record_get = record_get;
    /* record_get({sn:"xxx",enable:"",full_time:"",times:""},ref,on_ack) ret{result:""}*/
    _this.record_set = record_set;
    /* time_get({sn:"xxx"},ref,on_ack) ret{result:"",timezone:"",auto_sync:"",ntp_addr:"",hour:"",min:"",sec:"",year:"",mon:"",day:""}*/
    _this.time_get = time_get;
    /* time_set({sn:"xxx",type:"",timezone:"",auto_sync:"",ntp_addr:"",hour:"",min:"",sec:"",year:"",mon:"",day:""},ref,on_ack) ret{result:""}*/
    _this.time_set = time_set;
    /* upgrade_get({sn:"xxx",check:""},ref,on_ack) ret{result:"",status:"",progress:"",ver_current:"",ver_valid:"",ver_extends:"",chang_history:""}*/
    _this.upgrade_get = upgrade_get;
    /* upgrade_set({sn:"xxx"},ref,on_ack) ret{result:""}*/
    _this.upgrade_set = upgrade_set;
    /* restore({sn:"xxx",keep_extends_cofig:""},ref,on_ack) ret{result:""}*/
    _this.restore = restore;
    /* reboot({sn:"xxx"},ref,on_ack) ret{result:""}*/
    _this.reboot = reboot;
    /* audio_get({sn:"xxx"},ref,on_ack) ret{result:"",mic_level:"",speaker_level:""}*/
    _this.audio_get = audio_get;
    /* audio_set({sn:"xxx",mic_level:"",speaker_level:""},ref,on_ack) ret{result:""}*/
    _this.audio_set = audio_set;
    /* dev_msg_listener_add(ref,on_ack) ret{msg:""}*/
    _this.dev_msg_listener_add = dev_msg_listener_add;
    /* dev_msg_listener_del(ref,on_ack) ret{msg:""}*/
    _this.dev_msg_listener_del = dev_msg_listener_del;
    /* dev_activate({sn:"xxx",activationCode:""},ref,on_ack) ret{msg:""}*/
    _this.dev_activate = dev_activate;
    /* svr_dev_get({},ref,on_ack) ret{result:"",type:"",sn:"",nick:"",ver:""}*/
    _this.svr_dev_get = svr_dev_get;
    /* set_fix */
    //fix={type:funcion(type){},/* return fixed type; */req:{function(type,req){ /* return fixed req data */},ack:{function(type,ack){ /* return fixed ack data */}
    _this.set_fix = function (fix) {
        l_fix = fix;
    };
    /*curise_get({sn:"xxxx"},ref,on_ack)*/
    _this.curise_get = curise_get;
    /*curise_set({sn:"xxxx",type:"",index:""},ref,on_ack)*/
    _this.curise_set = curise_set;
    /*msg_filter_get({sn:"xxxx"},ref,on_ack)*/
    _this.msg_filter_get = msg_filter_get;
    /*msg_filter_set({sn:"xxxx",alert_enable:"",record_enable:""},ref,on_ack)*/
    _this.msg_filter_set = msg_filter_set;
    /*box_get({sn:"xxxx",flag:"",[start_time:"",end_time:""]},ref,on_ack) ret{result:"",date_infos:""|ipcs:""|segs:""|segs_sdc:""}*/
    _this.box_get = box_get;
    /*box_conf_get({sn:"xxxx"},ref,on_ack)      ret{result:"",conf:""}*/
    _this.box_conf_get = box_conf_get;
    /*box_login({sn:"xxxx",username:"",password:"",no_ack:"",record:""},ref,on_ack)*/
    _this.box_login = box_login;
    /*ipcs_get({sn:"xxxx"},ref,on_ack)      ret{result:"",ipcs:""}*/
    _this.ipcs_get = ipcs_get;
    /*pic_base64_get({sn:"xxxx",token:""},ref,on_ack)      ret{result:"",frame:""}*/
    _this.pic_base64_get = pic_base64_get;
    _this.box_set = box_set;
    _this.time_zone_get = time_zone_get;

    /*binding_email({email:"xxxx"},ref,on_ack) ret{result:""}*/
    _this.binding_email = binding_email;
    /*recovery_binding_email({email:"xxxx",user:"xxxx",lang:"xxxx"})*/
    _this.recovery_binding_email = recovery_binding_email;
    /*get the notification information*/
    _this.cpns_get = cpns_get;
    /*get the accounts of binding email info*/
    _this.binding_email_get = binding_email_get;
    _this.desc_get = desc_get;
    /*get the scene of  info*/
    _this.scene_get = scene_get;
    /*search peripheral*/
    _this.exdev_discover = exdev_discover;
    /*add peripheral*/
    _this.exdev_add = exdev_add;
    /*delete peripheral*/
    _this.exdev_del = exdev_del;
    /*get the peripheral of  info*/
    _this.exdev_get = exdev_get;
    _this.exdev_set = exdev_set;
    /*set the scene of  info*/
    _this.scene_set = scene_set;
    _this.schedule_get = schedule_get;
    _this.schedule_set = schedule_set;
    _this.hardware_test = hardware_test;
    _this.hardware_test_get = hardware_test_get;
    _this.rf_test = rf_test;
    _this.get_download = get_download;
    _this.feedback_submit = feedback_submit;
    _this.test_ptz_ctrl = test_ptz_ctrl;
}
;
///<jscompress sourcefile="mlib.cloud.entry.js" />
function mcloud_entry(data,callback) {
    var urls_http = ["52.8.41.82:7080",
        "209.133.212.170:7080",
        "149.202.201.87:7080",
        "119.23.57.95:7080"];
    var urls_https=["www.mipcm.com:7443","www.vimtag.com:7446","www.ebitcam.com:7445","www.vsmahome.com:7444"];

    function check_link(index) {
        var temp;
        if("https:" == window.location.protocol){
            if(index >= urls_https.length){
                return;
            }
            temp = urls_https[index];
        }else{
            if(index >= urls_http.length){
                return;
            }
            temp = urls_http[index];
        }
        msdk_agent.send_msg({type: "cmipcgw_get_req", to: "cmipcgw", srv: temp}, {client: {mode: "user", id: data.userName, param: [{name: "appid",value: g_appId}]}}, {},
            function (msg, ref) {
                if (msg && msg.data.result === '') {
                    if("https:" == window.location.protocol){
                        g_server_https = msg.data.server.signal[2];
                        g_server_device = g_server_https.replace("https://", "").replace("/ccm", "");
                    }else{
                        g_server_http = msg.data.server.signal[0];
                        g_server_device = g_server_http.replace("http://", "").replace("/ccm", "");
                    }
                    if (msdk_agent) {
                        msdk_agent.set_srv(g_server_device);
                    }
                    callback();
                } else {
                    check_link(index+1);
                }
            });
    }
    check_link(0)
};
///<jscompress sourcefile="mlib.core.base.js" />
/*
    depends : none
    author: chengzhiyong date:2014-08-13 action:cut from core.js
*/

/* mining lib js */
function meval(s){ try{return eval("(" + s + ")"); }catch(e){return null;} }

function mobj_merge(d, s)
{
    var i, v, o, n;
    if (!s) return d;

    for(n in s)
    {
        if(((v = s[n]) != undefined) && (null != v))
        {
            if (v.constructor === Array)
            {
                d[n] = o = [];
                for (i = 0, len = v.length; i < len; i++)
                {
                    o[i] = v[i];
                }
            }
            else if(typeof(v) != "object"){d[n] = v;}
            else{
                if (((o = d[n]) == undefined) || (null == o)){ d[n] = (o = {}); };
                obj_merge(o, v);
            }
        }
    }
    return d;
}

/*-----------------system object extention tool---------------------------*/
(function(window, String, Date, Array, Function){
    var s_prototype = "prototype",
        Array_prototype = Array[s_prototype],
        String_prototype = String[s_prototype],
        Date_prototype = Date[s_prototype],
        Function_prototype = Function[s_prototype];
        
    String_prototype.cmp = function (s)
    {
        var i, sub, me = this, len = Math.min(me.length, s.length);
        for(i = 0; i < len; i++){ if(sub = me.charCodeAt(i) - s.charCodeAt(i)){ return sub; }; };
        return me.length - s.length;
    }
    String_prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, "");}

    Date_prototype.toString1 = function ()
    {
        var me = this,
            mon = me.getMonth() + 1,
            day = me.getDate(),
            hour = me.getHours(),
            min = me.getMinutes(),
            sec = me.getSeconds();
    
        return me.getFullYear() + "年"
            + ((mon < 10) ? "0":"") + mon + "月"
            + ((day < 10) ? "0":"") + day + "日"
            + ((hour < 10) ? "0":"") + hour + ":"
            + ((min < 10) ? "0":"") + min + ":"
            + ((sec < 10) ? "0":"") + sec;
    }

    Array_prototype.filter = Array_prototype.filter || function (fun)
    {
        var i, val, me = this, len = me.length, res = [], thisp = arguments[1];
        if (typeof fun != "function")
        {
            throw new TypeError();
        }

        for (i = 0; i < len; i++)
        {
            if (i in me)
            {
                val = me[i];
                if (fun.call(thisp, val, i, me))
                {
                    res.push(val);
                }
            }
        }

        return res;
    };

    Array_prototype.some = Array_prototype.some || function(fun /*, thisp*/)
    {
        var me = this, i, len = me.length, thisp = arguments[1];
        if (typeof fun != "function")
        throw new TypeError();

        for (i = 0; i < len; i++)
        {
            if (i in me && fun.call(thisp, me[i], i, me))
            return true;
        }

        return false;
    };

    Array_prototype.forEach = Array_prototype.forEach || function(fun /*, thisp*/)
    {
        var i, me = this, len = me.length, thisp = arguments[1];
        if (typeof fun != "function")
        throw new TypeError();

        for (i = 0; i < len; i++)
        {
            if (i in me)
            fun.call(thisp, me[i], i, me);
        }
    };

    (window.publisher = function()
    {
        this.subscribers = [];
    })[s_prototype].deliver = function ()
    {
        var i = 0, obj, me = this, len, subscribers = me.subscribers, prev_len = subscribers.length;
        while(i < prev_len)
        {
            obj = subscribers[i];
            if (me.filter && !me.filter (obj, arguments)) { i++; continue; }
            obj.fn.apply (obj.fn, arguments);
            len = subscribers[s_length];
            if (prev_len > len) { prev_len = len; }
            else { i++; }
        }    
        return me;
    }

    Function_prototype.subscribe = function (_publisher)
    {
        var len, i = 1, obj = {}, me = this, already_exists = _publisher.subscribers.some (
            function (el) {
                return el.fn === me;
            }
        );
    
        if (!already_exists) {
            for (len = arguments.length; i < len; i++)
            {
                obj ["arg" + (i - 1)] = arguments[i];
            }
    
            obj.fn = me;
            _publisher.subscribers.push (obj);
        }
    
        return me;
    }

    Function_prototype.unsubscribe = function (_publisher)
    {
        var me = this;
        _publisher.subscribers = _publisher.subscribers.filter (
            function (el) {
                return el.fn !== me;
            }
        );
    
        return me;
    };
})(window, String, Date, Array, Function);
/*-----------------system object extention tool---------------------------*/

function is_ancestor (ancestor, child)
{
    var e, body = document.body, parentNode = "parentNode";
    if (ancestor == body)
    {
        return true;
    }

    for (e = child[parentNode]; e && e != body; e = e[parentNode])
    {
        if (ancestor === e)
        {
            return true;
        }
    }

    return false;
}

function getElementsByClass (searchClass,node,tag)
{
    var classElements = [];
    if ( node == null )
    node = document;
    if ( tag == null )
    tag = '*';
    var els = node.getElementsByTagName(tag);
    var elsLen = els.length;
    var pattern = new RegExp("(^|\\s)"+searchClass+"(\\s|$)");
    for (i = 0, j = 0; i < elsLen; i++) {
        if (pattern.test(els[i].className)) {
            classElements[j] = els[i];
            j++;
        }
    }
    return classElements;
}

(function (window, undefined) {
    var html_expr = /^(div|span|button|input|table|row|col|td|tr|option|select|img)/;

    function hehe (selector, context) {
        var match, doc = context || document;

        switch (typeof (selector))
        {
            case 'string':
            {
                var name = selector.substring(1);
                switch(selector.charAt(0)){
                    case '#':
                        return doc.getElementById(name);
                    case '.':
                        return (doc.getElementsByClassName ? doc.getElementsByClassName (name) : getElementsByClass(name, doc));
                    case '/':
                        return doc.getElementsByTagName(name);
                    default:
                        return doc.getElementsByName(selector);
                }
            }

            case 'object':
            {
                return selector;
            }

            case 'function':
            {
                hehe.funcs.push (selector);
            }
        }
    }

    hehe.funcs = [];        // The array of functions to call when the document loads
    hehe.loaded = false;    // The function have not been run yet

    // Run all registered functions in the order in which there were registered.
    // It is safe to call hehe.run() more than once: invocations after the
    // first do noting. It is safe for an initializtion function to call
    // $() to register another function
    hehe.run = function () {
        if (hehe.loaded) return;       // If we've  already run, do nothing

        for (var i = 0; i < hehe.funcs.length; i++) {
            hehe.funcs[i]();
        }

        hehe.loaded = true;         // Remember that we've already run once
        delete hehe.funcs;          // But don't remember the functions themselves.
        delete hehe.run;            // And forget about this function too!
    }

    // Register hehe.run() as the onload event handler for the window
    if (window.addEventListener) { window.addEventListener("load", hehe.run, false); }
    else if (window.attachEvent) window.attachEvent ("onload", hehe.run);
    else window.onload = hehe.run;

    hehe.service_gid = 1052078;
    hehe.ie6 = (navigator.userAgent.indexOf ('MSIE 6.') >= 0);
    hehe.ie = (navigator.userAgent.indexOf('MSIE') >= 0);

    window.hehe = window.mx = hehe;
})(window);

function sound_play(wav, swf)
{
    var player = window.snd_player;
    if(!!player)
    {
        if(!hack.ie){ player.innerHTML = ""; };
        player.parentNode.removeChild(player);
    }
    window.snd_player = (player = document.createElement(hack.ie?"embed":"bgsound"));
    player.style.cssText = "width:1px;height:1px;left:0px;top:0px;";
    player.src = (hack.ie?wav:swf);
    if(hack.ie){player.src = wav;}
    else{player.innerHTML = "<embed width='0' height='0' src='" + swf + "'></embed>";}
    document.body.appendChild(player);
}

function dom_get_item_by_name(root, tag_name, name)
{

    if(nodes = root.getElementsByTagName(tag_name))
    {

        for(node_index = 0; node_index < nodes.length; ++node_index)
        {
            node = nodes[node_index];
            if(name == node.getAttribute("name")){ return node; }
        }
    }
    return null;
}

/*-----------------prompt_ex--------------------------------------------------*/

/* title_twinkle() null clear. */
(function(){
    var oldv, newv, tm, is_new, doc = document, t = "title";
    window.title_twinkle = function(title){
        if (tm)
        {
            clearInterval (tm);
            tm = null;
            if (oldv) doc[t] = oldv;
        }

        if(title) {
            oldv = doc[t];
            doc[t] = (newv = title);
            tm = setInterval(function(){ doc[t] = (is_new = !is_new)?oldv:newv; }, 1000);
        }
    }
})();

function insert_after (node, after)
{
    if (after.nextSibling)
    {
        after.parentNode.insertBefore (node, after.nextSibling);
    }
    else
    {
        after.parentNode.appendChild (node);
    }
}

function remove_self (node)
{
    if (node && node.parentNode)
    {
        node.parentNode.removeChild (node);
    }

    return node;
}

// Get the X coordinate of the element e.
function get_x (e) {
    var x = 0;                  // Start with 0
    while (e) {                 // Start at element e
        x += e.offsetLeft;      // Add in the offset
        e = e.offsetParent;     // Add move up to the offsetParent
    }

    return x;
}

// Get the Y coordinate of the element e.
function get_y (element) {
    var y = 0;
    for (var e = element; e; e = e.offsetParent)            // Iterate the offsetParents
        y += e.offsetTop;

    // Now loop up through the ancestors of the element, looking ofr
    // any that have scrollTop set. Subtract these scrolling values from
    // the total offset. However, we must be sure to stop the loop before
    // we reach document.body, or we'll take document scrolling into account
    // and end up converting our offset to window coordinates.
    for (e = element.parentNode; e && e != document.body; e = e.parentNode)
    {
        if (e.scrollTop) y -= e.scrollTop;
    }

    // This is the Y coordinate with document-internal scrolling accounted for
    return y;
}

function viewport_width () {
    return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
}

function viewport_height () {
    return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
}



;
///<jscompress sourcefile="mlib.core.codec.js" />
/*
    mcodec
    depends : none
    
    ----history----------
    author: chengzhiyong date:2014-08-13 action: update to indepent meval
*/
var mcodec = null;
(function(Array){
    var s_object    = "object",
        fn_v2c      = String.fromCharCode,
        fn_meval    = function (s){ try{return eval("(" + s + ")"); }catch(e){return null;} },
        utf8_c      = [0x00,0xc0,0xe0,0xf0,0xf8,0xfc],
        s_hex       = "0123456789abcdef",
        s_base62    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        s_base64    = s_base62 + "+/=",
        s_mining64  = s_base62 + "_.-",
        uri_map     = {},
        html_map    = [['&','&amp;'], ['\\n','&#10;'], ['\\r','&#13;'], ['\\t','&#9;'], ['`','&#96;'], ['\'','&#39;'], ['"','&quot;'], [' ','&nbsp;'], ['<','&lt;'], ['>','&gt;']],
        ubb_map = [ {s:/\[img\]([^\]]*)\[\/img\]/gi, d:'<img src="$1" border="0"/>'},
                    {s:/\[flash\]([^\]]*)\[\/flash\]/gi,
                     d:'<embed type="application/x-shockwave-flash"'
                        + ' pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"'
                        + ' quality="heigh" src="$1"/></embed>'},
                    {s:/\[url=([^\]]*)\]([^\]]*)\[\/url\]/gi, d:'<a href="$1" target="_blank">$2</a>'},
                    {s:/\[url\]([^\]]*)\[\/url\]/gi, d:'<a href="$1" target="_blank">$1</a>'},
                    {s:/\[email=([^\]]*)\]([^\]]*)\[\/email\]/gi, d:'<a href="mailto:$1">$2</a>'},
                    {s:/\[email\]([^\]]*)\[\/email\]/gi, d:'<a href="mailto:$1">$1</a>'},
                    {s:/\[color=([^\]]*)\]([^\]]*)\[\/color\]/gi, d:'<font color="$1">$2</font>'},
                    {s:/\[face=([^\]]*)\]([^\]]*)\[\/face\]/gi, d:'<font face="$1">$2</font>'},
                    {s:/\[size=1\]([^\]]*)\[\/size\]/gi, d:'<font size="1">$1</font>'},
                    {s:/\[size=2\]([^\]]*)\[\/size\]/gi, d:'<font size="2">$1</font>'},
                    {s:/\[size=3\]([^\]]*)\[\/size\]/gi, d:'<font size="3">$1</font>'},
                    {s:/\[size=4\]([^\]]*)\[\/size\]/gi, d:'<font size="4">$1</font>'},
                    {s:/\[align=([^\]]*)\]([^]]*)\[\/face\]/gi, d:'<align="$1">$2</align>'},
                    {s:/\[fly\]([^\]]*)\[\/fly\]/gi, d:'<marquee>$1</marquee>'},
                    {s:/\[b\]([^\]]*)\[\/b\]/gi, d:'<b>$1</b>'},
                    {s:/\[i\]([^\]]*)\[\/i\]/gi, d:'<i>$1</i>'},
                    {s:/\[u\]([^\]]*)\[\/u\]/gi, d:'<u>$1</u>'},
                    {s:/\[code\]([^\]]*)\[\/code\]/gi, d:'<pre><font size="2" face="Verdana,Arial">$1</font></pre>'},
                    {s:/\[list\]([^\]]*)\[\/list\]/gi, d:'<ul>$1</ul>'},
                    {s:/\[list=1\]([^\]]*)\[\/list\]/gi, d:'<ol type="1">$1</ol>'},
                    {s:/\[list=a\]([^\]]*)\[\/list\]/gi, d:'<ol type="a">$1</ol>'},
                    {s:/\[\*\]([^\]]*)\[\/\*\]/gi, d:'<li>$1</li>'},
                    {s:/\[quote\]([^\]]*)\[\/quote\]/gi, d:'<blockquote>$1</blockquote>'}],
        vi,vs;
        
        for(vi = 0, vs = "\0\t\n\r\"\\' #%&+-_./:;=?@"; vi < vs.length; ++vi)
        {
            uri_map[vs.charAt(vi)] = 1;
        }
        
        function fn_c2hex(pfx, v){ return (pfx?pfx:"%") + s_hex.charAt(v >> 4) + s_hex.charAt(v & 15)}
        function fn_hex2i(v){ return ((48 <= v)&&(57 >= v))?(v - 48):(((65 <= v)&&(71 >= v))?(v - 55):(((97 <= v)&&(102 >= v))?(v - 87):0));}
        function fn_i2a(v, min_len)
        {
            var i, j, c, r = "", s = "" + v;
            if(0 == s.indexOf("0x"))
            {/* hex string */
                for(i = s.length - 1; i > 1;)
                {
                    for(c = 0, j = 0; (j < 8) && (i > 1) ; --i, j += 4)
                    {
                        c += (fn_hex2i(s.charCodeAt(i)) << j);
                    }
                    r = fn_v2c(c) + r;
                }
            }
            else
            {/* number */
                for(i = 24; i >= 0; i -= 8)
                {
                    if(v >= (1 << i)){ r += fn_v2c((v >> i) & 0xff);}
                }
            }
            while(r.length < min_len){ r = "\0" + r; };
            return r;
        }
        
        function fn_str_2_b64(s, mining_64){
            var v, sub_bits, bit, j, i = 0, r = "", len = s.length, map = mining_64?s_mining64:s_base64;
            while(i<len)
            {
                for(sub_bits = 0; (sub_bits < 24)&&(i < len); sub_bits += 8,++i)
                { 
                    v = (v << 8) + s.charCodeAt(i); 
                }
                for(j = 0; j < 24; j += 6, v &= ((1 << (sub_bits - j)) - 1))
                {
                    bit = sub_bits - j - 6;
                    r += (j < sub_bits)?map.charAt((bit < 0)?(v << -bit):(v >> bit)):"";
                }
            }            
            return r;
        }
        
        function fn_b64_2_binary(mining_64){ 
            //if(!mining_64.length||mining_64.length%4) 
                //return null; 
            //var s_mining64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-"; 
            if(!mining_64) return ;
            var index64=[]; 
            for(var i=0;i<s_mining64.length;i++) 
                index64[s_mining64.charAt(i)]=i; 
            var c0,c1,c2,c3,b0,b1,b2; 
            var len=mining_64.length; 
            var len1=len; 
            if(mining_64.charAt(len-1)=='-') 
                len1-=4; 
            var result=[]; 
            for(var i=0,j=0;i<len1;i+=4)
            { 
                c0=index64[mining_64.charAt(i)]; 
                c1=index64[mining_64.charAt(i+1)]; 
                c2=index64[mining_64.charAt(i+2)]; 
                c3=index64[mining_64.charAt(i+3)]; 
                b0=(c0<<2)|(c1>>4); 
                b1=(c1<<4)|(c2>>2); 
                b2=(c2<<6)|c3; 
                result.push(b0&0xff); 
                result.push(b1&0xff); 
                result.push(b2&0xff); 
            } 
            if(len1!=len)
            { 
                c0=index64[mining_64.charAt(i)]; 
                c1=index64[mining_64.charAt(i+1)]; 
                c2=mining_64.charAt(i+2); 
                b0=(c0<<2)|(c1>>4); 
                result.push(b0&0xff); 
                if(c2!='-')
                { 
                    c2=index64[c2]; 
                    b1=(c1<<4)|(c2>>2); 
                    result.push(b1&0xff); 
                } 
            } 
            return result; 
        } 

				function fn_binary_2_b64(s, mining_64){
            var v, sub_bits, bit, j, i = 0, r = "", len = s.length, map = mining_64?s_mining64:s_base64;
            while(i<len)
            {
                for(sub_bits = 0; (sub_bits < 24)&&(i < len); sub_bits += 8,i++)
                { 
                    v = (v << 8) + s[i]; 
                }
                for(j = 0; j < 24; j += 6, v &= ((1 << (sub_bits - j)) - 1))
                {
                    bit = sub_bits - j - 6;
                    r += (j < sub_bits)?map.charAt((bit < 0)?(v << -bit):(v >> bit)):"";
                }
            }            
            return r;
        }

        function fn_str_2_uri_param(s, pfx)
        {
            var c, v, i, j, n, len, cs, r = "";
            for(i = 0, len = s.length; i < len; ++i)
            {
                if(127 >= (v = s.charCodeAt(i))){r += uri_map[c = s.charAt(i)]?fn_c2hex(pfx,v):c; }
                else
                {/* wchar */
                    cs = "";
                    n = (v < 0x80)?0:((v < 0x800)?1:((v < 0x10000)?2:((v < 0x400000)?3:((v < 0x8000000)?4:5))));
                    for(j = n; j > 0; --j, v = v >> 6){ cs = fn_c2hex(pfx,0x80 | (v & 0x3f)) + cs; };
                    v |= utf8_c[n];
                    r += fn_c2hex(pfx,v) + cs;
                }
            }
            return r;
        }

        function fn_uri_param_2_str(s, pfx)
        {
            var c, v, i, imx = s.length, j, k, kmx, r = "";
            pfx = pfx||'%';
            for(i = 0; i < imx;)
            {
                if((pfx != s.charAt(i)) || ((i + 3) > imx)){ r += s.charAt(i); ++i; }
                else
                {
                    c = (fn_hex2i(s.charCodeAt(i + 1) & 0xff) << 4) + fn_hex2i(s.charCodeAt(i + 2) & 0xff);
                    for(j = utf8_c.length, v = 0; j > 1; --j)
                    {
                        if(c >= utf8_c[j - 1])
                        {
                            if((kmx = (i + (3 * j))) <= imx)
                            {
                                v = c - utf8_c[j - 1];
                                for(k = i + 3; k < kmx; k += 3)
                                {
                                    if(pfx != s.charAt(k)){break;}/* invalid */
                                    v = (v << 6) + (((fn_hex2i(s.charCodeAt(k + 1) & 0xff) << 4) + fn_hex2i(s.charCodeAt(k + 2) & 0xff)) & 0x5f);
                                }
                                if(k == kmx){ r += fn_v2c(v); i += (j * 3); }; /* invalid */
                            }
                            break;
                        }
                    }
                    if(0 == v){ r += fn_v2c(c); i += 3; };
                }
            }
            return r;
        }

        function fn_uri_2_obj(s)
        {/*  !!!!!!!!!!!!!!!!!!not match obj_2_uri, if match it need change this, this function just support 1-level param */
            var ret = {}, c, ni, vi, nlen, vlen, i, imx = s.length,
                nc = ((0 < imx) && ('-' == s.charAt(0)))?'-':'=', vc = ('-' == nc)?'-':'&', pfx = (vc == "-")?"_":"%";
            for(i = 1; i < imx; ++i)
            {
                for(ni = i; ((i < imx) && (nc != (c = s.charAt(i))) && (c != vc)); ++i){};/* name*/
                nlen = i - ni;
                i += (((i < imx) && (nc == c))?1:0);

                for(vi = i; ((i < imx) && (vc != s.charAt(i))); ++i){};/*value*/
                vlen = i - vi;

                if((0 < nlen) && (0 < vlen)){ ret[s.substr(ni, nlen)] = fn_uri_param_2_str(s.substr(vi, vlen), pfx); };
            }
            return ret;
        }

        function fn_obj_2_url(obj, split/* default is "&" */)
        {
            var nc = ("-" == split)?"-":"=", vc = ("=" == nc)?"&":"-", pfx = ("-" == split)?"_":"%";
            function _obj_2_uri(obj, path)
            {
                var n, v, x, n_path, s = (obj.constructor == Array)?(path + "__x_countz_" + nc + obj.length):"";
                for(n in obj)
                {
                    if((undefined != (v = obj[n])) && (null != v))
                    {
                        if(x = ('%' == (""+n).charAt(0))){ n = n.substr(1); };
                        n_path = path + ((0 != n)?((("" == path)?"d":"_") + n):"");

                        if (typeof(v) != "function"){
                            if(typeof(v) == s_object)
                            {
                                s += ((""==s)?"":vc) + ((v.constructor == Array)?"":(n_path + nc +"1" + vc)) + _obj_2_uri(v, n_path);
                            }
                            else
                            {
                                s += ((""==s)?"":vc) + n_path + nc + (x?v:fn_str_2_uri_param("" + v, pfx));
                            }
                        }
                    }
                }
                return s;
            };
            return _obj_2_uri(obj, "", split);
        }

        function fn_json_txt_2_url(s, split/* "&" | "-" */)
        {
            var b = s.indexOf("("), e = s.lastIndexOf(")");
            if((0 < b) && (e > b)){ s = s.substring(b+1, e); };
            return fn_obj_2_url(fn_meval(s), split);
        }

        function fn_obj_2_form(obj, action)
        {
            function _obj_2_form(obj, path, cpath)
            {
                var n, v, n_path, n_cpath, arry = obj.constructor == Array,
                    s = arry?("<input type=\"hidden\" name=\"" + path + "__x_countz_\" value=\"" + obj.length +"\"/>\r\n"):"";
                for(n in obj)
                {
                    if((undefined != (v = obj[n])) && (null != v))
                    {
                        n_path = path + ((0 != n)?((("" == path)?"d":"_") + n):"");
                        n_cpath = "" + cpath + (arry?("[" + n + "]"):((("" == cpath)?"":".") + n));
                        if(typeof(v) == s_object)
                        {/* check is object, create a div */
                            s += "<div style=\"border:1px solid #00ffff;padding:2px;\"><br/>\r\n" + ((0 == n)?"":("<input type=\"hidden\" name=\"" + n_path + "\" value=\"1\"/>\r\n")) + _obj_2_form(v, n_path, n_cpath) + "</div>\r\n";
                        }
                        else
                        {
                            s += "<label>" + n_cpath + ":</label>" + "<input type=\"text\" name=\""+ n_path +"\" value=\"" + v + "\"/><br/>";
                        }
                    }
                }
                return s;
            };
            return "<form action=\"" + action + "\" method=\"get\" style=\"border:2px solid blue;padding:1px;\"><button id=\"submit\" type=\"submit\">提交</button><br/>" + _obj_2_form(obj, "", "") + "</form>";
        }

        function fn_obj_2_str(obj)
        {
            if(obj)
            {
                var n, v, i, c, cnt = 0, len, arry = obj.constructor == Array, s = arry?"[":"{";
                for(n in obj)
                {
                    v = obj[n];
                    s += ((0 == (cnt++))?"":",") + (arry?"":(n + ":"));
                    switch(typeof(v))
                    {
                    case "number":{ s += v; break; }
                    case "object":{ s += fn_obj_2_str(v); break; }
                    case "string":
                        s += "\"";
                        for (i = 0, len = v.length; i < len; ++i)
                        {
                            c = v.charAt(i);
                            s += ((c != '\"') && (c != '\\'))?(('\n' == c)?"\\n":((c == '\r')?"\\r":c)):("\\" + c);
                        }
                        s += "\"";
                        break;
                    }
                }
                return s + (arry?"]":"}");
            }
            return "";
        }

        function fn_json_txt_2_form(s, action)
        {
            var b = s.indexOf("("), e = s.lastIndexOf(")");
            if((0 < b) && (e > b)){ s = s.substring(b+1, e); };
            return fn_obj_2_form(fn_meval(s), action);
        }

        function fn_str_2_html(s){ for( var i = 0; i < html_map.length; ++i ){ s = s.replace( new RegExp( html_map[i][0], 'g' ), html_map[i][1]); }; return s; }
        function fn_html_2_str(s){ for( var i = html_map.length - 1; i >= 0; --i ){ s = s.replace( new RegExp( html_map[i][1], 'g' ), html_map[i][0]); }; return s; }
        function fn_ubb_2_html(s){ for( var r, i = ubb_map.length; i >= 0; --i){ r = ubb_map[i]; s = s.replace(r.s, r.d); }; return s; }

        function fn_hex_2_uri_param(s)
        {
            var i, r = "";
            for(i = 0; i < s.length; ++i){ r += ((0 == (1&i))?"%":"") + s.charAt(i); };
            return r;
        }
        
	/* id_type:[ 0:sid, 1:tid, 2:lid ] */
        function fn_nid(seq, id, share_key, id_type, username, password, md5_ex, md5_hex_name)
        {
            var s_seq = fn_i2a(seq), 
                s_id = id?fn_i2a(id):"", 
                s_id_type = id?fn_i2a(id_type):"", 
                s_password_md5 = password?fn_i2a("0x" + md5_ex[md5_hex_name](password)):"",
                s_nid_idty = (s_seq?      (fn_v2c((2 << 5) + s_seq.length)       + s_seq):"") 
                           + (s_id?       (fn_v2c((3 << 5) + s_id.length)        + s_id):"")
                           + (s_id_type?  (fn_v2c((4 << 5) + s_id_type.length)   + s_id_type):"")
                           + (username?   (fn_v2c((5 << 5) + username.length)    + username):""),
                s_md5_src =  s_nid_idty
                           + (share_key?(fn_v2c((0 << 5) + share_key.length) + share_key):"")
                           + (s_password_md5?(fn_v2c((0 << 5) + s_password_md5.length) + s_password_md5):"")
                s_md5 = fn_i2a("0x" + md5_ex[md5_hex_name](s_md5_src));
           return  fn_str_2_b64(fn_v2c((1 << 5) + s_md5.length) + s_md5 + s_nid_idty, 1);
        }

        /* asigned to window */
        mcodec = {
            magic:"mcodec",
            str_2_b64:fn_str_2_b64,
            b64_2_binary:fn_b64_2_binary,
            binary_2_b64:fn_binary_2_b64,
            str_2_uri_param:fn_str_2_uri_param,
            uri_param_2_str:fn_uri_param_2_str,
            uri_2_obj:fn_uri_2_obj,
            obj_2_url:fn_obj_2_url,
            json_txt_2_url:fn_json_txt_2_url,
            obj_2_form:fn_obj_2_form,
            json_txt_2_form:fn_json_txt_2_form,
            obj_2_str:fn_obj_2_str,
            str_2_html:fn_str_2_html,
            html_2_str:fn_html_2_str,
            ubb_2_html:fn_ubb_2_html,
            hex_2_uri_param:fn_hex_2_uri_param,
            nid:fn_nid
        }
})(Array);
;
///<jscompress sourcefile="mlib.core.evt.js" />
/* 
    mevt
    depends : none
    author : chengzhiyong    date : 2014-08-13  action: add denpends info
*/
var mevt = null;
(function(document){
    var s_attachEvent = "attachEvent",
        s_addEventListener = "addEventListener",
        s_detachEvent = "detachEvent",
        s_removeEventListener = "removeEventListener",
        s_preventDefault = "preventDefault",
        s_stopPropagation = "stopPropagation",
        s_fromElement = "fromElement",
        s_relatedTarget = "relatedTarget",
        v_null = null,
        
        evt_props = "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" ");
        
        /* interface */
        mevt = 
        {        
            /* guid:1, */
            bind:function(element, type, handler)
            {
                element[s_attachEvent]?element[s_attachEvent]('on' + type, handler):(
                        (element[s_addEventListener])?element[s_addEventListener](type, handler, 0):(element['on' + type] = handler))
            },
        
            unbind:function(element, type, handler)
            {
                element[s_detachEvent]?element[s_detachEvent]('on' + type, handler):(
                        (element[s_removeEventListener])?element[s_removeEventListener](type, handler, 0):(element['on' + type] = v_null))
            },
        
            mude:function(e){ e[s_preventDefault]?e[s_preventDefault]():(e.returnValue = 0); },
            stop:function(e){ e[s_stopPropagation]?e[s_stopPropagation]():(e.cancelBubble = true); },
        
            fix:function(old_e)
            {
                var n, e = {}, target = old_e.target, i = evt_props.length, 
                    root = document.documentElement || document.body;
                while(i--) {
                    n = evt_props[i];
                    e[n] = old_e[n];
                }
                
                /* check if target is a textnode (safari) */ /* Fixes #1925 where srcElement might not be defined either */
                e.target = target = target?((target.nodeType === 3)?target.parentNode:target):(e.srcElement || document);
        
                n = e.fromElement;
                e[s_relatedTarget] = e[s_relatedTarget] || (n === target? e.toElement : n);/* Add relatedTarget, if necessar */
        
                if ( e.pageX == v_null && e.clientX != v_null ) {/* Calculate pageX/Y if missing and clientX/Y available */
                    e.pageX = e.clientX + root.scrollLeft - root.clientLeft;
                    e.pageY = e.clientY + root.scrollTop - root.clientTop;
                }
        
                e.metaKey = e.metaKey || e.ctrlKey;/* Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs) */
    
                if(v_null == e.which)
                {
                    /* Add which for key events */
                    n = e.charCode;
                    i = n || ((n == 0)?n:e.keyCode);
                    /* Add which for click: 1 === left; 2 === middle; 3 === right; Note: button is not normalized, so don't use it */
                    n = e.button;
                    e.which = n?(n & 1 ? 1 : ( n & 2 ? 3 : ( n & 4 ? 2 : 0 ) )):i;
                }
        
                return e;
            }
        };
})(document);
;
///<jscompress sourcefile="mlib.core.hack.js" />
/*
    mhack
    depends : none
    author : chengzhiyong    date : 2014-08-13   action : add denpends info
*/
(function(window,document){
    var border_space, padding_space, text_border_space, td_bdv, tmp, agent = navigator.userAgent,
        body/* init flag */,
        opera = 0 <= agent.indexOf("Opera"),
        ie_ver, ie_mode, ie = (!opera) && (0 <= agent.indexOf("compatible")) && (0 <= agent.indexOf("MSIE")),
        firefox = (0 <= agent.indexOf("Firefox")),
        safari = (0 <= agent.indexOf("Safari")) && (0 > agent.indexOf("Chrome")),
        chrome =  0 <= agent.indexOf("Chrome"),
        webkit = 0 <= agent.indexOf("Webkit"),
        gecko = 0 <= agent.indexOf("Gecko"),
        s_offsetWidth = "offsetWidth",
	s_createElement = "createElement",
        inited = false;

    /* test ie ver */
    if(ie)
    {
       if(!(ie_mode = document.documentMode)) { ie_mode = ("CSS1Compat" == document.compatMode)?7:5; }
       tmp = new RegExp("MSIE (\\d+\\.\\d+);");
       tmp.test(agent);
       ie_ver = parseFloat(RegExp["$1"]);
    }

    function init()
    {
        if(body){return;};
        body = document.body;

        tmp = document[s_createElement]("div");
        body.appendChild(tmp);
        tmp.style.cssText = "width:3px;margin:0px;padding:0px;border:1px solid white;";
        border_space = ((tmp[s_offsetWidth] - 3) / 2);
        tmp.style.cssText = "width:3px;border:none;margin:0px;padding:1px;";
        padding_space = ((tmp[s_offsetWidth] - 3) / 2);
        tmp.innerHTML = "<table style=\"border-collapse:separate;border-spacing:0;\"><tr><td style=\"height:3px; border:0px\"></td></tr></table>"
        td_bdv = (((tmp.getElementsByTagName( "td" )[0])[s_offsetHeight] - 3) / 2);
        body.removeChild(tmp);

        tmp = document[s_createElement]("textarea");
        body.appendChild(tmp);
        tmp.style.cssText = "width:10px;border:1px solid white;margin:0px;padding:0px";
        text_border_space = ((tmp[s_offsetWidth] - 10) / 2);
        tmp.style.cssText = "width:10px;border:0px solid white;margin:0px;padding:1px";
        text_padding_space = ((tmp[s_offsetWidth] - 10) / 2);
        body.removeChild(tmp);
    }

    window.mhack = {
        magic:"mhack",
        ie_mode:ie_mode,
        ie:ie,
        ie_ver:ie_ver,
        chrome:chrome,
        opera:opera,
        get_border_space:function(){ init(); return border_space; },
        get_padding_space:function(){ init(); return padding_space; },
        get_text_border_space:function(){ init(); return text_border_space; },
        get_text_padding_space:function(){ init(); return text_padding_space; },
        get_td_border_space_v:function(){ init(); return td_bdv; },
        css_alpha:function(alpha){ return (ie && (ie_mode < 9))?("filter:alpha(opacity=" + (100.0 * alpha) + ");"):("opacity:" + alpha + ";");},
        get_body_height:function(){ init(); return Math.max(body.clientHeight, ((("CSS1Compat" == document.compatMode) && document.documentElement) || body).clientHeight);},
        css_box_shadow:function(size, color)
        {
            tmp = "2px 2px " + size + "px " + color + ";";
            return (ie && (ie_mode < 9))?
                    (   "filter:progid:DXImageTransform.Microsoft.Shadow(color=" + color + ", Direction=135, Strength=" + Math.round(size / 2) + ");" )
                    :(    "-moz-box-shadow:" + tmp /*firefox*/
                        + "-webkit-box-shadow:" + tmp /*webkit*/
                        + "box-shadow:" + tmp /*opera or ie9*/ );
        }
    };
})(window,document);
;
///<jscompress sourcefile="mlib.core.json.js" />
function meval(s){ try{return eval("(" + s + ")"); }catch(e){return null;} }

function mmerge(d, s)
{
    var i, v, o, n;
    if (!s) return d;

    for(n in s)
    {
        if(((v = s[n]) != undefined) && (null != v))
        {
            if (v.constructor === Array)
            {
                d[n] = o = [];
                for (i = 0, len = v.length; i < len; i++)
                {
                    o[i] = v[i];
                }
            }
            else if(typeof(v) != "object"){d[n] = v;}
            else{
                if (((o = d[n]) == undefined) || (null == o)){ d[n] = (o = {}); };
                mmerge(o, v);
            }
        }
    }
    return d;
};
///<jscompress sourcefile="mlib.core.mme.hls.js" />
/*
    mme
    depends :
        mlib.core.json.js
        mlib.core.evt.js
    
    author : chengzhiyong   date : 2014-08-13   action : add denpends info
*/
/*-----------------media_engine-------------------------------------------------*/
/* dom's background:black for chrome*/
function mme(obj/*
    {parent:xxx,
     on_event:function(event-object{plug:this, ref_obj:xxx}){},
     ref_obj:xxx,
     plug_install_mute:true|false,
     on_install_ui:function({panel:install_div_panel, download:cosebase-url}, params:"xxx=xxx"){build html download and use flash a-link with name=[flash|plug]}},
     enable_native_plug:true[default]|false,
     enable_flash_plug:true[default]|false
     */)
{
    this.create(obj);
}
mme.prototype =
{

    magic:"mme",
    langs:
    {
        en:{
            plz_select:"please select ",
            mic:"microphone",
            cam:"camera",
            and:"and ",

            set_done:"OK",
            installing:"Installing...",
            rebot_hint:"After Install, Restart Browser",
            install_mme:"Install Video Pluggin",

            try_flash:"Try Video with Flash",
            download:"Download and Install",
            l1:"More clear / high resolution video screen, a better full-screen display",
            l2:"Network intelligence to adapt, video connected to faster, more fluid video and audio effects",

            l3:"Safe and viruses, ease of use, reliable and professional organizations certified signatures",
            l4:"Permanent free",
            l5:"System Requirements: Windows XP or later; browser: IE, Chrome, Firefox, Safari, Opera ..."
        },
        cn:{
            plz_select:"选择",
            mic:"麦克风",
            cam:"摄像头",
            and:"和",

            set_done:"确定",
            installing:"正在安装...",
            rebot_hint:"安装完毕后重启浏览器",
            install_mme:"安装视频加速器",

            try_flash:"我先试试普通视频",
            download:"立即安装视频加速器",
            l1:"更清晰/高分辨率的视频画面，更好的全屏显示效果",
            l2:"网络智能适应，视频接通更快，影音效果更流畅",

            l3:"安全无病毒，放心使用，专业机构认证的可靠签名",
            l4:"永久免费",
            l5:"系统要求：Windows XP 或更高版本；浏览器：IE,Chrome,Firefox,Safari,Opera..."
        }
    },
    types:
    {
        install:{codebase:(navigator.platform == "MacIntel")?"mme/npmme.pkg?0.160622.pkg":"mme/mme.exe?0.160622.exe"},
        activex:{name:"activex", xname:"MME.MMECtrl.1", clsid:"F3711E49-C6C3-4598-8888-8FD986250C98", codebase:"mme/mme_ie.cab", install_url:"", install_img:"", install_hint:""},
        xpcom:{name:"xpcom", mime:(window.fujikam=="fujikam"?"application/mining-media-enginex":"application/mining-media-engine"), codebase:"mme/npmme.xpi", install_url:"", install_img:"", install_hint:""},
        flash:{name:"flash", xname:"ShockwaveFlash.ShockwaveFlash", mime:"application/x-shockwave-flash", clsid:"D27CDB6E-AE6D-11cf-96B8-444553540000",
                    codebase:"", install_img:"",
                    install_url:"https://www.adobe.com/go/getflashplayer", src:"http://45.113.201.4:7080/dcm/sdk_plug/mme/mme.swf?0.130715.swf", install_hint:""}
    },
    debug:true,
    windowless:(0 > ("" + navigator.platform).indexOf("Linux"))/* true, linux:if true will can not auto open cammer(must set global setting enable acess) */,
    id_allocer:{value:0},
//    ver_min:0.140906,
    // ver_min:0.160622,
    ver_min:0.160814,
    chl_status:{closed:0, initting:1, initting_device:2, running:3},
    plug_status:{closed:0, initting:1, installing:2, running:3},
    enable_native_plug:true,
    enable_flash_plug:true,
    /* chls:[], type:"publish"|"play", url:"xxx", running:true|false, timer:inerval, times:time-out-check-counts, refer:user-data */
    get_default_skin: function (){ return {dev_panel:{width:360, height:180}}; },
    create_plug:function(parent, enable_flash_plug, enable_native_plug, plug_params)
    {
        var test, info, plug = null, id = this.id?this.id:(++this.id_allocer.value), type = null,
            ie = (!!window.ActiveXObject || "ActiveXObject" in window);

        if(enable_native_plug && ((null == this.ver_cur) || (this.ver_cur >= this.ver_min)))
        {/* plugin just support win32 now */
            if(ie && (navigator.platform == "Win32")){ try{test = new ActiveXObject(this.types.activex.xname); type = this.types.activex;}catch(e){}; }
            else if((null != navigator.mimeTypes)
                    && (0 < navigator.mimeTypes.length)
                    && (null != navigator.mimeTypes[this.types.xpcom.mime])
                    && navigator.mimeTypes[this.types.xpcom.mime].enabledPlugin){ type = this.types.xpcom; };
        }
        if(!type && enable_flash_plug)
        {/* check flash */
            if(ie){ try{test = new ActiveXObject(this.types.flash.xname); type = this.types.flash; }catch(e){}; }
            else if((null != navigator.mimeTypes)
                    && (0 < navigator.mimeTypes.length)
                    && (null != navigator.mimeTypes[this.types.flash.mime])
                    && navigator.mimeTypes[this.types.flash.mime].enabledPlugin){ type = this.types.flash; };
        }
    
        if(type)
        {
            if(this.type != mme.prototype){ this.type = type; };
            plug_params = plug_params.replace(/'/g, "\"");
            //plug_params = codec.str_2_uri_param((plug_params)?plug_params.replace(/'/g, "\""):plug_params);
            
            /* for chrome video color error bug hack */
            if((navigator.platform == "Win32") && navigator.userAgent.toLowerCase().match(/chrome\/([\d.]+)/))
            {
                parent.style.background="black";
            }
            
            parent.innerHTML = "<object id='plug_" + id +  "' width='100%' height='100%'"
                + (ie?(" classid='clsid:" + type.clsid + "'"):(" type='" + type.mime + "'"))
                + " codebase='" + type.codebase + "'"
                + ((type == this.types.flash)?(" data='" + type.src + "'" + (this.windowless?(" wmode='transparent'"):"")):"")
                + ">"
                + ((type == this.types.flash)?
                    (   " <param name='movie' value='" + type.src + "'/>"
                        + " <param name='allowScriptAccess' value='always'/>"
                        + " <param name='flashVars' value='mme_debug=" + this.debug + "&mme_on_event=plug_" + this.id + "_on_event&mme_params=" + encodeURIComponent(plug_params) + "'/>"
                        + " <param name='allowFullScreen' value='true'/>"
                        + (this.windowless?(" <param name='wmode' value='transparent'/>"):"")
                        + "   <a href='" + type.install_url + "'>"
                        + "        <img border='none' src='" + type.install_img + "' alt='" + type.install_hint + "'/>"
                        + "   </a>")
                    :(  " <param name='mme_on_event' value='plug_" + this.id + "_on_event'/>"
                        + (this.windowless?(" <param name='windowless' value='" + this.windowless + "'/>"):"")
                        + "<param name='mme_params' value='" + plug_params + "'/>"))
                + "</object>";
            plug = ie?window["plug_" + id]:document.getElementById("plug_" + id);
            if(plug)
            {
                try
                {
                    if((type.name != "flash")
                       && (info = meval(plug.ctrl(0, "query", "{flag:65535}"))))
                    {
                        mme.prototype.ver_cur = info.version;
                        if(info.version < this.ver_min)
                        {/* version to small */
                            parent.innerHTML = "";
                            return null;
                        }
                    }
                }catch(x){};
            }
            else
            {
                parent.innerHTML = "";
            }
            return plug;
        }
        return null;
    },

    /* plug_valid: */
    check_plug_install:function(ref, on_check_ack/* function(ref, version) */)
    {
        var plug, info, timer, timer_counts = 20, cont = document.createElement("div"), ret = false;
        cont.style.cssText = "position:absolute;width:1px;height:1px;left:-1px;top:-1px;";
        document.body.appendChild(cont);
        if(plug = this.create_plug(cont, false, true, "{}"))
        {/* have none flash plugin */
            timer = setInterval(function(){
                if(((plug && ("undefined" != typeof(plug.ctrl)))
                   ||(0 >= (--timer_counts))))
                {
                    /* if("undefined" != typeof(plug.clipboard_get_img))
                    {
                        mme.prototype.clipboard_plug = plug;
                    }*/
                    if(plug && ("undefined" != typeof(plug.ctrl)))
                    {
                        try
                        {
                            if(info = meval(plug.ctrl(0, "query", "{flag:65535}")))
                            {
                                ret = (info.version >= mme.prototype.ver_min);
                                mme.prototype.plug_valid = ret;
                            }
                        }catch(x){};
                    }
                    clearInterval(timer);
                    cont.innerHTML = "";
                    cont.parentNode.removeChild(cont);
                    on_check_ack(ref, info?info.version:null);
                }}, 50);
        }
        else
        {
            cont.innerHTML = "";
            cont.parentNode.removeChild(cont);
            on_check_ack(ref, (null == this.ver_cur)?null:this.ver_cur);
        }
    },
    clipboard_get_img:function(mime)
    {
        if(null == this.clipboard_plug)
        {
            document.body.appendChild(mme.prototype.clipboard_cont = document.createElement("div"));
            mme.prototype.clipboard_cont.style.cssText = "position:absolute;top:-1px;left:-1px;width:1px;height:1px;";
            mme.prototype.clipboard_plug = mme.prototype.create_plug(mme.prototype.clipboard_cont, false, true, "{}");
            if((null == mme.prototype.clipboard_plug)
               ||("undefined" == typeof(mme.prototype.clipboard_plug.clipboard_get_img)))
            {
                mme.prototype.clipboard_plug = null;
                mme.prototype.clipboard_cont.innerHTML = "";
                mme.prototype.clipboard_cont.parentNode.removeChild(mme.prototype.clipboard_cont);
                mme.prototype.clipboard_cont = undefined;
            }
        }
        return this.clipboard_plug?this.clipboard_plug.clipboard_get_img(mime):null;
    },
    clear_install:function()
    {
        if(this.install_timer){ clearInterval(this.install_timer); delete this.install_timer; };
        if(this.install_panel){ if(this.install_panel){ this.install_panel.innerHTML = ""; this.install_panel.parentNode.removeChild(this.install_panel);}; delete this.install_panel;};
        if(this.install_test_panel){ if(this.install_test_panel.parentNode){ this.install_test_panel.innerHTML = ""; this.install_test_panel.parentNode.removeChild(this.install_test_panel);}; delete this.install_test_panel; };
    },

    install:function()
    {
        var a, i, link_name, alist, me = this, codebase = mme.prototype.types.install.codebase,
                description_flag='block',button_width=210,font_size=18,flash_float_type='left',plug_float_type='right',
                plug_magin_top=0,description_div,title_flag='block',install_div,flash_a,plug_a,title_center;
        this.clear_install();
        this.parent.appendChild(this.install_panel = document.createElement("div"));
                install_div=this.install_panel;
                function setFloatStyle(obj,style)
                {
                        var sty=obj.style;
                        if('cssFloat' in sty){
                                obj.style.cssFloat=style;
                        }else if('styleFloat' in sty){
                                obj.style.styleFloat=style;
                        }
                }
        /* build default ui */
        //this.install_panel.style.cssText = "position:absolute;left:0px;top:0px;width:100%;height:100%;background-color: black;color:#fff;line-height:2em;font-size:14px;visibility:hidden;";
        if(install_div.clientWidth<460||install_div.clientHeight<320)
        {
                description_flag='none';    
        }
        if(install_div.clientWidth<460)
        {
                button_width=install_div.clientWidth*0.8;
                font_size=12;
                flash_float_type='none';
                plug_float_type='none';
                plug_magin_top=5;
        }
        if(install_div.clientWidth<290||install_div.clientHeight<160)
        {
                title_flag='none';      
        }
        this.install_panel.innerHTML =
            "<div style='position:absolute;left:4%;width:92%;overflow:none;'>"
            +"<center id='title_center' style='display:"+title_flag+"'><span style='font-size:18px;'><b>" + this.lang.install_mme + "</b></span></center><br/>"
            +"<div id='install_description_div' style='display:"+description_flag+"'>"
            + "<li>" + this.lang.l1 + "</li><li>" + this.lang.l2 + "</li><li>" + this.lang.l3 + "</li>"
            + "<li>" + this.lang.l4 + "</li><li>" + this.lang.l5 + "</li><br/>"
            +"</div>"
            + "<a name='flash' href='#'"
            + " style='float:"+flash_float_type+";background:#333;font-size:"+font_size+"px;color:#fff;text-decoration:none;text-align:center;"
            + "display:inline-block;width:"+button_width+"px;height:auto;line-height:32px;"
            + "-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5Px;"
            + mhack.css_box_shadow(1, "#666666") + "'"
            + " onmouseover='this.style.background=\"#666\";'"
            + " onmouseout='this.style.background=\"#333\";'"
            + " >" + this.lang.try_flash + "</a>"
            + "<a name='plug' href='" + codebase + "' target='_blank'"
            + " style='float:"+plug_float_type+";background:#333;font-size:"+font_size+"px;color:#fff;text-decoration:none;text-align:center;"
            + "display:inline-block;width:"+button_width+"px;height:auto;margin-top:"+plug_magin_top+"px;line-height:32px;"
            + "-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5Px;"
            + mhack.css_box_shadow(1, "#666666") + "'"
            + " onmouseover='this.style.background=\"#666\";'"
            + " onmouseout='this.style.background=\"#333\";'"
            + ">" + this.lang.download + "</a>"
            + "<span name='plug_installing' style='display:none'></span>"
            + "</div><div style='float:clear;'></div>";

        document.body.appendChild(this.install_test_panel = document.createElement("div"));
        
        window.onresize=function(){
                description_div=document.getElementById("install_description_div");
                title_center=document.getElementById("title_center");
                flash_a = dom_get_item_by_name(install_div, "*", "flash");
                plug_a = dom_get_item_by_name(install_div, "*", "plug");
                if(description_div)
                        description_div.style.display=(install_div.clientWidth<460||install_div.clientHeight<320)?'none':'block';
                if(install_div.clientWidth<460)
                    {
                              if(flash_a)
                            {
                                    flash_a.style.width=install_div.clientWidth*0.8+'px';
                                    setFloatStyle(flash_a,'none');
                                    flash_a.style.fontSize='12px';
                            }
                            if(plug_a)
                            {
                                    plug_a.style.width=install_div.clientWidth*0.8+'px';
                                    setFloatStyle(plug_a,'none');
                                    plug_a.style.marginTop='5px';
                                    plug_a.style.fontSize='12px';
                            }
                    }
                    else
                    {
                                if(flash_a)
                            {
                                    // flash_a.style.width='210px';
                                    // setFloatStyle(flash_a,'left');
                                    // flash_a.style.fontSize='18px';
                            }
                            if(plug_a)
                            {
                                    // plug_a.style.width='210px';
                                    // setFloatStyle(plug_a,'right');
                                    // plug_a.style.marginTop='0px';
                                    // plug_a.style.fontSize='18px';
                            }           
                    }
                    if(title_center)
                                title_center.style.display=(install_div.clientWidth<290&&install_div.clientHeight<160)?'none':'block';
        }
        if(this.on_event)
        {
            /* function({panel:install_div_panel, download:cosebase-url}){ build html-content, must let first a-link as try-flash, and second a-link is download with name=[flash|plug]} */
            this.on_event({type:"install_ui", panel:this.install_panel, download:codebase, ver_cur:this.ver_cur});
        }
        this.install_panel.style.visibility = "";
        this.install_test_panel.style.cssText = "position:absolute;left:-1px;top:-1px;width:1px;height:1px;";
        if(a = dom_get_item_by_name(this.install_panel, "*", "flash"))
        {
            mevt.bind(a, "click", function(e)
                {
                     me.clear_install();
                     me.status = me.plug_status.initting;
                     if(null == (me.plug_obj = me.create_plug(me.parent, true, true, me.create_params)))
                     {
                         me.status = me.plug_status.closed;
                         if(me.on_event){me.on_event({type:"missing"});};
                     }
                     else
                     {
                         if(me.on_event){me.on_event({type:"create"});};
                     }
                     return false;
                 });
        }
        if(a = dom_get_item_by_name(this.install_panel, "*", "plug"))
        {
            mevt.bind(a, "click", function(e)
                {
                    a = dom_get_item_by_name(me.install_panel, "*", "plug_installing");
                    if(a)
                    {
                        a.style.display = "";
                        a.innerHTML = me.lang.installing;
                        if(a = dom_get_item_by_name(me.install_panel, "*", "plug"))
                        {
                            a.style.display = "none";
                        }
                    }
                    else if(a = dom_get_item_by_name(me.install_panel, "*", "plug"))
                    {
                        a.innerHTML = "<b>" + ((mhack.ie || mhack.chrome)?me.lang.installing:me.lang.rebot_hint) + "</b>";
                    }
                    if(mhack.ie || mhack.chrome)
                    {
                        me.install_timer = setInterval(function(){
                                if(mme.prototype.create_plug(me.install_test_panel, false, true, me.create_params))
                                {
                                    me.clear_install();
                                    me.status = me.plug_status.initting;
                                    if(null == (me.plug_obj = me.create_plug(me.parent, true, true, me.create_params)))
                                    {
                                        me.status = me.plug_status.closed;
                                        if(me.on_event){me.on_event({type:"missing"});};
                                    }
                                    else
                                    {
                                        if(me.on_event){me.on_event({type:"create"});};
                                    }
                                }
                        }, 1000);
                    }
                });
        }
    },

    on_plug_event:function(json)
    {
        var e = meval(json);
        if(null == e)
        {/* xxxxxx error. what append. */
            return 0;
        }

        if(e.target && e.target.type && e.target.url)
        {
            e.chl = this.chl_get(e.target.type, e.target.url)
        }
        
        switch (e.type)
        {
            case "is_ready": { return (null != this.plug_obj); break; }
            case "ready": { this.status = this.plug_status.running; break; }
            case "close":
            {
                if(e.chl){ e.chl.status = this.chl_status.closed; e.chl.id = 0; };
                break;
            }
            case "active": { break; }
        }
        if(this.is_created && this.on_event)
        {
            this.on_event(e);
        }
        return 0;
    },
    create:function(obj)
    {
        var parent = obj.parent, me = this;
        if(undefined != obj.hls_id && null != obj.hls_id)
        {

             if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) { 
                 this.platform = 'ios';
             } else if (/(Android)/i.test(navigator.userAgent)) { 
                 this.platform = 'android';
             } else { 
                 this.platform = 'pc';
             };

            this.hls_id = obj.hls_id;
            this.ref_obj = obj.ref_obj;
            this.parent = parent;
            this.ref_obj.mme = this;
            this.on_event = obj.on_event;

            var video = null;
            if(this.platform == 'pc')
            {
                this.parent.innerHTML = '<video  class="video-js vjs-default-skin vjs-big-play-centered" controls><source id="hls-vs" type="application/x-mpegURL"></video>';
                video = parent.getElementsByClassName('video-js vjs-default-skin vjs-big-play-centered')[0];
                video.width = this.parent.offsetWidth;
                video.height = this.parent.offsetHeight;
            }
            else
            {
                this.parent.innerHTML = '<video class="video-js" style="width:100%; height:100%; object-fit: fill" controls></video>';
                video = parent.getElementsByClassName('video-js')[0];
            }
            video.id = this.hls_id;
            this.player = null;
            this.on_event(this.ref_obj);
            return 0;
        }

        /* init parent and skin */
        this.skin = this.get_default_skin();
        if("object" == typeof(obj.skin))
        {
            obj_merge(this.skin, obj.skin);
        }
        this.parent = parent;
        if(undefined != obj.debug){ this.debug = obj.debug; }
        if(undefined != obj.windowless){ this.windowless = obj.windowless; }
        if(undefined != obj.enable_native_plug){ this.enable_native_plug = obj.enable_native_plug; }
        if(undefined != obj.enable_flash_plug){ this.enable_flash_plug = obj.enable_flash_plug; }
        this.on_event = obj.on_event;
        this.cam_index = -1;
        this.mic_index = -1;
        this.chls = [];
        this.create_params = obj.params||"";
        this.ref_obj = obj.ref_obj;
        this.is_created = false;
        if(obj.on_event)
        {
            this.on_event_callback = obj.on_event;
            this.on_event = function(e)
            {
                e.plug = me;
                e.ref_obj = me.ref_obj;
                me.on_event_callback(e);
                e.plug = (e.ref_obj = null);
            };
        }

        /* do create */
        this.id = (++ this.id_allocer.value);
        window["plug_" + this.id + "_on_event"] = function(s){ return me.on_plug_event(s); };
        this.status = this.plug_status.initting;

        /* try create native plugin */
        if(null == (this.plug_obj = this.create_plug(parent,
                                                     this.enable_flash_plug && ((!obj.plug_install_mute) || ((navigator.platform != "Win32") && (navigator.platform != "MacIntel"))),  //(!!obj.plug_install_mute)
                                                     this.enable_native_plug,
                                                     this.create_params)))
        {/* create native plug in failed */
            if(this.enable_native_plug
               && (!obj.plug_install_mute)
               && ((navigator.platform == "Win32") || (navigator.platform == "MacIntel")))
            {/* try install */

                if(this.ver_cur >= this.ver_min)
                {/* old plugin with lower version */
                    me.status = me.plug_status.initting;
                    if(null == (me.plug_obj = me.create_plug(parent, true, true, me.create_params)))
                    {
                        me.status = me.plug_status.closed;
                        if(me.on_event){me.on_event({type:"missing"});};
                    }
                    else
                    {
                        if(me.on_event){me.on_event({type:"create"});};
                    }
                }
                else
                {
                    // this.status = this.plug_status.installing;//去掉使用普通视频播放页面
                    me.status = me.plug_status.initting;
                            if(null == (me.plug_obj = me.create_plug(parent, true, true, me.create_params)))
                            {
                                me.status = me.plug_status.closed;
                                 if(me.on_event){me.on_event({type:"missing"});};
                            }
                            else
                            {   
                                 if(me.on_event){me.on_event({type:"create"});};
                            }
                    // this.install(function() //去掉使用普通视频播放页面
                    //     {
                    //         me.status = me.plug_status.initting;
                    //         if(null == (me.plug_obj = me.create_plug(parent, true, true, me.create_params)))
                    //         {
                    //             me.status = me.plug_status.closed;
                    //             if(me.on_event){me.on_event({type:"missing"});};
                    //         }
                    //         else
                    //         {
                    //             if(me.on_event){me.on_event({type:"create"});};
                    //         }
                    //     });
                }
            }
            else
            {/* can not install */
                me.status = me.plug_status.closed;
                if(me.on_event){me.on_event({type:"missing"});};
            }
        }
        else if((this.status == this.plug_status.running) && me.on_event)
        {
            setTimeout(function(){if(me.on_event){ me.on_event({type:"ready"});};}, 0);
        }
        this.is_created = true;
    },
    destroy:function()
    {
        this.clear_install();
        window["plug_" + this.id + "_on_event"] = null;
        for(var chl, i = this.chls.length - 1; 0 <= i; --i)
        {
            if(chl = this.chls[i]){ this.chl_destroy(chl); };
        }

        if(this.dev_form)
        {
            this.dev_form.onsubmit = null;
            this.dev_form.innerHTML = "";
            this.dev_form.parentNode.removeChild(this.dev_form);
            delete this.dev_form;
        }

        if(this.plug_obj){ delete this.plug_obj; };
        if(this.parent)
        {
            this.parent.innerTHML = "";
            delete this.parent;
        }
        if(this.id){ delete this.id; };
        if(this.status){ delete this.status; };
        if(this.on_event){ delete this.on_event; };
    },
    update:function()
    {
    },

    is_ready:function(func)
    { 
        return (this.plug_obj
                && (this.status == this.plug_status.running)
                && ((null == func) || (("undefined" != typeof(this.plug_obj[func]))))); 
    },

    select_device:function(cams, mics, on_done)
    {
        var dev, i, radio, radios, me = this, dev_form = this.dev_form, html = "";
        if(null == dev_form)
        {
            this.parent.appendChild(this.dev_from = (dev_form = document.createElement ('form')));
            dev_form.style.cssText = "position:absolute;left:0px;top:0px;width:100%;height:100%;overflow-y:auto;overflow-x:none;padding:0px;margin:0px;background:transparent;background:#000;color:#fff;line-height:1.5em;font-size:12px;";
        }
        dev_form.style.visibility = "hidden";
        dev_form.innerHTML = "";
        //dev_form.style.display = "";
        html += "<div style='position:absolute;left:5%;width:90%'><br/><center><span style='font-size:18x;'><b>" + this.lang.plz_select + this.lang.cam + this.lang.and + this.lang.mic + "</span></center>"
        if(cams && (0 < cams.length))
        {
            html += "<br/><span>" + this.lang.cam + "</span><br/>";
            for(i = 0; i < cams.length; i++)
            {
                dev = cams[i];
                html += "<input type='radio' name='cam' id='cam_" + dev.index + "' value='" + dev.index + "' " + ((0 == i)?"checked":"") + "/>"
                        + "<label for='cam_" + dev.index + "'>" + dev.name + "</label><br/>"
            }
        }
        if(mics && (0 < mics.length))
        {
            html += "<br/><span>" + this.lang.mic + "</span><br/>";
            for(i = 0; i < mics.length; i++)
            {
                dev = mics[i];
                html += "<input type='radio' name='mic' id='mic_" + dev.index + "' value='" + dev.index + "' " + ((0 == i)?"checked":"") + "/>"
                        + "<label for='mic_" + dev.index + "'>" + dev.name + "</label><br/>"
            }
        }
        html += "<br/><center>"
             + "<input type='submit' value='" + this.lang.set_done + "'"
             + " onmouseover='this.style.background=\"#666\";'"
             + " onmouseout='this.style.background=\"#333\";'"
             + " style='cursor:pointer;border:none;padding:0px;margin:0px;font-size:14px;color:#fff;width:120px;height:24px;"
             + "-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3Px;"
             + mhack.css_box_shadow(1, "#666666")
             + "line-height:32px;background:#333;'/></center></div>";
        dev_form.innerHTML = html;

        if(this.on_event)
        {/* call back */
            this.on_event({type:"select_device_ui", form:dev_form, mics:mics, cams:cams});
        }
        dev_form.style.visibility = "";

        dev_form.onsubmit = function()
        {
            for(i = 0, radios = dev_form.getElementsByTagName("input"); i < radios.length; ++i)
            {
                if(((radio = radios[i]).type == "radio") && radio.checked)
                {
                    if(radio.name == "cam"){ me.cam_index = radio.value; }
                    else if(radio.name == "mic"){ me.mic_index = radio.value; }
                }
            }
            dev_form.style.display = "none";
            on_done();
            return false;
        }
    },
    init_device:function(obj/* {on_done:function(is_valid)}*/)
    {
        var me = this;
        function on_init_device_done()
        {
            if(obj.on_done){ obj.on_done(); };
        }
        if (null == this.plug_info)
        {
            this.plug_info = meval(this.plug_obj.ctrl(0, "query", "{flag:65535}"));
            if(this.plug_info && this.plug_info.camera)
            {/* remove google vitual camera */
                var cam_arr = [], i, cam, cams = this.plug_info.camera;
                for (i = 0; i < cams.length; ++i)
                {
                    if((cam = cams[i]) && (cam.name.indexOf ("Google Camera Adapter") < 0)){ cam_arr.push (cam); }
                }
                this.plug_info.camera = cam_arr;
            }
        }

        if((0 > this.cam_index) && (this.plug_info.camera.length == 1))
        {
            this.cam_index = this.plug_info.camera[0].index;
        }
        if((0 > this.mic_index) && (this.plug_info.microphone.length >= 1))
        {
            this.mic_index = this.plug_info.microphone[0].index;
        }
        if(((0 > this.cam_index) && (1 < this.plug_info.camera.length))
           /* ||((0 > this.mic_index) && (1 < this.plug_info.microphone.length))*/)
        {
            this.select_device(this.plug_info.camera, this.plug_info.microphone, on_init_device_done);
        }
        else
        {
            on_init_device_done();
        }
    },

    chl_get:function(type, url)
    {
        for(var chls = this.chls, i = chls.length - 1; i >= 0; --i)
        {
            if((chl = chls[i]) && (chl.type == type) && (url == chl.url)){ return chl; };
        }
        return null;
    },
    chl_destroy:function(chl)
    {
        if(undefined != this.hls_id && null != this.hls_id && null != this.player)
        {
            this.player.dispose();
            this.player = null;
            return 0;
        }
        for(var chls = this.chls, i = chls.length - 1; i >= 0; --i)
        {
            if(chl == chls[i])
            {
                if(chl.timer){ clearTimeout(chl.timer); chl.timer = null; };
                if(this.chl_status.initting_device == chl.status){ this.dev_from.style.display = "none"; };
                chl.status = this.chl_status.stopped;
                if(0 < chl.id)
                {
                    if(this.is_ready("chl_destroy")){ this.plug_obj.chl_destroy(chl.id); };
                    chl.id = 0;
                }
                chl.refer = null;
                chls.splice(i, 1);
                break;
            }
        }
    },
    chl_dev_index_param:function(cam_index, mic_index)
    {
        return "\ncam.index=" + cam_index + "\nmic.index=" + mic_index;
    },
    chl_ctrl:function(method, obj)
    {
        if(undefined != this.hls_id && null != this.hls_id)
        {
            if(method == 'create'){
                this.chl_create(obj);
            }else if(method == 'destroy'){
                this.chl_destroy(0);
            }else if(method == 'play'){
                this.player.play();
            }else if(method == 'pause'){
                this.player.pause();
            }else if(method == 'change'){
                if(this.platform == 'pc')
                    this.player.src({src: obj + '.m3u8', type: "application/x-mpegURL"});
                else
                {
                    this.player.src = obj + '.m3u8';
                    this.player.load();
                }
                // this.player.play();
            }else if(method == 'catch_err'){
                if(this.platform == 'pc')
                {
                    this.player.on('error', function(){
                        var mediaError = this.error();
                        var info = null;
                        if(mediaError.code == 1){
                            info = "视频播放被终止";
                        }else if(mediaError.code == 2){
                            info = "网络错误导致视频下载中途失败";
                        }else if(mediaError.code == 3){
                            info = "由于视频文件损坏或是该视频使用了你的浏览器不支持的功能，播放终止";
                        }else if(mediaError.code == 4){
                            info = "视频因格式不支持或者服务器或网络的问题无法加载";
                        }else if(mediaError.code == 5){
                            var info = "视频已加密，无法解密";
                        }
                        obj.call(info);
                    });
                }                
            }
        }
    },
    chl_create:function(obj/*{type:"publish"|"play", url:"xxx", params:"", refer:xxx}*/)
    {
        if(undefined != this.hls_id && null != this.hls_id)
        {
            var options = {
                html5: {
                    hlsjsConfig: {
                      // Put your hls.js config here
                      manifestLoadingTimeOut: 20000,
                      levelLoadingTimeOut: 20000,
                      levelLoadingMaxRetry: 20,
                      fragLoadingMaxRetry: 20,
                      manifestLoadingMaxRetry: 20,
                      manifestLoadingRetryDelay:2000,
                      fragLoadingRetryDelay:1000
                    }
                }
            };          
            var json_chl_params = meval(obj.params);
            var url = json_chl_params.src[0].url;
            var video = document.getElementById(this.hls_id);

            if(this.platform == 'pc')
            {
                var videoVs = video.getElementsByTagName('source')[0];
                videoVs.src = url + '.m3u8';
                this.player = videojs(this.hls_id, options);
                this.player.src({src: url + '.m3u8', type: "application/x-mpegURL"});
                // player.pause();
                // this.player.play();
                return this.player;                
            }
            else
            {
                video.src = url + '.m3u8';
                this.player = video;
                // video.play();
                return this.player;
            }
        }
        if(!this.is_ready("chl_create"))
        {
            return null;
        }
        else
        {
            var me = this, ret, chl = {params:(obj.params||"")};
            if(0 >= (chl.id = me.plug_obj.chl_create(chl.params)))
            {
                return null;
            }
            this.chls[this.chls.length] = chl;
            return chl;
        }
    },
    ctrl:function(chl, method, params)
    {
        try
        {
            return this.is_ready("ctrl")?this.plug_obj.ctrl(chl?chl.id:0, method, params):"{type:\"error\",status:-1}";
        }catch(e)
        {
            return "{type:\"error\",status:-1}";
        }
    }
}
mme.prototype.lang = window.lang_get?lang_get(mme.prototype.langs):mme.prototype.langs.cn;
/*-----------------media_engine-------------------------------------------------*/
;
///<jscompress sourcefile="mlib.core.rpc.js" />
/*
    mrpc
    depends :
        mlib.mcore.codec.js
        mlib.mcore.evt.js
        

    author: chenghizyong date: 2014-08-31 action: update depends information
*/
/*-----------------mrpc-------------------------------------------------*/
/* mrpc.call({...});  */
(function(window, document, mevt, mcodec){
    var timeout = 300000/* ms */,
        calls  = {},
        xs = {},
        seq = Math.floor((Math.random() * 1000000)),
        fnull = function(){},
        head, timer,
        meval = function (s){ try{return eval("(" + s + ")"); }catch(e){return null;} };

    function cancel()
    { 
        for(var n in calls)
        { 
            if(calls[n]){ ack(calls[n], "cancel"); }
        } 
    }

    function init()
    {
        timer = setInterval(on_timer, 5000);
        mevt.bind(window, "unload", function()
            {
                clearInterval(timer);
                window.message = null;
                cancel();
                for(var n in xs)
                {
                    if(xs[n]){ delete xs[n]; }
                } 
            });

        window.message = function(msg)
        {   
            var c = calls[msg.to_handle];
            if(c){ ack(c, msg); }
        };
    }

    function on_timer()
    {
        var n, c, tm = (new Date()).getTime();
        for(n in calls)
        {
            if((c = calls[n]) && (c.time < tm)){ ack(c, "timeout"); }
        }
    }

    function ack(c, msg)
    {
        var js = c.js, seq = c.seq, x = c.x;
        delete calls[seq];
        if(js){ delete c.js; if(js.parentNode){ head.removeChild(js); };};
        if(x){ delete c.x; x.abort(); };
        c.on_ack(msg, c.ref);
        if(x){ x.onreadystatechange = fnull; xs[seq] = x; };
    }

    function js_call(c)
    {
        var o = (c.js = document.createElement("script"));
        o.type = "text/javascript";
        o.language = "javascript";
        o.async = true;
        o.src = c.url;
        (head || (head = (document.getElementsByTagName("head")[0] || document.documentElement))).insertBefore(o, head.firstChild);
    }

    function x_on_rsp(c, x)
    {
        if((c.x == x) && (x.readyState == 4))
        {
            var msg, seq = c.seq;
            if(0 == x.status)
            {/* abort a connection */
                if(calls[seq]/* active connection */){ ack(c, "abort"); };return;
            }
            if((200 == x.status)||(304 == x.status/*opera*/))
            {
                var c, s = x.responseText, b = s.indexOf("("), e = s.lastIndexOf(")");
                if(((e > (b + 2)) && ('{' == s.charAt(b + 1)) && ('}' == s.charAt(e - 1))))
                {
                    msg = meval(s.substring(b + 1, e));
                }
            }
            c.x = null;
            ack(c, msg || "error");
            x.onreadystatechange = fnull;
            xs[seq] = x;
        }
    }

    function x_call(c)
    {
        var n, x;
        for(n in xs){ if(x = xs[n]){ delete xs[n]; x.abort(); break; }};
        x = x || (window.XMLHttpRequest?new XMLHttpRequest():new ActiveXObject("Microsoft.XMLHTTP"));
        x.open(c.param?"post":"get", c.url, true);
        x.onreadystatechange = function(){x_on_rsp(c, x);};
        if(c.param){ x.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=utf-8"); };
        (c.x = x).send(c.param);
    }

    function call(msg/*
                  srv:"srv_base_url" [if null means "/"],
                  to:comp_id|"comp_name" [if null means directly to srv],
                  type:"req_message_type" [must],
                  static:true|false(default) [is static encode, if null false, if method=post will force changeto false ]
                  method:get|post [just for xhr, if null default post],
                  from_handle:number[if null, ++seq, default:should be null],
                  way:json|xhr|iframe|form|test [if null default cross domain:json or same:domain xhr, not support ifram/form now.]
                  data:{}[if null, empty],
                  ref:xxx, [if null ignore ],
                  on_ack:function(msg, ref){}[must] */)
    {
        if(msg && msg.on_ack && msg.type)
        {
            var dyn = !msg["static"], post = (("json" != msg.way) && ("get" != msg.method)), from_handle = msg["from_handle"], qid = msg["qid"],
                cn = (dyn || post)?"&":"-", cv = ("-" == cn)?"-":"=",
                app = (msg.srv?msg.srv:"/") + (msg.to?msg.to:"") + "/" +  msg.type,
                // app = (msg.srv?"http://61.147.109.92:7080/":"/") + (msg.to?msg.to:"") + "/" +  msg.type,
                param = "hfrom_handle" + cv + ((null == from_handle)?(++seq):from_handle) + ((null == qid)?"":(cn + "hqid" + cv + qid)) + cn + mcodec.obj_2_url(msg.data, cn),
                c = {seq: seq, on_ack:msg.on_ack, time:((new Date()).getTime() + (msg.timeout?msg.timeout:timeout)),
                     url: (post?(app + ".js"):(dyn?(app + ".js?" + param):(app + "/-" + param + ".js"))),
                     param: (post?param:""),
                     ref: msg.ref};
            if("test" != msg.way)
            {
                calls[seq] = c;
                try{
                    ("json" == msg.way)?js_call(c):x_call(c);
                }catch(t){ ack(c, "error"); };
            }
            return c.url;
        }
    }

    init();
    window.mrpc = {magic:"rpc", call:call, cancel:cancel};
})(window,document, mevt, mcodec);
/*-----------------mrpc-------------------------------------------------*/
;
///<jscompress sourcefile="mlib.crypt.dh.js" />
/*
    mdh
    depends : none
    
    ----history----------
    author: chengzhiyong date: 2014-08-13 action: update depends info
*/

var mdh = null;
(function(Math, Array){
/* ******************************** D-H *****************************************/

//globals
var bpe=0,         //bits stored per array element
mask=0,        //AND this with an array element to chop it down to bpe bits
radix=mask+1,  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.

//the digits for converting to different bases
digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\'\"+-';

//initialize the global variables
for (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform
bpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt
mask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits
radix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask
var one=int2bigInt(1,1,1);     //constant used in powMod_()

//the following global variables are scratchpad memory to
//reduce dynamic memory allocation in the inner loop
var t=[],
ss=t,       //used in mult_()
s0=t,       //used in multMod_(), squareMod_()
s1=t,       //used in powMod_(), multMod_(), squareMod_()
s2=t,       //used in powMod_(), multMod_()
s3=t,       //used in powMod_()
s4=t, s5=t, //used in mod_()
s6=t,       //used in bigInt2str()
s7=t,       //used in powMod_()
T=t,        //used in GCD_()
sa=t,       //used in mont_()
mr_x1=t, mr_r=t, mr_a=t,                                      //used in millerRabin()
eg_v=t, eg_u=t, eg_A=t, eg_B=t, eg_C=t, eg_D=t,               //used in eGCD_(), inverseMod_()
md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()

primes=t, pows=t, s_i=t, s_i2=t, s_R=t, s_rm=t, s_q=t, s_n1=t,
  s_a=t, s_r2=t, s_n=t, s_b=t, s_d=t, s_x1=t, s_x2=t, s_aa=t, //used in randTruePrime_()

rpprb=t; //used in randProbPrimeRounds() (which also uses "primes")

////////////////////////////////////////////////////////////////////////////////////////


//return array of all primes less than integer n
function findPrimes(n) {
  var i,s,p,ans;
  s=new Array(n);
  for (i=0;i<n;i++)
    s[i]=0;
  s[0]=2;
  p=0;    //first p elements of s are primes, the rest are a sieve
  for(;s[p]<n;) {                  //s[p] is the pth prime
    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]
      s[i]=1;
    p++;
    s[p]=s[p-1]+1;
    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)
  }
  ans=new Array(p);
  for(i=0;i<p;i++)
    ans[i]=s[i];
  return ans;
}


//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x is a bigInt, and b is an integer, with b<x
function millerRabinInt(x,b) {
  if (mr_x1.length!=x.length) {
    mr_x1=dup(x);
    mr_r=dup(x);
    mr_a=dup(x);
  }

  copyInt_(mr_a,b);
  return millerRabin(x,mr_a);
}

//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x and b are bigInts with b<x
function millerRabin(x,b) {
  var i,j,k,s;

  if (mr_x1.length!=x.length) {
    mr_x1=dup(x);
    mr_r=dup(x);
    mr_a=dup(x);
  }

  copy_(mr_a,b);
  copy_(mr_r,x);
  copy_(mr_x1,x);

  addInt_(mr_r,-1);
  addInt_(mr_x1,-1);

  //s=the highest power of two that divides mr_r
  k=0;
  for (i=0;i<mr_r.length;i++)
    for (j=1;j<mask;j<<=1)
      if (x[i] & j) {
        s=(k<mr_r.length+bpe ? k : 0);
         i=mr_r.length;
         j=mask;
      } else
        k++;

  if (s)
    rightShift_(mr_r,s);

  powMod_(mr_a,mr_r,x);

  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {
    j=1;
    while (j<=s-1 && !equals(mr_a,mr_x1)) {
      squareMod_(mr_a,x);
      if (equalsInt(mr_a,1)) {
        return 0;
      }
      j++;
    }
    if (!equals(mr_a,mr_x1)) {
      return 0;
    }
  }
  return 1;
}

//returns how many bits long the bigInt is, not counting leading zeros.
function bitSize(x) {
  var j,z,w;
  for (j=x.length-1; (x[j]==0) && (j>0); j--);
  for (z=0,w=x[j]; w; (w>>=1),z++);
  z+=bpe*j;
  return z;
}

//return a copy of x with at least n elements, adding leading zeros if needed
function expand(x,n) {
  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);
  copy_(ans,x);
  return ans;
}

//return a k-bit true random prime using Maurer's algorithm.
function randTruePrime(k) {
  var ans=int2bigInt(0,k,0);
  randTruePrime_(ans,k);
  return trim(ans,1);
}

//return a k-bit random probable prime with probability of error < 2^-80
function randProbPrime(k) {
  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3
  if (k>=550) return randProbPrimeRounds(k,4);
  if (k>=500) return randProbPrimeRounds(k,5);
  if (k>=400) return randProbPrimeRounds(k,6);
  if (k>=350) return randProbPrimeRounds(k,7);
  if (k>=300) return randProbPrimeRounds(k,9);
  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4
  if (k>=200) return randProbPrimeRounds(k,15);
  if (k>=150) return randProbPrimeRounds(k,18);
  if (k>=100) return randProbPrimeRounds(k,27);
              return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)
}

//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)
function randProbPrimeRounds(k,n) {
  var ans, i, divisible, B;
  B=30000;  //B is largest prime to use in trial division
  ans=int2bigInt(0,k,0);

  //optimization: try larger and smaller B to find the best limit.

  if (primes.length==0)
    primes=findPrimes(30000);  //check for divisibility by primes <=30000

  if (rpprb.length!=ans.length)
    rpprb=dup(ans);

  for (;;) { //keep trying random values for ans until one appears to be prime
    //optimization: pick a random number times L=2*3*5*...*p, plus a
    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.
    //   This can reduce the amount of random number generation.

    randBigInt_(ans,k,0); //ans = a random odd number to check
    ans[0] |= 1;
    divisible=0;

    //check ans for divisibility by small primes up to B
    for (i=0; (i<primes.length) && (primes[i]<=B); i++)
      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {
        divisible=1;
        break;
      }

    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.

    //do n rounds of Miller Rabin, with random bases less than ans
    for (i=0; i<n && !divisible; i++) {
      randBigInt_(rpprb,k,0);
      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans
        randBigInt_(rpprb,k,0);
      if (!millerRabin(ans,rpprb))
        divisible=1;
    }

    if(!divisible)
      return ans;
  }
}

//return a new bigInt equal to (x mod n) for bigInts x and n.
function mod(x,n) {
  var ans=dup(x);
  mod_(ans,n);
  return trim(ans,1);
}

//return (x+n) where x is a bigInt and n is an integer.
function addInt(x,n) {
  var ans=expand(x,x.length+1);
  addInt_(ans,n);
  return trim(ans,1);
}

//return x*y for bigInts x and y. This is faster when y<x.
function mult(x,y) {
  var ans=expand(x,x.length+y.length);
  mult_(ans,y);
  return trim(ans,1);
}

//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.
function powMod(x,y,n) {
  var ans=expand(x,n.length);
  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't
  return trim(ans,1);
}

//return (x-y) for bigInts x and y.  Negative answers will be 2s complement
function sub(x,y) {
  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));
  sub_(ans,y);
  return trim(ans,1);
}

//return (x+y) for bigInts x and y.
function add(x,y) {
  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));
  add_(ans,y);
  return trim(ans,1);
}

//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
function inverseMod(x,n) {
  var ans=expand(x,n.length);
  var s;
  s=inverseMod_(ans,n);
  return s ? trim(ans,1) : null;
}

//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.
function multMod(x,y,n) {
  var ans=expand(x,n.length);
  multMod_(ans,y,n);
  return trim(ans,1);
}

//generate a k-bit true random prime using Maurer's algorithm,
//and put it into ans.  The bigInt ans must be large enough to hold it.
function randTruePrime_(ans,k) {
  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;

  if (primes.length==0)
      primes=findPrimes(30000);  //check for divisibility by primes <=30000

  if (pows.length==0) {
      pows=new Array(512);
    for (j=0;j<512;j++) {
      pows[j]=Math.pow(2,j/511.-1.);
    }
  }

  //c and m should be tuned for a particular machine and value of k, to maximize speed
  c=0.1;  //c=0.1 in HAC
  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2

  if (s_i2.length!=ans.length) {
    s_i2=dup(ans);
    s_R =dup(ans);
    s_n1=dup(ans);
    s_r2=dup(ans);
    s_d =dup(ans);
    s_x1=dup(ans);
    s_x2=dup(ans);
    s_b =dup(ans);
    s_n =dup(ans);
    s_i =dup(ans);
    s_rm=dup(ans);
    s_q =dup(ans);
    s_a =dup(ans);
    s_aa=dup(ans);
  }

  if (k <= recLimit) {  //generate small random primes by trial division up to its square root
    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)
    copyInt_(ans,0);
    for (dd=1;dd;) {
      dd=0;
      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1
      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)
        if (0==(ans[0]%primes[j])) {
          dd=1;
          break;
        }
      }
    }
    carry_(ans);
    return;
  }

  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).
  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
    for (r=1; k-k*r<=m; )
      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);
  else
    r=.5;

  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.

  recSize=Math.floor(r*k)+1;

  randTruePrime_(s_q,recSize);
  copyInt_(s_i2,0);
  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)
  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))

  z=bitSize(s_i);

  for (;;) {
    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]
      randBigInt_(s_R,z,0);
      if (greater(s_i,s_R))
        break;
    }                //now s_R is in the range [0,s_i-1]
    addInt_(s_R,1);  //now s_R is in the range [1,s_i]
    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]

    copy_(s_n,s_q);
    mult_(s_n,s_R);
    multInt_(s_n,2);
    addInt_(s_n,1);    //s_n=2*s_R*s_q+1

    copy_(s_r2,s_R);
    multInt_(s_r2,2);  //s_r2=2*s_R

    //check s_n for divisibility by small primes up to B
    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)
      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {
        divisible=1;
        break;
      }

    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2
      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_
        divisible=1;

    if (!divisible) {  //if it passes that test, continue checking s_n
      addInt_(s_n,-3);
      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros
      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);
      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros
      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]
        randBigInt_(s_a,zz,0);
        if (greater(s_n,s_a))
          break;
      }                //now s_a is in the range [0,s_n-1]
      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]
      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]
      copy_(s_b,s_a);
      copy_(s_n1,s_n);
      addInt_(s_n1,-1);
      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n
      addInt_(s_b,-1);
      if (isZero(s_b)) {
        copy_(s_b,s_a);
        powMod_(s_b,s_r2,s_n);
        addInt_(s_b,-1);
        copy_(s_aa,s_n);
        copy_(s_d,s_b);
        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime
        if (equalsInt(s_d,1)) {
          copy_(ans,s_aa);
          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime
        }
      }
    }
  }
}

//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
function randBigInt(n,s) {
  var a,b;
  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element
  b=int2bigInt(0,0,a);
  randBigInt_(b,n,s);
  return b;
}

//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.
//Array b must be big enough to hold the result. Must have n>=1
function randBigInt_(b,n,s) {
  var i,a;
  for (i=0;i<b.length;i++)
    b[i]=0;
  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt
  for (i=0;i<a;i++) {
    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));
  }
  b[a-1] &= (2<<((n-1)%bpe))-1;
  if (s==1)
    b[a-1] |= (1<<((n-1)%bpe));
}

//Return the greatest common divisor of bigInts x and y (each with same number of elements).
function GCD(x,y) {
  var xc,yc;
  xc=dup(x);
  yc=dup(y);
  GCD_(xc,yc);
  return xc;
}

//set x to the greatest common divisor of bigInts x and y (each with same number of elements).
//y is destroyed.
function GCD_(x,y) {
  var i,xp,yp,A,B,C,D,q,sing;
  if (T.length!=x.length)
    T=dup(x);

  sing=1;
  while (sing) { //while y has nonzero elements other than y[0]
    sing=0;
    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0
      if (y[i]) {
        sing=1;
        break;
      }
    if (!sing) break; //quit when y all zero elements except possibly y[0]

    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x
    xp=x[i];
    yp=y[i];
    A=1; B=0; C=0; D=1;
    while ((yp+C) && (yp+D)) {
      q =Math.floor((xp+A)/(yp+C));
      qp=Math.floor((xp+B)/(yp+D));
      if (q!=qp)
        break;
      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)
      t= B-q*D;   B=D;   D=t;
      t=xp-q*yp; xp=yp; yp=t;
    }
    if (B) {
      copy_(T,x);
      linComb_(x,y,A,B); //x=A*x+B*y
      linComb_(y,T,D,C); //y=D*y+C*T
    } else {
      mod_(x,y);
      copy_(T,x);
      copy_(x,y);
      copy_(y,T);
    }
  }
  if (y[0]==0)
    return;
  t=modInt(x,y[0]);
  copyInt_(x,y[0]);
  y[0]=t;
  while (y[0]) {
    x[0]%=y[0];
    t=x[0]; x[0]=y[0]; y[0]=t;
  }
}

//do x=x**(-1) mod n, for bigInts x and n.
//If no inverse exists, it sets x to zero and returns 0, else it returns 1.
//The x array must be at least as large as the n array.
function inverseMod_(x,n) {
  var k=1+2*Math.max(x.length,n.length);

  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist
    copyInt_(x,0);
    return 0;
  }

  if (eg_u.length!=k) {
    eg_u=new Array(k);
    eg_v=new Array(k);
    eg_A=new Array(k);
    eg_B=new Array(k);
    eg_C=new Array(k);
    eg_D=new Array(k);
  }

  copy_(eg_u,x);
  copy_(eg_v,n);
  copyInt_(eg_A,1);
  copyInt_(eg_B,0);
  copyInt_(eg_C,0);
  copyInt_(eg_D,1);
  for (;;) {
    while(!(eg_u[0]&1)) {  //while eg_u is even
      halve_(eg_u);
      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A,n);  halve_(eg_A);
        sub_(eg_B,x);  halve_(eg_B);
      }
    }

    while (!(eg_v[0]&1)) {  //while eg_v is even
      halve_(eg_v);
      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C,n);  halve_(eg_C);
        sub_(eg_D,x);  halve_(eg_D);
      }
    }

    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u
      sub_(eg_u,eg_v);
      sub_(eg_A,eg_C);
      sub_(eg_B,eg_D);
    } else {                   //eg_v > eg_u
      sub_(eg_v,eg_u);
      sub_(eg_C,eg_A);
      sub_(eg_D,eg_B);
    }

    if (equalsInt(eg_u,0)) {
      if (negative(eg_C)) //make sure answer is nonnegative
        add_(eg_C,n);
      copy_(x,eg_C);

      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse
        copyInt_(x,0);
        return 0;
      }
      return 1;
    }
  }
}

//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse
function inverseModInt(x,n) {
  var a=1,b=0,t;
  for (;;) {
    if (x==1) return a;
    if (x==0) return 0;
    b-=a*Math.floor(n/x);
    n%=x;

    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=
    if (n==0) return 0;
    a-=b*Math.floor(x/n);
    x%=n;
  }
}

//this deprecated function is for backward compatibility only.
function inverseModInt_(x,n) {
   return inverseModInt(x,n);
}


//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:
//     v = GCD_(x,y) = a*x-b*y
//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.
function eGCD_(x,y,v,a,b) {
  var g=0;
  var k=Math.max(x.length,y.length);
  if (eg_u.length!=k) {
    eg_u=new Array(k);
    eg_A=new Array(k);
    eg_B=new Array(k);
    eg_C=new Array(k);
    eg_D=new Array(k);
  }
  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even
    halve_(x);
    halve_(y);
    g++;
  }
  copy_(eg_u,x);
  copy_(v,y);
  copyInt_(eg_A,1);
  copyInt_(eg_B,0);
  copyInt_(eg_C,0);
  copyInt_(eg_D,1);
  for (;;) {
    while(!(eg_u[0]&1)) {  //while u is even
      halve_(eg_u);
      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A,y);  halve_(eg_A);
        sub_(eg_B,x);  halve_(eg_B);
      }
    }

    while (!(v[0]&1)) {  //while v is even
      halve_(v);
      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C,y);  halve_(eg_C);
        sub_(eg_D,x);  halve_(eg_D);
      }
    }

    if (!greater(v,eg_u)) { //v<=u
      sub_(eg_u,v);
      sub_(eg_A,eg_C);
      sub_(eg_B,eg_D);
    } else {                //v>u
      sub_(v,eg_u);
      sub_(eg_C,eg_A);
      sub_(eg_D,eg_B);
    }
    if (equalsInt(eg_u,0)) {
      if (negative(eg_C)) {   //make sure a (C)is nonnegative
        add_(eg_C,y);
        sub_(eg_D,x);
      }
      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative
      copy_(a,eg_C);
      copy_(b,eg_D);
      leftShift_(v,g);
      return;
    }
  }
}


//is bigInt x negative?
function negative(x) {
  return ((x[x.length-1]>>(bpe-1))&1);
}


//is (x << (shift*bpe)) > y?
//x and y are nonnegative bigInts
//shift is a nonnegative integer
function greaterShift(x,y,shift) {
  var i, kx=x.length, ky=y.length;
  k=((kx+shift)<ky) ? (kx+shift) : ky;
  for (i=ky-1-shift; i<kx && i>=0; i++)
    if (x[i]>0)
      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger
  for (i=kx-1+shift; i<ky; i++)
    if (y[i]>0)
      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger
  for (i=k-1; i>=shift; i--)
    if      (x[i-shift]>y[i]) return 1;
    else if (x[i-shift]<y[i]) return 0;
  return 0;
}

//is x > y? (x and y both nonnegative)
function greater(x,y) {
  var i;
  var k=(x.length<y.length) ? x.length : y.length;

  for (i=x.length;i<y.length;i++)
    if (y[i])
      return 0;  //y has more digits

  for (i=y.length;i<x.length;i++)
    if (x[i])
      return 1;  //x has more digits

  for (i=k-1;i>=0;i--)
    if (x[i]>y[i])
      return 1;
    else if (x[i]<y[i])
      return 0;
  return 0;
}

//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.
//x must have at least one leading zero element.
//y must be nonzero.
//q and r must be arrays that are exactly the same length as x. (Or q can have more).
//Must have x.length >= y.length >= 2.
function divide_(x,y,q,r) {
  var kx, ky;
  var i,j,y1,y2,c,a,b;
  copy_(r,x);
  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros

  //normalize: ensure the most significant element of y has its highest bit set
  b=y[ky-1];
  for (a=0; b; a++)
    b>>=1;
  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element
  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end
  leftShift_(r,a);

  //Rob Visser discovered a bug: the following line was originally just before the normalization.
  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros

  copyInt_(q,0);                      // q=0
  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {
    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)
    q[kx-ky]++;                       //   q[kx-ky]++;
  }                                   // }

  for (i=kx-1; i>=ky; i--) {
    if (r[i]==y[ky-1])
      q[i-ky]=mask;
    else
      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);

    //The following for(;;) loop is equivalent to the commented while loop,
    //except that the uncommented version avoids overflow.
    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0
    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])
    //    q[i-ky]--;
    for (;;) {
      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];
      c=y2>>bpe;
      y2=y2 & mask;
      y1=c+q[i-ky]*y[ky-1];
      c=y1>>bpe;
      y1=y1 & mask;

      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i])
        q[i-ky]--;
      else
        break;
    }

    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)
    if (negative(r)) {
      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)
      q[i-ky]--;
    }
  }

  rightShift_(y,a);  //undo the normalization step
  rightShift_(r,a);  //undo the normalization step
}

//do carries and borrows so each element of the bigInt x fits in bpe bits.
function carry_(x) {
  var i,k,c,b;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i];
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
  }
}

//return x mod n for bigInt x and integer n.
function modInt(x,n) {
  var i,c=0;
  for (i=x.length-1; i>=0; i--)
    c=(c*radix+x[i])%n;
  return c;
}

//convert the integer t into a bigInt with at least the given number of bits.
//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)
//Pad the array with leading zeros so that it has at least minSize elements.
//There will always be at least one leading 0 element.
function int2bigInt(t,bits,minSize) {
  var i,k;
  k=Math.ceil(bits/bpe)+1;
  k=minSize>k ? minSize : k;
  buff=new Array(k);
  copyInt_(buff,t);
  return buff;
}

//return the bigInt given a string representation in a given base.
//Pad the array with leading zeros so that it has at least minSize elements.
//If base=-1, then it reads in a space-separated list of array elements in decimal.
//The array will always have at least one leading zero, unless base=-1.
function str2bigInt(s,base,minSize) {
  var d, i, j, x, y, kk;
  var k=s.length;
  if (base==-1) { //comma-separated list of array elements in decimal
    x=new Array(0);
    for (;;) {
      y=new Array(x.length+1);
      for (i=0;i<x.length;i++)
        y[i+1]=x[i];
      y[0]=parseInt(s,10);
      x=y;
      d=s.indexOf(',',0);
      if (d<1)
        break;
      s=s.substring(d+1);
      if (s.length==0)
        break;
    }
    if (x.length<minSize) {
      y=new Array(minSize);
      copy_(y,x);
      return y;
    }
    return x;
  }

  x=int2bigInt(0,base*k,0);
  for (i=0;i<k;i++) {
    d=digitsStr.indexOf(s.substring(i,i+1),0);
    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36
      d-=26;
    if (d>=base || d<0) {   //stop at first illegal character
      break;
    }
    multInt_(x,base);
    addInt_(x,d);
  }

  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros
  k=minSize>k+1 ? minSize : k+1;
  y=new Array(k);
  kk=k<x.length ? k : x.length;
  for (i=0;i<kk;i++)
    y[i]=x[i];
  for (;i<k;i++)
    y[i]=0;
  return y;
}

//is bigint x equal to integer y?
//y must have less than bpe bits
function equalsInt(x,y) {
  var i;
  if (x[0]!=y)
    return 0;
  for (i=1;i<x.length;i++)
    if (x[i])
      return 0;
  return 1;
}

//are bigints x and y equal?
//this works even if x and y are different lengths and have arbitrarily many leading zeros
function equals(x,y) {
  var i;
  var k=x.length<y.length ? x.length : y.length;
  for (i=0;i<k;i++)
    if (x[i]!=y[i])
      return 0;
  if (x.length>y.length) {
    for (;i<x.length;i++)
      if (x[i])
        return 0;
  } else {
    for (;i<y.length;i++)
      if (y[i])
        return 0;
  }
  return 1;
}

//is the bigInt x equal to zero?
function isZero(x) {
  var i;
  for (i=0;i<x.length;i++)
    if (x[i])
      return 0;
  return 1;
}

//convert a bigInt into a string in a given base, from base 2 up to base 95.
//Base -1 prints the contents of the array representing the number.
function bigInt2str(x,base) {
  var i,t,s="";

  if (s6.length!=x.length)
    s6=dup(x);
  else
    copy_(s6,x);

  if (base==-1) { //return the list of array contents
    for (i=x.length-1;i>0;i--)
      s+=x[i]+',';
    s+=x[0];
  }
  else { //return it in the given base
    while (!isZero(s6)) {
      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);
      s=digitsStr.substring(t,t+1)+s;
    }
  }
  if (s.length==0)
    s="0";
  return s;
}

//returns a duplicate of bigInt x
function dup(x) {
  var i;
  buff=new Array(x.length);
  copy_(buff,x);
  return buff;
}

//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).
function copy_(x,y) {
  var i;
  var k=x.length<y.length ? x.length : y.length;
  for (i=0;i<k;i++)
    x[i]=y[i];
  for (i=k;i<x.length;i++)
    x[i]=0;
}

//do x=y on bigInt x and integer y.
function copyInt_(x,n) {
  var i,c;
  for (c=n,i=0;i<x.length;i++) {
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function addInt_(x,n) {
  var i,k,c,b;
  x[0]+=n;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i];
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
    if (!c) return; //stop carrying as soon as the carry is zero
  }
}

//right shift bigInt x by n bits.  0 <= n < bpe.
function rightShift_(x,n) {
  var i;
  var k=Math.floor(n/bpe);
  if (k) {
    for (i=0;i<x.length-k;i++) //right shift x by k elements
      x[i]=x[i+k];
    for (;i<x.length;i++)
      x[i]=0;
    n%=bpe;
  }
  for (i=0;i<x.length-1;i++) {
    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));
  }
  x[i]>>=n;
}

//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement
function halve_(x) {
  var i;
  for (i=0;i<x.length-1;i++) {
    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));
  }
  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same
}

//left shift bigInt x by n bits.
function leftShift_(x,n) {
  var i;
  var k=Math.floor(n/bpe);
  if (k) {
    for (i=x.length; i>=k; i--) //left shift x by k elements
      x[i]=x[i-k];
    for (;i>=0;i--)
      x[i]=0;
    n%=bpe;
  }
  if (!n)
    return;
  for (i=x.length-1;i>0;i--) {
    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));
  }
  x[i]=mask & (x[i]<<n);
}

//do x=x*n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function multInt_(x,n) {
  var i,k,c,b;
  if (!n)
    return;
  k=x.length;
  c=0;
  for (i=0;i<k;i++) {
    c+=x[i]*n;
    b=0;
    if (c<0) {
      b=-(c>>bpe);
      c+=b*radix;
    }
    x[i]=c & mask;
    c=(c>>bpe)-b;
  }
}

//do x=floor(x/n) for bigInt x and integer n, and return the remainder
function divInt_(x,n) {
  var i,r=0,s;
  for (i=x.length-1;i>=0;i--) {
    s=r*radix+x[i];
    x[i]=Math.floor(s/n);
    r=s%n;
  }
  return r;
}

//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.
//x must be large enough to hold the answer.
function linComb_(x,y,a,b) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  kk=x.length;
  for (c=0,i=0;i<k;i++) {
    c+=a*x[i]+b*y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;i<kk;i++) {
    c+=a*x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.
//x must be large enough to hold the answer.
function linCombShift_(x,y,b,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]+b*y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function addShift_(x,y,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]+y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function subShift_(x,y,ys) {
  var i,c,k,kk;
  k=x.length<ys+y.length ? x.length : ys+y.length;
  kk=x.length;
  for (c=0,i=ys;i<k;i++) {
    c+=x[i]-y[i-ys];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<kk;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x-y for bigInts x and y.
//x must be large enough to hold the answer.
//negative answers will be 2s complement
function sub_(x,y) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  for (c=0,i=0;i<k;i++) {
    c+=x[i]-y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<x.length;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x+y for bigInts x and y.
//x must be large enough to hold the answer.
function add_(x,y) {
  var i,c,k,kk;
  k=x.length<y.length ? x.length : y.length;
  for (c=0,i=0;i<k;i++) {
    c+=x[i]+y[i];
    x[i]=c & mask;
    c>>=bpe;
  }
  for (i=k;c && i<x.length;i++) {
    c+=x[i];
    x[i]=c & mask;
    c>>=bpe;
  }
}

//do x=x*y for bigInts x and y.  This is faster when y<x.
function mult_(x,y) {
  var i;
  if (ss.length!=2*x.length)
    ss=new Array(2*x.length);
  copyInt_(ss,0);
  for (i=0;i<y.length;i++)
    if (y[i])
      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))
  copy_(x,ss);
}

//do x=x mod n for bigInts x and n.
function mod_(x,n) {
  if (s4.length!=x.length)
    s4=dup(x);
  else
    copy_(s4,x);
  if (s5.length!=x.length)
    s5=dup(x);
  divide_(s4,n,s5,x);  //x = remainder of s4 / n
}

//do x=x*y mod n for bigInts x,y,n.
//for greater speed, let y<x.
function multMod_(x,y,n) {
  var i;
  if (s0.length!=2*x.length)
    s0=new Array(2*x.length);
  copyInt_(s0,0);
  for (i=0;i<y.length;i++)
    if (y[i])
      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))
  mod_(s0,n);
  copy_(x,s0);
}

//do x=x*x mod n for bigInts x,n.
function squareMod_(x,n) {
  var i,j,d,c,kx,kn,k;
  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x
  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n
  if (s0.length!=k)
    s0=new Array(k);
  copyInt_(s0,0);
  for (i=0;i<kx;i++) {
    c=s0[2*i]+x[i]*x[i];
    s0[2*i]=c & mask;
    c>>=bpe;
    for (j=i+1;j<kx;j++) {
      c=s0[i+j]+2*x[i]*x[j]+c;
      s0[i+j]=(c & mask);
      c>>=bpe;
    }
    s0[i+kx]=c;
  }
  mod_(s0,n);
  copy_(x,s0);
}

//return x with exactly k leading zero elements
function trim(x,k) {
  var i,y;
  for (i=x.length; i>0 && !x[i-1]; i--);
  y=new Array(i+k);
  copy_(y,x);
  return y;
}

//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.
//this is faster when n is odd.  x usually needs to have as many elements as n.
function powMod_(x,y,n) {
  var k1,k2,kn,np;
  if(s7.length!=n.length)
    s7=dup(n);

  //for even modulus, use a simple square-and-multiply algorithm,
  //rather than using the more complex Montgomery algorithm.
  if ((n[0]&1)==0) {
    copy_(s7,x);
    copyInt_(x,1);
    while(!equalsInt(y,0)) {
      if (y[0]&1)
        multMod_(x,s7,n);
      divInt_(y,2);
      squareMod_(s7,n);
    }
    return;
  }

  //calculate np from n for the Montgomery multiplications
  copyInt_(s7,0);
  for (kn=n.length;kn>0 && !n[kn-1];kn--);
  np=radix-inverseModInt(modInt(n,radix),radix);
  s7[kn]=1;
  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n

  if (s3.length!=x.length)
    s3=dup(x);
  else
    copy_(s3,x);

  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y
  if (y[k1]==0) {  //anything to the 0th power is 1
    copyInt_(x,1);
    return;
  }
  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]
  for (;;) {
    if (!(k2>>=1)) {  //look at next bit of y
      k1--;
      if (k1<0) {
        mont_(x,one,n,np);
        return;
      }
      k2=1<<(bpe-1);
    }
    mont_(x,x,n,np);

    if (k2 & y[k1]) //if next bit is a 1
      mont_(x,s3,n,np);
  }
}


//do x=x*y*Ri mod n for bigInts x,y,n,
//  where Ri = 2**(-kn*bpe) mod n, and kn is the
//  number of elements in the n array, not
//  counting leading zeros.
//x array must have at least as many elemnts as the n array
//It's OK if x and y are the same variable.
//must have:
//  x,y < n
//  n is odd
//  np = -(n^(-1)) mod radix
function mont_(x,y,n,np) {
  var i,j,c,ui,t,ks,
     kn=n.length,
     ky=y.length;

  if (sa.length!=kn)
    sa=new Array(kn);

  copyInt_(sa,0);

  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n
  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y
  ks=sa.length-1; //sa will never have more than this many nonzero elements.

  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers
  for (i=0; i<kn; i++) {
    t=sa[0]+x[i]*y[0];
    ui=((t & mask) * np) & mask;  //the inner "& mask" was needed on Safari (but not MSIE) at one time
    c=(t+ui*n[0]) >> bpe;
    t=x[i];

    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed
    j=1;
    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }
    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }
    sa[j-1]=c & mask;
  }

  if (!greater(n,sa))
    sub_(sa,n);
  copy_(x,sa);
}

/*
 * EnanoMath, an abstraction layer for big-integer (arbitrary precision)
 * mathematics.
 */

var EnanoMathLayers = {};
// EnanoMath layer: Leemon (frontend to BigInt library by Leemon Baird)

EnanoMathLayers.Leemon = {
  Base: 10,
  PowMod: function(a, b, c)
  {
    a = str2bigInt(a, this.Base);
    b = str2bigInt(b, this.Base);
    c = str2bigInt(c, this.Base);
    var result = powMod(a, b, c);
    result = bigInt2str(result, this.Base);
    return result;
  },
  RandomInt: function(bits)
  {
    var result = randBigInt(bits);
    return bigInt2str(result, this.Base);
  }
}

var EnanoMath = EnanoMathLayers.Leemon,

/*
 * The Diffie-Hellman key exchange protocol.
 */

// Our prime number as a base for operations.
    dh_prime = '791658605174853458830696113306796803',

// g, a primitive root used as an exponent
// (2 and 5 are acceptable, but BigInt is faster with odd numbers)
    dh_g = '5';

/*-------------------------- interface ----------------------------*/
/*
 * The Diffie-Hellman key exchange protocol.
 */
mdh = {
// Our prime number as a base for operations.
    prime : dh_prime,
// g, a primitive root used as an exponent
// (2 and 5 are acceptable, but BigInt is faster with odd numbers)
    g : dh_g, 
/**
 * Generates a Diffie-Hellman private key
 * @return string(BigInt)
 */
    gen_private:function(){ return EnanoMath.RandomInt(64); },
/**
 * Calculates the public key from the private key
 * @param string(BigInt)
 * @return string(BigInt)
 */
    gen_public:function(b){ return EnanoMath.PowMod(dh_g, b, dh_prime); },

/**
 * Calculates the shared secret.
 * @param string(BigInt) Our private key
 * @param string(BigInt) Remote party's public key
 * @return string(BigInt)
 */

    gen_shared_secret:function(b, A){ return EnanoMath.PowMod(A, b, dh_prime); }
/* ********************  end D-H   ****************************************** */
};
})(Math,Array);
;
///<jscompress sourcefile="mlib.crypt.md5.js" />
/*
    mmd5
    depends : none
    
    ----history----------
    author: chengzhiyong date: 2014-08-13 action: update depends info
*/
/*-----------------mmd5---------------------------------------------------*/
/*--trim by kugle 2012-07-08 for better speed and compress size-------------*/
var mmd5 = mmd5 || (function(){

    var 
    /**
    @Description: Used Internally. The case of the hex output (0 = lowercase 1 = uppercase)
    */
    /* hexcase = 0, */

    hex_tab = /* hexcase ? "0123456789ABCDEF" : */"0123456789abcdef",
    b64_tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    /**
    @Description: Used Internally. base-64 pad character "=" for strict RFC compliance
    */
    b64pad = '=',

    /**
    @Description: Used Internally. bits per input character. 8 - ASCII; 16 - Unicode
    */
    chrsz = 8;

    /*
     * These are the functions you'll usually want to call
     * They take string arguments and return either hex or base-64 encoded strings
     */

    /**
    @Description: Used Internally.  Add integers, wrapping at 2^32. This uses 16-bit operations internally * to work around bugs in some JS interpreters.
    */
    function safe_add(x, y){
      var lsw = (x & 0xFFFF) + (y & 0xFFFF),
          msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return (msw << 16) | (lsw & 0xFFFF);
    }

    /**
    @Description: Used Internally. Bitwise rotate a 32-bit number to the left.
    */
    function bit_rol(num, cnt){
      return (num << cnt) | (num >>> (32 - cnt));
    }

    /**
    @Description: Used Internally.
    */
    function cmn(q, a, b, x, s, t){
      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
    }

    /**
    @Description: Used Internally.
    */
    function ff(a, b, c, d, x, s, t){
      return cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }

    /**
    @Description: Used Internally.
    */
    function gg(a, b, c, d, x, s, t){
      return cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }

    /**
    @Description: Used Internally.
    */
    function hh(a, b, c, d, x, s, t){
      return cmn(b ^ c ^ d, a, b, x, s, t);
    }

    /**
    @Description: Used Internally.
    */
    function ii(a, b, c, d, x, s, t){
      return cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    /**
    @Description: Used Internally.   Calculate the MD5 of an array of little-endian words, and a bit length
    */
    function core(x, len){

      /* append padding */
      x[len >> 5] |= 0x80 << ((len) % 32);
      x[(((len + 64) >>> 9) << 4) + 14] = len;

      var a =  1732584193,
          b = -271733879,
          c = -1732584194,
          d =  271733878,
          i = 0,
          len = x.length;

      for(; i < len; i += 16){
        var olda = a,
            oldb = b,
            oldc = c,
            oldd = d;

        a = ff(a, b, c, d, x[i+ 0], 7 , -680876936);
        d = ff(d, a, b, c, x[i+ 1], 12, -389564586);
        c = ff(c, d, a, b, x[i+ 2], 17,  606105819);
        b = ff(b, c, d, a, x[i+ 3], 22, -1044525330);
        a = ff(a, b, c, d, x[i+ 4], 7 , -176418897);
        d = ff(d, a, b, c, x[i+ 5], 12,  1200080426);
        c = ff(c, d, a, b, x[i+ 6], 17, -1473231341);
        b = ff(b, c, d, a, x[i+ 7], 22, -45705983);
        a = ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
        d = ff(d, a, b, c, x[i+ 9], 12, -1958414417);
        c = ff(c, d, a, b, x[i+10], 17, -42063);
        b = ff(b, c, d, a, x[i+11], 22, -1990404162);
        a = ff(a, b, c, d, x[i+12], 7 ,  1804603682);
        d = ff(d, a, b, c, x[i+13], 12, -40341101);
        c = ff(c, d, a, b, x[i+14], 17, -1502002290);
        b = ff(b, c, d, a, x[i+15], 22,  1236535329);

        a = gg(a, b, c, d, x[i+ 1], 5 , -165796510);
        d = gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
        c = gg(c, d, a, b, x[i+11], 14,  643717713);
        b = gg(b, c, d, a, x[i+ 0], 20, -373897302);
        a = gg(a, b, c, d, x[i+ 5], 5 , -701558691);
        d = gg(d, a, b, c, x[i+10], 9 ,  38016083);
        c = gg(c, d, a, b, x[i+15], 14, -660478335);
        b = gg(b, c, d, a, x[i+ 4], 20, -405537848);
        a = gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
        d = gg(d, a, b, c, x[i+14], 9 , -1019803690);
        c = gg(c, d, a, b, x[i+ 3], 14, -187363961);
        b = gg(b, c, d, a, x[i+ 8], 20,  1163531501);
        a = gg(a, b, c, d, x[i+13], 5 , -1444681467);
        d = gg(d, a, b, c, x[i+ 2], 9 , -51403784);
        c = gg(c, d, a, b, x[i+ 7], 14,  1735328473);
        b = gg(b, c, d, a, x[i+12], 20, -1926607734);

        a = hh(a, b, c, d, x[i+ 5], 4 , -378558);
        d = hh(d, a, b, c, x[i+ 8], 11, -2022574463);
        c = hh(c, d, a, b, x[i+11], 16,  1839030562);
        b = hh(b, c, d, a, x[i+14], 23, -35309556);
        a = hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
        d = hh(d, a, b, c, x[i+ 4], 11,  1272893353);
        c = hh(c, d, a, b, x[i+ 7], 16, -155497632);
        b = hh(b, c, d, a, x[i+10], 23, -1094730640);
        a = hh(a, b, c, d, x[i+13], 4 ,  681279174);
        d = hh(d, a, b, c, x[i+ 0], 11, -358537222);
        c = hh(c, d, a, b, x[i+ 3], 16, -722521979);
        b = hh(b, c, d, a, x[i+ 6], 23,  76029189);
        a = hh(a, b, c, d, x[i+ 9], 4 , -640364487);
        d = hh(d, a, b, c, x[i+12], 11, -421815835);
        c = hh(c, d, a, b, x[i+15], 16,  530742520);
        b = hh(b, c, d, a, x[i+ 2], 23, -995338651);

        a = ii(a, b, c, d, x[i+ 0], 6 , -198630844);
        d = ii(d, a, b, c, x[i+ 7], 10,  1126891415);
        c = ii(c, d, a, b, x[i+14], 15, -1416354905);
        b = ii(b, c, d, a, x[i+ 5], 21, -57434055);
        a = ii(a, b, c, d, x[i+12], 6 ,  1700485571);
        d = ii(d, a, b, c, x[i+ 3], 10, -1894986606);
        c = ii(c, d, a, b, x[i+10], 15, -1051523);
        b = ii(b, c, d, a, x[i+ 1], 21, -2054922799);
        a = ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
        d = ii(d, a, b, c, x[i+15], 10, -30611744);
        c = ii(c, d, a, b, x[i+ 6], 15, -1560198380);
        b = ii(b, c, d, a, x[i+13], 21,  1309151649);
        a = ii(a, b, c, d, x[i+ 4], 6 , -145523070);
        d = ii(d, a, b, c, x[i+11], 10, -1120210379);
        c = ii(c, d, a, b, x[i+ 2], 15,  718787259);
        b = ii(b, c, d, a, x[i+ 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
      }
      return [a, b, c, d];

    }

    /**
    @Description: Used Internally. Convert a string to an array of little-endian words. If this.chrsz is ASCII, characters >255 have their hi-byte silently ignored.
    */
    function str2binl(str){
        var i = 0, 
            bin = [], 
            mask = (1 << chrsz) - 1;
        for(; i < str.length * chrsz; i += chrsz){
            bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
        }
        return bin;
    }

    /**
    @Description: Used Internally.  Calculate the HMAC-MD5, of a key and some data
    */
    function core_hmac(key, data){

      var hash, i = 0, ipad = new Array(16), opad = new Array(16), bkey = str2binl(key);
      if(bkey.length > 16) {
        bkey = core(bkey, key.length * chrsz);
      }

      for(; i < 16; i++){
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5C5C5C5C;
      }

      hash = core(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
      return core(opad.concat(hash), 512 + 128);
    }

    /**
    @Description: Used Internally. Convert an array of little-endian words to a hex string.
    */
    function binl2hex(binarray){

      var i, str = "";
      for(i = 0, len = binarray.length * 4; i < len; i++)
      {
        str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
               hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
      }
      return str;
    }

    /**
    @Description: Used Internally. Convert an array of little-endian words to a string
    */
    function binl2str(bin){
        var i = 0,
            str = "",
            mask = (1 << chrsz) - 1;
        for(; i < bin.length * 32; i += chrsz){
            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
        }
        return str;
    }

    /**
    @Description: Used Internally.  Convert an array of little-endian words to a base-64 string
    */
    function binl2b64(binarray){
        var triplet,
            j,
            i = 0,
            str = "";
        for(; i < binarray.length * 4; i += 3){
            triplet = (((binarray[i   >> 2] >> 8 * ( i   %4)) & 0xFF) << 16) |(((binarray[i+1 >> 2] >> 8 * ((i+1)%4)) & 0xFF) << 8 ) | ((binarray[i+2 >> 2] >> 8 * ((i+2)%4)) & 0xFF);

            for(j = 0; j < 4; j++){

              if(i * 8 + j * 6 > binarray.length * 32) {
                str += b64pad;
              } else {
                str += b64_tab.charAt((triplet >> 6*(3-j)) & 0x3F);
              }
            }
        }
        return str;
    }

    return {
        /**
        @Description: Used Internally.
        */
        hex:function(s){ return binl2hex(core(str2binl(s), s.length * chrsz)); },
    
        /**
        @Description: Used Internally.
        */
        b64:function(s){ return binl2b64(core(str2binl(s), s.length * chrsz)); },
    
        /**
        @Description: Used Internally.
        */
        str:function(s){ return binl2str(core(str2binl(s), s.length * chrsz)); },
    
        /**
        @Description: Used Internally.
        */
        hex_hmac: function(key, data){ return binl2hex(core_hmac(key, data)); },
    
        /**
        @Description: Used Internally.
        */
        b64_hmac: function(key, data){ return binl2b64(core_hmac(key, data)); },
    
        /**
        @Description: Used Internally.
        */
        str_hmac:function(key, data){ return binl2str(core_hmac(key, data)); }
    };
    
})();
;
///<jscompress sourcefile="video.js" />
/**
 * @license
 * Video.js 6.6.3 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global.videojs = factory());
}(this, (function () {

    var version = "6.6.3";

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var win;

    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof commonjsGlobal !== "undefined") {
        win = commonjsGlobal;
    } else if (typeof self !== "undefined"){
        win = self;
    } else {
        win = {};
    }

    var window_1 = win;

    var empty = {};


    var empty$1 = (Object.freeze || Object)({
        'default': empty
    });

    var minDoc = ( empty$1 && empty ) || empty$1;

    var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
        typeof window !== 'undefined' ? window : {};


    var doccy;

    if (typeof document !== 'undefined') {
        doccy = document;
    } else {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

        if (!doccy) {
            doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
        }
    }

    var document_1 = doccy;

    /**
     * @file browser.js
     * @module browser
     */
    var USER_AGENT = window_1.navigator && window_1.navigator.userAgent || '';
    var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
    var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

    /*
 * Device is an iPhone
 *
 * @type {Boolean}
 * @constant
 * @private
 */
    var IS_IPAD = /iPad/i.test(USER_AGENT);

// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
    var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
    var IS_IPOD = /iPod/i.test(USER_AGENT);
    var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

    var IOS_VERSION = function () {
        var match = USER_AGENT.match(/OS (\d+)_/i);

        if (match && match[1]) {
            return match[1];
        }
        return null;
    }();

    var IS_ANDROID = /Android/i.test(USER_AGENT);
    var ANDROID_VERSION = function () {
        // This matches Android Major.Minor.Patch versions
        // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
        var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

        if (!match) {
            return null;
        }

        var major = match[1] && parseFloat(match[1]);
        var minor = match[2] && parseFloat(match[2]);

        if (major && minor) {
            return parseFloat(match[1] + '.' + match[2]);
        } else if (major) {
            return major;
        }
        return null;
    }();

// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
    var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
    var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

    var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
    var IS_EDGE = /Edge/i.test(USER_AGENT);
    var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
    var CHROME_VERSION = function () {
        var match = USER_AGENT.match(/Chrome\/(\d+)/);

        if (match && match[1]) {
            return parseFloat(match[1]);
        }
        return null;
    }();
    var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
    var IE_VERSION = function () {
        var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
        var version = result && parseFloat(result[1]);

        if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
            // IE 11 has a different user agent string than other IE versions
            version = 11.0;
        }

        return version;
    }();

    var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
    var IS_ANY_SAFARI = IS_SAFARI || IS_IOS;

    var TOUCH_ENABLED = isReal() && ('ontouchstart' in window_1 || window_1.DocumentTouch && window_1.document instanceof window_1.DocumentTouch);

    var BACKGROUND_SIZE_SUPPORTED = isReal() && 'backgroundSize' in window_1.document.createElement('video').style;

    var browser = (Object.freeze || Object)({
        IS_IPAD: IS_IPAD,
        IS_IPHONE: IS_IPHONE,
        IS_IPOD: IS_IPOD,
        IS_IOS: IS_IOS,
        IOS_VERSION: IOS_VERSION,
        IS_ANDROID: IS_ANDROID,
        ANDROID_VERSION: ANDROID_VERSION,
        IS_OLD_ANDROID: IS_OLD_ANDROID,
        IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
        IS_FIREFOX: IS_FIREFOX,
        IS_EDGE: IS_EDGE,
        IS_CHROME: IS_CHROME,
        CHROME_VERSION: CHROME_VERSION,
        IS_IE8: IS_IE8,
        IE_VERSION: IE_VERSION,
        IS_SAFARI: IS_SAFARI,
        IS_ANY_SAFARI: IS_ANY_SAFARI,
        TOUCH_ENABLED: TOUCH_ENABLED,
        BACKGROUND_SIZE_SUPPORTED: BACKGROUND_SIZE_SUPPORTED
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };











    var classCallCheck = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };











    var inherits = function (subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };











    var possibleConstructorReturn = function (self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };











    var taggedTemplateLiteralLoose = function (strings, raw) {
        strings.raw = raw;
        return strings;
    };

    /**
     * @file obj.js
     * @module obj
     */

    /**
     * @callback obj:EachCallback
     *
     * @param {Mixed} value
     *        The current key for the object that is being iterated over.
     *
     * @param {string} key
     *        The current key-value for object that is being iterated over
     */

    /**
     * @callback obj:ReduceCallback
     *
     * @param {Mixed} accum
     *        The value that is accumulating over the reduce loop.
     *
     * @param {Mixed} value
     *        The current key for the object that is being iterated over.
     *
     * @param {string} key
     *        The current key-value for object that is being iterated over
     *
     * @return {Mixed}
     *         The new accumulated value.
     */
    var toString = Object.prototype.toString;

    /**
     * Get the keys of an Object
     *
     * @param {Object}
     *        The Object to get the keys from
     *
     * @return {string[]}
     *         An array of the keys from the object. Returns an empty array if the
     *         object passed in was invalid or had no keys.
     *
     * @private
     */
    var keys = function keys(object) {
        return isObject(object) ? Object.keys(object) : [];
    };

    /**
     * Array-like iteration for objects.
     *
     * @param {Object} object
     *        The object to iterate over
     *
     * @param {obj:EachCallback} fn
     *        The callback function which is called for each key in the object.
     */
    function each(object, fn) {
        keys(object).forEach(function (key) {
            return fn(object[key], key);
        });
    }

    /**
     * Array-like reduce for objects.
     *
     * @param {Object} object
     *        The Object that you want to reduce.
     *
     * @param {Function} fn
     *         A callback function which is called for each key in the object. It
     *         receives the accumulated value and the per-iteration value and key
     *         as arguments.
     *
     * @param {Mixed} [initial = 0]
     *        Starting value
     *
     * @return {Mixed}
     *         The final accumulated value.
     */
    function reduce(object, fn) {
        var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        return keys(object).reduce(function (accum, key) {
            return fn(accum, object[key], key);
        }, initial);
    }

    /**
     * Object.assign-style object shallow merge/extend.
     *
     * @param  {Object} target
     * @param  {Object} ...sources
     * @return {Object}
     */
    function assign(target) {
        for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            sources[_key - 1] = arguments[_key];
        }

        if (Object.assign) {
            return Object.assign.apply(Object, [target].concat(sources));
        }

        sources.forEach(function (source) {
            if (!source) {
                return;
            }

            each(source, function (value, key) {
                target[key] = value;
            });
        });

        return target;
    }

    /**
     * Returns whether a value is an object of any kind - including DOM nodes,
     * arrays, regular expressions, etc. Not functions, though.
     *
     * This avoids the gotcha where using `typeof` on a `null` value
     * results in `'object'`.
     *
     * @param  {Object} value
     * @return {Boolean}
     */
    function isObject(value) {
        return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    }

    /**
     * Returns whether an object appears to be a "plain" object - that is, a
     * direct instance of `Object`.
     *
     * @param  {Object} value
     * @return {Boolean}
     */
    function isPlain(value) {
        return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
    }

    /**
     * @file log.js
     * @module log
     */
    var log = void 0;

// This is the private tracking variable for logging level.
    var level = 'info';

// This is the private tracking variable for the logging history.
    var history = [];

    /**
     * Log messages to the console and history based on the type of message
     *
     * @private
     * @param  {string} type
     *         The name of the console method to use.
     *
     * @param  {Array} args
     *         The arguments to be passed to the matching console method.
     *
     * @param  {boolean} [stringify]
     *         By default, only old IEs should get console argument stringification,
     *         but this is exposed as a parameter to facilitate testing.
     */
    var logByType = function logByType(type, args) {
        var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!IE_VERSION && IE_VERSION < 11;

        var lvl = log.levels[level];
        var lvlRegExp = new RegExp('^(' + lvl + ')$');

        if (type !== 'log') {

            // Add the type to the front of the message when it's not "log".
            args.unshift(type.toUpperCase() + ':');
        }

        // Add a clone of the args at this point to history.
        if (history) {
            history.push([].concat(args));
        }

        // Add console prefix after adding to history.
        args.unshift('VIDEOJS:');

        // If there's no console then don't try to output messages, but they will
        // still be stored in history.
        if (!window_1.console) {
            return;
        }

        // Was setting these once outside of this function, but containing them
        // in the function makes it easier to test cases where console doesn't exist
        // when the module is executed.
        var fn = window_1.console[type];

        if (!fn && type === 'debug') {
            // Certain browsers don't have support for console.debug. For those, we
            // should default to the closest comparable log.
            fn = window_1.console.info || window_1.console.log;
        }

        // Bail out if there's no console or if this type is not allowed by the
        // current logging level.
        if (!fn || !lvl || !lvlRegExp.test(type)) {
            return;
        }

        // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
        // objects and arrays for those less-capable browsers.
        if (stringify) {
            args = args.map(function (a) {
                if (isObject(a) || Array.isArray(a)) {
                    try {
                        return JSON.stringify(a);
                    } catch (x) {
                        return String(a);
                    }
                }

                // Cast to string before joining, so we get null and undefined explicitly
                // included in output (as we would in a modern console).
                return String(a);
            }).join(' ');
        }

        // Old IE versions do not allow .apply() for console methods (they are
        // reported as objects rather than functions).
        if (!fn.apply) {
            fn(args);
        } else {
            fn[Array.isArray(args) ? 'apply' : 'call'](window_1.console, args);
        }
    };

    /**
     * Logs plain debug messages. Similar to `console.log`.
     *
     * @class
     * @param    {Mixed[]} args
     *           One or more messages or objects that should be logged.
     */
    log = function log() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        logByType('log', args);
    };

    /**
     * Enumeration of available logging levels, where the keys are the level names
     * and the values are `|`-separated strings containing logging methods allowed
     * in that logging level. These strings are used to create a regular expression
     * matching the function name being called.
     *
     * Levels provided by video.js are:
     *
     * - `off`: Matches no calls. Any value that can be cast to `false` will have
     *   this effect. The most restrictive.
     * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
     *   `log.warn`, and `log.error`).
     * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
     * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
     * - `warn`: Matches `log.warn` and `log.error` calls.
     * - `error`: Matches only `log.error` calls.
     *
     * @type {Object}
     */
    log.levels = {
        all: 'debug|log|warn|error',
        off: '',
        debug: 'debug|log|warn|error',
        info: 'log|warn|error',
        warn: 'warn|error',
        error: 'error',
        DEFAULT: level
    };

    /**
     * Get or set the current logging level. If a string matching a key from
     * {@link log.levels} is provided, acts as a setter. Regardless of argument,
     * returns the current logging level.
     *
     * @param  {string} [lvl]
     *         Pass to set a new logging level.
     *
     * @return {string}
     *         The current logging level.
     */
    log.level = function (lvl) {
        if (typeof lvl === 'string') {
            if (!log.levels.hasOwnProperty(lvl)) {
                throw new Error('"' + lvl + '" in not a valid log level');
            }
            level = lvl;
        }
        return level;
    };

    /**
     * Returns an array containing everything that has been logged to the history.
     *
     * This array is a shallow clone of the internal history record. However, its
     * contents are _not_ cloned; so, mutating objects inside this array will
     * mutate them in history.
     *
     * @return {Array}
     */
    log.history = function () {
        return history ? [].concat(history) : [];
    };

    /**
     * Clears the internal history tracking, but does not prevent further history
     * tracking.
     */
    log.history.clear = function () {
        if (history) {
            history.length = 0;
        }
    };

    /**
     * Disable history tracking if it is currently enabled.
     */
    log.history.disable = function () {
        if (history !== null) {
            history.length = 0;
            history = null;
        }
    };

    /**
     * Enable history tracking if it is currently disabled.
     */
    log.history.enable = function () {
        if (history === null) {
            history = [];
        }
    };

    /**
     * Logs error messages. Similar to `console.error`.
     *
     * @param {Mixed[]} args
     *        One or more messages or objects that should be logged as an error
     */
    log.error = function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return logByType('error', args);
    };

    /**
     * Logs warning messages. Similar to `console.warn`.
     *
     * @param {Mixed[]} args
     *        One or more messages or objects that should be logged as a warning.
     */
    log.warn = function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return logByType('warn', args);
    };

    /**
     * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
     * log if `console.debug` is not available
     *
     * @param {Mixed[]} args
     *        One or more messages or objects that should be logged as debug.
     */
    log.debug = function () {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return logByType('debug', args);
    };

    var log$1 = log;

    function clean (s) {
        return s.replace(/\n\r?\s*/g, '')
    }


    var tsml = function tsml (sa) {
        var s = ''
            , i = 0;

        for (; i < arguments.length; i++)
            s += clean(sa[i]) + (arguments[i + 1] || '');

        return s
    };

    /**
     * @file computed-style.js
     * @module computed-style
     */
    /**
     * A safe getComputedStyle with an IE8 fallback.
     *
     * This is needed because in Firefox, if the player is loaded in an iframe with
     * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
     * make sure  that the player doesn't break in these cases.
     *
     * @param {Element} el
     *        The element you want the computed style of
     *
     * @param {string} prop
     *        The property name you want
     *
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
     *
     * @static
     * @const
     */
    function computedStyle(el, prop) {
        if (!el || !prop) {
            return '';
        }

        if (typeof window_1.getComputedStyle === 'function') {
            var cs = window_1.getComputedStyle(el);

            return cs ? cs[prop] : '';
        }

        return el.currentStyle[prop] || '';
    }

    var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

    /**
     * @file dom.js
     * @module dom
     */
    /**
     * Detect if a value is a string with any non-whitespace characters.
     *
     * @param {string} str
     *        The string to check
     *
     * @return {boolean}
     *         - True if the string is non-blank
     *         - False otherwise
     *
     */
    function isNonBlankString(str) {
        return typeof str === 'string' && /\S/.test(str);
    }

    /**
     * Throws an error if the passed string has whitespace. This is used by
     * class methods to be relatively consistent with the classList API.
     *
     * @param {string} str
     *         The string to check for whitespace.
     *
     * @throws {Error}
     *         Throws an error if there is whitespace in the string.
     *
     */
    function throwIfWhitespace(str) {
        if (/\s/.test(str)) {
            throw new Error('class has illegal whitespace characters');
        }
    }

    /**
     * Produce a regular expression for matching a className within an elements className.
     *
     * @param {string} className
     *         The className to generate the RegExp for.
     *
     * @return {RegExp}
     *         The RegExp that will check for a specific `className` in an elements
     *         className.
     */
    function classRegExp(className) {
        return new RegExp('(^|\\s)' + className + '($|\\s)');
    }

    /**
     * Whether the current DOM interface appears to be real.
     *
     * @return {Boolean}
     */
    function isReal() {
        return (

            // Both document and window will never be undefined thanks to `global`.
            document_1 === window_1.document &&

            // In IE < 9, DOM methods return "object" as their type, so all we can
            // confidently check is that it exists.
            typeof document_1.createElement !== 'undefined'
        );
    }

    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @param {Mixed} value
     *        The thing to check
     *
     * @return {boolean}
     *         - True if it is a DOM element
     *         - False otherwise
     */
    function isEl(value) {
        return isObject(value) && value.nodeType === 1;
    }

    /**
     * Determines if the current DOM is embedded in an iframe.
     *
     * @return {boolean}
     *
     */
    function isInFrame() {

        // We need a try/catch here because Safari will throw errors when attempting
        // to get either `parent` or `self`
        try {
            return window_1.parent !== window_1.self;
        } catch (x) {
            return true;
        }
    }

    /**
     * Creates functions to query the DOM using a given method.
     *
     * @param {string} method
     *         The method to create the query with.
     *
     * @return {Function}
     *         The query method
     */
    function createQuerier(method) {
        return function (selector, context) {
            if (!isNonBlankString(selector)) {
                return document_1[method](null);
            }
            if (isNonBlankString(context)) {
                context = document_1.querySelector(context);
            }

            var ctx = isEl(context) ? context : document_1;

            return ctx[method] && ctx[method](selector);
        };
    }

    /**
     * Creates an element and applies properties.
     *
     * @param {string} [tagName='div']
     *         Name of tag to be created.
     *
     * @param {Object} [properties={}]
     *         Element properties to be applied.
     *
     * @param {Object} [attributes={}]
     *         Element attributes to be applied.
     *
     * @param {String|Element|TextNode|Array|Function} [content]
     *         Contents for the element (see: {@link dom:normalizeContent})
     *
     * @return {Element}
     *         The element that was created.
     */
    function createEl() {
        var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var content = arguments[3];

        var el = document_1.createElement(tagName);

        Object.getOwnPropertyNames(properties).forEach(function (propName) {
            var val = properties[propName];

            // See #2176
            // We originally were accepting both properties and attributes in the
            // same object, but that doesn't work so well.
            if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
                log$1.warn(tsml(_templateObject, propName, val));
                el.setAttribute(propName, val);

                // Handle textContent since it's not supported everywhere and we have a
                // method for it.
            } else if (propName === 'textContent') {
                textContent(el, val);
            } else {
                el[propName] = val;
            }
        });

        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
            el.setAttribute(attrName, attributes[attrName]);
        });

        if (content) {
            appendContent(el, content);
        }

        return el;
    }

    /**
     * Injects text into an element, replacing any existing contents entirely.
     *
     * @param {Element} el
     *        The element to add text content into
     *
     * @param {string} text
     *        The text content to add.
     *
     * @return {Element}
     *         The element with added text content.
     */
    function textContent(el, text) {
        if (typeof el.textContent === 'undefined') {
            el.innerText = text;
        } else {
            el.textContent = text;
        }
        return el;
    }

    /**
     * Insert an element as the first child node of another
     *
     * @param {Element} child
     *        Element to insert
     *
     * @param {Element} parent
     *        Element to insert child into
     */
    function prependTo(child, parent) {
        if (parent.firstChild) {
            parent.insertBefore(child, parent.firstChild);
        } else {
            parent.appendChild(child);
        }
    }

    /**
     * Check if an element has a CSS class
     *
     * @param {Element} element
     *        Element to check
     *
     * @param {string} classToCheck
     *        Class name to check for
     *
     * @return {boolean}
     *         - True if the element had the class
     *         - False otherwise.
     *
     * @throws {Error}
     *         Throws an error if `classToCheck` has white space.
     */
    function hasClass(element, classToCheck) {
        throwIfWhitespace(classToCheck);
        if (element.classList) {
            return element.classList.contains(classToCheck);
        }
        return classRegExp(classToCheck).test(element.className);
    }

    /**
     * Add a CSS class name to an element
     *
     * @param {Element} element
     *        Element to add class name to.
     *
     * @param {string} classToAdd
     *        Class name to add.
     *
     * @return {Element}
     *         The dom element with the added class name.
     */
    function addClass(element, classToAdd) {
        if (element.classList) {
            element.classList.add(classToAdd);

            // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
            // in the case of classList not being supported.
        } else if (!hasClass(element, classToAdd)) {
            element.className = (element.className + ' ' + classToAdd).trim();
        }

        return element;
    }

    /**
     * Remove a CSS class name from an element
     *
     * @param {Element} element
     *        Element to remove a class name from.
     *
     * @param {string} classToRemove
     *        Class name to remove
     *
     * @return {Element}
     *         The dom element with class name removed.
     */
    function removeClass(element, classToRemove) {
        if (element.classList) {
            element.classList.remove(classToRemove);
        } else {
            throwIfWhitespace(classToRemove);
            element.className = element.className.split(/\s+/).filter(function (c) {
                return c !== classToRemove;
            }).join(' ');
        }

        return element;
    }

    /**
     * The callback definition for toggleElClass.
     *
     * @callback Dom~PredicateCallback
     * @param {Element} element
     *        The DOM element of the Component.
     *
     * @param {string} classToToggle
     *        The `className` that wants to be toggled
     *
     * @return {boolean|undefined}
     *         - If true the `classToToggle` will get added to `element`.
     *         - If false the `classToToggle` will get removed from `element`.
     *         - If undefined this callback will be ignored
     */

    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @param {Element} element
     *        The element to toggle a class name on.
     *
     * @param {string} classToToggle
     *        The class that should be toggled
     *
     * @param {boolean|PredicateCallback} [predicate]
     *        See the return value for {@link Dom~PredicateCallback}
     *
     * @return {Element}
     *         The element with a class that has been toggled.
     */
    function toggleClass(element, classToToggle, predicate) {

        // This CANNOT use `classList` internally because IE does not support the
        // second parameter to the `classList.toggle()` method! Which is fine because
        // `classList` will be used by the add/remove functions.
        var has = hasClass(element, classToToggle);

        if (typeof predicate === 'function') {
            predicate = predicate(element, classToToggle);
        }

        if (typeof predicate !== 'boolean') {
            predicate = !has;
        }

        // If the necessary class operation matches the current state of the
        // element, no action is required.
        if (predicate === has) {
            return;
        }

        if (predicate) {
            addClass(element, classToToggle);
        } else {
            removeClass(element, classToToggle);
        }

        return element;
    }

    /**
     * Apply attributes to an HTML element.
     *
     * @param {Element} el
     *        Element to add attributes to.
     *
     * @param {Object} [attributes]
     *        Attributes to be applied.
     */
    function setAttributes(el, attributes) {
        Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
            var attrValue = attributes[attrName];

            if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
                el.removeAttribute(attrName);
            } else {
                el.setAttribute(attrName, attrValue === true ? '' : attrValue);
            }
        });
    }

    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @param {Element} tag
     *        Element from which to get tag attributes.
     *
     * @return {Object}
     *         All attributes of the element.
     */
    function getAttributes(tag) {
        var obj = {};

        // known boolean attributes
        // we can check for matching boolean properties, but older browsers
        // won't know about HTML5 boolean attributes that we still read from
        var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';

        if (tag && tag.attributes && tag.attributes.length > 0) {
            var attrs = tag.attributes;

            for (var i = attrs.length - 1; i >= 0; i--) {
                var attrName = attrs[i].name;
                var attrVal = attrs[i].value;

                // check for known booleans
                // the matching element property will return a value for typeof
                if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
                    // the value of an included boolean attribute is typically an empty
                    // string ('') which would equal false if we just check for a false value.
                    // we also don't want support bad code like autoplay='false'
                    attrVal = attrVal !== null ? true : false;
                }

                obj[attrName] = attrVal;
            }
        }

        return obj;
    }

    /**
     * Get the value of an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to get the value of
     *
     * @return {string}
     *         value of the attribute
     */
    function getAttribute(el, attribute) {
        return el.getAttribute(attribute);
    }

    /**
     * Set the value of an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to set
     *
     * @param {string} value
     *        Value to set the attribute to
     */
    function setAttribute(el, attribute, value) {
        el.setAttribute(attribute, value);
    }

    /**
     * Remove an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to remove
     */
    function removeAttribute(el, attribute) {
        el.removeAttribute(attribute);
    }

    /**
     * Attempt to block the ability to select text while dragging controls
     */
    function blockTextSelection() {
        document_1.body.focus();
        document_1.onselectstart = function () {
            return false;
        };
    }

    /**
     * Turn off text selection blocking
     */
    function unblockTextSelection() {
        document_1.onselectstart = function () {
            return true;
        };
    }

    /**
     * Identical to the native `getBoundingClientRect` function, but ensures that
     * the method is supported at all (it is in all browsers we claim to support)
     * and that the element is in the DOM before continuing.
     *
     * This wrapper function also shims properties which are not provided by some
     * older browsers (namely, IE8).
     *
     * Additionally, some browsers do not support adding properties to a
     * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
     * properties (except `x` and `y` which are not widely supported). This helps
     * avoid implementations where keys are non-enumerable.
     *
     * @param  {Element} el
     *         Element whose `ClientRect` we want to calculate.
     *
     * @return {Object|undefined}
     *         Always returns a plain
     */
    function getBoundingClientRect(el) {
        if (el && el.getBoundingClientRect && el.parentNode) {
            var rect = el.getBoundingClientRect();
            var result = {};

            ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
                if (rect[k] !== undefined) {
                    result[k] = rect[k];
                }
            });

            if (!result.height) {
                result.height = parseFloat(computedStyle(el, 'height'));
            }

            if (!result.width) {
                result.width = parseFloat(computedStyle(el, 'width'));
            }

            return result;
        }
    }

    /**
     * The postion of a DOM element on the page.
     *
     * @typedef {Object} module:dom~Position
     *
     * @property {number} left
     *           Pixels to the left
     *
     * @property {number} top
     *           Pixels on top
     */

    /**
     * Offset Left.
     * getBoundingClientRect technique from
     * John Resig
     *
     * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
     *
     * @param {Element} el
     *        Element from which to get offset
     *
     * @return {module:dom~Position}
     *         The position of the element that was passed in.
     */
    function findPosition(el) {
        var box = void 0;

        if (el.getBoundingClientRect && el.parentNode) {
            box = el.getBoundingClientRect();
        }

        if (!box) {
            return {
                left: 0,
                top: 0
            };
        }

        var docEl = document_1.documentElement;
        var body = document_1.body;

        var clientLeft = docEl.clientLeft || body.clientLeft || 0;
        var scrollLeft = window_1.pageXOffset || body.scrollLeft;
        var left = box.left + scrollLeft - clientLeft;

        var clientTop = docEl.clientTop || body.clientTop || 0;
        var scrollTop = window_1.pageYOffset || body.scrollTop;
        var top = box.top + scrollTop - clientTop;

        // Android sometimes returns slightly off decimal values, so need to round
        return {
            left: Math.round(left),
            top: Math.round(top)
        };
    }

    /**
     * x and y coordinates for a dom element or mouse pointer
     *
     * @typedef {Object} Dom~Coordinates
     *
     * @property {number} x
     *           x coordinate in pixels
     *
     * @property {number} y
     *           y coordinate in pixels
     */

    /**
     * Get pointer position in element
     * Returns an object with x and y coordinates.
     * The base on the coordinates are the bottom left of the element.
     *
     * @param {Element} el
     *        Element on which to get the pointer position on
     *
     * @param {EventTarget~Event} event
     *        Event object
     *
     * @return {Dom~Coordinates}
     *         A Coordinates object corresponding to the mouse position.
     *
     */
    function getPointerPosition(el, event) {
        var position = {};
        var box = findPosition(el);
        var boxW = el.offsetWidth;
        var boxH = el.offsetHeight;

        var boxY = box.top;
        var boxX = box.left;
        var pageY = event.pageY;
        var pageX = event.pageX;

        if (event.changedTouches) {
            pageX = event.changedTouches[0].pageX;
            pageY = event.changedTouches[0].pageY;
        }

        position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
        position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

        return position;
    }

    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @param {Mixed} value
     *        Check if this value is a text node.
     *
     * @return {boolean}
     *         - True if it is a text node
     *         - False otherwise
     */
    function isTextNode(value) {
        return isObject(value) && value.nodeType === 3;
    }

    /**
     * Empties the contents of an element.
     *
     * @param {Element} el
     *        The element to empty children from
     *
     * @return {Element}
     *         The element with no children
     */
    function emptyEl(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
        return el;
    }

    /**
     * Normalizes content for eventual insertion into the DOM.
     *
     * This allows a wide range of content definition methods, but protects
     * from falling into the trap of simply writing to `innerHTML`, which is
     * an XSS concern.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        - String: Normalized into a text node.
     *        - Element/TextNode: Passed through.
     *        - Array: A one-dimensional array of strings, elements, nodes, or functions
     *          (which return single strings, elements, or nodes).
     *        - Function: If the sole argument, is expected to produce a string, element,
     *          node, or array as defined above.
     *
     * @return {Array}
     *         All of the content that was passed in normalized.
     */
    function normalizeContent(content) {

        // First, invoke content if it is a function. If it produces an array,
        // that needs to happen before normalization.
        if (typeof content === 'function') {
            content = content();
        }

        // Next up, normalize to an array, so one or many items can be normalized,
        // filtered, and returned.
        return (Array.isArray(content) ? content : [content]).map(function (value) {

            // First, invoke value if it is a function to produce a new value,
            // which will be subsequently normalized to a Node of some kind.
            if (typeof value === 'function') {
                value = value();
            }

            if (isEl(value) || isTextNode(value)) {
                return value;
            }

            if (typeof value === 'string' && /\S/.test(value)) {
                return document_1.createTextNode(value);
            }
        }).filter(function (value) {
            return value;
        });
    }

    /**
     * Normalizes and appends content to an element.
     *
     * @param {Element} el
     *        Element to append normalized content to.
     *
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        See the `content` argument of {@link dom:normalizeContent}
     *
     * @return {Element}
     *         The element with appended normalized content.
     */
    function appendContent(el, content) {
        normalizeContent(content).forEach(function (node) {
            return el.appendChild(node);
        });
        return el;
    }

    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * @param {Element} el
     *        Element to insert normalized content into.
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        See the `content` argument of {@link dom:normalizeContent}
     *
     * @return {Element}
     *         The element with inserted normalized content.
     *
     */
    function insertContent(el, content) {
        return appendContent(emptyEl(el), content);
    }

    /**
     * Check if event was a single left click
     *
     * @param {EventTarget~Event} event
     *        Event object
     *
     * @return {boolean}
     *         - True if a left click
     *         - False if not a left click
     */
    function isSingleLeftClick(event) {
        // Note: if you create something draggable, be sure to
        // call it on both `mousedown` and `mousemove` event,
        // otherwise `mousedown` should be enough for a button

        if (event.button === undefined && event.buttons === undefined) {
            // Why do we need `butttons` ?
            // Because, middle mouse sometimes have this:
            // e.button === 0 and e.buttons === 4
            // Furthermore, we want to prevent combination click, something like
            // HOLD middlemouse then left click, that would be
            // e.button === 0, e.buttons === 5
            // just `button` is not gonna work

            // Alright, then what this block does ?
            // this is for chrome `simulate mobile devices`
            // I want to support this as well

            return true;
        }

        if (event.button === 0 && event.buttons === undefined) {
            // Touch screen, sometimes on some specific device, `buttons`
            // doesn't have anything (safari on ios, blackberry...)

            return true;
        }

        if (IE_VERSION === 9) {
            // Ignore IE9

            return true;
        }

        if (event.button !== 0 || event.buttons !== 1) {
            // This is the reason we have those if else block above
            // if any special case we can catch and let it slide
            // we do it above, when get to here, this definitely
            // is-not-left-click

            return false;
        }

        return true;
    }

    /**
     * Finds a single DOM element matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelector`.
     *
     * @param {Element|String} [context=document]
     *        A DOM element within which to query. Can also be a selector
     *        string in which case the first matching element will be used
     *        as context. If missing (or no element matches selector), falls
     *        back to `document`.
     *
     * @return {Element|null}
     *         The element that was found or null.
     */
    var $ = createQuerier('querySelector');

    /**
     * Finds a all DOM elements matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @param {string} selector
     *           A valid CSS selector, which will be passed to `querySelectorAll`.
     *
     * @param {Element|String} [context=document]
     *           A DOM element within which to query. Can also be a selector
     *           string in which case the first matching element will be used
     *           as context. If missing (or no element matches selector), falls
     *           back to `document`.
     *
     * @return {NodeList}
     *         A element list of elements that were found. Will be empty if none were found.
     *
     */
    var $$ = createQuerier('querySelectorAll');



    var Dom = (Object.freeze || Object)({
        isReal: isReal,
        isEl: isEl,
        isInFrame: isInFrame,
        createEl: createEl,
        textContent: textContent,
        prependTo: prependTo,
        hasClass: hasClass,
        addClass: addClass,
        removeClass: removeClass,
        toggleClass: toggleClass,
        setAttributes: setAttributes,
        getAttributes: getAttributes,
        getAttribute: getAttribute,
        setAttribute: setAttribute,
        removeAttribute: removeAttribute,
        blockTextSelection: blockTextSelection,
        unblockTextSelection: unblockTextSelection,
        getBoundingClientRect: getBoundingClientRect,
        findPosition: findPosition,
        getPointerPosition: getPointerPosition,
        isTextNode: isTextNode,
        emptyEl: emptyEl,
        normalizeContent: normalizeContent,
        appendContent: appendContent,
        insertContent: insertContent,
        isSingleLeftClick: isSingleLeftClick,
        $: $,
        $$: $$
    });

    /**
     * @file guid.js
     * @module guid
     */

    /**
     * Unique ID for an element or function
     * @type {Number}
     */
    var _guid = 1;

    /**
     * Get a unique auto-incrementing ID by number that has not been returned before.
     *
     * @return {number}
     *         A new unique ID.
     */
    function newGUID() {
        return _guid++;
    }

    /**
     * @file dom-data.js
     * @module dom-data
     */
    /**
     * Element Data Store.
     *
     * Allows for binding data to an element without putting it directly on the
     * element. Ex. Event listeners are stored here.
     * (also from jsninja.com, slightly modified and updated for closure compiler)
     *
     * @type {Object}
     * @private
     */
    var elData = {};

    /*
 * Unique attribute name to store an element's guid in
 *
 * @type {String}
 * @constant
 * @private
 */
    var elIdAttr = 'vdata' + new Date().getTime();

    /**
     * Returns the cache object where data for an element is stored
     *
     * @param {Element} el
     *        Element to store data for.
     *
     * @return {Object}
     *         The cache object for that el that was passed in.
     */
    function getData(el) {
        var id = el[elIdAttr];

        if (!id) {
            id = el[elIdAttr] = newGUID();
        }

        if (!elData[id]) {
            elData[id] = {};
        }

        return elData[id];
    }

    /**
     * Returns whether or not an element has cached data
     *
     * @param {Element} el
     *        Check if this element has cached data.
     *
     * @return {boolean}
     *         - True if the DOM element has cached data.
     *         - False otherwise.
     */
    function hasData(el) {
        var id = el[elIdAttr];

        if (!id) {
            return false;
        }

        return !!Object.getOwnPropertyNames(elData[id]).length;
    }

    /**
     * Delete data for the element from the cache and the guid attr from getElementById
     *
     * @param {Element} el
     *        Remove cached data for this element.
     */
    function removeData(el) {
        var id = el[elIdAttr];

        if (!id) {
            return;
        }

        // Remove all stored data
        delete elData[id];

        // Remove the elIdAttr property from the DOM node
        try {
            delete el[elIdAttr];
        } catch (e) {
            if (el.removeAttribute) {
                el.removeAttribute(elIdAttr);
            } else {
                // IE doesn't appear to support removeAttribute on the document element
                el[elIdAttr] = null;
            }
        }
    }

    /**
     * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
     * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
     * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
     * robust as jquery's, so there's probably some differences.
     *
     * @module events
     */

    /**
     * Clean up the listener cache and dispatchers
     *
     * @param {Element|Object} elem
     *        Element to clean up
     *
     * @param {string} type
     *        Type of event to clean up
     */
    function _cleanUpEvents(elem, type) {
        var data = getData(elem);

        // Remove the events of a particular type if there are none left
        if (data.handlers[type].length === 0) {
            delete data.handlers[type];
            // data.handlers[type] = null;
            // Setting to null was causing an error with data.handlers

            // Remove the meta-handler from the element
            if (elem.removeEventListener) {
                elem.removeEventListener(type, data.dispatcher, false);
            } else if (elem.detachEvent) {
                elem.detachEvent('on' + type, data.dispatcher);
            }
        }

        // Remove the events object if there are no types left
        if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
            delete data.handlers;
            delete data.dispatcher;
            delete data.disabled;
        }

        // Finally remove the element data if there is no data left
        if (Object.getOwnPropertyNames(data).length === 0) {
            removeData(elem);
        }
    }

    /**
     * Loops through an array of event types and calls the requested method for each type.
     *
     * @param {Function} fn
     *        The event method we want to use.
     *
     * @param {Element|Object} elem
     *        Element or object to bind listeners to
     *
     * @param {string} type
     *        Type of event to bind to.
     *
     * @param {EventTarget~EventListener} callback
     *        Event listener.
     */
    function _handleMultipleEvents(fn, elem, types, callback) {
        types.forEach(function (type) {
            // Call the event method for each one of the types
            fn(elem, type, callback);
        });
    }

    /**
     * Fix a native event to have standard property values
     *
     * @param {Object} event
     *        Event object to fix.
     *
     * @return {Object}
     *         Fixed event object.
     */
    function fixEvent(event) {

        function returnTrue() {
            return true;
        }

        function returnFalse() {
            return false;
        }

        // Test if fixing up is needed
        // Used to check if !event.stopPropagation instead of isPropagationStopped
        // But native events return true for stopPropagation, but don't have
        // other expected methods like isPropagationStopped. Seems to be a problem
        // with the Javascript Ninja code. So we're just overriding all events now.
        if (!event || !event.isPropagationStopped) {
            var old = event || window_1.event;

            event = {};
            // Clone the old object so that we can modify the values event = {};
            // IE8 Doesn't like when you mess with native event properties
            // Firefox returns false for event.hasOwnProperty('type') and other props
            //  which makes copying more difficult.
            // TODO: Probably best to create a whitelist of event props
            for (var key in old) {
                // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
                // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
                // and webkitMovementX/Y
                if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
                    // Chrome 32+ warns if you try to copy deprecated returnValue, but
                    // we still want to if preventDefault isn't supported (IE8).
                    if (!(key === 'returnValue' && old.preventDefault)) {
                        event[key] = old[key];
                    }
                }
            }

            // The event occurred on this element
            if (!event.target) {
                event.target = event.srcElement || document_1;
            }

            // Handle which other element the event is related to
            if (!event.relatedTarget) {
                event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
            }

            // Stop the default browser action
            event.preventDefault = function () {
                if (old.preventDefault) {
                    old.preventDefault();
                }
                event.returnValue = false;
                old.returnValue = false;
                event.defaultPrevented = true;
            };

            event.defaultPrevented = false;

            // Stop the event from bubbling
            event.stopPropagation = function () {
                if (old.stopPropagation) {
                    old.stopPropagation();
                }
                event.cancelBubble = true;
                old.cancelBubble = true;
                event.isPropagationStopped = returnTrue;
            };

            event.isPropagationStopped = returnFalse;

            // Stop the event from bubbling and executing other handlers
            event.stopImmediatePropagation = function () {
                if (old.stopImmediatePropagation) {
                    old.stopImmediatePropagation();
                }
                event.isImmediatePropagationStopped = returnTrue;
                event.stopPropagation();
            };

            event.isImmediatePropagationStopped = returnFalse;

            // Handle mouse position
            if (event.clientX !== null && event.clientX !== undefined) {
                var doc = document_1.documentElement;
                var body = document_1.body;

                event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }

            // Handle key presses
            event.which = event.charCode || event.keyCode;

            // Fix button for mouse clicks:
            // 0 == left; 1 == middle; 2 == right
            if (event.button !== null && event.button !== undefined) {

                // The following is disabled because it does not pass videojs-standard
                // and... yikes.
                /* eslint-disable */
                event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
                /* eslint-enable */
            }
        }

        // Returns fixed-up instance
        return event;
    }

    /**
     * Whether passive event listeners are supported
     */
    var _supportsPassive = false;

    (function () {
        try {
            var opts = Object.defineProperty({}, 'passive', {
                get: function get() {
                    _supportsPassive = true;
                }
            });

            window_1.addEventListener('test', null, opts);
            window_1.removeEventListener('test', null, opts);
        } catch (e) {
            // disregard
        }
    })();

    /**
     * Touch events Chrome expects to be passive
     */
    var passiveEvents = ['touchstart', 'touchmove'];

    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @param {Element|Object} elem
     *        Element or object to bind listeners to
     *
     * @param {string|string[]} type
     *        Type of event to bind to.
     *
     * @param {EventTarget~EventListener} fn
     *        Event listener.
     */
    function on(elem, type, fn) {
        if (Array.isArray(type)) {
            return _handleMultipleEvents(on, elem, type, fn);
        }

        var data = getData(elem);

        // We need a place to store all our handler data
        if (!data.handlers) {
            data.handlers = {};
        }

        if (!data.handlers[type]) {
            data.handlers[type] = [];
        }

        if (!fn.guid) {
            fn.guid = newGUID();
        }

        data.handlers[type].push(fn);

        if (!data.dispatcher) {
            data.disabled = false;

            data.dispatcher = function (event, hash) {

                if (data.disabled) {
                    return;
                }

                event = fixEvent(event);

                var handlers = data.handlers[event.type];

                if (handlers) {
                    // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
                    var handlersCopy = handlers.slice(0);

                    for (var m = 0, n = handlersCopy.length; m < n; m++) {
                        if (event.isImmediatePropagationStopped()) {
                            break;
                        } else {
                            try {
                                handlersCopy[m].call(elem, event, hash);
                            } catch (e) {
                                log$1.error(e);
                            }
                        }
                    }
                }
            };
        }

        if (data.handlers[type].length === 1) {
            if (elem.addEventListener) {
                var options = false;

                if (_supportsPassive && passiveEvents.indexOf(type) > -1) {
                    options = { passive: true };
                }
                elem.addEventListener(type, data.dispatcher, options);
            } else if (elem.attachEvent) {
                elem.attachEvent('on' + type, data.dispatcher);
            }
        }
    }

    /**
     * Removes event listeners from an element
     *
     * @param {Element|Object} elem
     *        Object to remove listeners from.
     *
     * @param {string|string[]} [type]
     *        Type of listener to remove. Don't include to remove all events from element.
     *
     * @param {EventTarget~EventListener} [fn]
     *        Specific listener to remove. Don't include to remove listeners for an event
     *        type.
     */
    function off(elem, type, fn) {
        // Don't want to add a cache object through getElData if not needed
        if (!hasData(elem)) {
            return;
        }

        var data = getData(elem);

        // If no events exist, nothing to unbind
        if (!data.handlers) {
            return;
        }

        if (Array.isArray(type)) {
            return _handleMultipleEvents(off, elem, type, fn);
        }

        // Utility function
        var removeType = function removeType(el, t) {
            data.handlers[t] = [];
            _cleanUpEvents(el, t);
        };

        // Are we removing all bound events?
        if (type === undefined) {
            for (var t in data.handlers) {
                if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {
                    removeType(elem, t);
                }
            }
            return;
        }

        var handlers = data.handlers[type];

        // If no handlers exist, nothing to unbind
        if (!handlers) {
            return;
        }

        // If no listener was provided, remove all listeners for type
        if (!fn) {
            removeType(elem, type);
            return;
        }

        // We're only removing a single handler
        if (fn.guid) {
            for (var n = 0; n < handlers.length; n++) {
                if (handlers[n].guid === fn.guid) {
                    handlers.splice(n--, 1);
                }
            }
        }

        _cleanUpEvents(elem, type);
    }

    /**
     * Trigger an event for an element
     *
     * @param {Element|Object} elem
     *        Element to trigger an event on
     *
     * @param {EventTarget~Event|string} event
     *        A string (the type) or an event object with a type attribute
     *
     * @param {Object} [hash]
     *        data hash to pass along with the event
     *
     * @return {boolean|undefined}
     *         - Returns the opposite of `defaultPrevented` if default was prevented
     *         - Otherwise returns undefined
     */
    function trigger(elem, event, hash) {
        // Fetches element data and a reference to the parent (for bubbling).
        // Don't want to add a data object to cache for every parent,
        // so checking hasElData first.
        var elemData = hasData(elem) ? getData(elem) : {};
        var parent = elem.parentNode || elem.ownerDocument;
        // type = event.type || event,
        // handler;

        // If an event name was passed as a string, creates an event out of it
        if (typeof event === 'string') {
            event = { type: event, target: elem };
        }
        // Normalizes the event properties.
        event = fixEvent(event);

        // If the passed element has a dispatcher, executes the established handlers.
        if (elemData.dispatcher) {
            elemData.dispatcher.call(elem, event, hash);
        }

        // Unless explicitly stopped or the event does not bubble (e.g. media events)
        // recursively calls this function to bubble the event up the DOM.
        if (parent && !event.isPropagationStopped() && event.bubbles === true) {
            trigger.call(null, parent, event, hash);

            // If at the top of the DOM, triggers the default action unless disabled.
        } else if (!parent && !event.defaultPrevented) {
            var targetData = getData(event.target);

            // Checks if the target has a default action for this event.
            if (event.target[event.type]) {
                // Temporarily disables event dispatching on the target as we have already executed the handler.
                targetData.disabled = true;
                // Executes the default action.
                if (typeof event.target[event.type] === 'function') {
                    event.target[event.type]();
                }
                // Re-enables event dispatching.
                targetData.disabled = false;
            }
        }

        // Inform the triggerer if the default was prevented by returning false
        return !event.defaultPrevented;
    }

    /**
     * Trigger a listener only once for an event
     *
     * @param {Element|Object} elem
     *        Element or object to bind to.
     *
     * @param {string|string[]} type
     *        Name/type of event
     *
     * @param {Event~EventListener} fn
     *        Event Listener function
     */
    function one(elem, type, fn) {
        if (Array.isArray(type)) {
            return _handleMultipleEvents(one, elem, type, fn);
        }
        var func = function func() {
            off(elem, type, func);
            fn.apply(this, arguments);
        };

        // copy the guid to the new function so it can removed using the original function's ID
        func.guid = fn.guid = fn.guid || newGUID();
        on(elem, type, func);
    }

    var Events = (Object.freeze || Object)({
        fixEvent: fixEvent,
        on: on,
        off: off,
        trigger: trigger,
        one: one
    });

    /**
     * @file setup.js - Functions for setting up a player without
     * user interaction based on the data-setup `attribute` of the video tag.
     *
     * @module setup
     */
    var _windowLoaded = false;
    var videojs$2 = void 0;

    /**
     * Set up any tags that have a data-setup `attribute` when the player is started.
     */
    var autoSetup = function autoSetup() {

        // Protect against breakage in non-browser environments.
        if (!isReal()) {
            return;
        }

        // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
        // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
        // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
        // var mediaEls = vids.concat(audios);

        // Because IE8 doesn't support calling slice on a node list, we need to loop
        // through each list of elements to build up a new, combined list of elements.
        var vids = document_1.getElementsByTagName('video');
        var audios = document_1.getElementsByTagName('audio');
        var divs = document_1.getElementsByTagName('video-js');
        var mediaEls = [];

        if (vids && vids.length > 0) {
            for (var i = 0, e = vids.length; i < e; i++) {
                mediaEls.push(vids[i]);
            }
        }

        if (audios && audios.length > 0) {
            for (var _i = 0, _e = audios.length; _i < _e; _i++) {
                mediaEls.push(audios[_i]);
            }
        }

        if (divs && divs.length > 0) {
            for (var _i2 = 0, _e2 = divs.length; _i2 < _e2; _i2++) {
                mediaEls.push(divs[_i2]);
            }
        }

        // Check if any media elements exist
        if (mediaEls && mediaEls.length > 0) {

            for (var _i3 = 0, _e3 = mediaEls.length; _i3 < _e3; _i3++) {
                var mediaEl = mediaEls[_i3];

                // Check if element exists, has getAttribute func.
                // IE seems to consider typeof el.getAttribute == 'object' instead of
                // 'function' like expected, at least when loading the player immediately.
                if (mediaEl && mediaEl.getAttribute) {

                    // Make sure this player hasn't already been set up.
                    if (mediaEl.player === undefined) {
                        var options = mediaEl.getAttribute('data-setup');

                        // Check if data-setup attr exists.
                        // We only auto-setup if they've added the data-setup attr.
                        if (options !== null) {
                            // Create new video.js instance.
                            videojs$2(mediaEl);
                        }
                    }

                    // If getAttribute isn't defined, we need to wait for the DOM.
                } else {
                    autoSetupTimeout(1);
                    break;
                }
            }

            // No videos were found, so keep looping unless page is finished loading.
        } else if (!_windowLoaded) {
            autoSetupTimeout(1);
        }
    };

    /**
     * Wait until the page is loaded before running autoSetup. This will be called in
     * autoSetup if `hasLoaded` returns false.
     *
     * @param {number} wait
     *        How long to wait in ms
     *
     * @param {module:videojs} [vjs]
     *        The videojs library function
     */
    function autoSetupTimeout(wait, vjs) {
        if (vjs) {
            videojs$2 = vjs;
        }

        window_1.setTimeout(autoSetup, wait);
    }

    if (isReal() && document_1.readyState === 'complete') {
        _windowLoaded = true;
    } else {
        /**
         * Listen for the load event on window, and set _windowLoaded to true.
         *
         * @listens load
         */
        one(window_1, 'load', function () {
            _windowLoaded = true;
        });
    }

    /**
     * @file stylesheet.js
     * @module stylesheet
     */
    /**
     * Create a DOM syle element given a className for it.
     *
     * @param {string} className
     *        The className to add to the created style element.
     *
     * @return {Element}
     *         The element that was created.
     */
    var createStyleElement = function createStyleElement(className) {
        var style = document_1.createElement('style');

        style.className = className;

        return style;
    };

    /**
     * Add text to a DOM element.
     *
     * @param {Element} el
     *        The Element to add text content to.
     *
     * @param {string} content
     *        The text to add to the element.
     */
    var setTextContent = function setTextContent(el, content) {
        if (el.styleSheet) {
            el.styleSheet.cssText = content;
        } else {
            el.textContent = content;
        }
    };

    /**
     * @file fn.js
     * @module fn
     */
    /**
     * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
     * It also stores a unique id on the function so it can be easily removed from events.
     *
     * @param {Mixed} context
     *        The object to bind as scope.
     *
     * @param {Function} fn
     *        The function to be bound to a scope.
     *
     * @param {number} [uid]
     *        An optional unique ID for the function to be set
     *
     * @return {Function}
     *         The new function that will be bound into the context given
     */
    var bind = function bind(context, fn, uid) {
        // Make sure the function has a unique ID
        if (!fn.guid) {
            fn.guid = newGUID();
        }

        // Create the new function that changes the context
        var bound = function bound() {
            return fn.apply(context, arguments);
        };

        // Allow for the ability to individualize this function
        // Needed in the case where multiple objects might share the same prototype
        // IF both items add an event listener with the same function, then you try to remove just one
        // it will remove both because they both have the same guid.
        // when using this, you need to use the bind method when you remove the listener as well.
        // currently used in text tracks
        bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

        return bound;
    };

    /**
     * Wraps the given function, `fn`, with a new function that only invokes `fn`
     * at most once per every `wait` milliseconds.
     *
     * @param  {Function} fn
     *         The function to be throttled.
     *
     * @param  {Number}   wait
     *         The number of milliseconds by which to throttle.
     *
     * @return {Function}
     */
    var throttle = function throttle(fn, wait) {
        var last = Date.now();

        var throttled = function throttled() {
            var now = Date.now();

            if (now - last >= wait) {
                fn.apply(undefined, arguments);
                last = now;
            }
        };

        return throttled;
    };

    /**
     * @file src/js/event-target.js
     */
    /**
     * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
     * adds shorthand functions that wrap around lengthy functions. For example:
     * the `on` function is a wrapper around `addEventListener`.
     *
     * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
     * @class EventTarget
     */
    var EventTarget = function EventTarget() {};

    /**
     * A Custom DOM event.
     *
     * @typedef {Object} EventTarget~Event
     * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
     */

    /**
     * All event listeners should follow the following format.
     *
     * @callback EventTarget~EventListener
     * @this {EventTarget}
     *
     * @param {EventTarget~Event} event
     *        the event that triggered this function
     *
     * @param {Object} [hash]
     *        hash of data sent during the event
     */

    /**
     * An object containing event names as keys and booleans as values.
     *
     * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
     *         will have extra functionality. See that function for more information.
     *
     * @property EventTarget.prototype.allowedEvents_
     * @private
     */
    EventTarget.prototype.allowedEvents_ = {};

    /**
     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
     * function that will get called when an event with a certain name gets triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to call with `EventTarget`s
     */
    EventTarget.prototype.on = function (type, fn) {
        // Remove the addEventListener alias before calling Events.on
        // so we don't get into an infinite type loop
        var ael = this.addEventListener;

        this.addEventListener = function () {};
        on(this, type, fn);
        this.addEventListener = ael;
    };

    /**
     * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#on}
     */
    EventTarget.prototype.addEventListener = EventTarget.prototype.on;

    /**
     * Removes an `event listener` for a specific event from an instance of `EventTarget`.
     * This makes it so that the `event listener` will no longer get called when the
     * named event happens.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to remove.
     */
    EventTarget.prototype.off = function (type, fn) {
        off(this, type, fn);
    };

    /**
     * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#off}
     */
    EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

    /**
     * This function will add an `event listener` that gets triggered only once. After the
     * first trigger it will get removed. This is like adding an `event listener`
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to be called once for each event name.
     */
    EventTarget.prototype.one = function (type, fn) {
        // Remove the addEventListener alialing Events.on
        // so we don't get into an infinite type loop
        var ael = this.addEventListener;

        this.addEventListener = function () {};
        one(this, type, fn);
        this.addEventListener = ael;
    };

    /**
     * This function causes an event to happen. This will then cause any `event listeners`
     * that are waiting for that event, to get called. If there are no `event listeners`
     * for an event then nothing will happen.
     *
     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
     * Trigger will also call the `on` + `uppercaseEventName` function.
     *
     * Example:
     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
     * `onClick` if it exists.
     *
     * @param {string|EventTarget~Event|Object} event
     *        The name of the event, an `Event`, or an object with a key of type set to
     *        an event name.
     */
    EventTarget.prototype.trigger = function (event) {
        var type = event.type || event;

        if (typeof event === 'string') {
            event = { type: type };
        }
        event = fixEvent(event);

        if (this.allowedEvents_[type] && this['on' + type]) {
            this['on' + type](event);
        }

        trigger(this, event);
    };

    /**
     * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#trigger}
     */
    EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

    /**
     * @file mixins/evented.js
     * @module evented
     */
    /**
     * Returns whether or not an object has had the evented mixin applied.
     *
     * @param  {Object} object
     *         An object to test.
     *
     * @return {boolean}
     *         Whether or not the object appears to be evented.
     */
    var isEvented = function isEvented(object) {
        return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {
            return typeof object[k] === 'function';
        });
    };

    /**
     * Whether a value is a valid event type - non-empty string or array.
     *
     * @private
     * @param  {string|Array} type
     *         The type value to test.
     *
     * @return {boolean}
     *         Whether or not the type is a valid event type.
     */
    var isValidEventType = function isValidEventType(type) {
        return (
            // The regex here verifies that the `type` contains at least one non-
            // whitespace character.
            typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length
        );
    };

    /**
     * Validates a value to determine if it is a valid event target. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the target does not appear to be a valid event target.
     *
     * @param  {Object} target
     *         The object to test.
     */
    var validateTarget = function validateTarget(target) {
        if (!target.nodeName && !isEvented(target)) {
            throw new Error('Invalid target; must be a DOM node or evented object.');
        }
    };

    /**
     * Validates a value to determine if it is a valid event target. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the type does not appear to be a valid event type.
     *
     * @param  {string|Array} type
     *         The type to test.
     */
    var validateEventType = function validateEventType(type) {
        if (!isValidEventType(type)) {
            throw new Error('Invalid event type; must be a non-empty string or array.');
        }
    };

    /**
     * Validates a value to determine if it is a valid listener. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the listener is not a function.
     *
     * @param  {Function} listener
     *         The listener to test.
     */
    var validateListener = function validateListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid listener; must be a function.');
        }
    };

    /**
     * Takes an array of arguments given to `on()` or `one()`, validates them, and
     * normalizes them into an object.
     *
     * @private
     * @param  {Object} self
     *         The evented object on which `on()` or `one()` was called. This
     *         object will be bound as the `this` value for the listener.
     *
     * @param  {Array} args
     *         An array of arguments passed to `on()` or `one()`.
     *
     * @return {Object}
     *         An object containing useful values for `on()` or `one()` calls.
     */
    var normalizeListenArgs = function normalizeListenArgs(self, args) {

        // If the number of arguments is less than 3, the target is always the
        // evented object itself.
        var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
        var target = void 0;
        var type = void 0;
        var listener = void 0;

        if (isTargetingSelf) {
            target = self.eventBusEl_;

            // Deal with cases where we got 3 arguments, but we are still listening to
            // the evented object itself.
            if (args.length >= 3) {
                args.shift();
            }

            type = args[0];
            listener = args[1];
        } else {
            target = args[0];
            type = args[1];
            listener = args[2];
        }

        validateTarget(target);
        validateEventType(type);
        validateListener(listener);

        listener = bind(self, listener);

        return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };
    };

    /**
     * Adds the listener to the event type(s) on the target, normalizing for
     * the type of target.
     *
     * @private
     * @param  {Element|Object} target
     *         A DOM node or evented object.
     *
     * @param  {string} method
     *         The event binding method to use ("on" or "one").
     *
     * @param  {string|Array} type
     *         One or more event type(s).
     *
     * @param  {Function} listener
     *         A listener function.
     */
    var listen = function listen(target, method, type, listener) {
        validateTarget(target);

        if (target.nodeName) {
            Events[method](target, type, listener);
        } else {
            target[method](type, listener);
        }
    };

    /**
     * Contains methods that provide event capabilites to an object which is passed
     * to {@link module:evented|evented}.
     *
     * @mixin EventedMixin
     */
    var EventedMixin = {

        /**
         * Add a listener to an event (or events) on this object or another evented
         * object.
         *
         * @param  {string|Array|Element|Object} targetOrType
         *         If this is a string or array, it represents the event type(s)
         *         that will trigger the listener.
         *
         *         Another evented object can be passed here instead, which will
         *         cause the listener to listen for events on _that_ object.
         *
         *         In either case, the listener's `this` value will be bound to
         *         this object.
         *
         * @param  {string|Array|Function} typeOrListener
         *         If the first argument was a string or array, this should be the
         *         listener function. Otherwise, this is a string or array of event
         *         type(s).
         *
         * @param  {Function} [listener]
         *         If the first argument was another evented object, this will be
         *         the listener function.
         */
        on: function on$$1() {
            var _this = this;

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            var _normalizeListenArgs = normalizeListenArgs(this, args),
                isTargetingSelf = _normalizeListenArgs.isTargetingSelf,
                target = _normalizeListenArgs.target,
                type = _normalizeListenArgs.type,
                listener = _normalizeListenArgs.listener;

            listen(target, 'on', type, listener);

            // If this object is listening to another evented object.
            if (!isTargetingSelf) {

                // If this object is disposed, remove the listener.
                var removeListenerOnDispose = function removeListenerOnDispose() {
                    return _this.off(target, type, listener);
                };

                // Use the same function ID as the listener so we can remove it later it
                // using the ID of the original listener.
                removeListenerOnDispose.guid = listener.guid;

                // Add a listener to the target's dispose event as well. This ensures
                // that if the target is disposed BEFORE this object, we remove the
                // removal listener that was just added. Otherwise, we create a memory leak.
                var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {
                    return _this.off('dispose', removeListenerOnDispose);
                };

                // Use the same function ID as the listener so we can remove it later
                // it using the ID of the original listener.
                removeRemoverOnTargetDispose.guid = listener.guid;

                listen(this, 'on', 'dispose', removeListenerOnDispose);
                listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
            }
        },


        /**
         * Add a listener to an event (or events) on this object or another evented
         * object. The listener will only be called once and then removed.
         *
         * @param  {string|Array|Element|Object} targetOrType
         *         If this is a string or array, it represents the event type(s)
         *         that will trigger the listener.
         *
         *         Another evented object can be passed here instead, which will
         *         cause the listener to listen for events on _that_ object.
         *
         *         In either case, the listener's `this` value will be bound to
         *         this object.
         *
         * @param  {string|Array|Function} typeOrListener
         *         If the first argument was a string or array, this should be the
         *         listener function. Otherwise, this is a string or array of event
         *         type(s).
         *
         * @param  {Function} [listener]
         *         If the first argument was another evented object, this will be
         *         the listener function.
         */
        one: function one$$1() {
            var _this2 = this;

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            var _normalizeListenArgs2 = normalizeListenArgs(this, args),
                isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,
                target = _normalizeListenArgs2.target,
                type = _normalizeListenArgs2.type,
                listener = _normalizeListenArgs2.listener;

            // Targeting this evented object.


            if (isTargetingSelf) {
                listen(target, 'one', type, listener);

                // Targeting another evented object.
            } else {
                var wrapper = function wrapper() {
                    for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        largs[_key3] = arguments[_key3];
                    }

                    _this2.off(target, type, wrapper);
                    listener.apply(null, largs);
                };

                // Use the same function ID as the listener so we can remove it later
                // it using the ID of the original listener.
                wrapper.guid = listener.guid;
                listen(target, 'one', type, wrapper);
            }
        },


        /**
         * Removes listener(s) from event(s) on an evented object.
         *
         * @param  {string|Array|Element|Object} [targetOrType]
         *         If this is a string or array, it represents the event type(s).
         *
         *         Another evented object can be passed here instead, in which case
         *         ALL 3 arguments are _required_.
         *
         * @param  {string|Array|Function} [typeOrListener]
         *         If the first argument was a string or array, this may be the
         *         listener function. Otherwise, this is a string or array of event
         *         type(s).
         *
         * @param  {Function} [listener]
         *         If the first argument was another evented object, this will be
         *         the listener function; otherwise, _all_ listeners bound to the
         *         event type(s) will be removed.
         */
        off: function off$$1(targetOrType, typeOrListener, listener) {

            // Targeting this evented object.
            if (!targetOrType || isValidEventType(targetOrType)) {
                off(this.eventBusEl_, targetOrType, typeOrListener);

                // Targeting another evented object.
            } else {
                var target = targetOrType;
                var type = typeOrListener;

                // Fail fast and in a meaningful way!
                validateTarget(target);
                validateEventType(type);
                validateListener(listener);

                // Ensure there's at least a guid, even if the function hasn't been used
                listener = bind(this, listener);

                // Remove the dispose listener on this evented object, which was given
                // the same guid as the event listener in on().
                this.off('dispose', listener);

                if (target.nodeName) {
                    off(target, type, listener);
                    off(target, 'dispose', listener);
                } else if (isEvented(target)) {
                    target.off(type, listener);
                    target.off('dispose', listener);
                }
            }
        },


        /**
         * Fire an event on this evented object, causing its listeners to be called.
         *
         * @param   {string|Object} event
         *          An event type or an object with a type property.
         *
         * @param   {Object} [hash]
         *          An additional object to pass along to listeners.
         *
         * @returns {boolean}
         *          Whether or not the default behavior was prevented.
         */
        trigger: function trigger$$1(event, hash) {
            return trigger(this.eventBusEl_, event, hash);
        }
    };

    /**
     * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
     *
     * @param  {Object} target
     *         The object to which to add event methods.
     *
     * @param  {Object} [options={}]
     *         Options for customizing the mixin behavior.
     *
     * @param  {String} [options.eventBusKey]
     *         By default, adds a `eventBusEl_` DOM element to the target object,
     *         which is used as an event bus. If the target object already has a
     *         DOM element that should be used, pass its key here.
     *
     * @return {Object}
     *         The target object.
     */
    function evented(target) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var eventBusKey = options.eventBusKey;

        // Set or create the eventBusEl_.

        if (eventBusKey) {
            if (!target[eventBusKey].nodeName) {
                throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
            }
            target.eventBusEl_ = target[eventBusKey];
        } else {
            target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });
        }

        assign(target, EventedMixin);

        // When any evented object is disposed, it removes all its listeners.
        target.on('dispose', function () {
            target.off();
            window_1.setTimeout(function () {
                target.eventBusEl_ = null;
            }, 0);
        });

        return target;
    }

    /**
     * @file mixins/stateful.js
     * @module stateful
     */
    /**
     * Contains methods that provide statefulness to an object which is passed
     * to {@link module:stateful}.
     *
     * @mixin StatefulMixin
     */
    var StatefulMixin = {

        /**
         * A hash containing arbitrary keys and values representing the state of
         * the object.
         *
         * @type {Object}
         */
        state: {},

        /**
         * Set the state of an object by mutating its
         * {@link module:stateful~StatefulMixin.state|state} object in place.
         *
         * @fires   module:stateful~StatefulMixin#statechanged
         * @param   {Object|Function} stateUpdates
         *          A new set of properties to shallow-merge into the plugin state.
         *          Can be a plain object or a function returning a plain object.
         *
         * @returns {Object|undefined}
         *          An object containing changes that occurred. If no changes
         *          occurred, returns `undefined`.
         */
        setState: function setState(stateUpdates) {
            var _this = this;

            // Support providing the `stateUpdates` state as a function.
            if (typeof stateUpdates === 'function') {
                stateUpdates = stateUpdates();
            }

            var changes = void 0;

            each(stateUpdates, function (value, key) {

                // Record the change if the value is different from what's in the
                // current state.
                if (_this.state[key] !== value) {
                    changes = changes || {};
                    changes[key] = {
                        from: _this.state[key],
                        to: value
                    };
                }

                _this.state[key] = value;
            });

            // Only trigger "statechange" if there were changes AND we have a trigger
            // function. This allows us to not require that the target object be an
            // evented object.
            if (changes && isEvented(this)) {

                /**
                 * An event triggered on an object that is both
                 * {@link module:stateful|stateful} and {@link module:evented|evented}
                 * indicating that its state has changed.
                 *
                 * @event    module:stateful~StatefulMixin#statechanged
                 * @type     {Object}
                 * @property {Object} changes
                 *           A hash containing the properties that were changed and
                 *           the values they were changed `from` and `to`.
                 */
                this.trigger({
                    changes: changes,
                    type: 'statechanged'
                });
            }

            return changes;
        }
    };

    /**
     * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
     * object.
     *
     * If the target object is {@link module:evented|evented} and has a
     * `handleStateChanged` method, that method will be automatically bound to the
     * `statechanged` event on itself.
     *
     * @param   {Object} target
     *          The object to be made stateful.
     *
     * @param   {Object} [defaultState]
     *          A default set of properties to populate the newly-stateful object's
     *          `state` property.
     *
     * @returns {Object}
     *          Returns the `target`.
     */
    function stateful(target, defaultState) {
        assign(target, StatefulMixin);

        // This happens after the mixing-in because we need to replace the `state`
        // added in that step.
        target.state = assign({}, target.state, defaultState);

        // Auto-bind the `handleStateChanged` method of the target object if it exists.
        if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
            target.on('statechanged', target.handleStateChanged);
        }

        return target;
    }

    /**
     * @file to-title-case.js
     * @module to-title-case
     */

    /**
     * Uppercase the first letter of a string.
     *
     * @param {string} string
     *        String to be uppercased
     *
     * @return {string}
     *         The string with an uppercased first letter
     */
    function toTitleCase(string) {
        if (typeof string !== 'string') {
            return string;
        }

        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Compares the TitleCase versions of the two strings for equality.
     *
     * @param {string} str1
     *        The first string to compare
     *
     * @param {string} str2
     *        The second string to compare
     *
     * @return {boolean}
     *         Whether the TitleCase versions of the strings are equal
     */
    function titleCaseEquals(str1, str2) {
        return toTitleCase(str1) === toTitleCase(str2);
    }

    /**
     * @file merge-options.js
     * @module merge-options
     */
    /**
     * Deep-merge one or more options objects, recursively merging **only** plain
     * object properties.
     *
     * @param   {Object[]} sources
     *          One or more objects to merge into a new object.
     *
     * @returns {Object}
     *          A new object that is the merged result of all sources.
     */
    function mergeOptions() {
        var result = {};

        for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
        }

        sources.forEach(function (source) {
            if (!source) {
                return;
            }

            each(source, function (value, key) {
                if (!isPlain(value)) {
                    result[key] = value;
                    return;
                }

                if (!isPlain(result[key])) {
                    result[key] = {};
                }

                result[key] = mergeOptions(result[key], value);
            });
        });

        return result;
    }

    /**
     * Player Component - Base class for all UI objects
     *
     * @file component.js
     */
    /**
     * Base class for all UI Components.
     * Components are UI objects which represent both a javascript object and an element
     * in the DOM. They can be children of other components, and can have
     * children themselves.
     *
     * Components can also use methods from {@link EventTarget}
     */

    var Component = function () {

        /**
         * A callback that is called when a component is ready. Does not have any
         * paramters and any callback value will be ignored.
         *
         * @callback Component~ReadyCallback
         * @this Component
         */

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Object[]} [options.children]
         *        An array of children objects to intialize this component with. Children objects have
         *        a name property that will be used if more than one component of the same type needs to be
         *        added.
         *
         * @param {Component~ReadyCallback} [ready]
         *        Function that gets called when the `Component` is ready.
         */
        function Component(player, options, ready) {
            classCallCheck(this, Component);


            // The component might be the player itself and we can't pass `this` to super
            if (!player && this.play) {
                this.player_ = player = this; // eslint-disable-line
            } else {
                this.player_ = player;
            }

            // Make a copy of prototype.options_ to protect against overriding defaults
            this.options_ = mergeOptions({}, this.options_);

            // Updated options with supplied options
            options = this.options_ = mergeOptions(this.options_, options);

            // Get ID from options or options element if one is supplied
            this.id_ = options.id || options.el && options.el.id;

            // If there was no ID from the options, generate one
            if (!this.id_) {
                // Don't require the player ID function in the case of mock players
                var id = player && player.id && player.id() || 'no_player';

                this.id_ = id + '_component_' + newGUID();
            }

            this.name_ = options.name || null;

            // Create element if one wasn't provided in options
            if (options.el) {
                this.el_ = options.el;
            } else if (options.createEl !== false) {
                this.el_ = this.createEl();
            }

            // if evented is anything except false, we want to mixin in evented
            if (options.evented !== false) {
                // Make this an evented object and use `el_`, if available, as its event bus
                evented(this, { eventBusKey: this.el_ ? 'el_' : null });
            }
            stateful(this, this.constructor.defaultState);

            this.children_ = [];
            this.childIndex_ = {};
            this.childNameIndex_ = {};

            // Add any child components in options
            if (options.initChildren !== false) {
                this.initChildren();
            }

            this.ready(ready);
            // Don't want to trigger ready here or it will before init is actually
            // finished for all children that run this constructor

            if (options.reportTouchActivity !== false) {
                this.enableTouchActivity();
            }
        }

        /**
         * Dispose of the `Component` and all child components.
         *
         * @fires Component#dispose
         */


        Component.prototype.dispose = function dispose() {

            /**
             * Triggered when a `Component` is disposed.
             *
             * @event Component#dispose
             * @type {EventTarget~Event}
             *
             * @property {boolean} [bubbles=false]
             *           set to false so that the close event does not
             *           bubble up
             */
            this.trigger({ type: 'dispose', bubbles: false });

            // Dispose all children.
            if (this.children_) {
                for (var i = this.children_.length - 1; i >= 0; i--) {
                    if (this.children_[i].dispose) {
                        this.children_[i].dispose();
                    }
                }
            }

            // Delete child references
            this.children_ = null;
            this.childIndex_ = null;
            this.childNameIndex_ = null;

            if (this.el_) {
                // Remove element from DOM
                if (this.el_.parentNode) {
                    this.el_.parentNode.removeChild(this.el_);
                }

                removeData(this.el_);
                this.el_ = null;
            }

            // remove reference to the player after disposing of the element
            this.player_ = null;
        };

        /**
         * Return the {@link Player} that the `Component` has attached to.
         *
         * @return {Player}
         *         The player that this `Component` has attached to.
         */


        Component.prototype.player = function player() {
            return this.player_;
        };

        /**
         * Deep merge of options objects with new options.
         * > Note: When both `obj` and `options` contain properties whose values are objects.
         *         The two properties get merged using {@link module:mergeOptions}
         *
         * @param {Object} obj
         *        The object that contains new options.
         *
         * @return {Object}
         *         A new object of `this.options_` and `obj` merged together.
         *
         * @deprecated since version 5
         */


        Component.prototype.options = function options(obj) {
            log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

            if (!obj) {
                return this.options_;
            }

            this.options_ = mergeOptions(this.options_, obj);
            return this.options_;
        };

        /**
         * Get the `Component`s DOM element
         *
         * @return {Element}
         *         The DOM element for this `Component`.
         */


        Component.prototype.el = function el() {
            return this.el_;
        };

        /**
         * Create the `Component`s DOM element.
         *
         * @param {string} [tagName]
         *        Element's DOM node type. e.g. 'div'
         *
         * @param {Object} [properties]
         *        An object of properties that should be set.
         *
         * @param {Object} [attributes]
         *        An object of attributes that should be set.
         *
         * @return {Element}
         *         The element that gets created.
         */


        Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {
            return createEl(tagName, properties, attributes);
        };

        /**
         * Localize a string given the string in english.
         *
         * If tokens are provided, it'll try and run a simple token replacement on the provided string.
         * The tokens it loooks for look like `{1}` with the index being 1-indexed into the tokens array.
         *
         * If a `defaultValue` is provided, it'll use that over `string`,
         * if a value isn't found in provided language files.
         * This is useful if you want to have a descriptive key for token replacement
         * but have a succinct localized string and not require `en.json` to be included.
         *
         * Currently, it is used for the progress bar timing.
         * ```js
         * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
         * ```
         * It is then used like so:
         * ```js
         * this.localize('progress bar timing: currentTime={1} duration{2}',
         *               [this.player_.currentTime(), this.player_.duration()],
         *               '{1} of {2}');
         * ```
         *
         * Which outputs something like: `01:23 of 24:56`.
         *
         *
         * @param {string} string
         *        The string to localize and the key to lookup in the language files.
         * @param {string[]} [tokens]
         *        If the current item has token replacements, provide the tokens here.
         * @param {string} [defaultValue]
         *        Defaults to `string`. Can be a default value to use for token replacement
         *        if the lookup key is needed to be separate.
         *
         * @return {string}
         *         The localized string or if no localization exists the english string.
         */


        Component.prototype.localize = function localize(string, tokens) {
            var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;

            var code = this.player_.language && this.player_.language();
            var languages = this.player_.languages && this.player_.languages();
            var language = languages && languages[code];
            var primaryCode = code && code.split('-')[0];
            var primaryLang = languages && languages[primaryCode];

            var localizedString = defaultValue;

            if (language && language[string]) {
                localizedString = language[string];
            } else if (primaryLang && primaryLang[string]) {
                localizedString = primaryLang[string];
            }

            if (tokens) {
                localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
                    var value = tokens[index - 1];
                    var ret = value;

                    if (typeof value === 'undefined') {
                        ret = match;
                    }

                    return ret;
                });
            }

            return localizedString;
        };

        /**
         * Return the `Component`s DOM element. This is where children get inserted.
         * This will usually be the the same as the element returned in {@link Component#el}.
         *
         * @return {Element}
         *         The content element for this `Component`.
         */


        Component.prototype.contentEl = function contentEl() {
            return this.contentEl_ || this.el_;
        };

        /**
         * Get this `Component`s ID
         *
         * @return {string}
         *         The id of this `Component`
         */


        Component.prototype.id = function id() {
            return this.id_;
        };

        /**
         * Get the `Component`s name. The name gets used to reference the `Component`
         * and is set during registration.
         *
         * @return {string}
         *         The name of this `Component`.
         */


        Component.prototype.name = function name() {
            return this.name_;
        };

        /**
         * Get an array of all child components
         *
         * @return {Array}
         *         The children
         */


        Component.prototype.children = function children() {
            return this.children_;
        };

        /**
         * Returns the child `Component` with the given `id`.
         *
         * @param {string} id
         *        The id of the child `Component` to get.
         *
         * @return {Component|undefined}
         *         The child `Component` with the given `id` or undefined.
         */


        Component.prototype.getChildById = function getChildById(id) {
            return this.childIndex_[id];
        };

        /**
         * Returns the child `Component` with the given `name`.
         *
         * @param {string} name
         *        The name of the child `Component` to get.
         *
         * @return {Component|undefined}
         *         The child `Component` with the given `name` or undefined.
         */


        Component.prototype.getChild = function getChild(name) {
            if (!name) {
                return;
            }

            name = toTitleCase(name);

            return this.childNameIndex_[name];
        };

        /**
         * Add a child `Component` inside the current `Component`.
         *
         *
         * @param {string|Component} child
         *        The name or instance of a child to add.
         *
         * @param {Object} [options={}]
         *        The key/value store of options that will get passed to children of
         *        the child.
         *
         * @param {number} [index=this.children_.length]
         *        The index to attempt to add a child into.
         *
         * @return {Component}
         *         The `Component` that gets added as a child. When using a string the
         *         `Component` will get created by this process.
         */


        Component.prototype.addChild = function addChild(child) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

            var component = void 0;
            var componentName = void 0;

            // If child is a string, create component with options
            if (typeof child === 'string') {
                componentName = toTitleCase(child);

                var componentClassName = options.componentClass || componentName;

                // Set name through options
                options.name = componentName;

                // Create a new object & element for this controls set
                // If there's no .player_, this is a player
                var ComponentClass = Component.getComponent(componentClassName);

                if (!ComponentClass) {
                    throw new Error('Component ' + componentClassName + ' does not exist');
                }

                // data stored directly on the videojs object may be
                // misidentified as a component to retain
                // backwards-compatibility with 4.x. check to make sure the
                // component class can be instantiated.
                if (typeof ComponentClass !== 'function') {
                    return null;
                }

                component = new ComponentClass(this.player_ || this, options);

                // child is a component instance
            } else {
                component = child;
            }

            this.children_.splice(index, 0, component);

            if (typeof component.id === 'function') {
                this.childIndex_[component.id()] = component;
            }

            // If a name wasn't used to create the component, check if we can use the
            // name function of the component
            componentName = componentName || component.name && toTitleCase(component.name());

            if (componentName) {
                this.childNameIndex_[componentName] = component;
            }

            // Add the UI object's element to the container div (box)
            // Having an element is not required
            if (typeof component.el === 'function' && component.el()) {
                var childNodes = this.contentEl().children;
                var refNode = childNodes[index] || null;

                this.contentEl().insertBefore(component.el(), refNode);
            }

            // Return so it can stored on parent object if desired.
            return component;
        };

        /**
         * Remove a child `Component` from this `Component`s list of children. Also removes
         * the child `Component`s element from this `Component`s element.
         *
         * @param {Component} component
         *        The child `Component` to remove.
         */


        Component.prototype.removeChild = function removeChild(component) {
            if (typeof component === 'string') {
                component = this.getChild(component);
            }

            if (!component || !this.children_) {
                return;
            }

            var childFound = false;

            for (var i = this.children_.length - 1; i >= 0; i--) {
                if (this.children_[i] === component) {
                    childFound = true;
                    this.children_.splice(i, 1);
                    break;
                }
            }

            if (!childFound) {
                return;
            }

            this.childIndex_[component.id()] = null;
            this.childNameIndex_[component.name()] = null;

            var compEl = component.el();

            if (compEl && compEl.parentNode === this.contentEl()) {
                this.contentEl().removeChild(component.el());
            }
        };

        /**
         * Add and initialize default child `Component`s based upon options.
         */


        Component.prototype.initChildren = function initChildren() {
            var _this = this;

            var children = this.options_.children;

            if (children) {
                // `this` is `parent`
                var parentOptions = this.options_;

                var handleAdd = function handleAdd(child) {
                    var name = child.name;
                    var opts = child.opts;

                    // Allow options for children to be set at the parent options
                    // e.g. videojs(id, { controlBar: false });
                    // instead of videojs(id, { children: { controlBar: false });
                    if (parentOptions[name] !== undefined) {
                        opts = parentOptions[name];
                    }

                    // Allow for disabling default components
                    // e.g. options['children']['posterImage'] = false
                    if (opts === false) {
                        return;
                    }

                    // Allow options to be passed as a simple boolean if no configuration
                    // is necessary.
                    if (opts === true) {
                        opts = {};
                    }

                    // We also want to pass the original player options
                    // to each component as well so they don't need to
                    // reach back into the player for options later.
                    opts.playerOptions = _this.options_.playerOptions;

                    // Create and add the child component.
                    // Add a direct reference to the child by name on the parent instance.
                    // If two of the same component are used, different names should be supplied
                    // for each
                    var newChild = _this.addChild(name, opts);

                    if (newChild) {
                        _this[name] = newChild;
                    }
                };

                // Allow for an array of children details to passed in the options
                var workingChildren = void 0;
                var Tech = Component.getComponent('Tech');

                if (Array.isArray(children)) {
                    workingChildren = children;
                } else {
                    workingChildren = Object.keys(children);
                }

                workingChildren
                // children that are in this.options_ but also in workingChildren  would
                // give us extra children we do not want. So, we want to filter them out.
                    .concat(Object.keys(this.options_).filter(function (child) {
                        return !workingChildren.some(function (wchild) {
                            if (typeof wchild === 'string') {
                                return child === wchild;
                            }
                            return child === wchild.name;
                        });
                    })).map(function (child) {
                    var name = void 0;
                    var opts = void 0;

                    if (typeof child === 'string') {
                        name = child;
                        opts = children[name] || _this.options_[name] || {};
                    } else {
                        name = child.name;
                        opts = child;
                    }

                    return { name: name, opts: opts };
                }).filter(function (child) {
                    // we have to make sure that child.name isn't in the techOrder since
                    // techs are registerd as Components but can't aren't compatible
                    // See https://github.com/videojs/video.js/issues/2772
                    var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));

                    return c && !Tech.isTech(c);
                }).forEach(handleAdd);
            }
        };

        /**
         * Builds the default DOM class name. Should be overriden by sub-components.
         *
         * @return {string}
         *         The DOM class name for this object.
         *
         * @abstract
         */


        Component.prototype.buildCSSClass = function buildCSSClass() {
            // Child classes can include a function that does:
            // return 'CLASS NAME' + this._super();
            return '';
        };

        /**
         * Bind a listener to the component's ready state.
         * Different from event listeners in that if the ready event has already happened
         * it will trigger the function immediately.
         *
         * @return {Component}
         *         Returns itself; method can be chained.
         */


        Component.prototype.ready = function ready(fn) {
            var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!fn) {
                return;
            }

            if (!this.isReady_) {
                this.readyQueue_ = this.readyQueue_ || [];
                this.readyQueue_.push(fn);
                return;
            }

            if (sync) {
                fn.call(this);
            } else {
                // Call the function asynchronously by default for consistency
                this.setTimeout(fn, 1);
            }
        };

        /**
         * Trigger all the ready listeners for this `Component`.
         *
         * @fires Component#ready
         */


        Component.prototype.triggerReady = function triggerReady() {
            this.isReady_ = true;

            // Ensure ready is triggerd asynchronously
            this.setTimeout(function () {
                var readyQueue = this.readyQueue_;

                // Reset Ready Queue
                this.readyQueue_ = [];

                if (readyQueue && readyQueue.length > 0) {
                    readyQueue.forEach(function (fn) {
                        fn.call(this);
                    }, this);
                }

                // Allow for using event listeners also
                /**
                 * Triggered when a `Component` is ready.
                 *
                 * @event Component#ready
                 * @type {EventTarget~Event}
                 */
                this.trigger('ready');
            }, 1);
        };

        /**
         * Find a single DOM element matching a `selector`. This can be within the `Component`s
         * `contentEl()` or another custom context.
         *
         * @param {string} selector
         *        A valid CSS selector, which will be passed to `querySelector`.
         *
         * @param {Element|string} [context=this.contentEl()]
         *        A DOM element within which to query. Can also be a selector string in
         *        which case the first matching element will get used as context. If
         *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
         *        nothing it falls back to `document`.
         *
         * @return {Element|null}
         *         the dom element that was found, or null
         *
         * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
         */


        Component.prototype.$ = function $$$1(selector, context) {
            return $(selector, context || this.contentEl());
        };

        /**
         * Finds all DOM element matching a `selector`. This can be within the `Component`s
         * `contentEl()` or another custom context.
         *
         * @param {string} selector
         *        A valid CSS selector, which will be passed to `querySelectorAll`.
         *
         * @param {Element|string} [context=this.contentEl()]
         *        A DOM element within which to query. Can also be a selector string in
         *        which case the first matching element will get used as context. If
         *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
         *        nothing it falls back to `document`.
         *
         * @return {NodeList}
         *         a list of dom elements that were found
         *
         * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
         */


        Component.prototype.$$ = function $$$$1(selector, context) {
            return $$(selector, context || this.contentEl());
        };

        /**
         * Check if a component's element has a CSS class name.
         *
         * @param {string} classToCheck
         *        CSS class name to check.
         *
         * @return {boolean}
         *         - True if the `Component` has the class.
         *         - False if the `Component` does not have the class`
         */


        Component.prototype.hasClass = function hasClass$$1(classToCheck) {
            return hasClass(this.el_, classToCheck);
        };

        /**
         * Add a CSS class name to the `Component`s element.
         *
         * @param {string} classToAdd
         *        CSS class name to add
         */


        Component.prototype.addClass = function addClass$$1(classToAdd) {
            addClass(this.el_, classToAdd);
        };

        /**
         * Remove a CSS class name from the `Component`s element.
         *
         * @param {string} classToRemove
         *        CSS class name to remove
         */


        Component.prototype.removeClass = function removeClass$$1(classToRemove) {
            removeClass(this.el_, classToRemove);
        };

        /**
         * Add or remove a CSS class name from the component's element.
         * - `classToToggle` gets added when {@link Component#hasClass} would return false.
         * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
         *
         * @param  {string} classToToggle
         *         The class to add or remove based on (@link Component#hasClass}
         *
         * @param  {boolean|Dom~predicate} [predicate]
         *         An {@link Dom~predicate} function or a boolean
         */


        Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {
            toggleClass(this.el_, classToToggle, predicate);
        };

        /**
         * Show the `Component`s element if it is hidden by removing the
         * 'vjs-hidden' class name from it.
         */


        Component.prototype.show = function show() {
            this.removeClass('vjs-hidden');
        };

        /**
         * Hide the `Component`s element if it is currently showing by adding the
         * 'vjs-hidden` class name to it.
         */


        Component.prototype.hide = function hide() {
            this.addClass('vjs-hidden');
        };

        /**
         * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
         * class name to it. Used during fadeIn/fadeOut.
         *
         * @private
         */


        Component.prototype.lockShowing = function lockShowing() {
            this.addClass('vjs-lock-showing');
        };

        /**
         * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
         * class name from it. Used during fadeIn/fadeOut.
         *
         * @private
         */


        Component.prototype.unlockShowing = function unlockShowing() {
            this.removeClass('vjs-lock-showing');
        };

        /**
         * Get the value of an attribute on the `Component`s element.
         *
         * @param {string} attribute
         *        Name of the attribute to get the value from.
         *
         * @return {string|null}
         *         - The value of the attribute that was asked for.
         *         - Can be an empty string on some browsers if the attribute does not exist
         *           or has no value
         *         - Most browsers will return null if the attibute does not exist or has
         *           no value.
         *
         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
         */


        Component.prototype.getAttribute = function getAttribute$$1(attribute) {
            return getAttribute(this.el_, attribute);
        };

        /**
         * Set the value of an attribute on the `Component`'s element
         *
         * @param {string} attribute
         *        Name of the attribute to set.
         *
         * @param {string} value
         *        Value to set the attribute to.
         *
         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
         */


        Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {
            setAttribute(this.el_, attribute, value);
        };

        /**
         * Remove an attribute from the `Component`s element.
         *
         * @param {string} attribute
         *        Name of the attribute to remove.
         *
         * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
         */


        Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {
            removeAttribute(this.el_, attribute);
        };

        /**
         * Get or set the width of the component based upon the CSS styles.
         * See {@link Component#dimension} for more detailed information.
         *
         * @param {number|string} [num]
         *        The width that you want to set postfixed with '%', 'px' or nothing.
         *
         * @param {boolean} [skipListeners]
         *        Skip the componentresize event trigger
         *
         * @return {number|string}
         *         The width when getting, zero if there is no width. Can be a string
         *           postpixed with '%' or 'px'.
         */


        Component.prototype.width = function width(num, skipListeners) {
            return this.dimension('width', num, skipListeners);
        };

        /**
         * Get or set the height of the component based upon the CSS styles.
         * See {@link Component#dimension} for more detailed information.
         *
         * @param {number|string} [num]
         *        The height that you want to set postfixed with '%', 'px' or nothing.
         *
         * @param {boolean} [skipListeners]
         *        Skip the componentresize event trigger
         *
         * @return {number|string}
         *         The width when getting, zero if there is no width. Can be a string
         *         postpixed with '%' or 'px'.
         */


        Component.prototype.height = function height(num, skipListeners) {
            return this.dimension('height', num, skipListeners);
        };

        /**
         * Set both the width and height of the `Component` element at the same time.
         *
         * @param  {number|string} width
         *         Width to set the `Component`s element to.
         *
         * @param  {number|string} height
         *         Height to set the `Component`s element to.
         */


        Component.prototype.dimensions = function dimensions(width, height) {
            // Skip componentresize listeners on width for optimization
            this.width(width, true);
            this.height(height);
        };

        /**
         * Get or set width or height of the `Component` element. This is the shared code
         * for the {@link Component#width} and {@link Component#height}.
         *
         * Things to know:
         * - If the width or height in an number this will return the number postfixed with 'px'.
         * - If the width/height is a percent this will return the percent postfixed with '%'
         * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
         *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
         *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
         *   for more information
         * - If you want the computed style of the component, use {@link Component#currentWidth}
         *   and {@link {Component#currentHeight}
         *
         * @fires Component#componentresize
         *
         * @param {string} widthOrHeight
         8        'width' or 'height'
         *
         * @param  {number|string} [num]
         8         New dimension
         *
         * @param  {boolean} [skipListeners]
         *         Skip componentresize event trigger
         *
         * @return {number}
         *         The dimension when getting or 0 if unset
         */


        Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
            if (num !== undefined) {
                // Set to zero if null or literally NaN (NaN !== NaN)
                if (num === null || num !== num) {
                    num = 0;
                }

                // Check if using css width/height (% or px) and adjust
                if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
                    this.el_.style[widthOrHeight] = num;
                } else if (num === 'auto') {
                    this.el_.style[widthOrHeight] = '';
                } else {
                    this.el_.style[widthOrHeight] = num + 'px';
                }

                // skipListeners allows us to avoid triggering the resize event when setting both width and height
                if (!skipListeners) {
                    /**
                     * Triggered when a component is resized.
                     *
                     * @event Component#componentresize
                     * @type {EventTarget~Event}
                     */
                    this.trigger('componentresize');
                }

                return;
            }

            // Not setting a value, so getting it
            // Make sure element exists
            if (!this.el_) {
                return 0;
            }

            // Get dimension value from style
            var val = this.el_.style[widthOrHeight];
            var pxIndex = val.indexOf('px');

            if (pxIndex !== -1) {
                // Return the pixel value with no 'px'
                return parseInt(val.slice(0, pxIndex), 10);
            }

            // No px so using % or no style was set, so falling back to offsetWidth/height
            // If component has display:none, offset will return 0
            // TODO: handle display:none and no dimension style using px
            return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
        };

        /**
         * Get the width or the height of the `Component` elements computed style. Uses
         * `window.getComputedStyle`.
         *
         * @param {string} widthOrHeight
         *        A string containing 'width' or 'height'. Whichever one you want to get.
         *
         * @return {number}
         *         The dimension that gets asked for or 0 if nothing was set
         *         for that dimension.
         */


        Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
            var computedWidthOrHeight = 0;

            if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
                throw new Error('currentDimension only accepts width or height value');
            }

            if (typeof window_1.getComputedStyle === 'function') {
                var computedStyle = window_1.getComputedStyle(this.el_);

                computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
            }

            // remove 'px' from variable and parse as integer
            computedWidthOrHeight = parseFloat(computedWidthOrHeight);

            // if the computed value is still 0, it's possible that the browser is lying
            // and we want to check the offset values.
            // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
            if (computedWidthOrHeight === 0) {
                var rule = 'offset' + toTitleCase(widthOrHeight);

                computedWidthOrHeight = this.el_[rule];
            }

            return computedWidthOrHeight;
        };

        /**
         * An object that contains width and height values of the `Component`s
         * computed style. Uses `window.getComputedStyle`.
         *
         * @typedef {Object} Component~DimensionObject
         *
         * @property {number} width
         *           The width of the `Component`s computed style.
         *
         * @property {number} height
         *           The height of the `Component`s computed style.
         */

        /**
         * Get an object that contains width and height values of the `Component`s
         * computed style.
         *
         * @return {Component~DimensionObject}
         *         The dimensions of the components element
         */


        Component.prototype.currentDimensions = function currentDimensions() {
            return {
                width: this.currentDimension('width'),
                height: this.currentDimension('height')
            };
        };

        /**
         * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
         *
         * @return {number} width
         *           The width of the `Component`s computed style.
         */


        Component.prototype.currentWidth = function currentWidth() {
            return this.currentDimension('width');
        };

        /**
         * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
         *
         * @return {number} height
         *           The height of the `Component`s computed style.
         */


        Component.prototype.currentHeight = function currentHeight() {
            return this.currentDimension('height');
        };

        /**
         * Set the focus to this component
         */


        Component.prototype.focus = function focus() {
            this.el_.focus();
        };

        /**
         * Remove the focus from this component
         */


        Component.prototype.blur = function blur() {
            this.el_.blur();
        };

        /**
         * Emit a 'tap' events when touch event support gets detected. This gets used to
         * support toggling the controls through a tap on the video. They get enabled
         * because every sub-component would have extra overhead otherwise.
         *
         * @private
         * @fires Component#tap
         * @listens Component#touchstart
         * @listens Component#touchmove
         * @listens Component#touchleave
         * @listens Component#touchcancel
         * @listens Component#touchend
         */


        Component.prototype.emitTapEvents = function emitTapEvents() {
            // Track the start time so we can determine how long the touch lasted
            var touchStart = 0;
            var firstTouch = null;

            // Maximum movement allowed during a touch event to still be considered a tap
            // Other popular libs use anywhere from 2 (hammer.js) to 15,
            // so 10 seems like a nice, round number.
            var tapMovementThreshold = 10;

            // The maximum length a touch can be while still being considered a tap
            var touchTimeThreshold = 200;

            var couldBeTap = void 0;

            this.on('touchstart', function (event) {
                // If more than one finger, don't consider treating this as a click
                if (event.touches.length === 1) {
                    // Copy pageX/pageY from the object
                    firstTouch = {
                        pageX: event.touches[0].pageX,
                        pageY: event.touches[0].pageY
                    };
                    // Record start time so we can detect a tap vs. "touch and hold"
                    touchStart = new Date().getTime();
                    // Reset couldBeTap tracking
                    couldBeTap = true;
                }
            });

            this.on('touchmove', function (event) {
                // If more than one finger, don't consider treating this as a click
                if (event.touches.length > 1) {
                    couldBeTap = false;
                } else if (firstTouch) {
                    // Some devices will throw touchmoves for all but the slightest of taps.
                    // So, if we moved only a small distance, this could still be a tap
                    var xdiff = event.touches[0].pageX - firstTouch.pageX;
                    var ydiff = event.touches[0].pageY - firstTouch.pageY;
                    var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

                    if (touchDistance > tapMovementThreshold) {
                        couldBeTap = false;
                    }
                }
            });

            var noTap = function noTap() {
                couldBeTap = false;
            };

            // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
            this.on('touchleave', noTap);
            this.on('touchcancel', noTap);

            // When the touch ends, measure how long it took and trigger the appropriate
            // event
            this.on('touchend', function (event) {
                firstTouch = null;
                // Proceed only if the touchmove/leave/cancel event didn't happen
                if (couldBeTap === true) {
                    // Measure how long the touch lasted
                    var touchTime = new Date().getTime() - touchStart;

                    // Make sure the touch was less than the threshold to be considered a tap
                    if (touchTime < touchTimeThreshold) {
                        // Don't let browser turn this into a click
                        event.preventDefault();
                        /**
                         * Triggered when a `Component` is tapped.
                         *
                         * @event Component#tap
                         * @type {EventTarget~Event}
                         */
                        this.trigger('tap');
                        // It may be good to copy the touchend event object and change the
                        // type to tap, if the other event properties aren't exact after
                        // Events.fixEvent runs (e.g. event.target)
                    }
                }
            });
        };

        /**
         * This function reports user activity whenever touch events happen. This can get
         * turned off by any sub-components that wants touch events to act another way.
         *
         * Report user touch activity when touch events occur. User activity gets used to
         * determine when controls should show/hide. It is simple when it comes to mouse
         * events, because any mouse event should show the controls. So we capture mouse
         * events that bubble up to the player and report activity when that happens.
         * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
         * controls. So touch events can't help us at the player level either.
         *
         * User activity gets checked asynchronously. So what could happen is a tap event
         * on the video turns the controls off. Then the `touchend` event bubbles up to
         * the player. Which, if it reported user activity, would turn the controls right
         * back on. We also don't want to completely block touch events from bubbling up.
         * Furthermore a `touchmove` event and anything other than a tap, should not turn
         * controls back on.
         *
         * @listens Component#touchstart
         * @listens Component#touchmove
         * @listens Component#touchend
         * @listens Component#touchcancel
         */


        Component.prototype.enableTouchActivity = function enableTouchActivity() {
            // Don't continue if the root player doesn't support reporting user activity
            if (!this.player() || !this.player().reportUserActivity) {
                return;
            }

            // listener for reporting that the user is active
            var report = bind(this.player(), this.player().reportUserActivity);

            var touchHolding = void 0;

            this.on('touchstart', function () {
                report();
                // For as long as the they are touching the device or have their mouse down,
                // we consider them active even if they're not moving their finger or mouse.
                // So we want to continue to update that they are active
                this.clearInterval(touchHolding);
                // report at the same interval as activityCheck
                touchHolding = this.setInterval(report, 250);
            });

            var touchEnd = function touchEnd(event) {
                report();
                // stop the interval that maintains activity if the touch is holding
                this.clearInterval(touchHolding);
            };

            this.on('touchmove', report);
            this.on('touchend', touchEnd);
            this.on('touchcancel', touchEnd);
        };

        /**
         * A callback that has no parameters and is bound into `Component`s context.
         *
         * @callback Component~GenericCallback
         * @this Component
         */

        /**
         * Creates a function that runs after an `x` millisecond timeout. This function is a
         * wrapper around `window.setTimeout`. There are a few reasons to use this one
         * instead though:
         * 1. It gets cleared via  {@link Component#clearTimeout} when
         *    {@link Component#dispose} gets called.
         * 2. The function callback will gets turned into a {@link Component~GenericCallback}
         *
         * > Note: You can use `window.clearTimeout` on the id returned by this function. This
         *         will cause its dispose listener not to get cleaned up! Please use
         *         {@link Component#clearTimeout} or {@link Component#dispose}.
         *
         * @param {Component~GenericCallback} fn
         *        The function that will be run after `timeout`.
         *
         * @param {number} timeout
         *        Timeout in milliseconds to delay before executing the specified function.
         *
         * @return {number}
         *         Returns a timeout ID that gets used to identify the timeout. It can also
         *         get used in {@link Component#clearTimeout} to clear the timeout that
         *         was set.
         *
         * @listens Component#dispose
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
         */


        Component.prototype.setTimeout = function setTimeout(fn, timeout) {
            var _this2 = this;

            fn = bind(this, fn);

            var timeoutId = window_1.setTimeout(fn, timeout);
            var disposeFn = function disposeFn() {
                return _this2.clearTimeout(timeoutId);
            };

            disposeFn.guid = 'vjs-timeout-' + timeoutId;

            this.on('dispose', disposeFn);

            return timeoutId;
        };

        /**
         * Clears a timeout that gets created via `window.setTimeout` or
         * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
         * use this function instead of `window.clearTimout`. If you don't your dispose
         * listener will not get cleaned up until {@link Component#dispose}!
         *
         * @param {number} timeoutId
         *        The id of the timeout to clear. The return value of
         *        {@link Component#setTimeout} or `window.setTimeout`.
         *
         * @return {number}
         *         Returns the timeout id that was cleared.
         *
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
         */


        Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
            window_1.clearTimeout(timeoutId);

            var disposeFn = function disposeFn() {};

            disposeFn.guid = 'vjs-timeout-' + timeoutId;

            this.off('dispose', disposeFn);

            return timeoutId;
        };

        /**
         * Creates a function that gets run every `x` milliseconds. This function is a wrapper
         * around `window.setInterval`. There are a few reasons to use this one instead though.
         * 1. It gets cleared via  {@link Component#clearInterval} when
         *    {@link Component#dispose} gets called.
         * 2. The function callback will be a {@link Component~GenericCallback}
         *
         * @param {Component~GenericCallback} fn
         *        The function to run every `x` seconds.
         *
         * @param {number} interval
         *        Execute the specified function every `x` milliseconds.
         *
         * @return {number}
         *         Returns an id that can be used to identify the interval. It can also be be used in
         *         {@link Component#clearInterval} to clear the interval.
         *
         * @listens Component#dispose
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
         */


        Component.prototype.setInterval = function setInterval(fn, interval) {
            var _this3 = this;

            fn = bind(this, fn);

            var intervalId = window_1.setInterval(fn, interval);

            var disposeFn = function disposeFn() {
                return _this3.clearInterval(intervalId);
            };

            disposeFn.guid = 'vjs-interval-' + intervalId;

            this.on('dispose', disposeFn);

            return intervalId;
        };

        /**
         * Clears an interval that gets created via `window.setInterval` or
         * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
         * use this function instead of `window.clearInterval`. If you don't your dispose
         * listener will not get cleaned up until {@link Component#dispose}!
         *
         * @param {number} intervalId
         *        The id of the interval to clear. The return value of
         *        {@link Component#setInterval} or `window.setInterval`.
         *
         * @return {number}
         *         Returns the interval id that was cleared.
         *
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
         */


        Component.prototype.clearInterval = function clearInterval(intervalId) {
            window_1.clearInterval(intervalId);

            var disposeFn = function disposeFn() {};

            disposeFn.guid = 'vjs-interval-' + intervalId;

            this.off('dispose', disposeFn);

            return intervalId;
        };

        /**
         * Queues up a callback to be passed to requestAnimationFrame (rAF), but
         * with a few extra bonuses:
         *
         * - Supports browsers that do not support rAF by falling back to
         *   {@link Component#setTimeout}.
         *
         * - The callback is turned into a {@link Component~GenericCallback} (i.e.
         *   bound to the component).
         *
         * - Automatic cancellation of the rAF callback is handled if the component
         *   is disposed before it is called.
         *
         * @param  {Component~GenericCallback} fn
         *         A function that will be bound to this component and executed just
         *         before the browser's next repaint.
         *
         * @return {number}
         *         Returns an rAF ID that gets used to identify the timeout. It can
         *         also be used in {@link Component#cancelAnimationFrame} to cancel
         *         the animation frame callback.
         *
         * @listens Component#dispose
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
         */


        Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {
            var _this4 = this;

            if (this.supportsRaf_) {
                fn = bind(this, fn);

                var id = window_1.requestAnimationFrame(fn);
                var disposeFn = function disposeFn() {
                    return _this4.cancelAnimationFrame(id);
                };

                disposeFn.guid = 'vjs-raf-' + id;
                this.on('dispose', disposeFn);

                return id;
            }

            // Fall back to using a timer.
            return this.setTimeout(fn, 1000 / 60);
        };

        /**
         * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
         * (rAF).
         *
         * If you queue an rAF callback via {@link Component#requestAnimationFrame},
         * use this function instead of `window.cancelAnimationFrame`. If you don't,
         * your dispose listener will not get cleaned up until {@link Component#dispose}!
         *
         * @param {number} id
         *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
         *
         * @return {number}
         *         Returns the rAF ID that was cleared.
         *
         * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
         */


        Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {
            if (this.supportsRaf_) {
                window_1.cancelAnimationFrame(id);

                var disposeFn = function disposeFn() {};

                disposeFn.guid = 'vjs-raf-' + id;

                this.off('dispose', disposeFn);

                return id;
            }

            // Fall back to using a timer.
            return this.clearTimeout(id);
        };

        /**
         * Register a `Component` with `videojs` given the name and the component.
         *
         * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
         *         should be registered using {@link Tech.registerTech} or
         *         {@link videojs:videojs.registerTech}.
         *
         * > NOTE: This function can also be seen on videojs as
         *         {@link videojs:videojs.registerComponent}.
         *
         * @param {string} name
         *        The name of the `Component` to register.
         *
         * @param {Component} ComponentToRegister
         *        The `Component` class to register.
         *
         * @return {Component}
         *         The `Component` that was registered.
         */


        Component.registerComponent = function registerComponent(name, ComponentToRegister) {
            if (typeof name !== 'string' || !name) {
                throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
            }

            var Tech = Component.getComponent('Tech');

            // We need to make sure this check is only done if Tech has been registered.
            var isTech = Tech && Tech.isTech(ComponentToRegister);
            var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);

            if (isTech || !isComp) {
                var reason = void 0;

                if (isTech) {
                    reason = 'techs must be registered using Tech.registerTech()';
                } else {
                    reason = 'must be a Component subclass';
                }

                throw new Error('Illegal component, "' + name + '"; ' + reason + '.');
            }

            name = toTitleCase(name);

            if (!Component.components_) {
                Component.components_ = {};
            }

            var Player = Component.getComponent('Player');

            if (name === 'Player' && Player && Player.players) {
                var players = Player.players;
                var playerNames = Object.keys(players);

                // If we have players that were disposed, then their name will still be
                // in Players.players. So, we must loop through and verify that the value
                // for each item is not null. This allows registration of the Player component
                // after all players have been disposed or before any were created.
                if (players && playerNames.length > 0 && playerNames.map(function (pname) {
                    return players[pname];
                }).every(Boolean)) {
                    throw new Error('Can not register Player component after player has been created.');
                }
            }

            Component.components_[name] = ComponentToRegister;

            return ComponentToRegister;
        };

        /**
         * Get a `Component` based on the name it was registered with.
         *
         * @param {string} name
         *        The Name of the component to get.
         *
         * @return {Component}
         *         The `Component` that got registered under the given name.
         *
         * @deprecated In `videojs` 6 this will not return `Component`s that were not
         *             registered using {@link Component.registerComponent}. Currently we
         *             check the global `videojs` object for a `Component` name and
         *             return that if it exists.
         */


        Component.getComponent = function getComponent(name) {
            if (!name) {
                return;
            }

            name = toTitleCase(name);

            if (Component.components_ && Component.components_[name]) {
                return Component.components_[name];
            }
        };

        return Component;
    }();

    /**
     * Whether or not this component supports `requestAnimationFrame`.
     *
     * This is exposed primarily for testing purposes.
     *
     * @private
     * @type {Boolean}
     */


    Component.prototype.supportsRaf_ = typeof window_1.requestAnimationFrame === 'function' && typeof window_1.cancelAnimationFrame === 'function';

    Component.registerComponent('Component', Component);

    /**
     * @file time-ranges.js
     * @module time-ranges
     */

    /**
     * Returns the time for the specified index at the start or end
     * of a TimeRange object.
     *
     * @function time-ranges:indexFunction
     *
     * @param {number} [index=0]
     *        The range number to return the time for.
     *
     * @return {number}
     *         The time that offset at the specified index.
     *
     * @depricated index must be set to a value, in the future this will throw an error.
     */

    /**
     * An object that contains ranges of time for various reasons.
     *
     * @typedef {Object} TimeRange
     *
     * @property {number} length
     *           The number of time ranges represented by this Object
     *
     * @property {time-ranges:indexFunction} start
     *           Returns the time offset at which a specified time range begins.
     *
     * @property {time-ranges:indexFunction} end
     *           Returns the time offset at which a specified time range begins.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
     */

    /**
     * Check if any of the time ranges are over the maximum index.
     *
     * @param {string} fnName
     *        The function name to use for logging
     *
     * @param {number} index
     *        The index to check
     *
     * @param {number} maxIndex
     *        The maximum possible index
     *
     * @throws {Error} if the timeRanges provided are over the maxIndex
     */
    function rangeCheck(fnName, index, maxIndex) {
        if (typeof index !== 'number' || index < 0 || index > maxIndex) {
            throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');
        }
    }

    /**
     * Check if any of the time ranges are over the maximum index.
     *
     * @param {string} fnName
     *        The function name to use for logging
     *
     * @param {string} valueIndex
     *        The proprety that should be used to get the time. should be 'start' or 'end'
     *
     * @param {Array} ranges
     *        An array of time ranges
     *
     * @param {Array} [rangeIndex=0]
     *        The index to start the search at
     *
     * @return {number}
     *         The time that offset at the specified index.
     *
     *
     * @depricated rangeIndex must be set to a value, in the future this will throw an error.
     * @throws {Error} if rangeIndex is more than the length of ranges
     */
    function getRange(fnName, valueIndex, ranges, rangeIndex) {
        rangeCheck(fnName, rangeIndex, ranges.length - 1);
        return ranges[rangeIndex][valueIndex];
    }

    /**
     * Create a time range object givent ranges of time.
     *
     * @param {Array} [ranges]
     *        An array of time ranges.
     */
    function createTimeRangesObj(ranges) {
        if (ranges === undefined || ranges.length === 0) {
            return {
                length: 0,
                start: function start() {
                    throw new Error('This TimeRanges object is empty');
                },
                end: function end() {
                    throw new Error('This TimeRanges object is empty');
                }
            };
        }
        return {
            length: ranges.length,
            start: getRange.bind(null, 'start', 0, ranges),
            end: getRange.bind(null, 'end', 1, ranges)
        };
    }

    /**
     * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
     *
     * @param {number|Array} start
     *        The start of a single range or an array of ranges
     *
     * @param {number} end
     *        The end of a single range.
     *
     * @private
     */
    function createTimeRanges(start, end) {
        if (Array.isArray(start)) {
            return createTimeRangesObj(start);
        } else if (start === undefined || end === undefined) {
            return createTimeRangesObj();
        }
        return createTimeRangesObj([[start, end]]);
    }

    /**
     * @file buffer.js
     * @module buffer
     */
    /**
     * Compute the percentage of the media that has been buffered.
     *
     * @param {TimeRange} buffered
     *        The current `TimeRange` object representing buffered time ranges
     *
     * @param {number} duration
     *        Total duration of the media
     *
     * @return {number}
     *         Percent buffered of the total duration in decimal form.
     */
    function bufferedPercent(buffered, duration) {
        var bufferedDuration = 0;
        var start = void 0;
        var end = void 0;

        if (!duration) {
            return 0;
        }

        if (!buffered || !buffered.length) {
            buffered = createTimeRanges(0, 0);
        }

        for (var i = 0; i < buffered.length; i++) {
            start = buffered.start(i);
            end = buffered.end(i);

            // buffered end can be bigger than duration by a very small fraction
            if (end > duration) {
                end = duration;
            }

            bufferedDuration += end - start;
        }

        return bufferedDuration / duration;
    }

    /**
     * @file fullscreen-api.js
     * @module fullscreen-api
     * @private
     */
    /**
     * Store the browser-specific methods for the fullscreen API.
     *
     * @type {Object}
     * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
     * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
     */
    var FullscreenApi = {};

// browser API methods
    var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
        ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
        ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
        ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
        ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

    var specApi = apiMap[0];
    var browserApi = void 0;

// determine the supported set of functions
    for (var i = 0; i < apiMap.length; i++) {
        // check for exitFullscreen function
        if (apiMap[i][1] in document_1) {
            browserApi = apiMap[i];
            break;
        }
    }

// map the browser API names to the spec API names
    if (browserApi) {
        for (var _i = 0; _i < browserApi.length; _i++) {
            FullscreenApi[specApi[_i]] = browserApi[_i];
        }
    }

    /**
     * @file media-error.js
     */
    /**
     * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
     *
     * @param {number|string|Object|MediaError} value
     *        This can be of multiple types:
     *        - number: should be a standard error code
     *        - string: an error message (the code will be 0)
     *        - Object: arbitrary properties
     *        - `MediaError` (native): used to populate a video.js `MediaError` object
     *        - `MediaError` (video.js): will return itself if it's already a
     *          video.js `MediaError` object.
     *
     * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
     * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
     *
     * @class MediaError
     */
    function MediaError(value) {

        // Allow redundant calls to this constructor to avoid having `instanceof`
        // checks peppered around the code.
        if (value instanceof MediaError) {
            return value;
        }

        if (typeof value === 'number') {
            this.code = value;
        } else if (typeof value === 'string') {
            // default code is zero, so this is a custom error
            this.message = value;
        } else if (isObject(value)) {

            // We assign the `code` property manually because native `MediaError` objects
            // do not expose it as an own/enumerable property of the object.
            if (typeof value.code === 'number') {
                this.code = value.code;
            }

            assign(this, value);
        }

        if (!this.message) {
            this.message = MediaError.defaultMessages[this.code] || '';
        }
    }

    /**
     * The error code that refers two one of the defined `MediaError` types
     *
     * @type {Number}
     */
    MediaError.prototype.code = 0;

    /**
     * An optional message that to show with the error. Message is not part of the HTML5
     * video spec but allows for more informative custom errors.
     *
     * @type {String}
     */
    MediaError.prototype.message = '';

    /**
     * An optional status code that can be set by plugins to allow even more detail about
     * the error. For example a plugin might provide a specific HTTP status code and an
     * error message for that code. Then when the plugin gets that error this class will
     * know how to display an error message for it. This allows a custom message to show
     * up on the `Player` error overlay.
     *
     * @type {Array}
     */
    MediaError.prototype.status = null;

    /**
     * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
     * specification listed under {@link MediaError} for more information.
     *
     * @enum {array}
     * @readonly
     * @property {string} 0 - MEDIA_ERR_CUSTOM
     * @property {string} 1 - MEDIA_ERR_CUSTOM
     * @property {string} 2 - MEDIA_ERR_ABORTED
     * @property {string} 3 - MEDIA_ERR_NETWORK
     * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
     * @property {string} 5 - MEDIA_ERR_ENCRYPTED
     */
    MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

    /**
     * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
     *
     * @type {Array}
     * @constant
     */
    MediaError.defaultMessages = {
        1: 'You aborted the media playback',
        2: 'A network error caused the media download to fail part-way.',
        3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
        4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
        5: 'The media is encrypted and we do not have the keys to decrypt it.'
    };

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
    for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
        MediaError[MediaError.errorTypes[errNum]] = errNum;
        // values should be accessible on both the class and instance
        MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
    }

    var tuple = SafeParseTuple;

    function SafeParseTuple(obj, reviver) {
        var json;
        var error = null;

        try {
            json = JSON.parse(obj, reviver);
        } catch (err) {
            error = err;
        }

        return [error, json]
    }

    /**
     * Returns whether an object is `Promise`-like (i.e. has a `then` method).
     *
     * @param  {Object}  value
     *         An object that may or may not be `Promise`-like.
     *
     * @return {Boolean}
     *         Whether or not the object is `Promise`-like.
     */
    function isPromise(value) {
        return value !== undefined && typeof value.then === 'function';
    }

    /**
     * Silence a Promise-like object.
     *
     * This is useful for avoiding non-harmful, but potentially confusing "uncaught
     * play promise" rejection error messages.
     *
     * @param  {Object} value
     *         An object that may or may not be `Promise`-like.
     */
    function silencePromise(value) {
        if (isPromise(value)) {
            value.then(null, function (e) {});
        }
    }

    /**
     * @file text-track-list-converter.js Utilities for capturing text track state and
     * re-creating tracks based on a capture.
     *
     * @module text-track-list-converter
     */

    /**
     * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
     * represents the {@link TextTrack}'s state.
     *
     * @param {TextTrack} track
     *        The text track to query.
     *
     * @return {Object}
     *         A serializable javascript representation of the TextTrack.
     * @private
     */
    var trackToJson_ = function trackToJson_(track) {
        var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

            if (track[prop]) {
                acc[prop] = track[prop];
            }

            return acc;
        }, {
            cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
                return {
                    startTime: cue.startTime,
                    endTime: cue.endTime,
                    text: cue.text,
                    id: cue.id
                };
            })
        });

        return ret;
    };

    /**
     * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
     * state of all {@link TextTrack}s currently configured. The return array is compatible with
     * {@link text-track-list-converter:jsonToTextTracks}.
     *
     * @param {Tech} tech
     *        The tech object to query
     *
     * @return {Array}
     *         A serializable javascript representation of the {@link Tech}s
     *         {@link TextTrackList}.
     */
    var textTracksToJson = function textTracksToJson(tech) {

        var trackEls = tech.$$('track');

        var trackObjs = Array.prototype.map.call(trackEls, function (t) {
            return t.track;
        });
        var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
            var json = trackToJson_(trackEl.track);

            if (trackEl.src) {
                json.src = trackEl.src;
            }
            return json;
        });

        return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
            return trackObjs.indexOf(track) === -1;
        }).map(trackToJson_));
    };

    /**
     * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
     * object {@link TextTrack} representations.
     *
     * @param {Array} json
     *        An array of `TextTrack` representation objects, like those that would be
     *        produced by `textTracksToJson`.
     *
     * @param {Tech} tech
     *        The `Tech` to create the `TextTrack`s on.
     */
    var jsonToTextTracks = function jsonToTextTracks(json, tech) {
        json.forEach(function (track) {
            var addedTrack = tech.addRemoteTextTrack(track).track;

            if (!track.src && track.cues) {
                track.cues.forEach(function (cue) {
                    return addedTrack.addCue(cue);
                });
            }
        });

        return tech.textTracks();
    };

    var textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };

    /**
     * @file modal-dialog.js
     */
    var MODAL_CLASS_NAME = 'vjs-modal-dialog';
    var ESC = 27;

    /**
     * The `ModalDialog` displays over the video and its controls, which blocks
     * interaction with the player until it is closed.
     *
     * Modal dialogs include a "Close" button and will close when that button
     * is activated - or when ESC is pressed anywhere.
     *
     * @extends Component
     */

    var ModalDialog = function (_Component) {
        inherits(ModalDialog, _Component);

        /**
         * Create an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Mixed} [options.content=undefined]
         *        Provide customized content for this modal.
         *
         * @param {string} [options.description]
         *        A text description for the modal, primarily for accessibility.
         *
         * @param {boolean} [options.fillAlways=false]
         *        Normally, modals are automatically filled only the first time
         *        they open. This tells the modal to refresh its content
         *        every time it opens.
         *
         * @param {string} [options.label]
         *        A text label for the modal, primarily for accessibility.
         *
         * @param {boolean} [options.temporary=true]
         *        If `true`, the modal can only be opened once; it will be
         *        disposed as soon as it's closed.
         *
         * @param {boolean} [options.uncloseable=false]
         *        If `true`, the user will not be able to close the modal
         *        through the UI in the normal ways. Programmatic closing is
         *        still possible.
         */
        function ModalDialog(player, options) {
            classCallCheck(this, ModalDialog);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

            _this.closeable(!_this.options_.uncloseable);
            _this.content(_this.options_.content);

            // Make sure the contentEl is defined AFTER any children are initialized
            // because we only want the contents of the modal in the contentEl
            // (not the UI elements like the close button).
            _this.contentEl_ = createEl('div', {
                className: MODAL_CLASS_NAME + '-content'
            }, {
                role: 'document'
            });

            _this.descEl_ = createEl('p', {
                className: MODAL_CLASS_NAME + '-description vjs-control-text',
                id: _this.el().getAttribute('aria-describedby')
            });

            textContent(_this.descEl_, _this.description());
            _this.el_.appendChild(_this.descEl_);
            _this.el_.appendChild(_this.contentEl_);
            return _this;
        }

        /**
         * Create the `ModalDialog`'s DOM element
         *
         * @return {Element}
         *         The DOM element that gets created.
         */


        ModalDialog.prototype.createEl = function createEl$$1() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass(),
                tabIndex: -1
            }, {
                'aria-describedby': this.id() + '_description',
                'aria-hidden': 'true',
                'aria-label': this.label(),
                'role': 'dialog'
            });
        };

        ModalDialog.prototype.dispose = function dispose() {
            this.contentEl_ = null;
            this.descEl_ = null;
            this.previouslyActiveEl_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
            return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Handles `keydown` events on the document, looking for ESC, which closes
         * the modal.
         *
         * @param {EventTarget~Event} e
         *        The keypress that triggered this event.
         *
         * @listens keydown
         */


        ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
            if (e.which === ESC && this.closeable()) {
                this.close();
            }
        };

        /**
         * Returns the label string for this modal. Primarily used for accessibility.
         *
         * @return {string}
         *         the localized or raw label of this modal.
         */


        ModalDialog.prototype.label = function label() {
            return this.localize(this.options_.label || 'Modal Window');
        };

        /**
         * Returns the description string for this modal. Primarily used for
         * accessibility.
         *
         * @return {string}
         *         The localized or raw description of this modal.
         */


        ModalDialog.prototype.description = function description() {
            var desc = this.options_.description || this.localize('This is a modal window.');

            // Append a universal closeability message if the modal is closeable.
            if (this.closeable()) {
                desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
            }

            return desc;
        };

        /**
         * Opens the modal.
         *
         * @fires ModalDialog#beforemodalopen
         * @fires ModalDialog#modalopen
         */


        ModalDialog.prototype.open = function open() {
            if (!this.opened_) {
                var player = this.player();

                /**
                 * Fired just before a `ModalDialog` is opened.
                 *
                 * @event ModalDialog#beforemodalopen
                 * @type {EventTarget~Event}
                 */
                this.trigger('beforemodalopen');
                this.opened_ = true;

                // Fill content if the modal has never opened before and
                // never been filled.
                if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
                    this.fill();
                }

                // If the player was playing, pause it and take note of its previously
                // playing state.
                this.wasPlaying_ = !player.paused();

                if (this.options_.pauseOnOpen && this.wasPlaying_) {
                    player.pause();
                }

                if (this.closeable()) {
                    this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
                }

                // Hide controls and note if they were enabled.
                this.hadControls_ = player.controls();
                player.controls(false);

                this.show();
                this.conditionalFocus_();
                this.el().setAttribute('aria-hidden', 'false');

                /**
                 * Fired just after a `ModalDialog` is opened.
                 *
                 * @event ModalDialog#modalopen
                 * @type {EventTarget~Event}
                 */
                this.trigger('modalopen');
                this.hasBeenOpened_ = true;
            }
        };

        /**
         * If the `ModalDialog` is currently open or closed.
         *
         * @param  {boolean} [value]
         *         If given, it will open (`true`) or close (`false`) the modal.
         *
         * @return {boolean}
         *         the current open state of the modaldialog
         */


        ModalDialog.prototype.opened = function opened(value) {
            if (typeof value === 'boolean') {
                this[value ? 'open' : 'close']();
            }
            return this.opened_;
        };

        /**
         * Closes the modal, does nothing if the `ModalDialog` is
         * not open.
         *
         * @fires ModalDialog#beforemodalclose
         * @fires ModalDialog#modalclose
         */


        ModalDialog.prototype.close = function close() {
            if (!this.opened_) {
                return;
            }
            var player = this.player();

            /**
             * Fired just before a `ModalDialog` is closed.
             *
             * @event ModalDialog#beforemodalclose
             * @type {EventTarget~Event}
             */
            this.trigger('beforemodalclose');
            this.opened_ = false;

            if (this.wasPlaying_ && this.options_.pauseOnOpen) {
                player.play();
            }

            if (this.closeable()) {
                this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
            }

            if (this.hadControls_) {
                player.controls(true);
            }

            this.hide();
            this.el().setAttribute('aria-hidden', 'true');

            /**
             * Fired just after a `ModalDialog` is closed.
             *
             * @event ModalDialog#modalclose
             * @type {EventTarget~Event}
             */
            this.trigger('modalclose');
            this.conditionalBlur_();

            if (this.options_.temporary) {
                this.dispose();
            }
        };

        /**
         * Check to see if the `ModalDialog` is closeable via the UI.
         *
         * @param  {boolean} [value]
         *         If given as a boolean, it will set the `closeable` option.
         *
         * @return {boolean}
         *         Returns the final value of the closable option.
         */


        ModalDialog.prototype.closeable = function closeable(value) {
            if (typeof value === 'boolean') {
                var closeable = this.closeable_ = !!value;
                var close = this.getChild('closeButton');

                // If this is being made closeable and has no close button, add one.
                if (closeable && !close) {

                    // The close button should be a child of the modal - not its
                    // content element, so temporarily change the content element.
                    var temp = this.contentEl_;

                    this.contentEl_ = this.el_;
                    close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
                    this.contentEl_ = temp;
                    this.on(close, 'close', this.close);
                }

                // If this is being made uncloseable and has a close button, remove it.
                if (!closeable && close) {
                    this.off(close, 'close', this.close);
                    this.removeChild(close);
                    close.dispose();
                }
            }
            return this.closeable_;
        };

        /**
         * Fill the modal's content element with the modal's "content" option.
         * The content element will be emptied before this change takes place.
         */


        ModalDialog.prototype.fill = function fill() {
            this.fillWith(this.content());
        };

        /**
         * Fill the modal's content element with arbitrary content.
         * The content element will be emptied before this change takes place.
         *
         * @fires ModalDialog#beforemodalfill
         * @fires ModalDialog#modalfill
         *
         * @param {Mixed} [content]
         *        The same rules apply to this as apply to the `content` option.
         */


        ModalDialog.prototype.fillWith = function fillWith(content) {
            var contentEl = this.contentEl();
            var parentEl = contentEl.parentNode;
            var nextSiblingEl = contentEl.nextSibling;

            /**
             * Fired just before a `ModalDialog` is filled with content.
             *
             * @event ModalDialog#beforemodalfill
             * @type {EventTarget~Event}
             */
            this.trigger('beforemodalfill');
            this.hasBeenFilled_ = true;

            // Detach the content element from the DOM before performing
            // manipulation to avoid modifying the live DOM multiple times.
            parentEl.removeChild(contentEl);
            this.empty();
            insertContent(contentEl, content);
            /**
             * Fired just after a `ModalDialog` is filled with content.
             *
             * @event ModalDialog#modalfill
             * @type {EventTarget~Event}
             */
            this.trigger('modalfill');

            // Re-inject the re-filled content element.
            if (nextSiblingEl) {
                parentEl.insertBefore(contentEl, nextSiblingEl);
            } else {
                parentEl.appendChild(contentEl);
            }

            // make sure that the close button is last in the dialog DOM
            var closeButton = this.getChild('closeButton');

            if (closeButton) {
                parentEl.appendChild(closeButton.el_);
            }
        };

        /**
         * Empties the content element. This happens anytime the modal is filled.
         *
         * @fires ModalDialog#beforemodalempty
         * @fires ModalDialog#modalempty
         */


        ModalDialog.prototype.empty = function empty() {
            /**
             * Fired just before a `ModalDialog` is emptied.
             *
             * @event ModalDialog#beforemodalempty
             * @type {EventTarget~Event}
             */
            this.trigger('beforemodalempty');
            emptyEl(this.contentEl());

            /**
             * Fired just after a `ModalDialog` is emptied.
             *
             * @event ModalDialog#modalempty
             * @type {EventTarget~Event}
             */
            this.trigger('modalempty');
        };

        /**
         * Gets or sets the modal content, which gets normalized before being
         * rendered into the DOM.
         *
         * This does not update the DOM or fill the modal, but it is called during
         * that process.
         *
         * @param  {Mixed} [value]
         *         If defined, sets the internal content value to be used on the
         *         next call(s) to `fill`. This value is normalized before being
         *         inserted. To "clear" the internal content value, pass `null`.
         *
         * @return {Mixed}
         *         The current content of the modal dialog
         */


        ModalDialog.prototype.content = function content(value) {
            if (typeof value !== 'undefined') {
                this.content_ = value;
            }
            return this.content_;
        };

        /**
         * conditionally focus the modal dialog if focus was previously on the player.
         *
         * @private
         */


        ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {
            var activeEl = document_1.activeElement;
            var playerEl = this.player_.el_;

            this.previouslyActiveEl_ = null;

            if (playerEl.contains(activeEl) || playerEl === activeEl) {
                this.previouslyActiveEl_ = activeEl;

                this.focus();

                this.on(document_1, 'keydown', this.handleKeyDown);
            }
        };

        /**
         * conditionally blur the element and refocus the last focused element
         *
         * @private
         */


        ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {
            if (this.previouslyActiveEl_) {
                this.previouslyActiveEl_.focus();
                this.previouslyActiveEl_ = null;
            }

            this.off(document_1, 'keydown', this.handleKeyDown);
        };

        /**
         * Keydown handler. Attached when modal is focused.
         *
         * @listens keydown
         */


        ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {
            // exit early if it isn't a tab key
            if (event.which !== 9) {
                return;
            }

            var focusableEls = this.focusableEls_();
            var activeEl = this.el_.querySelector(':focus');
            var focusIndex = void 0;

            for (var i = 0; i < focusableEls.length; i++) {
                if (activeEl === focusableEls[i]) {
                    focusIndex = i;
                    break;
                }
            }

            if (document_1.activeElement === this.el_) {
                focusIndex = 0;
            }

            if (event.shiftKey && focusIndex === 0) {
                focusableEls[focusableEls.length - 1].focus();
                event.preventDefault();
            } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
                focusableEls[0].focus();
                event.preventDefault();
            }
        };

        /**
         * get all focusable elements
         *
         * @private
         */


        ModalDialog.prototype.focusableEls_ = function focusableEls_() {
            var allChildren = this.el_.querySelectorAll('*');

            return Array.prototype.filter.call(allChildren, function (child) {
                return (child instanceof window_1.HTMLAnchorElement || child instanceof window_1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window_1.HTMLInputElement || child instanceof window_1.HTMLSelectElement || child instanceof window_1.HTMLTextAreaElement || child instanceof window_1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window_1.HTMLIFrameElement || child instanceof window_1.HTMLObjectElement || child instanceof window_1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
            });
        };

        return ModalDialog;
    }(Component);

    /**
     * Default options for `ModalDialog` default options.
     *
     * @type {Object}
     * @private
     */


    ModalDialog.prototype.options_ = {
        pauseOnOpen: true,
        temporary: true
    };

    Component.registerComponent('ModalDialog', ModalDialog);

    /**
     * @file track-list.js
     */
    /**
     * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
     * {@link VideoTrackList}
     *
     * @extends EventTarget
     */

    var TrackList = function (_EventTarget) {
        inherits(TrackList, _EventTarget);

        /**
         * Create an instance of this class
         *
         * @param {Track[]} tracks
         *        A list of tracks to initialize the list with.
         *
         * @param {Object} [list]
         *        The child object with inheritance done manually for ie8.
         *
         * @abstract
         */
        function TrackList() {
            var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var _ret;

            var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            classCallCheck(this, TrackList);

            var _this = possibleConstructorReturn(this, _EventTarget.call(this));

            if (!list) {
                list = _this; // eslint-disable-line
                if (IS_IE8) {
                    list = document_1.createElement('custom');
                    for (var prop in TrackList.prototype) {
                        if (prop !== 'constructor') {
                            list[prop] = TrackList.prototype[prop];
                        }
                    }
                }
            }

            list.tracks_ = [];

            /**
             * @memberof TrackList
             * @member {number} length
             *         The current number of `Track`s in the this Trackist.
             * @instance
             */
            Object.defineProperty(list, 'length', {
                get: function get$$1() {
                    return this.tracks_.length;
                }
            });

            for (var i = 0; i < tracks.length; i++) {
                list.addTrack(tracks[i]);
            }

            // must return the object, as for ie8 it will not be this
            // but a reference to a document object
            return _ret = list, possibleConstructorReturn(_this, _ret);
        }

        /**
         * Add a {@link Track} to the `TrackList`
         *
         * @param {Track} track
         *        The audio, video, or text track to add to the list.
         *
         * @fires TrackList#addtrack
         */


        TrackList.prototype.addTrack = function addTrack(track) {
            var index = this.tracks_.length;

            if (!('' + index in this)) {
                Object.defineProperty(this, index, {
                    get: function get$$1() {
                        return this.tracks_[index];
                    }
                });
            }

            // Do not add duplicate tracks
            if (this.tracks_.indexOf(track) === -1) {
                this.tracks_.push(track);
                /**
                 * Triggered when a track is added to a track list.
                 *
                 * @event TrackList#addtrack
                 * @type {EventTarget~Event}
                 * @property {Track} track
                 *           A reference to track that was added.
                 */
                this.trigger({
                    track: track,
                    type: 'addtrack'
                });
            }
        };

        /**
         * Remove a {@link Track} from the `TrackList`
         *
         * @param {Track} rtrack
         *        The audio, video, or text track to remove from the list.
         *
         * @fires TrackList#removetrack
         */


        TrackList.prototype.removeTrack = function removeTrack(rtrack) {
            var track = void 0;

            for (var i = 0, l = this.length; i < l; i++) {
                if (this[i] === rtrack) {
                    track = this[i];
                    if (track.off) {
                        track.off();
                    }

                    this.tracks_.splice(i, 1);

                    break;
                }
            }

            if (!track) {
                return;
            }

            /**
             * Triggered when a track is removed from track list.
             *
             * @event TrackList#removetrack
             * @type {EventTarget~Event}
             * @property {Track} track
             *           A reference to track that was removed.
             */
            this.trigger({
                track: track,
                type: 'removetrack'
            });
        };

        /**
         * Get a Track from the TrackList by a tracks id
         *
         * @param {String} id - the id of the track to get
         * @method getTrackById
         * @return {Track}
         * @private
         */


        TrackList.prototype.getTrackById = function getTrackById(id) {
            var result = null;

            for (var i = 0, l = this.length; i < l; i++) {
                var track = this[i];

                if (track.id === id) {
                    result = track;
                    break;
                }
            }

            return result;
        };

        return TrackList;
    }(EventTarget);

    /**
     * Triggered when a different track is selected/enabled.
     *
     * @event TrackList#change
     * @type {EventTarget~Event}
     */

    /**
     * Events that can be called with on + eventName. See {@link EventHandler}.
     *
     * @property {Object} TrackList#allowedEvents_
     * @private
     */


    TrackList.prototype.allowedEvents_ = {
        change: 'change',
        addtrack: 'addtrack',
        removetrack: 'removetrack'
    };

// emulate attribute EventHandler support to allow for feature detection
    for (var event in TrackList.prototype.allowedEvents_) {
        TrackList.prototype['on' + event] = null;
    }

    /**
     * @file audio-track-list.js
     */
    /**
     * Anywhere we call this function we diverge from the spec
     * as we only support one enabled audiotrack at a time
     *
     * @param {AudioTrackList} list
     *        list to work on
     *
     * @param {AudioTrack} track
     *        The track to skip
     *
     * @private
     */
    var disableOthers = function disableOthers(list, track) {
        for (var i = 0; i < list.length; i++) {
            if (!Object.keys(list[i]).length || track.id === list[i].id) {
                continue;
            }
            // another audio track is enabled, disable it
            list[i].enabled = false;
        }
    };

    /**
     * The current list of {@link AudioTrack} for a media file.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
     * @extends TrackList
     */

    var AudioTrackList = function (_TrackList) {
        inherits(AudioTrackList, _TrackList);

        /**
         * Create an instance of this class.
         *
         * @param {AudioTrack[]} [tracks=[]]
         *        A list of `AudioTrack` to instantiate the list with.
         */
        function AudioTrackList() {
            var _this, _ret;

            var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            classCallCheck(this, AudioTrackList);

            var list = void 0;

            // make sure only 1 track is enabled
            // sorted from last index to first index
            for (var i = tracks.length - 1; i >= 0; i--) {
                if (tracks[i].enabled) {
                    disableOthers(tracks, tracks[i]);
                    break;
                }
            }

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (IS_IE8) {
                list = document_1.createElement('custom');
                for (var prop in TrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TrackList.prototype[prop];
                    }
                }
                for (var _prop in AudioTrackList.prototype) {
                    if (_prop !== 'constructor') {
                        list[_prop] = AudioTrackList.prototype[_prop];
                    }
                }
            }

            list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
            list.changing_ = false;

            return _ret = list, possibleConstructorReturn(_this, _ret);
        }

        /**
         * Add an {@link AudioTrack} to the `AudioTrackList`.
         *
         * @param {AudioTrack} track
         *        The AudioTrack to add to the list
         *
         * @fires TrackList#addtrack
         */


        AudioTrackList.prototype.addTrack = function addTrack(track) {
            var _this2 = this;

            if (track.enabled) {
                disableOthers(this, track);
            }

            _TrackList.prototype.addTrack.call(this, track);
            // native tracks don't have this
            if (!track.addEventListener) {
                return;
            }

            /**
             * @listens AudioTrack#enabledchange
             * @fires TrackList#change
             */
            track.addEventListener('enabledchange', function () {
                // when we are disabling other tracks (since we don't support
                // more than one track at a time) we will set changing_
                // to true so that we don't trigger additional change events
                if (_this2.changing_) {
                    return;
                }
                _this2.changing_ = true;
                disableOthers(_this2, track);
                _this2.changing_ = false;
                _this2.trigger('change');
            });
        };

        return AudioTrackList;
    }(TrackList);

    /**
     * @file video-track-list.js
     */
    /**
     * Un-select all other {@link VideoTrack}s that are selected.
     *
     * @param {VideoTrackList} list
     *        list to work on
     *
     * @param {VideoTrack} track
     *        The track to skip
     *
     * @private
     */
    var disableOthers$1 = function disableOthers(list, track) {
        for (var i = 0; i < list.length; i++) {
            if (!Object.keys(list[i]).length || track.id === list[i].id) {
                continue;
            }
            // another video track is enabled, disable it
            list[i].selected = false;
        }
    };

    /**
     * The current list of {@link VideoTrack} for a video.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
     * @extends TrackList
     */

    var VideoTrackList = function (_TrackList) {
        inherits(VideoTrackList, _TrackList);

        /**
         * Create an instance of this class.
         *
         * @param {VideoTrack[]} [tracks=[]]
         *        A list of `VideoTrack` to instantiate the list with.
         */
        function VideoTrackList() {
            var _this, _ret;

            var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            classCallCheck(this, VideoTrackList);

            var list = void 0;

            // make sure only 1 track is enabled
            // sorted from last index to first index
            for (var i = tracks.length - 1; i >= 0; i--) {
                if (tracks[i].selected) {
                    disableOthers$1(tracks, tracks[i]);
                    break;
                }
            }

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (IS_IE8) {
                list = document_1.createElement('custom');
                for (var prop in TrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TrackList.prototype[prop];
                    }
                }
                for (var _prop in VideoTrackList.prototype) {
                    if (_prop !== 'constructor') {
                        list[_prop] = VideoTrackList.prototype[_prop];
                    }
                }
            }

            list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
            list.changing_ = false;

            /**
             * @member {number} VideoTrackList#selectedIndex
             *         The current index of the selected {@link VideoTrack`}.
             */
            Object.defineProperty(list, 'selectedIndex', {
                get: function get$$1() {
                    for (var _i = 0; _i < this.length; _i++) {
                        if (this[_i].selected) {
                            return _i;
                        }
                    }
                    return -1;
                },
                set: function set$$1() {}
            });

            return _ret = list, possibleConstructorReturn(_this, _ret);
        }

        /**
         * Add a {@link VideoTrack} to the `VideoTrackList`.
         *
         * @param {VideoTrack} track
         *        The VideoTrack to add to the list
         *
         * @fires TrackList#addtrack
         */


        VideoTrackList.prototype.addTrack = function addTrack(track) {
            var _this2 = this;

            if (track.selected) {
                disableOthers$1(this, track);
            }

            _TrackList.prototype.addTrack.call(this, track);
            // native tracks don't have this
            if (!track.addEventListener) {
                return;
            }

            /**
             * @listens VideoTrack#selectedchange
             * @fires TrackList#change
             */
            track.addEventListener('selectedchange', function () {
                if (_this2.changing_) {
                    return;
                }
                _this2.changing_ = true;
                disableOthers$1(_this2, track);
                _this2.changing_ = false;
                _this2.trigger('change');
            });
        };

        return VideoTrackList;
    }(TrackList);

    /**
     * @file text-track-list.js
     */
    /**
     * The current list of {@link TextTrack} for a media file.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
     * @extends TrackList
     */

    var TextTrackList = function (_TrackList) {
        inherits(TextTrackList, _TrackList);

        /**
         * Create an instance of this class.
         *
         * @param {TextTrack[]} [tracks=[]]
         *        A list of `TextTrack` to instantiate the list with.
         */
        function TextTrackList() {
            var _this, _ret;

            var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            classCallCheck(this, TextTrackList);

            var list = void 0;

            // IE8 forces us to implement inheritance ourselves
            // as it does not support Object.defineProperty properly
            if (IS_IE8) {
                list = document_1.createElement('custom');
                for (var prop in TrackList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TrackList.prototype[prop];
                    }
                }
                for (var _prop in TextTrackList.prototype) {
                    if (_prop !== 'constructor') {
                        list[_prop] = TextTrackList.prototype[_prop];
                    }
                }
            }

            list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
            return _ret = list, possibleConstructorReturn(_this, _ret);
        }

        /**
         * Add a {@link TextTrack} to the `TextTrackList`
         *
         * @param {TextTrack} track
         *        The text track to add to the list.
         *
         * @fires TrackList#addtrack
         */


        TextTrackList.prototype.addTrack = function addTrack(track) {
            _TrackList.prototype.addTrack.call(this, track);

            /**
             * @listens TextTrack#modechange
             * @fires TrackList#change
             */
            track.addEventListener('modechange', bind(this, function () {
                this.trigger('change');
            }));

            var nonLanguageTextTrackKind = ['metadata', 'chapters'];

            if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
                track.addEventListener('modechange', bind(this, function () {
                    this.trigger('selectedlanguagechange');
                }));
            }
        };

        return TextTrackList;
    }(TrackList);

    /**
     * @file html-track-element-list.js
     */

    /**
     * The current list of {@link HtmlTrackElement}s.
     */

    var HtmlTrackElementList = function () {

        /**
         * Create an instance of this class.
         *
         * @param {HtmlTrackElement[]} [tracks=[]]
         *        A list of `HtmlTrackElement` to instantiate the list with.
         */
        function HtmlTrackElementList() {
            var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            classCallCheck(this, HtmlTrackElementList);

            var list = this; // eslint-disable-line

            if (IS_IE8) {
                list = document_1.createElement('custom');

                for (var prop in HtmlTrackElementList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = HtmlTrackElementList.prototype[prop];
                    }
                }
            }

            list.trackElements_ = [];

            /**
             * @memberof HtmlTrackElementList
             * @member {number} length
             *         The current number of `Track`s in the this Trackist.
             * @instance
             */
            Object.defineProperty(list, 'length', {
                get: function get$$1() {
                    return this.trackElements_.length;
                }
            });

            for (var i = 0, length = trackElements.length; i < length; i++) {
                list.addTrackElement_(trackElements[i]);
            }

            if (IS_IE8) {
                return list;
            }
        }

        /**
         * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
         *
         * @param {HtmlTrackElement} trackElement
         *        The track element to add to the list.
         *
         * @private
         */


        HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
            var index = this.trackElements_.length;

            if (!('' + index in this)) {
                Object.defineProperty(this, index, {
                    get: function get$$1() {
                        return this.trackElements_[index];
                    }
                });
            }

            // Do not add duplicate elements
            if (this.trackElements_.indexOf(trackElement) === -1) {
                this.trackElements_.push(trackElement);
            }
        };

        /**
         * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
         * {@link TextTrack}.
         *
         * @param {TextTrack} track
         *        The track associated with a track element.
         *
         * @return {HtmlTrackElement|undefined}
         *         The track element that was found or undefined.
         *
         * @private
         */


        HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
            var trackElement_ = void 0;

            for (var i = 0, length = this.trackElements_.length; i < length; i++) {
                if (track === this.trackElements_[i].track) {
                    trackElement_ = this.trackElements_[i];

                    break;
                }
            }

            return trackElement_;
        };

        /**
         * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
         *
         * @param {HtmlTrackElement} trackElement
         *        The track element to remove from the list.
         *
         * @private
         */


        HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
            for (var i = 0, length = this.trackElements_.length; i < length; i++) {
                if (trackElement === this.trackElements_[i]) {
                    this.trackElements_.splice(i, 1);

                    break;
                }
            }
        };

        return HtmlTrackElementList;
    }();

    /**
     * @file text-track-cue-list.js
     */
    /**
     * @typedef {Object} TextTrackCueList~TextTrackCue
     *
     * @property {string} id
     *           The unique id for this text track cue
     *
     * @property {number} startTime
     *           The start time for this text track cue
     *
     * @property {number} endTime
     *           The end time for this text track cue
     *
     * @property {boolean} pauseOnExit
     *           Pause when the end time is reached if true.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
     */

    /**
     * A List of TextTrackCues.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
     */

    var TextTrackCueList = function () {

        /**
         * Create an instance of this class..
         *
         * @param {Array} cues
         *        A list of cues to be initialized with
         */
        function TextTrackCueList(cues) {
            classCallCheck(this, TextTrackCueList);

            var list = this; // eslint-disable-line

            if (IS_IE8) {
                list = document_1.createElement('custom');

                for (var prop in TextTrackCueList.prototype) {
                    if (prop !== 'constructor') {
                        list[prop] = TextTrackCueList.prototype[prop];
                    }
                }
            }

            TextTrackCueList.prototype.setCues_.call(list, cues);

            /**
             * @memberof TextTrackCueList
             * @member {number} length
             *         The current number of `TextTrackCue`s in the TextTrackCueList.
             * @instance
             */
            Object.defineProperty(list, 'length', {
                get: function get$$1() {
                    return this.length_;
                }
            });

            if (IS_IE8) {
                return list;
            }
        }

        /**
         * A setter for cues in this list. Creates getters
         * an an index for the cues.
         *
         * @param {Array} cues
         *        An array of cues to set
         *
         * @private
         */


        TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
            var oldLength = this.length || 0;
            var i = 0;
            var l = cues.length;

            this.cues_ = cues;
            this.length_ = cues.length;

            var defineProp = function defineProp(index) {
                if (!('' + index in this)) {
                    Object.defineProperty(this, '' + index, {
                        get: function get$$1() {
                            return this.cues_[index];
                        }
                    });
                }
            };

            if (oldLength < l) {
                i = oldLength;

                for (; i < l; i++) {
                    defineProp.call(this, i);
                }
            }
        };

        /**
         * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
         *
         * @param {string} id
         *        The id of the cue that should be searched for.
         *
         * @return {TextTrackCueList~TextTrackCue|null}
         *         A single cue or null if none was found.
         */


        TextTrackCueList.prototype.getCueById = function getCueById(id) {
            var result = null;

            for (var i = 0, l = this.length; i < l; i++) {
                var cue = this[i];

                if (cue.id === id) {
                    result = cue;
                    break;
                }
            }

            return result;
        };

        return TextTrackCueList;
    }();

    /**
     * @file track-kinds.js
     */

    /**
     * All possible `VideoTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
     * @typedef VideoTrack~Kind
     * @enum
     */
    var VideoTrackKind = {
        alternative: 'alternative',
        captions: 'captions',
        main: 'main',
        sign: 'sign',
        subtitles: 'subtitles',
        commentary: 'commentary'
    };

    /**
     * All possible `AudioTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
     * @typedef AudioTrack~Kind
     * @enum
     */
    var AudioTrackKind = {
        'alternative': 'alternative',
        'descriptions': 'descriptions',
        'main': 'main',
        'main-desc': 'main-desc',
        'translation': 'translation',
        'commentary': 'commentary'
    };

    /**
     * All possible `TextTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
     * @typedef TextTrack~Kind
     * @enum
     */
    var TextTrackKind = {
        subtitles: 'subtitles',
        captions: 'captions',
        descriptions: 'descriptions',
        chapters: 'chapters',
        metadata: 'metadata'
    };

    /**
     * All possible `TextTrackMode`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
     * @typedef TextTrack~Mode
     * @enum
     */
    var TextTrackMode = {
        disabled: 'disabled',
        hidden: 'hidden',
        showing: 'showing'
    };

    /**
     * @file track.js
     */
    /**
     * A Track class that contains all of the common functionality for {@link AudioTrack},
     * {@link VideoTrack}, and {@link TextTrack}.
     *
     * > Note: This class should not be used directly
     *
     * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
     * @extends EventTarget
     * @abstract
     */

    var Track = function (_EventTarget) {
        inherits(Track, _EventTarget);

        /**
         * Create an instance of this class.
         *
         * @param {Object} [options={}]
         *        Object of option names and values
         *
         * @param {string} [options.kind='']
         *        A valid kind for the track type you are creating.
         *
         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
         *        A unique id for this AudioTrack.
         *
         * @param {string} [options.label='']
         *        The menu label for this track.
         *
         * @param {string} [options.language='']
         *        A valid two character language code.
         *
         * @abstract
         */
        function Track() {
            var _ret;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            classCallCheck(this, Track);

            var _this = possibleConstructorReturn(this, _EventTarget.call(this));

            var track = _this; // eslint-disable-line

            if (IS_IE8) {
                track = document_1.createElement('custom');
                for (var prop in Track.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = Track.prototype[prop];
                    }
                }
            }

            var trackProps = {
                id: options.id || 'vjs_track_' + newGUID(),
                kind: options.kind || '',
                label: options.label || '',
                language: options.language || ''
            };

            /**
             * @memberof Track
             * @member {string} id
             *         The id of this track. Cannot be changed after creation.
             * @instance
             *
             * @readonly
             */

            /**
             * @memberof Track
             * @member {string} kind
             *         The kind of track that this is. Cannot be changed after creation.
             * @instance
             *
             * @readonly
             */

            /**
             * @memberof Track
             * @member {string} label
             *         The label of this track. Cannot be changed after creation.
             * @instance
             *
             * @readonly
             */

            /**
             * @memberof Track
             * @member {string} language
             *         The two letter language code for this track. Cannot be changed after
             *         creation.
             * @instance
             *
             * @readonly
             */

            var _loop = function _loop(key) {
                Object.defineProperty(track, key, {
                    get: function get$$1() {
                        return trackProps[key];
                    },
                    set: function set$$1() {}
                });
            };

            for (var key in trackProps) {
                _loop(key);
            }

            return _ret = track, possibleConstructorReturn(_this, _ret);
        }

        return Track;
    }(EventTarget);

    /**
     * @file url.js
     * @module url
     */
    /**
     * @typedef {Object} url:URLObject
     *
     * @property {string} protocol
     *           The protocol of the url that was parsed.
     *
     * @property {string} hostname
     *           The hostname of the url that was parsed.
     *
     * @property {string} port
     *           The port of the url that was parsed.
     *
     * @property {string} pathname
     *           The pathname of the url that was parsed.
     *
     * @property {string} search
     *           The search query of the url that was parsed.
     *
     * @property {string} hash
     *           The hash of the url that was parsed.
     *
     * @property {string} host
     *           The host of the url that was parsed.
     */

    /**
     * Resolve and parse the elements of a URL.
     *
     * @param  {String} url
     *         The url to parse
     *
     * @return {url:URLObject}
     *         An object of url details
     */
    var parseUrl = function parseUrl(url) {
        var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

        // add the url to an anchor and let the browser parse the URL
        var a = document_1.createElement('a');

        a.href = url;

        // IE8 (and 9?) Fix
        // ie8 doesn't parse the URL correctly until the anchor is actually
        // added to the body, and an innerHTML is needed to trigger the parsing
        var addToBody = a.host === '' && a.protocol !== 'file:';
        var div = void 0;

        if (addToBody) {
            div = document_1.createElement('div');
            div.innerHTML = '<a href="' + url + '"></a>';
            a = div.firstChild;
            // prevent the div from affecting layout
            div.setAttribute('style', 'display:none; position:absolute;');
            document_1.body.appendChild(div);
        }

        // Copy the specific URL properties to a new object
        // This is also needed for IE8 because the anchor loses its
        // properties when it's removed from the dom
        var details = {};

        for (var i = 0; i < props.length; i++) {
            details[props[i]] = a[props[i]];
        }

        // IE9 adds the port to the host property unlike everyone else. If
        // a port identifier is added for standard ports, strip it.
        if (details.protocol === 'http:') {
            details.host = details.host.replace(/:80$/, '');
        }

        if (details.protocol === 'https:') {
            details.host = details.host.replace(/:443$/, '');
        }

        if (!details.protocol) {
            details.protocol = window_1.location.protocol;
        }

        if (addToBody) {
            document_1.body.removeChild(div);
        }

        return details;
    };

    /**
     * Get absolute version of relative URL. Used to tell flash correct URL.
     *
     *
     * @param  {string} url
     *         URL to make absolute
     *
     * @return {string}
     *         Absolute URL
     *
     * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
     */
    var getAbsoluteURL = function getAbsoluteURL(url) {
        // Check if absolute URL
        if (!url.match(/^https?:\/\//)) {
            // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
            var div = document_1.createElement('div');

            div.innerHTML = '<a href="' + url + '">x</a>';
            url = div.firstChild.href;
        }

        return url;
    };

    /**
     * Returns the extension of the passed file name. It will return an empty string
     * if passed an invalid path.
     *
     * @param {string} path
     *        The fileName path like '/path/to/file.mp4'
     *
     * @returns {string}
     *          The extension in lower case or an empty string if no
     *          extension could be found.
     */
    var getFileExtension = function getFileExtension(path) {
        if (typeof path === 'string') {
            var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
            var pathParts = splitPathRe.exec(path);

            if (pathParts) {
                return pathParts.pop().toLowerCase();
            }
        }

        return '';
    };

    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @param {string} url
     *        The url to check.
     *
     * @return {boolean}
     *         Whether it is a cross domain request or not.
     */
    var isCrossOrigin = function isCrossOrigin(url) {
        var winLoc = window_1.location;
        var urlInfo = parseUrl(url);

        // IE8 protocol relative urls will return ':' for protocol
        var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

        // Check if url is for another domain/origin
        // IE8 doesn't know location.origin, so we won't rely on it here
        var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

        return crossOrigin;
    };

    var Url = (Object.freeze || Object)({
        parseUrl: parseUrl,
        getAbsoluteURL: getAbsoluteURL,
        getFileExtension: getFileExtension,
        isCrossOrigin: isCrossOrigin
    });

    var isFunction_1 = isFunction;

    var toString$1 = Object.prototype.toString;

    function isFunction (fn) {
        var string = toString$1.call(fn);
        return string === '[object Function]' ||
            (typeof fn === 'function' && string !== '[object RegExp]') ||
            (typeof window !== 'undefined' &&
                // IE8 and below
                (fn === window.setTimeout ||
                    fn === window.alert ||
                    fn === window.confirm ||
                    fn === window.prompt))
    }

    var trim_1 = createCommonjsModule(function (module, exports) {
        exports = module.exports = trim;

        function trim(str){
            return str.replace(/^\s*|\s*$/g, '');
        }

        exports.left = function(str){
            return str.replace(/^\s*/, '');
        };

        exports.right = function(str){
            return str.replace(/\s*$/, '');
        };
    });

    var forEach_1 = forEach;

    var toString$2 = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function forEach(list, iterator, context) {
        if (!isFunction_1(iterator)) {
            throw new TypeError('iterator must be a function')
        }

        if (arguments.length < 3) {
            context = this;
        }

        if (toString$2.call(list) === '[object Array]')
            forEachArray$1(list, iterator, context);
        else if (typeof list === 'string')
            forEachString(list, iterator, context);
        else
            forEachObject(list, iterator, context);
    }

    function forEachArray$1(array, iterator, context) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty.call(array, i)) {
                iterator.call(context, array[i], i, array);
            }
        }
    }

    function forEachString(string, iterator, context) {
        for (var i = 0, len = string.length; i < len; i++) {
            // no such thing as a sparse string.
            iterator.call(context, string.charAt(i), i, string);
        }
    }

    function forEachObject(object, iterator, context) {
        for (var k in object) {
            if (hasOwnProperty.call(object, k)) {
                iterator.call(context, object[k], k, object);
            }
        }
    }

    var isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };

    var parseHeaders = function (headers) {
        if (!headers)
            return {}

        var result = {};

        forEach_1(
            trim_1(headers).split('\n')
            , function (row) {
                var index = row.indexOf(':')
                    , key = trim_1(row.slice(0, index)).toLowerCase()
                    , value = trim_1(row.slice(index + 1));

                if (typeof(result[key]) === 'undefined') {
                    result[key] = value;
                } else if (isArray(result[key])) {
                    result[key].push(value);
                } else {
                    result[key] = [ result[key], value ];
                }
            }
        );

        return result
    };

    var immutable = extend;

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

    function extend() {
        var target = {};

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty$1.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target
    }

    var xhr = createXHR;
    createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop;
    createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window_1.XDomainRequest;

    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
        createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
            options = initParams(uri, options, callback);
            options.method = method.toUpperCase();
            return _createXHR(options)
        };
    });

    function forEachArray(array, iterator) {
        for (var i = 0; i < array.length; i++) {
            iterator(array[i]);
        }
    }

    function isEmpty(obj){
        for(var i in obj){
            if(obj.hasOwnProperty(i)) return false
        }
        return true
    }

    function initParams(uri, options, callback) {
        var params = uri;

        if (isFunction_1(options)) {
            callback = options;
            if (typeof uri === "string") {
                params = {uri:uri};
            }
        } else {
            params = immutable(options, {uri: uri});
        }

        params.callback = callback;
        return params
    }

    function createXHR(uri, options, callback) {
        options = initParams(uri, options, callback);
        return _createXHR(options)
    }

    function _createXHR(options) {
        if(typeof options.callback === "undefined"){
            throw new Error("callback argument missing")
        }

        var called = false;
        var callback = function cbOnce(err, response, body){
            if(!called){
                called = true;
                options.callback(err, response, body);
            }
        };

        function readystatechange() {
            if (xhr.readyState === 4) {
                setTimeout(loadFunc, 0);
            }
        }

        function getBody() {
            // Chrome with requestType=blob throws errors arround when even testing access to responseText
            var body = undefined;

            if (xhr.response) {
                body = xhr.response;
            } else {
                body = xhr.responseText || getXml(xhr);
            }

            if (isJson) {
                try {
                    body = JSON.parse(body);
                } catch (e) {}
            }

            return body
        }

        function errorFunc(evt) {
            clearTimeout(timeoutTimer);
            if(!(evt instanceof Error)){
                evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") );
            }
            evt.statusCode = 0;
            return callback(evt, failureResponse)
        }

        // will load the data & process the response in a special response object
        function loadFunc() {
            if (aborted) return
            var status;
            clearTimeout(timeoutTimer);
            if(options.useXDR && xhr.status===undefined) {
                //IE8 CORS GET successful response doesn't have a status field, but body is fine
                status = 200;
            } else {
                status = (xhr.status === 1223 ? 204 : xhr.status);
            }
            var response = failureResponse;
            var err = null;

            if (status !== 0){
                response = {
                    body: getBody(),
                    statusCode: status,
                    method: method,
                    headers: {},
                    url: uri,
                    rawRequest: xhr
                };
                if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                    response.headers = parseHeaders(xhr.getAllResponseHeaders());
                }
            } else {
                err = new Error("Internal XMLHttpRequest Error");
            }
            return callback(err, response, response.body)
        }

        var xhr = options.xhr || null;

        if (!xhr) {
            if (options.cors || options.useXDR) {
                xhr = new createXHR.XDomainRequest();
            }else{
                xhr = new createXHR.XMLHttpRequest();
            }
        }

        var key;
        var aborted;
        var uri = xhr.url = options.uri || options.url;
        var method = xhr.method = options.method || "GET";
        var body = options.body || options.data;
        var headers = xhr.headers = options.headers || {};
        var sync = !!options.sync;
        var isJson = false;
        var timeoutTimer;
        var failureResponse = {
            body: undefined,
            headers: {},
            statusCode: 0,
            method: method,
            url: uri,
            rawRequest: xhr
        };

        if ("json" in options && options.json !== false) {
            isJson = true;
            headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
            if (method !== "GET" && method !== "HEAD") {
                headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
                body = JSON.stringify(options.json === true ? body : options.json);
            }
        }

        xhr.onreadystatechange = readystatechange;
        xhr.onload = loadFunc;
        xhr.onerror = errorFunc;
        // IE9 must have onprogress be set to a unique function.
        xhr.onprogress = function () {
            // IE must die
        };
        xhr.onabort = function(){
            aborted = true;
        };
        xhr.ontimeout = errorFunc;
        xhr.open(method, uri, !sync, options.username, options.password);
        //has to be after open
        if(!sync) {
            xhr.withCredentials = !!options.withCredentials;
        }
        // Cannot set timeout with sync request
        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
        if (!sync && options.timeout > 0 ) {
            timeoutTimer = setTimeout(function(){
                if (aborted) return
                aborted = true;//IE9 may still call readystatechange
                xhr.abort("timeout");
                var e = new Error("XMLHttpRequest timeout");
                e.code = "ETIMEDOUT";
                errorFunc(e);
            }, options.timeout );
        }

        if (xhr.setRequestHeader) {
            for(key in headers){
                if(headers.hasOwnProperty(key)){
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
        } else if (options.headers && !isEmpty(options.headers)) {
            throw new Error("Headers cannot be set on an XDomainRequest object")
        }

        if ("responseType" in options) {
            xhr.responseType = options.responseType;
        }

        if ("beforeSend" in options &&
            typeof options.beforeSend === "function"
        ) {
            options.beforeSend(xhr);
        }

        // Microsoft Edge browser sends "undefined" when send is called with undefined value.
        // XMLHttpRequest spec says to pass null as body to indicate no body
        // See https://github.com/naugtur/xhr/issues/100.
        xhr.send(body || null);

        return xhr


    }

    function getXml(xhr) {
        if (xhr.responseType === "document") {
            return xhr.responseXML
        }
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
            return xhr.responseXML
        }

        return null
    }

    function noop() {}

    /**
     * @file text-track.js
     */
    /**
     * Takes a webvtt file contents and parses it into cues
     *
     * @param {string} srcContent
     *        webVTT file contents
     *
     * @param {TextTrack} track
     *        TextTrack to add cues to. Cues come from the srcContent.
     *
     * @private
     */
    var parseCues = function parseCues(srcContent, track) {
        var parser = new window_1.WebVTT.Parser(window_1, window_1.vttjs, window_1.WebVTT.StringDecoder());
        var errors = [];

        parser.oncue = function (cue) {
            track.addCue(cue);
        };

        parser.onparsingerror = function (error) {
            errors.push(error);
        };

        parser.onflush = function () {
            track.trigger({
                type: 'loadeddata',
                target: track
            });
        };

        parser.parse(srcContent);
        if (errors.length > 0) {
            if (window_1.console && window_1.console.groupCollapsed) {
                window_1.console.groupCollapsed('Text Track parsing errors for ' + track.src);
            }
            errors.forEach(function (error) {
                return log$1.error(error);
            });
            if (window_1.console && window_1.console.groupEnd) {
                window_1.console.groupEnd();
            }
        }

        parser.flush();
    };

    /**
     * Load a `TextTrack` from a specifed url.
     *
     * @param {string} src
     *        Url to load track from.
     *
     * @param {TextTrack} track
     *        Track to add cues to. Comes from the content at the end of `url`.
     *
     * @private
     */
    var loadTrack = function loadTrack(src, track) {
        var opts = {
            uri: src
        };
        var crossOrigin = isCrossOrigin(src);

        if (crossOrigin) {
            opts.cors = crossOrigin;
        }

        xhr(opts, bind(this, function (err, response, responseBody) {
            if (err) {
                return log$1.error(err, response);
            }

            track.loaded_ = true;

            // Make sure that vttjs has loaded, otherwise, wait till it finished loading
            // NOTE: this is only used for the alt/video.novtt.js build
            if (typeof window_1.WebVTT !== 'function') {
                if (track.tech_) {
                    var loadHandler = function loadHandler() {
                        return parseCues(responseBody, track);
                    };

                    track.tech_.on('vttjsloaded', loadHandler);
                    track.tech_.on('vttjserror', function () {
                        log$1.error('vttjs failed to load, stopping trying to process ' + track.src);
                        track.tech_.off('vttjsloaded', loadHandler);
                    });
                }
            } else {
                parseCues(responseBody, track);
            }
        }));
    };

    /**
     * A representation of a single `TextTrack`.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
     * @extends Track
     */

    var TextTrack = function (_Track) {
        inherits(TextTrack, _Track);

        /**
         * Create an instance of this class.
         *
         * @param {Object} options={}
         *        Object of option names and values
         *
         * @param {Tech} options.tech
         *        A reference to the tech that owns this TextTrack.
         *
         * @param {TextTrack~Kind} [options.kind='subtitles']
         *        A valid text track kind.
         *
         * @param {TextTrack~Mode} [options.mode='disabled']
         *        A valid text track mode.
         *
         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
         *        A unique id for this TextTrack.
         *
         * @param {string} [options.label='']
         *        The menu label for this track.
         *
         * @param {string} [options.language='']
         *        A valid two character language code.
         *
         * @param {string} [options.srclang='']
         *        A valid two character language code. An alternative, but deprioritized
         *        vesion of `options.language`
         *
         * @param {string} [options.src]
         *        A url to TextTrack cues.
         *
         * @param {boolean} [options.default]
         *        If this track should default to on or off.
         */
        function TextTrack() {
            var _this, _ret;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            classCallCheck(this, TextTrack);

            if (!options.tech) {
                throw new Error('A tech was not provided.');
            }

            var settings = mergeOptions(options, {
                kind: TextTrackKind[options.kind] || 'subtitles',
                language: options.language || options.srclang || ''
            });
            var mode = TextTrackMode[settings.mode] || 'disabled';
            var default_ = settings['default'];

            if (settings.kind === 'metadata' || settings.kind === 'chapters') {
                mode = 'hidden';
            }
            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var tt = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);

            tt.tech_ = settings.tech;

            if (IS_IE8) {
                for (var prop in TextTrack.prototype) {
                    if (prop !== 'constructor') {
                        tt[prop] = TextTrack.prototype[prop];
                    }
                }
            }

            tt.cues_ = [];
            tt.activeCues_ = [];

            var cues = new TextTrackCueList(tt.cues_);
            var activeCues = new TextTrackCueList(tt.activeCues_);
            var changed = false;
            var timeupdateHandler = bind(tt, function () {

                // Accessing this.activeCues for the side-effects of updating itself
                // due to it's nature as a getter function. Do not remove or cues will
                // stop updating!
                /* eslint-disable no-unused-expressions */
                this.activeCues;
                /* eslint-enable no-unused-expressions */
                if (changed) {
                    this.trigger('cuechange');
                    changed = false;
                }
            });

            if (mode !== 'disabled') {
                tt.tech_.ready(function () {
                    tt.tech_.on('timeupdate', timeupdateHandler);
                }, true);
            }

            /**
             * @memberof TextTrack
             * @member {boolean} default
             *         If this track was set to be on or off by default. Cannot be changed after
             *         creation.
             * @instance
             *
             * @readonly
             */
            Object.defineProperty(tt, 'default', {
                get: function get$$1() {
                    return default_;
                },
                set: function set$$1() {}
            });

            /**
             * @memberof TextTrack
             * @member {string} mode
             *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
             *         not be set if setting to an invalid mode.
             * @instance
             *
             * @fires TextTrack#modechange
             */
            Object.defineProperty(tt, 'mode', {
                get: function get$$1() {
                    return mode;
                },
                set: function set$$1(newMode) {
                    var _this2 = this;

                    if (!TextTrackMode[newMode]) {
                        return;
                    }
                    mode = newMode;
                    if (mode === 'showing') {

                        this.tech_.ready(function () {
                            _this2.tech_.on('timeupdate', timeupdateHandler);
                        }, true);
                    }
                    /**
                     * An event that fires when mode changes on this track. This allows
                     * the TextTrackList that holds this track to act accordingly.
                     *
                     * > Note: This is not part of the spec!
                     *
                     * @event TextTrack#modechange
                     * @type {EventTarget~Event}
                     */
                    this.trigger('modechange');
                }
            });

            /**
             * @memberof TextTrack
             * @member {TextTrackCueList} cues
             *         The text track cue list for this TextTrack.
             * @instance
             */
            Object.defineProperty(tt, 'cues', {
                get: function get$$1() {
                    if (!this.loaded_) {
                        return null;
                    }

                    return cues;
                },
                set: function set$$1() {}
            });

            /**
             * @memberof TextTrack
             * @member {TextTrackCueList} activeCues
             *         The list text track cues that are currently active for this TextTrack.
             * @instance
             */
            Object.defineProperty(tt, 'activeCues', {
                get: function get$$1() {
                    if (!this.loaded_) {
                        return null;
                    }

                    // nothing to do
                    if (this.cues.length === 0) {
                        return activeCues;
                    }

                    var ct = this.tech_.currentTime();
                    var active = [];

                    for (var i = 0, l = this.cues.length; i < l; i++) {
                        var cue = this.cues[i];

                        if (cue.startTime <= ct && cue.endTime >= ct) {
                            active.push(cue);
                        } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
                            active.push(cue);
                        }
                    }

                    changed = false;

                    if (active.length !== this.activeCues_.length) {
                        changed = true;
                    } else {
                        for (var _i = 0; _i < active.length; _i++) {
                            if (this.activeCues_.indexOf(active[_i]) === -1) {
                                changed = true;
                            }
                        }
                    }

                    this.activeCues_ = active;
                    activeCues.setCues_(this.activeCues_);

                    return activeCues;
                },
                set: function set$$1() {}
            });

            if (settings.src) {
                tt.src = settings.src;
                loadTrack(settings.src, tt);
            } else {
                tt.loaded_ = true;
            }

            return _ret = tt, possibleConstructorReturn(_this, _ret);
        }

        /**
         * Add a cue to the internal list of cues.
         *
         * @param {TextTrack~Cue} cue
         *        The cue to add to our internal list
         */


        TextTrack.prototype.addCue = function addCue(originalCue) {
            var cue = originalCue;

            if (window_1.vttjs && !(originalCue instanceof window_1.vttjs.VTTCue)) {
                cue = new window_1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);

                for (var prop in originalCue) {
                    if (!(prop in cue)) {
                        cue[prop] = originalCue[prop];
                    }
                }

                // make sure that `id` is copied over
                cue.id = originalCue.id;
                cue.originalCue_ = originalCue;
            }

            var tracks = this.tech_.textTracks();

            for (var i = 0; i < tracks.length; i++) {
                if (tracks[i] !== this) {
                    tracks[i].removeCue(cue);
                }
            }

            this.cues_.push(cue);
            this.cues.setCues_(this.cues_);
        };

        /**
         * Remove a cue from our internal list
         *
         * @param {TextTrack~Cue} removeCue
         *        The cue to remove from our internal list
         */


        TextTrack.prototype.removeCue = function removeCue(_removeCue) {
            var i = this.cues_.length;

            while (i--) {
                var cue = this.cues_[i];

                if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
                    this.cues_.splice(i, 1);
                    this.cues.setCues_(this.cues_);
                    break;
                }
            }
        };

        return TextTrack;
    }(Track);

    /**
     * cuechange - One or more cues in the track have become active or stopped being active.
     */


    TextTrack.prototype.allowedEvents_ = {
        cuechange: 'cuechange'
    };

    /**
     * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
     * only one `AudioTrack` in the list will be enabled at a time.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
     * @extends Track
     */

    var AudioTrack = function (_Track) {
        inherits(AudioTrack, _Track);

        /**
         * Create an instance of this class.
         *
         * @param {Object} [options={}]
         *        Object of option names and values
         *
         * @param {AudioTrack~Kind} [options.kind='']
         *        A valid audio track kind
         *
         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
         *        A unique id for this AudioTrack.
         *
         * @param {string} [options.label='']
         *        The menu label for this track.
         *
         * @param {string} [options.language='']
         *        A valid two character language code.
         *
         * @param {boolean} [options.enabled]
         *        If this track is the one that is currently playing. If this track is part of
         *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
         */
        function AudioTrack() {
            var _this, _ret;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            classCallCheck(this, AudioTrack);

            var settings = mergeOptions(options, {
                kind: AudioTrackKind[options.kind] || ''
            });
            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
            var enabled = false;

            if (IS_IE8) {
                for (var prop in AudioTrack.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = AudioTrack.prototype[prop];
                    }
                }
            }
            /**
             * @memberof AudioTrack
             * @member {boolean} enabled
             *         If this `AudioTrack` is enabled or not. When setting this will
             *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
             * @instance
             *
             * @fires VideoTrack#selectedchange
             */
            Object.defineProperty(track, 'enabled', {
                get: function get$$1() {
                    return enabled;
                },
                set: function set$$1(newEnabled) {
                    // an invalid or unchanged value
                    if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
                        return;
                    }
                    enabled = newEnabled;

                    /**
                     * An event that fires when enabled changes on this track. This allows
                     * the AudioTrackList that holds this track to act accordingly.
                     *
                     * > Note: This is not part of the spec! Native tracks will do
                     *         this internally without an event.
                     *
                     * @event AudioTrack#enabledchange
                     * @type {EventTarget~Event}
                     */
                    this.trigger('enabledchange');
                }
            });

            // if the user sets this track to selected then
            // set selected to that true value otherwise
            // we keep it false
            if (settings.enabled) {
                track.enabled = settings.enabled;
            }
            track.loaded_ = true;

            return _ret = track, possibleConstructorReturn(_this, _ret);
        }

        return AudioTrack;
    }(Track);

    /**
     * A representation of a single `VideoTrack`.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
     * @extends Track
     */

    var VideoTrack = function (_Track) {
        inherits(VideoTrack, _Track);

        /**
         * Create an instance of this class.
         *
         * @param {Object} [options={}]
         *        Object of option names and values
         *
         * @param {string} [options.kind='']
         *        A valid {@link VideoTrack~Kind}
         *
         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
         *        A unique id for this AudioTrack.
         *
         * @param {string} [options.label='']
         *        The menu label for this track.
         *
         * @param {string} [options.language='']
         *        A valid two character language code.
         *
         * @param {boolean} [options.selected]
         *        If this track is the one that is currently playing.
         */
        function VideoTrack() {
            var _this, _ret;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            classCallCheck(this, VideoTrack);

            var settings = mergeOptions(options, {
                kind: VideoTrackKind[options.kind] || ''
            });

            // on IE8 this will be a document element
            // for every other browser this will be a normal object
            var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
            var selected = false;

            if (IS_IE8) {
                for (var prop in VideoTrack.prototype) {
                    if (prop !== 'constructor') {
                        track[prop] = VideoTrack.prototype[prop];
                    }
                }
            }

            /**
             * @memberof VideoTrack
             * @member {boolean} selected
             *         If this `VideoTrack` is selected or not. When setting this will
             *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
             * @instance
             *
             * @fires VideoTrack#selectedchange
             */
            Object.defineProperty(track, 'selected', {
                get: function get$$1() {
                    return selected;
                },
                set: function set$$1(newSelected) {
                    // an invalid or unchanged value
                    if (typeof newSelected !== 'boolean' || newSelected === selected) {
                        return;
                    }
                    selected = newSelected;

                    /**
                     * An event that fires when selected changes on this track. This allows
                     * the VideoTrackList that holds this track to act accordingly.
                     *
                     * > Note: This is not part of the spec! Native tracks will do
                     *         this internally without an event.
                     *
                     * @event VideoTrack#selectedchange
                     * @type {EventTarget~Event}
                     */
                    this.trigger('selectedchange');
                }
            });

            // if the user sets this track to selected then
            // set selected to that true value otherwise
            // we keep it false
            if (settings.selected) {
                track.selected = settings.selected;
            }

            return _ret = track, possibleConstructorReturn(_this, _ret);
        }

        return VideoTrack;
    }(Track);

    /**
     * @file html-track-element.js
     */

    /**
     * @memberof HTMLTrackElement
     * @typedef {HTMLTrackElement~ReadyState}
     * @enum {number}
     */
    var NONE = 0;
    var LOADING = 1;
    var LOADED = 2;
    var ERROR = 3;

    /**
     * A single track represented in the DOM.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
     * @extends EventTarget
     */

    var HTMLTrackElement = function (_EventTarget) {
        inherits(HTMLTrackElement, _EventTarget);

        /**
         * Create an instance of this class.
         *
         * @param {Object} options={}
         *        Object of option names and values
         *
         * @param {Tech} options.tech
         *        A reference to the tech that owns this HTMLTrackElement.
         *
         * @param {TextTrack~Kind} [options.kind='subtitles']
         *        A valid text track kind.
         *
         * @param {TextTrack~Mode} [options.mode='disabled']
         *        A valid text track mode.
         *
         * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
         *        A unique id for this TextTrack.
         *
         * @param {string} [options.label='']
         *        The menu label for this track.
         *
         * @param {string} [options.language='']
         *        A valid two character language code.
         *
         * @param {string} [options.srclang='']
         *        A valid two character language code. An alternative, but deprioritized
         *        vesion of `options.language`
         *
         * @param {string} [options.src]
         *        A url to TextTrack cues.
         *
         * @param {boolean} [options.default]
         *        If this track should default to on or off.
         */
        function HTMLTrackElement() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            classCallCheck(this, HTMLTrackElement);

            var _this = possibleConstructorReturn(this, _EventTarget.call(this));

            var readyState = void 0;
            var trackElement = _this; // eslint-disable-line

            if (IS_IE8) {
                trackElement = document_1.createElement('custom');

                for (var prop in HTMLTrackElement.prototype) {
                    if (prop !== 'constructor') {
                        trackElement[prop] = HTMLTrackElement.prototype[prop];
                    }
                }
            }

            var track = new TextTrack(options);

            trackElement.kind = track.kind;
            trackElement.src = track.src;
            trackElement.srclang = track.language;
            trackElement.label = track.label;
            trackElement['default'] = track['default'];

            /**
             * @memberof HTMLTrackElement
             * @member {HTMLTrackElement~ReadyState} readyState
             *         The current ready state of the track element.
             * @instance
             */
            Object.defineProperty(trackElement, 'readyState', {
                get: function get$$1() {
                    return readyState;
                }
            });

            /**
             * @memberof HTMLTrackElement
             * @member {TextTrack} track
             *         The underlying TextTrack object.
             * @instance
             *
             */
            Object.defineProperty(trackElement, 'track', {
                get: function get$$1() {
                    return track;
                }
            });

            readyState = NONE;

            /**
             * @listens TextTrack#loadeddata
             * @fires HTMLTrackElement#load
             */
            track.addEventListener('loadeddata', function () {
                readyState = LOADED;

                trackElement.trigger({
                    type: 'load',
                    target: trackElement
                });
            });

            if (IS_IE8) {
                var _ret;

                return _ret = trackElement, possibleConstructorReturn(_this, _ret);
            }
            return _this;
        }

        return HTMLTrackElement;
    }(EventTarget);

    HTMLTrackElement.prototype.allowedEvents_ = {
        load: 'load'
    };

    HTMLTrackElement.NONE = NONE;
    HTMLTrackElement.LOADING = LOADING;
    HTMLTrackElement.LOADED = LOADED;
    HTMLTrackElement.ERROR = ERROR;

    /*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */

    var NORMAL = {
        audio: {
            ListClass: AudioTrackList,
            TrackClass: AudioTrack,
            capitalName: 'Audio'
        },
        video: {
            ListClass: VideoTrackList,
            TrackClass: VideoTrack,
            capitalName: 'Video'
        },
        text: {
            ListClass: TextTrackList,
            TrackClass: TextTrack,
            capitalName: 'Text'
        }
    };

    Object.keys(NORMAL).forEach(function (type) {
        NORMAL[type].getterName = type + 'Tracks';
        NORMAL[type].privateName = type + 'Tracks_';
    });

    var REMOTE = {
        remoteText: {
            ListClass: TextTrackList,
            TrackClass: TextTrack,
            capitalName: 'RemoteText',
            getterName: 'remoteTextTracks',
            privateName: 'remoteTextTracks_'
        },
        remoteTextEl: {
            ListClass: HtmlTrackElementList,
            TrackClass: HTMLTrackElement,
            capitalName: 'RemoteTextTrackEls',
            getterName: 'remoteTextTrackEls',
            privateName: 'remoteTextTrackEls_'
        }
    };

    var ALL = mergeOptions(NORMAL, REMOTE);

    REMOTE.names = Object.keys(REMOTE);
    NORMAL.names = Object.keys(NORMAL);
    ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);

    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
    var _objCreate = Object.create || (function() {
        function F() {}
        return function(o) {
            if (arguments.length !== 1) {
                throw new Error('Object.create shim only accepts one parameter.');
            }
            F.prototype = o;
            return new F();
        };
    })();

// Creates a new ParserError object from an errorData object. The errorData
// object should have default code and message properties. The default message
// property can be overriden by passing in a message parameter.
// See ParsingError.Errors below for acceptable errors.
    function ParsingError(errorData, message) {
        this.name = "ParsingError";
        this.code = errorData.code;
        this.message = message || errorData.message;
    }
    ParsingError.prototype = _objCreate(Error.prototype);
    ParsingError.prototype.constructor = ParsingError;

// ParsingError metadata for acceptable ParsingErrors.
    ParsingError.Errors = {
        BadSignature: {
            code: 0,
            message: "Malformed WebVTT signature."
        },
        BadTimeStamp: {
            code: 1,
            message: "Malformed time stamp."
        }
    };

// Try to parse input as a time stamp.
    function parseTimeStamp(input) {

        function computeSeconds(h, m, s, f) {
            return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
        }

        var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
        if (!m) {
            return null;
        }

        if (m[3]) {
            // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
            return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
        } else if (m[1] > 59) {
            // Timestamp takes the form of [hours]:[minutes].[milliseconds]
            // First position is hours as it's over 59.
            return computeSeconds(m[1], m[2], 0,  m[4]);
        } else {
            // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
            return computeSeconds(0, m[1], m[2], m[4]);
        }
    }

// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
    function Settings() {
        this.values = _objCreate(null);
    }

    Settings.prototype = {
        // Only accept the first assignment to any key.
        set: function(k, v) {
            if (!this.get(k) && v !== "") {
                this.values[k] = v;
            }
        },
        // Return the value for a key, or a default value.
        // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
        // a number of possible default values as properties where 'defaultKey' is
        // the key of the property that will be chosen; otherwise it's assumed to be
        // a single value.
        get: function(k, dflt, defaultKey) {
            if (defaultKey) {
                return this.has(k) ? this.values[k] : dflt[defaultKey];
            }
            return this.has(k) ? this.values[k] : dflt;
        },
        // Check whether we have a value for a key.
        has: function(k) {
            return k in this.values;
        },
        // Accept a setting if its one of the given alternatives.
        alt: function(k, v, a) {
            for (var n = 0; n < a.length; ++n) {
                if (v === a[n]) {
                    this.set(k, v);
                    break;
                }
            }
        },
        // Accept a setting if its a valid (signed) integer.
        integer: function(k, v) {
            if (/^-?\d+$/.test(v)) { // integer
                this.set(k, parseInt(v, 10));
            }
        },
        // Accept a setting if its a valid percentage.
        percent: function(k, v) {
            var m;
            if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
                v = parseFloat(v);
                if (v >= 0 && v <= 100) {
                    this.set(k, v);
                    return true;
                }
            }
            return false;
        }
    };

// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
    function parseOptions(input, callback, keyValueDelim, groupDelim) {
        var groups = groupDelim ? input.split(groupDelim) : [input];
        for (var i in groups) {
            if (typeof groups[i] !== "string") {
                continue;
            }
            var kv = groups[i].split(keyValueDelim);
            if (kv.length !== 2) {
                continue;
            }
            var k = kv[0];
            var v = kv[1];
            callback(k, v);
        }
    }

    function parseCue(input, cue, regionList) {
        // Remember the original input if we need to throw an error.
        var oInput = input;
        // 4.1 WebVTT timestamp
        function consumeTimeStamp() {
            var ts = parseTimeStamp(input);
            if (ts === null) {
                throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                    "Malformed timestamp: " + oInput);
            }
            // Remove time stamp from input.
            input = input.replace(/^[^\sa-zA-Z-]+/, "");
            return ts;
        }

        // 4.4.2 WebVTT cue settings
        function consumeCueSettings(input, cue) {
            var settings = new Settings();

            parseOptions(input, function (k, v) {
                switch (k) {
                    case "region":
                        // Find the last region we parsed with the same region id.
                        for (var i = regionList.length - 1; i >= 0; i--) {
                            if (regionList[i].id === v) {
                                settings.set(k, regionList[i].region);
                                break;
                            }
                        }
                        break;
                    case "vertical":
                        settings.alt(k, v, ["rl", "lr"]);
                        break;
                    case "line":
                        var vals = v.split(","),
                            vals0 = vals[0];
                        settings.integer(k, vals0);
                        settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
                        settings.alt(k, vals0, ["auto"]);
                        if (vals.length === 2) {
                            settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
                        }
                        break;
                    case "position":
                        vals = v.split(",");
                        settings.percent(k, vals[0]);
                        if (vals.length === 2) {
                            settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
                        }
                        break;
                    case "size":
                        settings.percent(k, v);
                        break;
                    case "align":
                        settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
                        break;
                }
            }, /:/, /\s/);

            // Apply default values for any missing fields.
            cue.region = settings.get("region", null);
            cue.vertical = settings.get("vertical", "");
            cue.line = settings.get("line", "auto");
            cue.lineAlign = settings.get("lineAlign", "start");
            cue.snapToLines = settings.get("snapToLines", true);
            cue.size = settings.get("size", 100);
            cue.align = settings.get("align", "middle");
            cue.position = settings.get("position", {
                start: 0,
                left: 0,
                middle: 50,
                end: 100,
                right: 100
            }, cue.align);
            cue.positionAlign = settings.get("positionAlign", {
                start: "start",
                left: "start",
                middle: "middle",
                end: "end",
                right: "end"
            }, cue.align);
        }

        function skipWhitespace() {
            input = input.replace(/^\s+/, "");
        }

        // 4.1 WebVTT cue timings.
        skipWhitespace();
        cue.startTime = consumeTimeStamp();   // (1) collect cue start time
        skipWhitespace();
        if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
            throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                "Malformed time stamp (time stamps must be separated by '-->'): " +
                oInput);
        }
        input = input.substr(3);
        skipWhitespace();
        cue.endTime = consumeTimeStamp();     // (5) collect cue end time

        // 4.1 WebVTT cue settings list.
        skipWhitespace();
        consumeCueSettings(input, cue);
    }

    var ESCAPE = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&lrm;": "\u200e",
        "&rlm;": "\u200f",
        "&nbsp;": "\u00a0"
    };

    var TAG_NAME = {
        c: "span",
        i: "i",
        b: "b",
        u: "u",
        ruby: "ruby",
        rt: "rt",
        v: "span",
        lang: "span"
    };

    var TAG_ANNOTATION = {
        v: "title",
        lang: "lang"
    };

    var NEEDS_PARENT = {
        rt: "ruby"
    };

// Parse content into a document fragment.
    function parseContent(window, input) {
        function nextToken() {
            // Check for end-of-string.
            if (!input) {
                return null;
            }

            // Consume 'n' characters from the input.
            function consume(result) {
                input = input.substr(result.length);
                return result;
            }

            var m = input.match(/^([^<]*)(<[^>]+>?)?/);
            // If there is some text before the next tag, return it, otherwise return
            // the tag.
            return consume(m[1] ? m[1] : m[2]);
        }

        // Unescape a string 's'.
        function unescape1(e) {
            return ESCAPE[e];
        }
        function unescape(s) {
            while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
                s = s.replace(m[0], unescape1);
            }
            return s;
        }

        function shouldAdd(current, element) {
            return !NEEDS_PARENT[element.localName] ||
                NEEDS_PARENT[element.localName] === current.localName;
        }

        // Create an element for this tag.
        function createElement(type, annotation) {
            var tagName = TAG_NAME[type];
            if (!tagName) {
                return null;
            }
            var element = window.document.createElement(tagName);
            element.localName = tagName;
            var name = TAG_ANNOTATION[type];
            if (name && annotation) {
                element[name] = annotation.trim();
            }
            return element;
        }

        var rootDiv = window.document.createElement("div"),
            current = rootDiv,
            t,
            tagStack = [];

        while ((t = nextToken()) !== null) {
            if (t[0] === '<') {
                if (t[1] === "/") {
                    // If the closing tag matches, move back up to the parent node.
                    if (tagStack.length &&
                        tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
                        tagStack.pop();
                        current = current.parentNode;
                    }
                    // Otherwise just ignore the end tag.
                    continue;
                }
                var ts = parseTimeStamp(t.substr(1, t.length - 2));
                var node;
                if (ts) {
                    // Timestamps are lead nodes as well.
                    node = window.document.createProcessingInstruction("timestamp", ts);
                    current.appendChild(node);
                    continue;
                }
                var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                // If we can't parse the tag, skip to the next tag.
                if (!m) {
                    continue;
                }
                // Try to construct an element, and ignore the tag if we couldn't.
                node = createElement(m[1], m[3]);
                if (!node) {
                    continue;
                }
                // Determine if the tag should be added based on the context of where it
                // is placed in the cuetext.
                if (!shouldAdd(current, node)) {
                    continue;
                }
                // Set the class list (as a list of classes, separated by space).
                if (m[2]) {
                    node.className = m[2].substr(1).replace('.', ' ');
                }
                // Append the node to the current node, and enter the scope of the new
                // node.
                tagStack.push(m[1]);
                current.appendChild(node);
                current = node;
                continue;
            }

            // Text nodes are leaf nodes.
            current.appendChild(window.document.createTextNode(unescape(t)));
        }

        return rootDiv;
    }

// This is a list of all the Unicode characters that have a strong
// right-to-left category. What this means is that these characters are
// written right-to-left for sure. It was generated by pulling all the strong
// right-to-left characters out of the Unicode data table. That table can
// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
    var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],
        [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],
        [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],
        [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],
        [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],
        [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],
        [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],
        [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],
        [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],
        [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],
        [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],
        [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],
        [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],
        [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],
        [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],
        [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],
        [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],
        [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],
        [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],
        [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],
        [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],
        [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],
        [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],
        [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],
        [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];

    function isStrongRTLChar(charCode) {
        for (var i = 0; i < strongRTLRanges.length; i++) {
            var currentRange = strongRTLRanges[i];
            if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
                return true;
            }
        }

        return false;
    }

    function determineBidi(cueDiv) {
        var nodeStack = [],
            text = "",
            charCode;

        if (!cueDiv || !cueDiv.childNodes) {
            return "ltr";
        }

        function pushNodes(nodeStack, node) {
            for (var i = node.childNodes.length - 1; i >= 0; i--) {
                nodeStack.push(node.childNodes[i]);
            }
        }

        function nextTextNode(nodeStack) {
            if (!nodeStack || !nodeStack.length) {
                return null;
            }

            var node = nodeStack.pop(),
                text = node.textContent || node.innerText;
            if (text) {
                // TODO: This should match all unicode type B characters (paragraph
                // separator characters). See issue #115.
                var m = text.match(/^.*(\n|\r)/);
                if (m) {
                    nodeStack.length = 0;
                    return m[0];
                }
                return text;
            }
            if (node.tagName === "ruby") {
                return nextTextNode(nodeStack);
            }
            if (node.childNodes) {
                pushNodes(nodeStack, node);
                return nextTextNode(nodeStack);
            }
        }

        pushNodes(nodeStack, cueDiv);
        while ((text = nextTextNode(nodeStack))) {
            for (var i = 0; i < text.length; i++) {
                charCode = text.charCodeAt(i);
                if (isStrongRTLChar(charCode)) {
                    return "rtl";
                }
            }
        }
        return "ltr";
    }

    function computeLinePos(cue) {
        if (typeof cue.line === "number" &&
            (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
            return cue.line;
        }
        if (!cue.track || !cue.track.textTrackList ||
            !cue.track.textTrackList.mediaElement) {
            return -1;
        }
        var track = cue.track,
            trackList = track.textTrackList,
            count = 0;
        for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
            if (trackList[i].mode === "showing") {
                count++;
            }
        }
        return ++count * -1;
    }

    function StyleBox() {
    }

// Apply styles to a div. If there is no div passed then it defaults to the
// div on 'this'.
    StyleBox.prototype.applyStyles = function(styles, div) {
        div = div || this.div;
        for (var prop in styles) {
            if (styles.hasOwnProperty(prop)) {
                div.style[prop] = styles[prop];
            }
        }
    };

    StyleBox.prototype.formatStyle = function(val, unit) {
        return val === 0 ? 0 : val + unit;
    };

// Constructs the computed display state of the cue (a div). Places the div
// into the overlay which should be a block level element (usually a div).
    function CueStyleBox(window, cue, styleOptions) {
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
        var color = "rgba(255, 255, 255, 1)";
        var backgroundColor = "rgba(0, 0, 0, 0.8)";

        if (isIE8) {
            color = "rgb(255, 255, 255)";
            backgroundColor = "rgb(0, 0, 0)";
        }

        StyleBox.call(this);
        this.cue = cue;

        // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
        // have inline positioning and will function as the cue background box.
        this.cueDiv = parseContent(window, cue.text);
        var styles = {
            color: color,
            backgroundColor: backgroundColor,
            position: "relative",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            display: "inline"
        };

        if (!isIE8) {
            styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                : cue.vertical === "lr" ? "vertical-lr"
                    : "vertical-rl";
            styles.unicodeBidi = "plaintext";
        }
        this.applyStyles(styles, this.cueDiv);

        // Create an absolutely positioned div that will be used to position the cue
        // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
        // mirrors of them except "middle" which is "center" in CSS.
        this.div = window.document.createElement("div");
        styles = {
            textAlign: cue.align === "middle" ? "center" : cue.align,
            font: styleOptions.font,
            whiteSpace: "pre-line",
            position: "absolute"
        };

        if (!isIE8) {
            styles.direction = determineBidi(this.cueDiv);
            styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                : cue.vertical === "lr" ? "vertical-lr"
                    : "vertical-rl".
                        stylesunicodeBidi =  "plaintext";
        }

        this.applyStyles(styles);

        this.div.appendChild(this.cueDiv);

        // Calculate the distance from the reference edge of the viewport to the text
        // position of the cue box. The reference edge will be resolved later when
        // the box orientation styles are applied.
        var textPos = 0;
        switch (cue.positionAlign) {
            case "start":
                textPos = cue.position;
                break;
            case "middle":
                textPos = cue.position - (cue.size / 2);
                break;
            case "end":
                textPos = cue.position - cue.size;
                break;
        }

        // Horizontal box orientation; textPos is the distance from the left edge of the
        // area to the left edge of the box and cue.size is the distance extending to
        // the right from there.
        if (cue.vertical === "") {
            this.applyStyles({
                left:  this.formatStyle(textPos, "%"),
                width: this.formatStyle(cue.size, "%")
            });
            // Vertical box orientation; textPos is the distance from the top edge of the
            // area to the top edge of the box and cue.size is the height extending
            // downwards from there.
        } else {
            this.applyStyles({
                top: this.formatStyle(textPos, "%"),
                height: this.formatStyle(cue.size, "%")
            });
        }

        this.move = function(box) {
            this.applyStyles({
                top: this.formatStyle(box.top, "px"),
                bottom: this.formatStyle(box.bottom, "px"),
                left: this.formatStyle(box.left, "px"),
                right: this.formatStyle(box.right, "px"),
                height: this.formatStyle(box.height, "px"),
                width: this.formatStyle(box.width, "px")
            });
        };
    }
    CueStyleBox.prototype = _objCreate(StyleBox.prototype);
    CueStyleBox.prototype.constructor = CueStyleBox;

// Represents the co-ordinates of an Element in a way that we can easily
// compute things with such as if it overlaps or intersects with another Element.
// Can initialize it with either a StyleBox or another BoxPosition.
    function BoxPosition(obj) {
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

        // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
        // was passed in and we need to copy the results of 'getBoundingClientRect'
        // as the object returned is readonly. All co-ordinate values are in reference
        // to the viewport origin (top left).
        var lh, height, width, top;
        if (obj.div) {
            height = obj.div.offsetHeight;
            width = obj.div.offsetWidth;
            top = obj.div.offsetTop;

            var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
                rects.getClientRects && rects.getClientRects();
            obj = obj.div.getBoundingClientRect();
            // In certain cases the outter div will be slightly larger then the sum of
            // the inner div's lines. This could be due to bold text, etc, on some platforms.
            // In this case we should get the average line height and use that. This will
            // result in the desired behaviour.
            lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
                : 0;

        }
        this.left = obj.left;
        this.right = obj.right;
        this.top = obj.top || top;
        this.height = obj.height || height;
        this.bottom = obj.bottom || (top + (obj.height || height));
        this.width = obj.width || width;
        this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

        if (isIE8 && !this.lineHeight) {
            this.lineHeight = 13;
        }
    }

// Move the box along a particular axis. Optionally pass in an amount to move
// the box. If no amount is passed then the default is the line height of the
// box.
    BoxPosition.prototype.move = function(axis, toMove) {
        toMove = toMove !== undefined ? toMove : this.lineHeight;
        switch (axis) {
            case "+x":
                this.left += toMove;
                this.right += toMove;
                break;
            case "-x":
                this.left -= toMove;
                this.right -= toMove;
                break;
            case "+y":
                this.top += toMove;
                this.bottom += toMove;
                break;
            case "-y":
                this.top -= toMove;
                this.bottom -= toMove;
                break;
        }
    };

// Check if this box overlaps another box, b2.
    BoxPosition.prototype.overlaps = function(b2) {
        return this.left < b2.right &&
            this.right > b2.left &&
            this.top < b2.bottom &&
            this.bottom > b2.top;
    };

// Check if this box overlaps any other boxes in boxes.
    BoxPosition.prototype.overlapsAny = function(boxes) {
        for (var i = 0; i < boxes.length; i++) {
            if (this.overlaps(boxes[i])) {
                return true;
            }
        }
        return false;
    };

// Check if this box is within another box.
    BoxPosition.prototype.within = function(container) {
        return this.top >= container.top &&
            this.bottom <= container.bottom &&
            this.left >= container.left &&
            this.right <= container.right;
    };

// Check if this box is entirely within the container or it is overlapping
// on the edge opposite of the axis direction passed. For example, if "+x" is
// passed and the box is overlapping on the left edge of the container, then
// return true.
    BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
        switch (axis) {
            case "+x":
                return this.left < container.left;
            case "-x":
                return this.right > container.right;
            case "+y":
                return this.top < container.top;
            case "-y":
                return this.bottom > container.bottom;
        }
    };

// Find the percentage of the area that this box is overlapping with another
// box.
    BoxPosition.prototype.intersectPercentage = function(b2) {
        var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
            y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
            intersectArea = x * y;
        return intersectArea / (this.height * this.width);
    };

// Convert the positions from this box to CSS compatible positions using
// the reference container's positions. This has to be done because this
// box's positions are in reference to the viewport origin, whereas, CSS
// values are in referecne to their respective edges.
    BoxPosition.prototype.toCSSCompatValues = function(reference) {
        return {
            top: this.top - reference.top,
            bottom: reference.bottom - this.bottom,
            left: this.left - reference.left,
            right: reference.right - this.right,
            height: this.height,
            width: this.width
        };
    };

// Get an object that represents the box's position without anything extra.
// Can pass a StyleBox, HTMLElement, or another BoxPositon.
    BoxPosition.getSimpleBoxPosition = function(obj) {
        var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
        var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
        var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

        obj = obj.div ? obj.div.getBoundingClientRect() :
            obj.tagName ? obj.getBoundingClientRect() : obj;
        var ret = {
            left: obj.left,
            right: obj.right,
            top: obj.top || top,
            height: obj.height || height,
            bottom: obj.bottom || (top + (obj.height || height)),
            width: obj.width || width
        };
        return ret;
    };

// Move a StyleBox to its specified, or next best, position. The containerBox
// is the box that contains the StyleBox, such as a div. boxPositions are
// a list of other boxes that the styleBox can't overlap with.
    function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

        // Find the best position for a cue box, b, on the video. The axis parameter
        // is a list of axis, the order of which, it will move the box along. For example:
        // Passing ["+x", "-x"] will move the box first along the x axis in the positive
        // direction. If it doesn't find a good position for it there it will then move
        // it along the x axis in the negative direction.
        function findBestPosition(b, axis) {
            var bestPosition,
                specifiedPosition = new BoxPosition(b),
                percentage = 1; // Highest possible so the first thing we get is better.

            for (var i = 0; i < axis.length; i++) {
                while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
                (b.within(containerBox) && b.overlapsAny(boxPositions))) {
                    b.move(axis[i]);
                }
                // We found a spot where we aren't overlapping anything. This is our
                // best position.
                if (b.within(containerBox)) {
                    return b;
                }
                var p = b.intersectPercentage(containerBox);
                // If we're outside the container box less then we were on our last try
                // then remember this position as the best position.
                if (percentage > p) {
                    bestPosition = new BoxPosition(b);
                    percentage = p;
                }
                // Reset the box position to the specified position.
                b = new BoxPosition(specifiedPosition);
            }
            return bestPosition || specifiedPosition;
        }

        var boxPosition = new BoxPosition(styleBox),
            cue = styleBox.cue,
            linePos = computeLinePos(cue),
            axis = [];

        // If we have a line number to align the cue to.
        if (cue.snapToLines) {
            var size;
            switch (cue.vertical) {
                case "":
                    axis = [ "+y", "-y" ];
                    size = "height";
                    break;
                case "rl":
                    axis = [ "+x", "-x" ];
                    size = "width";
                    break;
                case "lr":
                    axis = [ "-x", "+x" ];
                    size = "width";
                    break;
            }

            var step = boxPosition.lineHeight,
                position = step * Math.round(linePos),
                maxPosition = containerBox[size] + step,
                initialAxis = axis[0];

            // If the specified intial position is greater then the max position then
            // clamp the box to the amount of steps it would take for the box to
            // reach the max position.
            if (Math.abs(position) > maxPosition) {
                position = position < 0 ? -1 : 1;
                position *= Math.ceil(maxPosition / step) * step;
            }

            // If computed line position returns negative then line numbers are
            // relative to the bottom of the video instead of the top. Therefore, we
            // need to increase our initial position by the length or width of the
            // video, depending on the writing direction, and reverse our axis directions.
            if (linePos < 0) {
                position += cue.vertical === "" ? containerBox.height : containerBox.width;
                axis = axis.reverse();
            }

            // Move the box to the specified position. This may not be its best
            // position.
            boxPosition.move(initialAxis, position);

        } else {
            // If we have a percentage line value for the cue.
            var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

            switch (cue.lineAlign) {
                case "middle":
                    linePos -= (calculatedPercentage / 2);
                    break;
                case "end":
                    linePos -= calculatedPercentage;
                    break;
            }

            // Apply initial line position to the cue box.
            switch (cue.vertical) {
                case "":
                    styleBox.applyStyles({
                        top: styleBox.formatStyle(linePos, "%")
                    });
                    break;
                case "rl":
                    styleBox.applyStyles({
                        left: styleBox.formatStyle(linePos, "%")
                    });
                    break;
                case "lr":
                    styleBox.applyStyles({
                        right: styleBox.formatStyle(linePos, "%")
                    });
                    break;
            }

            axis = [ "+y", "-x", "+x", "-y" ];

            // Get the box position again after we've applied the specified positioning
            // to it.
            boxPosition = new BoxPosition(styleBox);
        }

        var bestPosition = findBestPosition(boxPosition, axis);
        styleBox.move(bestPosition.toCSSCompatValues(containerBox));
    }

    function WebVTT$1() {
        // Nothing
    }

// Helper to allow strings to be decoded instead of the default binary utf8 data.
    WebVTT$1.StringDecoder = function() {
        return {
            decode: function(data) {
                if (!data) {
                    return "";
                }
                if (typeof data !== "string") {
                    throw new Error("Error - expected string data.");
                }
                return decodeURIComponent(encodeURIComponent(data));
            }
        };
    };

    WebVTT$1.convertCueToDOMTree = function(window, cuetext) {
        if (!window || !cuetext) {
            return null;
        }
        return parseContent(window, cuetext);
    };

    var FONT_SIZE_PERCENT = 0.05;
    var FONT_STYLE = "sans-serif";
    var CUE_BACKGROUND_PADDING = "1.5%";

// Runs the processing model over the cues and regions passed to it.
// @param overlay A block level element (usually a div) that the computed cues
//                and regions will be placed into.
    WebVTT$1.processCues = function(window, cues, overlay) {
        if (!window || !cues || !overlay) {
            return null;
        }

        // Remove all previous children.
        while (overlay.firstChild) {
            overlay.removeChild(overlay.firstChild);
        }

        var paddedOverlay = window.document.createElement("div");
        paddedOverlay.style.position = "absolute";
        paddedOverlay.style.left = "0";
        paddedOverlay.style.right = "0";
        paddedOverlay.style.top = "0";
        paddedOverlay.style.bottom = "0";
        paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
        overlay.appendChild(paddedOverlay);

        // Determine if we need to compute the display states of the cues. This could
        // be the case if a cue's state has been changed since the last computation or
        // if it has not been computed yet.
        function shouldCompute(cues) {
            for (var i = 0; i < cues.length; i++) {
                if (cues[i].hasBeenReset || !cues[i].displayState) {
                    return true;
                }
            }
            return false;
        }

        // We don't need to recompute the cues' display states. Just reuse them.
        if (!shouldCompute(cues)) {
            for (var i = 0; i < cues.length; i++) {
                paddedOverlay.appendChild(cues[i].displayState);
            }
            return;
        }

        var boxPositions = [],
            containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
            fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
        var styleOptions = {
            font: fontSize + "px " + FONT_STYLE
        };

        (function() {
            var styleBox, cue;

            for (var i = 0; i < cues.length; i++) {
                cue = cues[i];

                // Compute the intial position and styles of the cue div.
                styleBox = new CueStyleBox(window, cue, styleOptions);
                paddedOverlay.appendChild(styleBox.div);

                // Move the cue div to it's correct line position.
                moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

                // Remember the computed div so that we don't have to recompute it later
                // if we don't have too.
                cue.displayState = styleBox.div;

                boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
            }
        })();
    };

    WebVTT$1.Parser = function(window, vttjs, decoder) {
        if (!decoder) {
            decoder = vttjs;
            vttjs = {};
        }
        if (!vttjs) {
            vttjs = {};
        }

        this.window = window;
        this.vttjs = vttjs;
        this.state = "INITIAL";
        this.buffer = "";
        this.decoder = decoder || new TextDecoder("utf8");
        this.regionList = [];
    };

    WebVTT$1.Parser.prototype = {
        // If the error is a ParsingError then report it to the consumer if
        // possible. If it's not a ParsingError then throw it like normal.
        reportOrThrowError: function(e) {
            if (e instanceof ParsingError) {
                this.onparsingerror && this.onparsingerror(e);
            } else {
                throw e;
            }
        },
        parse: function (data) {
            var self = this;

            // If there is no data then we won't decode it, but will just try to parse
            // whatever is in buffer already. This may occur in circumstances, for
            // example when flush() is called.
            if (data) {
                // Try to decode the data that we received.
                self.buffer += self.decoder.decode(data, {stream: true});
            }

            function collectNextLine() {
                var buffer = self.buffer;
                var pos = 0;
                while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
                    ++pos;
                }
                var line = buffer.substr(0, pos);
                // Advance the buffer early in case we fail below.
                if (buffer[pos] === '\r') {
                    ++pos;
                }
                if (buffer[pos] === '\n') {
                    ++pos;
                }
                self.buffer = buffer.substr(pos);
                return line;
            }

            // 3.4 WebVTT region and WebVTT region settings syntax
            function parseRegion(input) {
                var settings = new Settings();

                parseOptions(input, function (k, v) {
                    switch (k) {
                        case "id":
                            settings.set(k, v);
                            break;
                        case "width":
                            settings.percent(k, v);
                            break;
                        case "lines":
                            settings.integer(k, v);
                            break;
                        case "regionanchor":
                        case "viewportanchor":
                            var xy = v.split(',');
                            if (xy.length !== 2) {
                                break;
                            }
                            // We have to make sure both x and y parse, so use a temporary
                            // settings object here.
                            var anchor = new Settings();
                            anchor.percent("x", xy[0]);
                            anchor.percent("y", xy[1]);
                            if (!anchor.has("x") || !anchor.has("y")) {
                                break;
                            }
                            settings.set(k + "X", anchor.get("x"));
                            settings.set(k + "Y", anchor.get("y"));
                            break;
                        case "scroll":
                            settings.alt(k, v, ["up"]);
                            break;
                    }
                }, /=/, /\s/);

                // Create the region, using default values for any values that were not
                // specified.
                if (settings.has("id")) {
                    var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
                    region.width = settings.get("width", 100);
                    region.lines = settings.get("lines", 3);
                    region.regionAnchorX = settings.get("regionanchorX", 0);
                    region.regionAnchorY = settings.get("regionanchorY", 100);
                    region.viewportAnchorX = settings.get("viewportanchorX", 0);
                    region.viewportAnchorY = settings.get("viewportanchorY", 100);
                    region.scroll = settings.get("scroll", "");
                    // Register the region.
                    self.onregion && self.onregion(region);
                    // Remember the VTTRegion for later in case we parse any VTTCues that
                    // reference it.
                    self.regionList.push({
                        id: settings.get("id"),
                        region: region
                    });
                }
            }

            // draft-pantos-http-live-streaming-20
            // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
            // 3.5 WebVTT
            function parseTimestampMap(input) {
                var settings = new Settings();

                parseOptions(input, function(k, v) {
                    switch(k) {
                        case "MPEGT":
                            settings.integer(k + 'S', v);
                            break;
                        case "LOCA":
                            settings.set(k + 'L', parseTimeStamp(v));
                            break;
                    }
                }, /[^\d]:/, /,/);

                self.ontimestampmap && self.ontimestampmap({
                    "MPEGTS": settings.get("MPEGTS"),
                    "LOCAL": settings.get("LOCAL")
                });
            }

            // 3.2 WebVTT metadata header syntax
            function parseHeader(input) {
                if (input.match(/X-TIMESTAMP-MAP/)) {
                    // This line contains HLS X-TIMESTAMP-MAP metadata
                    parseOptions(input, function(k, v) {
                        switch(k) {
                            case "X-TIMESTAMP-MAP":
                                parseTimestampMap(v);
                                break;
                        }
                    }, /=/);
                } else {
                    parseOptions(input, function (k, v) {
                        switch (k) {
                            case "Region":
                                // 3.3 WebVTT region metadata header syntax
                                parseRegion(v);
                                break;
                        }
                    }, /:/);
                }

            }

            // 5.1 WebVTT file parsing.
            try {
                var line;
                if (self.state === "INITIAL") {
                    // We can't start parsing until we have the first line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                        return this;
                    }

                    line = collectNextLine();

                    var m = line.match(/^WEBVTT([ \t].*)?$/);
                    if (!m || !m[0]) {
                        throw new ParsingError(ParsingError.Errors.BadSignature);
                    }

                    self.state = "HEADER";
                }

                var alreadyCollectedLine = false;
                while (self.buffer) {
                    // We can't parse a line until we have the full line.
                    if (!/\r\n|\n/.test(self.buffer)) {
                        return this;
                    }

                    if (!alreadyCollectedLine) {
                        line = collectNextLine();
                    } else {
                        alreadyCollectedLine = false;
                    }

                    switch (self.state) {
                        case "HEADER":
                            // 13-18 - Allow a header (metadata) under the WEBVTT line.
                            if (/:/.test(line)) {
                                parseHeader(line);
                            } else if (!line) {
                                // An empty line terminates the header and starts the body (cues).
                                self.state = "ID";
                            }
                            continue;
                        case "NOTE":
                            // Ignore NOTE blocks.
                            if (!line) {
                                self.state = "ID";
                            }
                            continue;
                        case "ID":
                            // Check for the start of NOTE blocks.
                            if (/^NOTE($|[ \t])/.test(line)) {
                                self.state = "NOTE";
                                break;
                            }
                            // 19-29 - Allow any number of line terminators, then initialize new cue values.
                            if (!line) {
                                continue;
                            }
                            self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
                            self.state = "CUE";
                            // 30-39 - Check if self line contains an optional identifier or timing data.
                            if (line.indexOf("-->") === -1) {
                                self.cue.id = line;
                                continue;
                            }
                        // Process line as start of a cue.
                        /*falls through*/
                        case "CUE":
                            // 40 - Collect cue timings and settings.
                            try {
                                parseCue(line, self.cue, self.regionList);
                            } catch (e) {
                                self.reportOrThrowError(e);
                                // In case of an error ignore rest of the cue.
                                self.cue = null;
                                self.state = "BADCUE";
                                continue;
                            }
                            self.state = "CUETEXT";
                            continue;
                        case "CUETEXT":
                            var hasSubstring = line.indexOf("-->") !== -1;
                            // 34 - If we have an empty line then report the cue.
                            // 35 - If we have the special substring '-->' then report the cue,
                            // but do not collect the line as we need to process the current
                            // one as a new cue.
                            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                                // We are done parsing self cue.
                                self.oncue && self.oncue(self.cue);
                                self.cue = null;
                                self.state = "ID";
                                continue;
                            }
                            if (self.cue.text) {
                                self.cue.text += "\n";
                            }
                            self.cue.text += line;
                            continue;
                        case "BADCUE": // BADCUE
                            // 54-62 - Collect and discard the remaining cue.
                            if (!line) {
                                self.state = "ID";
                            }
                            continue;
                    }
                }
            } catch (e) {
                self.reportOrThrowError(e);

                // If we are currently parsing a cue, report what we have.
                if (self.state === "CUETEXT" && self.cue && self.oncue) {
                    self.oncue(self.cue);
                }
                self.cue = null;
                // Enter BADWEBVTT state if header was not parsed correctly otherwise
                // another exception occurred so enter BADCUE state.
                self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
            }
            return this;
        },
        flush: function () {
            var self = this;
            try {
                // Finish decoding the stream.
                self.buffer += self.decoder.decode();
                // Synthesize the end of the current cue or region.
                if (self.cue || self.state === "HEADER") {
                    self.buffer += "\n\n";
                    self.parse();
                }
                // If we've flushed, parsed, and we're still on the INITIAL state then
                // that means we don't have enough of the stream to parse the first
                // line.
                if (self.state === "INITIAL") {
                    throw new ParsingError(ParsingError.Errors.BadSignature);
                }
            } catch(e) {
                self.reportOrThrowError(e);
            }
            self.onflush && self.onflush();
            return this;
        }
    };

    var vtt$1 = WebVTT$1;

    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var autoKeyword = "auto";
    var directionSetting = {
        "": true,
        "lr": true,
        "rl": true
    };
    var alignSetting = {
        "start": true,
        "middle": true,
        "end": true,
        "left": true,
        "right": true
    };

    function findDirectionSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var dir = directionSetting[value.toLowerCase()];
        return dir ? value.toLowerCase() : false;
    }

    function findAlignSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var align = alignSetting[value.toLowerCase()];
        return align ? value.toLowerCase() : false;
    }

    function extend$1(obj) {
        var i = 1;
        for (; i < arguments.length; i++) {
            var cobj = arguments[i];
            for (var p in cobj) {
                obj[p] = cobj[p];
            }
        }

        return obj;
    }

    function VTTCue(startTime, endTime, text) {
        var cue = this;
        var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
        var baseObj = {};

        if (isIE8) {
            cue = document.createElement('custom');
        } else {
            baseObj.enumerable = true;
        }

        /**
         * Shim implementation specific properties. These properties are not in
         * the spec.
         */

        // Lets us know when the VTTCue's data has changed in such a way that we need
        // to recompute its display state. This lets us compute its display state
        // lazily.
        cue.hasBeenReset = false;

        /**
         * VTTCue and TextTrackCue properties
         * http://dev.w3.org/html5/webvtt/#vttcue-interface
         */

        var _id = "";
        var _pauseOnExit = false;
        var _startTime = startTime;
        var _endTime = endTime;
        var _text = text;
        var _region = null;
        var _vertical = "";
        var _snapToLines = true;
        var _line = "auto";
        var _lineAlign = "start";
        var _position = 50;
        var _positionAlign = "middle";
        var _size = 50;
        var _align = "middle";

        Object.defineProperty(cue,
            "id", extend$1({}, baseObj, {
                get: function() {
                    return _id;
                },
                set: function(value) {
                    _id = "" + value;
                }
            }));

        Object.defineProperty(cue,
            "pauseOnExit", extend$1({}, baseObj, {
                get: function() {
                    return _pauseOnExit;
                },
                set: function(value) {
                    _pauseOnExit = !!value;
                }
            }));

        Object.defineProperty(cue,
            "startTime", extend$1({}, baseObj, {
                get: function() {
                    return _startTime;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("Start time must be set to a number.");
                    }
                    _startTime = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "endTime", extend$1({}, baseObj, {
                get: function() {
                    return _endTime;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("End time must be set to a number.");
                    }
                    _endTime = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "text", extend$1({}, baseObj, {
                get: function() {
                    return _text;
                },
                set: function(value) {
                    _text = "" + value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "region", extend$1({}, baseObj, {
                get: function() {
                    return _region;
                },
                set: function(value) {
                    _region = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "vertical", extend$1({}, baseObj, {
                get: function() {
                    return _vertical;
                },
                set: function(value) {
                    var setting = findDirectionSetting(value);
                    // Have to check for false because the setting an be an empty string.
                    if (setting === false) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _vertical = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "snapToLines", extend$1({}, baseObj, {
                get: function() {
                    return _snapToLines;
                },
                set: function(value) {
                    _snapToLines = !!value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "line", extend$1({}, baseObj, {
                get: function() {
                    return _line;
                },
                set: function(value) {
                    if (typeof value !== "number" && value !== autoKeyword) {
                        throw new SyntaxError("An invalid number or illegal string was specified.");
                    }
                    _line = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "lineAlign", extend$1({}, baseObj, {
                get: function() {
                    return _lineAlign;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _lineAlign = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "position", extend$1({}, baseObj, {
                get: function() {
                    return _position;
                },
                set: function(value) {
                    if (value < 0 || value > 100) {
                        throw new Error("Position must be between 0 and 100.");
                    }
                    _position = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "positionAlign", extend$1({}, baseObj, {
                get: function() {
                    return _positionAlign;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _positionAlign = setting;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "size", extend$1({}, baseObj, {
                get: function() {
                    return _size;
                },
                set: function(value) {
                    if (value < 0 || value > 100) {
                        throw new Error("Size must be between 0 and 100.");
                    }
                    _size = value;
                    this.hasBeenReset = true;
                }
            }));

        Object.defineProperty(cue,
            "align", extend$1({}, baseObj, {
                get: function() {
                    return _align;
                },
                set: function(value) {
                    var setting = findAlignSetting(value);
                    if (!setting) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _align = setting;
                    this.hasBeenReset = true;
                }
            }));

        /**
         * Other <track> spec defined properties
         */

        // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
        cue.displayState = undefined;

        if (isIE8) {
            return cue;
        }
    }

    /**
     * VTTCue methods
     */

    VTTCue.prototype.getCueAsHTML = function() {
        // Assume WebVTT.convertCueToDOMTree is on the global.
        return WebVTT.convertCueToDOMTree(window, this.text);
    };

    var vttcue = VTTCue;

    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var scrollSetting = {
        "": true,
        "up": true
    };

    function findScrollSetting(value) {
        if (typeof value !== "string") {
            return false;
        }
        var scroll = scrollSetting[value.toLowerCase()];
        return scroll ? value.toLowerCase() : false;
    }

    function isValidPercentValue(value) {
        return typeof value === "number" && (value >= 0 && value <= 100);
    }

// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
    function VTTRegion() {
        var _width = 100;
        var _lines = 3;
        var _regionAnchorX = 0;
        var _regionAnchorY = 100;
        var _viewportAnchorX = 0;
        var _viewportAnchorY = 100;
        var _scroll = "";

        Object.defineProperties(this, {
            "width": {
                enumerable: true,
                get: function() {
                    return _width;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("Width must be between 0 and 100.");
                    }
                    _width = value;
                }
            },
            "lines": {
                enumerable: true,
                get: function() {
                    return _lines;
                },
                set: function(value) {
                    if (typeof value !== "number") {
                        throw new TypeError("Lines must be set to a number.");
                    }
                    _lines = value;
                }
            },
            "regionAnchorY": {
                enumerable: true,
                get: function() {
                    return _regionAnchorY;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("RegionAnchorX must be between 0 and 100.");
                    }
                    _regionAnchorY = value;
                }
            },
            "regionAnchorX": {
                enumerable: true,
                get: function() {
                    return _regionAnchorX;
                },
                set: function(value) {
                    if(!isValidPercentValue(value)) {
                        throw new Error("RegionAnchorY must be between 0 and 100.");
                    }
                    _regionAnchorX = value;
                }
            },
            "viewportAnchorY": {
                enumerable: true,
                get: function() {
                    return _viewportAnchorY;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("ViewportAnchorY must be between 0 and 100.");
                    }
                    _viewportAnchorY = value;
                }
            },
            "viewportAnchorX": {
                enumerable: true,
                get: function() {
                    return _viewportAnchorX;
                },
                set: function(value) {
                    if (!isValidPercentValue(value)) {
                        throw new Error("ViewportAnchorX must be between 0 and 100.");
                    }
                    _viewportAnchorX = value;
                }
            },
            "scroll": {
                enumerable: true,
                get: function() {
                    return _scroll;
                },
                set: function(value) {
                    var setting = findScrollSetting(value);
                    // Have to check for false as an empty string is a legal value.
                    if (setting === false) {
                        throw new SyntaxError("An invalid or illegal string was specified.");
                    }
                    _scroll = setting;
                }
            }
        });
    }

    var vttregion = VTTRegion;

    var browserIndex = createCommonjsModule(function (module) {
        /**
         * Copyright 2013 vtt.js Contributors
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */

// Default exports for Node. Export the extended versions of VTTCue and
// VTTRegion in Node since we likely want the capability to convert back and
// forth between JSON. If we don't then it's not that big of a deal since we're
// off browser.



        var vttjs = module.exports = {
            WebVTT: vtt$1,
            VTTCue: vttcue,
            VTTRegion: vttregion
        };

        window_1.vttjs = vttjs;
        window_1.WebVTT = vttjs.WebVTT;

        var cueShim = vttjs.VTTCue;
        var regionShim = vttjs.VTTRegion;
        var nativeVTTCue = window_1.VTTCue;
        var nativeVTTRegion = window_1.VTTRegion;

        vttjs.shim = function() {
            window_1.VTTCue = cueShim;
            window_1.VTTRegion = regionShim;
        };

        vttjs.restore = function() {
            window_1.VTTCue = nativeVTTCue;
            window_1.VTTRegion = nativeVTTRegion;
        };

        if (!window_1.VTTCue) {
            vttjs.shim();
        }
    });

    /**
     * @file tech.js
     */

    /**
     * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
     * that just contains the src url alone.
     * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
     * `var SourceString = 'http://example.com/some-video.mp4';`
     *
     * @typedef {Object|string} Tech~SourceObject
     *
     * @property {string} src
     *           The url to the source
     *
     * @property {string} type
     *           The mime type of the source
     */

    /**
     * A function used by {@link Tech} to create a new {@link TextTrack}.
     *
     * @private
     *
     * @param {Tech} self
     *        An instance of the Tech class.
     *
     * @param {string} kind
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
     *
     * @param {string} [label]
     *        Label to identify the text track
     *
     * @param {string} [language]
     *        Two letter language abbreviation
     *
     * @param {Object} [options={}]
     *        An object with additional text track options
     *
     * @return {TextTrack}
     *          The text track that was created.
     */
    function createTrackHelper(self, kind, label, language) {
        var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        var tracks = self.textTracks();

        options.kind = kind;

        if (label) {
            options.label = label;
        }
        if (language) {
            options.language = language;
        }
        options.tech = self;

        var track = new ALL.text.TrackClass(options);

        tracks.addTrack(track);

        return track;
    }

    /**
     * This is the base class for media playback technology controllers, such as
     * {@link Flash} and {@link HTML5}
     *
     * @extends Component
     */

    var Tech = function (_Component) {
        inherits(Tech, _Component);

        /**
         * Create an instance of this Tech.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} ready
         *        Callback function to call when the `HTML5` Tech is ready.
         */
        function Tech() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
            classCallCheck(this, Tech);

            // we don't want the tech to report user activity automatically.
            // This is done manually in addControlsListeners
            options.reportTouchActivity = false;

            // keep track of whether the current source has played at all to
            // implement a very limited played()
            var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

            _this.hasStarted_ = false;
            _this.on('playing', function () {
                this.hasStarted_ = true;
            });
            _this.on('loadstart', function () {
                this.hasStarted_ = false;
            });

            ALL.names.forEach(function (name) {
                var props = ALL[name];

                if (options && options[props.getterName]) {
                    _this[props.privateName] = options[props.getterName];
                }
            });

            // Manually track progress in cases where the browser/flash player doesn't report it.
            if (!_this.featuresProgressEvents) {
                _this.manualProgressOn();
            }

            // Manually track timeupdates in cases where the browser/flash player doesn't report it.
            if (!_this.featuresTimeupdateEvents) {
                _this.manualTimeUpdatesOn();
            }

            ['Text', 'Audio', 'Video'].forEach(function (track) {
                if (options['native' + track + 'Tracks'] === false) {
                    _this['featuresNative' + track + 'Tracks'] = false;
                }
            });

            if (options.nativeCaptions === false || options.nativeTextTracks === false) {
                _this.featuresNativeTextTracks = false;
            } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
                _this.featuresNativeTextTracks = true;
            }

            if (!_this.featuresNativeTextTracks) {
                _this.emulateTextTracks();
            }

            _this.autoRemoteTextTracks_ = new ALL.text.ListClass();

            _this.initTrackListeners();

            // Turn on component tap events only if not using native controls
            if (!options.nativeControlsForTouch) {
                _this.emitTapEvents();
            }

            if (_this.constructor) {
                _this.name_ = _this.constructor.name || 'Unknown Tech';
            }
            return _this;
        }

        /* Fallbacks for unsupported event types
  ================================================================================ */

        /**
         * Polyfill the `progress` event for browsers that don't support it natively.
         *
         * @see {@link Tech#trackProgress}
         */


        Tech.prototype.manualProgressOn = function manualProgressOn() {
            this.on('durationchange', this.onDurationChange);

            this.manualProgress = true;

            // Trigger progress watching when a source begins loading
            this.one('ready', this.trackProgress);
        };

        /**
         * Turn off the polyfill for `progress` events that was created in
         * {@link Tech#manualProgressOn}
         */


        Tech.prototype.manualProgressOff = function manualProgressOff() {
            this.manualProgress = false;
            this.stopTrackingProgress();

            this.off('durationchange', this.onDurationChange);
        };

        /**
         * This is used to trigger a `progress` event when the buffered percent changes. It
         * sets an interval function that will be called every 500 milliseconds to check if the
         * buffer end percent has changed.
         *
         * > This function is called by {@link Tech#manualProgressOn}
         *
         * @param {EventTarget~Event} event
         *        The `ready` event that caused this to run.
         *
         * @listens Tech#ready
         * @fires Tech#progress
         */


        Tech.prototype.trackProgress = function trackProgress(event) {
            this.stopTrackingProgress();
            this.progressInterval = this.setInterval(bind(this, function () {
                // Don't trigger unless buffered amount is greater than last time

                var numBufferedPercent = this.bufferedPercent();

                if (this.bufferedPercent_ !== numBufferedPercent) {
                    /**
                     * See {@link Player#progress}
                     *
                     * @event Tech#progress
                     * @type {EventTarget~Event}
                     */
                    this.trigger('progress');
                }

                this.bufferedPercent_ = numBufferedPercent;

                if (numBufferedPercent === 1) {
                    this.stopTrackingProgress();
                }
            }), 500);
        };

        /**
         * Update our internal duration on a `durationchange` event by calling
         * {@link Tech#duration}.
         *
         * @param {EventTarget~Event} event
         *        The `durationchange` event that caused this to run.
         *
         * @listens Tech#durationchange
         */


        Tech.prototype.onDurationChange = function onDurationChange(event) {
            this.duration_ = this.duration();
        };

        /**
         * Get and create a `TimeRange` object for buffering.
         *
         * @return {TimeRange}
         *         The time range object that was created.
         */


        Tech.prototype.buffered = function buffered() {
            return createTimeRanges(0, 0);
        };

        /**
         * Get the percentage of the current video that is currently buffered.
         *
         * @return {number}
         *         A number from 0 to 1 that represents the decimal percentage of the
         *         video that is buffered.
         *
         */


        Tech.prototype.bufferedPercent = function bufferedPercent$$1() {
            return bufferedPercent(this.buffered(), this.duration_);
        };

        /**
         * Turn off the polyfill for `progress` events that was created in
         * {@link Tech#manualProgressOn}
         * Stop manually tracking progress events by clearing the interval that was set in
         * {@link Tech#trackProgress}.
         */


        Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
            this.clearInterval(this.progressInterval);
        };

        /**
         * Polyfill the `timeupdate` event for browsers that don't support it.
         *
         * @see {@link Tech#trackCurrentTime}
         */


        Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
            this.manualTimeUpdates = true;

            this.on('play', this.trackCurrentTime);
            this.on('pause', this.stopTrackingCurrentTime);
        };

        /**
         * Turn off the polyfill for `timeupdate` events that was created in
         * {@link Tech#manualTimeUpdatesOn}
         */


        Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
            this.manualTimeUpdates = false;
            this.stopTrackingCurrentTime();
            this.off('play', this.trackCurrentTime);
            this.off('pause', this.stopTrackingCurrentTime);
        };

        /**
         * Sets up an interval function to track current time and trigger `timeupdate` every
         * 250 milliseconds.
         *
         * @listens Tech#play
         * @triggers Tech#timeupdate
         */


        Tech.prototype.trackCurrentTime = function trackCurrentTime() {
            if (this.currentTimeInterval) {
                this.stopTrackingCurrentTime();
            }
            this.currentTimeInterval = this.setInterval(function () {
                /**
                 * Triggered at an interval of 250ms to indicated that time is passing in the video.
                 *
                 * @event Tech#timeupdate
                 * @type {EventTarget~Event}
                 */
                this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

                // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
            }, 250);
        };

        /**
         * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
         * `timeupdate` event is no longer triggered.
         *
         * @listens {Tech#pause}
         */


        Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
            this.clearInterval(this.currentTimeInterval);

            // #1002 - if the video ends right before the next timeupdate would happen,
            // the progress bar won't make it all the way to the end
            this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
        };

        /**
         * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
         * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
         *
         * @fires Component#dispose
         */


        Tech.prototype.dispose = function dispose() {

            // clear out all tracks because we can't reuse them between techs
            this.clearTracks(NORMAL.names);

            // Turn off any manual progress or timeupdate tracking
            if (this.manualProgress) {
                this.manualProgressOff();
            }

            if (this.manualTimeUpdates) {
                this.manualTimeUpdatesOff();
            }

            _Component.prototype.dispose.call(this);
        };

        /**
         * Clear out a single `TrackList` or an array of `TrackLists` given their names.
         *
         * > Note: Techs without source handlers should call this between sources for `video`
         *         & `audio` tracks. You don't want to use them between tracks!
         *
         * @param {string[]|string} types
         *        TrackList names to clear, valid names are `video`, `audio`, and
         *        `text`.
         */


        Tech.prototype.clearTracks = function clearTracks(types) {
            var _this2 = this;

            types = [].concat(types);
            // clear out all tracks because we can't reuse them between techs
            types.forEach(function (type) {
                var list = _this2[type + 'Tracks']() || [];
                var i = list.length;

                while (i--) {
                    var track = list[i];

                    if (type === 'text') {
                        _this2.removeRemoteTextTrack(track);
                    }
                    list.removeTrack(track);
                }
            });
        };

        /**
         * Remove any TextTracks added via addRemoteTextTrack that are
         * flagged for automatic garbage collection
         */


        Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
            var list = this.autoRemoteTextTracks_ || [];
            var i = list.length;

            while (i--) {
                var track = list[i];

                this.removeRemoteTextTrack(track);
            }
        };

        /**
         * Reset the tech, which will removes all sources and reset the internal readyState.
         *
         * @abstract
         */


        Tech.prototype.reset = function reset() {};

        /**
         * Get or set an error on the Tech.
         *
         * @param {MediaError} [err]
         *        Error to set on the Tech
         *
         * @return {MediaError|null}
         *         The current error object on the tech, or null if there isn't one.
         */


        Tech.prototype.error = function error(err) {
            if (err !== undefined) {
                this.error_ = new MediaError(err);
                this.trigger('error');
            }
            return this.error_;
        };

        /**
         * Returns the `TimeRange`s that have been played through for the current source.
         *
         * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
         *         It only checks wether the source has played at all or not.
         *
         * @return {TimeRange}
         *         - A single time range if this video has played
         *         - An empty set of ranges if not.
         */


        Tech.prototype.played = function played() {
            if (this.hasStarted_) {
                return createTimeRanges(0, 0);
            }
            return createTimeRanges();
        };

        /**
         * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
         * previously called.
         *
         * @fires Tech#timeupdate
         */


        Tech.prototype.setCurrentTime = function setCurrentTime() {
            // improve the accuracy of manual timeupdates
            if (this.manualTimeUpdates) {
                /**
                 * A manual `timeupdate` event.
                 *
                 * @event Tech#timeupdate
                 * @type {EventTarget~Event}
                 */
                this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
            }
        };

        /**
         * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
         * {@link TextTrackList} events.
         *
         * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
         *
         * @fires Tech#audiotrackchange
         * @fires Tech#videotrackchange
         * @fires Tech#texttrackchange
         */


        Tech.prototype.initTrackListeners = function initTrackListeners() {
            var _this3 = this;

            /**
             * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
             *
             * @event Tech#audiotrackchange
             * @type {EventTarget~Event}
             */

            /**
             * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
             *
             * @event Tech#videotrackchange
             * @type {EventTarget~Event}
             */

            /**
             * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
             *
             * @event Tech#texttrackchange
             * @type {EventTarget~Event}
             */
            NORMAL.names.forEach(function (name) {
                var props = NORMAL[name];
                var trackListChanges = function trackListChanges() {
                    _this3.trigger(name + 'trackchange');
                };

                var tracks = _this3[props.getterName]();

                tracks.addEventListener('removetrack', trackListChanges);
                tracks.addEventListener('addtrack', trackListChanges);

                _this3.on('dispose', function () {
                    tracks.removeEventListener('removetrack', trackListChanges);
                    tracks.removeEventListener('addtrack', trackListChanges);
                });
            });
        };

        /**
         * Emulate TextTracks using vtt.js if necessary
         *
         * @fires Tech#vttjsloaded
         * @fires Tech#vttjserror
         */


        Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
            var _this4 = this;

            if (window_1.WebVTT) {
                return;
            }

            // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
            // signals that the Tech is ready at which point Tech.el_ is part of the DOM
            // before inserting the WebVTT script
            if (document_1.body.contains(this.el())) {

                // load via require if available and vtt.js script location was not passed in
                // as an option. novtt builds will turn the above require call into an empty object
                // which will cause this if check to always fail.
                if (!this.options_['vtt.js'] && isPlain(browserIndex) && Object.keys(browserIndex).length > 0) {
                    this.trigger('vttjsloaded');
                    return;
                }

                // load vtt.js via the script location option or the cdn of no location was
                // passed in
                var script = document_1.createElement('script');

                script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js';
                script.onload = function () {
                    /**
                     * Fired when vtt.js is loaded.
                     *
                     * @event Tech#vttjsloaded
                     * @type {EventTarget~Event}
                     */
                    _this4.trigger('vttjsloaded');
                };
                script.onerror = function () {
                    /**
                     * Fired when vtt.js was not loaded due to an error
                     *
                     * @event Tech#vttjsloaded
                     * @type {EventTarget~Event}
                     */
                    _this4.trigger('vttjserror');
                };
                this.on('dispose', function () {
                    script.onload = null;
                    script.onerror = null;
                });
                // but have not loaded yet and we set it to true before the inject so that
                // we don't overwrite the injected window.WebVTT if it loads right away
                window_1.WebVTT = true;
                this.el().parentNode.appendChild(script);
            } else {
                this.ready(this.addWebVttScript_);
            }
        };

        /**
         * Emulate texttracks
         *
         */


        Tech.prototype.emulateTextTracks = function emulateTextTracks() {
            var _this5 = this;

            var tracks = this.textTracks();
            var remoteTracks = this.remoteTextTracks();
            var handleAddTrack = function handleAddTrack(e) {
                return tracks.addTrack(e.track);
            };
            var handleRemoveTrack = function handleRemoveTrack(e) {
                return tracks.removeTrack(e.track);
            };

            remoteTracks.on('addtrack', handleAddTrack);
            remoteTracks.on('removetrack', handleRemoveTrack);

            this.addWebVttScript_();

            var updateDisplay = function updateDisplay() {
                return _this5.trigger('texttrackchange');
            };

            var textTracksChanges = function textTracksChanges() {
                updateDisplay();

                for (var i = 0; i < tracks.length; i++) {
                    var track = tracks[i];

                    track.removeEventListener('cuechange', updateDisplay);
                    if (track.mode === 'showing') {
                        track.addEventListener('cuechange', updateDisplay);
                    }
                }
            };

            textTracksChanges();
            tracks.addEventListener('change', textTracksChanges);
            tracks.addEventListener('addtrack', textTracksChanges);
            tracks.addEventListener('removetrack', textTracksChanges);

            this.on('dispose', function () {
                remoteTracks.off('addtrack', handleAddTrack);
                remoteTracks.off('removetrack', handleRemoveTrack);
                tracks.removeEventListener('change', textTracksChanges);
                tracks.removeEventListener('addtrack', textTracksChanges);
                tracks.removeEventListener('removetrack', textTracksChanges);

                for (var i = 0; i < tracks.length; i++) {
                    var track = tracks[i];

                    track.removeEventListener('cuechange', updateDisplay);
                }
            });
        };

        /**
         * Create and returns a remote {@link TextTrack} object.
         *
         * @param {string} kind
         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
         *
         * @param {string} [label]
         *        Label to identify the text track
         *
         * @param {string} [language]
         *        Two letter language abbreviation
         *
         * @return {TextTrack}
         *         The TextTrack that gets created.
         */


        Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            if (!kind) {
                throw new Error('TextTrack kind is required but was not provided');
            }

            return createTrackHelper(this, kind, label, language);
        };

        /**
         * Create an emulated TextTrack for use by addRemoteTextTrack
         *
         * This is intended to be overridden by classes that inherit from
         * Tech in order to create native or custom TextTracks.
         *
         * @param {Object} options
         *        The object should contain the options to initialize the TextTrack with.
         *
         * @param {string} [options.kind]
         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
         *
         * @param {string} [options.label].
         *        Label to identify the text track
         *
         * @param {string} [options.language]
         *        Two letter language abbreviation.
         *
         * @return {HTMLTrackElement}
         *         The track element that gets created.
         */


        Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
            var track = mergeOptions(options, {
                tech: this
            });

            return new REMOTE.remoteTextEl.TrackClass(track);
        };

        /**
         * Creates a remote text track object and returns an html track element.
         *
         * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
         *
         * @param {Object} options
         *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
         *
         * @param {boolean} [manualCleanup=true]
         *        - When false: the TextTrack will be automatically removed from the video
         *          element whenever the source changes
         *        - When True: The TextTrack will have to be cleaned up manually
         *
         * @return {HTMLTrackElement}
         *         An Html Track Element.
         *
         * @deprecated The default functionality for this function will be equivalent
         *             to "manualCleanup=false" in the future. The manualCleanup parameter will
         *             also be removed.
         */


        Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
            var _this6 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var manualCleanup = arguments[1];

            var htmlTrackElement = this.createRemoteTextTrack(options);

            if (manualCleanup !== true && manualCleanup !== false) {
                // deprecation warning
                log$1.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                manualCleanup = true;
            }

            // store HTMLTrackElement and TextTrack to remote list
            this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
            this.remoteTextTracks().addTrack(htmlTrackElement.track);

            if (manualCleanup !== true) {
                // create the TextTrackList if it doesn't exist
                this.ready(function () {
                    return _this6.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
                });
            }

            return htmlTrackElement;
        };

        /**
         * Remove a remote text track from the remote `TextTrackList`.
         *
         * @param {TextTrack} track
         *        `TextTrack` to remove from the `TextTrackList`
         */


        Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
            var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

            // remove HTMLTrackElement and TextTrack from remote list
            this.remoteTextTrackEls().removeTrackElement_(trackElement);
            this.remoteTextTracks().removeTrack(track);
            this.autoRemoteTextTracks_.removeTrack(track);
        };

        /**
         * Gets available media playback quality metrics as specified by the W3C's Media
         * Playback Quality API.
         *
         * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
         *
         * @return {Object}
         *         An object with supported media playback quality metrics
         *
         * @abstract
         */


        Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
            return {};
        };

        /**
         * A method to set a poster from a `Tech`.
         *
         * @abstract
         */


        Tech.prototype.setPoster = function setPoster() {};

        /**
         * A method to check for the presence of the 'playsinine' <video> attribute.
         *
         * @abstract
         */


        Tech.prototype.playsinline = function playsinline() {};

        /**
         * A method to set or unset the 'playsinine' <video> attribute.
         *
         * @abstract
         */


        Tech.prototype.setPlaysinline = function setPlaysinline() {};

        /*
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */


        Tech.prototype.canPlayType = function canPlayType() {
            return '';
        };

        /**
         * Check if the type is supported by this tech.
         *
         * The base tech does not support any type, but source handlers might
         * overwrite this.
         *
         * @param {string} type
         *        The media type to check
         * @return {string} Returns the native video element's response
         */


        Tech.canPlayType = function canPlayType() {
            return '';
        };

        /**
         * Check if the tech can support the given source
         * @param {Object} srcObj
         *        The source object
         * @param {Object} options
         *        The options passed to the tech
         * @return {string} 'probably', 'maybe', or '' (empty string)
         */


        Tech.canPlaySource = function canPlaySource(srcObj, options) {
            return Tech.canPlayType(srcObj.type);
        };

        /*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */


        Tech.isTech = function isTech(component) {
            return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
        };

        /**
         * Registers a `Tech` into a shared list for videojs.
         *
         * @param {string} name
         *        Name of the `Tech` to register.
         *
         * @param {Object} tech
         *        The `Tech` class to register.
         */


        Tech.registerTech = function registerTech(name, tech) {
            if (!Tech.techs_) {
                Tech.techs_ = {};
            }

            if (!Tech.isTech(tech)) {
                throw new Error('Tech ' + name + ' must be a Tech');
            }

            if (!Tech.canPlayType) {
                throw new Error('Techs must have a static canPlayType method on them');
            }
            if (!Tech.canPlaySource) {
                throw new Error('Techs must have a static canPlaySource method on them');
            }

            name = toTitleCase(name);

            Tech.techs_[name] = tech;
            if (name !== 'Tech') {
                // camel case the techName for use in techOrder
                Tech.defaultTechOrder_.push(name);
            }
            return tech;
        };

        /**
         * Get a `Tech` from the shared list by name.
         *
         * @param {string} name
         *        `camelCase` or `TitleCase` name of the Tech to get
         *
         * @return {Tech|undefined}
         *         The `Tech` or undefined if there was no tech with the name requsted.
         */


        Tech.getTech = function getTech(name) {
            if (!name) {
                return;
            }

            name = toTitleCase(name);

            if (Tech.techs_ && Tech.techs_[name]) {
                return Tech.techs_[name];
            }

            if (window_1 && window_1.videojs && window_1.videojs[name]) {
                log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
                return window_1.videojs[name];
            }
        };

        return Tech;
    }(Component);

    /**
     * Get the {@link VideoTrackList}
     *
     * @returns {VideoTrackList}
     * @method Tech.prototype.videoTracks
     */

    /**
     * Get the {@link AudioTrackList}
     *
     * @returns {AudioTrackList}
     * @method Tech.prototype.audioTracks
     */

    /**
     * Get the {@link TextTrackList}
     *
     * @returns {TextTrackList}
     * @method Tech.prototype.textTracks
     */

    /**
     * Get the remote element {@link TextTrackList}
     *
     * @returns {TextTrackList}
     * @method Tech.prototype.remoteTextTracks
     */

    /**
     * Get the remote element {@link HtmlTrackElementList}
     *
     * @returns {HtmlTrackElementList}
     * @method Tech.prototype.remoteTextTrackEls
     */

    ALL.names.forEach(function (name) {
        var props = ALL[name];

        Tech.prototype[props.getterName] = function () {
            this[props.privateName] = this[props.privateName] || new props.ListClass();
            return this[props.privateName];
        };
    });

    /**
     * List of associated text tracks
     *
     * @type {TextTrackList}
     * @private
     * @property Tech#textTracks_
     */

    /**
     * List of associated audio tracks.
     *
     * @type {AudioTrackList}
     * @private
     * @property Tech#audioTracks_
     */

    /**
     * List of associated video tracks.
     *
     * @type {VideoTrackList}
     * @private
     * @property Tech#videoTracks_
     */

    /**
     * Boolean indicating wether the `Tech` supports volume control.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresVolumeControl = true;

    /**
     * Boolean indicating wether the `Tech` support fullscreen resize control.
     * Resizing plugins using request fullscreen reloads the plugin
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresFullscreenResize = false;

    /**
     * Boolean indicating wether the `Tech` supports changing the speed at which the video
     * plays. Examples:
     *   - Set player to play 2x (twice) as fast
     *   - Set player to play 0.5x (half) as fast
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresPlaybackRate = false;

    /**
     * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
     * not triggered by video-js-swf. This will be used to determine if
     * {@link Tech#manualProgressOn} should be called.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresProgressEvents = false;

    /**
     * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
     * not triggered by video-js-swf. This will be used to determine if
     * {@link Tech#manualTimeUpdates} should be called.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresTimeupdateEvents = false;

    /**
     * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
     * This will help us integrate with native `TextTrack`s if the browser supports them.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresNativeTextTracks = false;

    /**
     * A functional mixin for techs that want to use the Source Handler pattern.
     * Source handlers are scripts for handling specific formats.
     * The source handler pattern is used for adaptive formats (HLS, DASH) that
     * manually load video data and feed it into a Source Buffer (Media Source Extensions)
     * Example: `Tech.withSourceHandlers.call(MyTech);`
     *
     * @param {Tech} _Tech
     *        The tech to add source handler functions to.
     *
     * @mixes Tech~SourceHandlerAdditions
     */
    Tech.withSourceHandlers = function (_Tech) {

        /**
         * Register a source handler
         *
         * @param {Function} handler
         *        The source handler class
         *
         * @param {number} [index]
         *        Register it at the following index
         */
        _Tech.registerSourceHandler = function (handler, index) {
            var handlers = _Tech.sourceHandlers;

            if (!handlers) {
                handlers = _Tech.sourceHandlers = [];
            }

            if (index === undefined) {
                // add to the end of the list
                index = handlers.length;
            }

            handlers.splice(index, 0, handler);
        };

        /**
         * Check if the tech can support the given type. Also checks the
         * Techs sourceHandlers.
         *
         * @param {string} type
         *         The mimetype to check.
         *
         * @return {string}
         *         'probably', 'maybe', or '' (empty string)
         */
        _Tech.canPlayType = function (type) {
            var handlers = _Tech.sourceHandlers || [];
            var can = void 0;

            for (var i = 0; i < handlers.length; i++) {
                can = handlers[i].canPlayType(type);

                if (can) {
                    return can;
                }
            }

            return '';
        };

        /**
         * Returns the first source handler that supports the source.
         *
         * TODO: Answer question: should 'probably' be prioritized over 'maybe'
         *
         * @param {Tech~SourceObject} source
         *        The source object
         *
         * @param {Object} options
         *        The options passed to the tech
         *
         * @return {SourceHandler|null}
         *          The first source handler that supports the source or null if
         *          no SourceHandler supports the source
         */
        _Tech.selectSourceHandler = function (source, options) {
            var handlers = _Tech.sourceHandlers || [];
            var can = void 0;

            for (var i = 0; i < handlers.length; i++) {
                can = handlers[i].canHandleSource(source, options);

                if (can) {
                    return handlers[i];
                }
            }

            return null;
        };

        /**
         * Check if the tech can support the given source.
         *
         * @param {Tech~SourceObject} srcObj
         *        The source object
         *
         * @param {Object} options
         *        The options passed to the tech
         *
         * @return {string}
         *         'probably', 'maybe', or '' (empty string)
         */
        _Tech.canPlaySource = function (srcObj, options) {
            var sh = _Tech.selectSourceHandler(srcObj, options);

            if (sh) {
                return sh.canHandleSource(srcObj, options);
            }

            return '';
        };

        /**
         * When using a source handler, prefer its implementation of
         * any function normally provided by the tech.
         */
        var deferrable = ['seekable', 'duration'];

        /**
         * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
         * function if it exists, with a fallback to the Techs seekable function.
         *
         * @method _Tech.seekable
         */

        /**
         * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
         * function if it exists, otherwise it will fallback to the techs duration function.
         *
         * @method _Tech.duration
         */

        deferrable.forEach(function (fnName) {
            var originalFn = this[fnName];

            if (typeof originalFn !== 'function') {
                return;
            }

            this[fnName] = function () {
                if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
                    return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
                }
                return originalFn.apply(this, arguments);
            };
        }, _Tech.prototype);

        /**
         * Create a function for setting the source using a source object
         * and source handlers.
         * Should never be called unless a source handler was found.
         *
         * @param {Tech~SourceObject} source
         *        A source object with src and type keys
         */
        _Tech.prototype.setSource = function (source) {
            var sh = _Tech.selectSourceHandler(source, this.options_);

            if (!sh) {
                // Fall back to a native source hander when unsupported sources are
                // deliberately set
                if (_Tech.nativeSourceHandler) {
                    sh = _Tech.nativeSourceHandler;
                } else {
                    log$1.error('No source hander found for the current source.');
                }
            }

            // Dispose any existing source handler
            this.disposeSourceHandler();
            this.off('dispose', this.disposeSourceHandler);

            if (sh !== _Tech.nativeSourceHandler) {
                this.currentSource_ = source;
            }

            this.sourceHandler_ = sh.handleSource(source, this, this.options_);
            this.on('dispose', this.disposeSourceHandler);
        };

        /**
         * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
         *
         * @listens Tech#dispose
         */
        _Tech.prototype.disposeSourceHandler = function () {
            // if we have a source and get another one
            // then we are loading something new
            // than clear all of our current tracks
            if (this.currentSource_) {
                this.clearTracks(['audio', 'video']);
                this.currentSource_ = null;
            }

            // always clean up auto-text tracks
            this.cleanupAutoTextTracks();

            if (this.sourceHandler_) {

                if (this.sourceHandler_.dispose) {
                    this.sourceHandler_.dispose();
                }

                this.sourceHandler_ = null;
            }
        };
    };

// The base Tech class needs to be registered as a Component. It is the only
// Tech that can be registered as a Component.
    Component.registerComponent('Tech', Tech);
    Tech.registerTech('Tech', Tech);

    /**
     * A list of techs that should be added to techOrder on Players
     *
     * @private
     */
    Tech.defaultTechOrder_ = [];

    var middlewares = {};

    function use(type, middleware) {
        middlewares[type] = middlewares[type] || [];
        middlewares[type].push(middleware);
    }



    function setSource(player, src, next) {
        player.setTimeout(function () {
            return setSourceHelper(src, middlewares[src.type], next, player);
        }, 1);
    }

    function setTech(middleware, tech) {
        middleware.forEach(function (mw) {
            return mw.setTech && mw.setTech(tech);
        });
    }

    function get$1(middleware, tech, method) {
        return middleware.reduceRight(middlewareIterator(method), tech[method]());
    }

    function set$1(middleware, tech, method, arg) {
        return tech[method](middleware.reduce(middlewareIterator(method), arg));
    }

    var allowedGetters = {
        buffered: 1,
        currentTime: 1,
        duration: 1,
        seekable: 1,
        played: 1
    };

    var allowedSetters = {
        setCurrentTime: 1
    };

    function middlewareIterator(method) {
        return function (value, mw) {
            if (mw[method]) {
                return mw[method](value);
            }

            return value;
        };
    }

    function setSourceHelper() {
        var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var next = arguments[2];
        var player = arguments[3];
        var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
        var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
        var mwFactory = middleware[0],
            mwrest = middleware.slice(1);

        // if mwFactory is a string, then we're at a fork in the road

        if (typeof mwFactory === 'string') {
            setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);

            // if we have an mwFactory, call it with the player to get the mw,
            // then call the mw's setSource method
        } else if (mwFactory) {
            var mw = mwFactory(player);

            mw.setSource(assign({}, src), function (err, _src) {

                // something happened, try the next middleware on the current level
                // make sure to use the old src
                if (err) {
                    return setSourceHelper(src, mwrest, next, player, acc, lastRun);
                }

                // we've succeeded, now we need to go deeper
                acc.push(mw);

                // if it's the same type, continue down the current chain
                // otherwise, we want to go down the new chain
                setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
            });
        } else if (mwrest.length) {
            setSourceHelper(src, mwrest, next, player, acc, lastRun);
        } else if (lastRun) {
            next(src, acc);
        } else {
            setSourceHelper(src, middlewares['*'], next, player, acc, true);
        }
    }

    /**
     * @module filter-source
     */
    /**
     * Filter out single bad source objects or multiple source objects in an
     * array. Also flattens nested source object arrays into a 1 dimensional
     * array of source objects.
     *
     * @param {Tech~SourceObject|Tech~SourceObject[]} src
     *        The src object to filter
     *
     * @return {Tech~SourceObject[]}
     *         An array of sourceobjects containing only valid sources
     *
     * @private
     */
    var filterSource = function filterSource(src) {
        // traverse array
        if (Array.isArray(src)) {
            var newsrc = [];

            src.forEach(function (srcobj) {
                srcobj = filterSource(srcobj);

                if (Array.isArray(srcobj)) {
                    newsrc = newsrc.concat(srcobj);
                } else if (isObject(srcobj)) {
                    newsrc.push(srcobj);
                }
            });

            src = newsrc;
        } else if (typeof src === 'string' && src.trim()) {
            // convert string into object
            src = [{ src: src }];
        } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
            // src is already valid
            src = [src];
        } else {
            // invalid source, turn it into an empty array
            src = [];
        }

        return src;
    };

    /**
     * @file loader.js
     */
    /**
     * The `MediaLoader` is the `Component` that decides which playback technology to load
     * when a player is initialized.
     *
     * @extends Component
     */

    var MediaLoader = function (_Component) {
        inherits(MediaLoader, _Component);

        /**
         * Create an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should attach to.
         *
         * @param {Object} [options]
         *        The key/value stroe of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function that is run when this component is ready.
         */
        function MediaLoader(player, options, ready) {
            classCallCheck(this, MediaLoader);

            // MediaLoader has no element
            var options_ = mergeOptions({ createEl: false }, options);

            // If there are no sources when the player is initialized,
            // load the first supported playback technology.

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));

            if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
                for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
                    var techName = toTitleCase(j[i]);
                    var tech = Tech.getTech(techName);

                    // Support old behavior of techs being registered as components.
                    // Remove once that deprecated behavior is removed.
                    if (!techName) {
                        tech = Component.getComponent(techName);
                    }

                    // Check if the browser supports this technology
                    if (tech && tech.isSupported()) {
                        player.loadTech_(techName);
                        break;
                    }
                }
            } else {
                // Loop through playback technologies (HTML5, Flash) and check for support.
                // Then load the best source.
                // A few assumptions here:
                //   All playback technologies respect preload false.
                player.src(options.playerOptions.sources);
            }
            return _this;
        }

        return MediaLoader;
    }(Component);

    Component.registerComponent('MediaLoader', MediaLoader);

    /**
     * @file button.js
     */
    /**
     * Clickable Component which is clickable or keyboard actionable,
     * but is not a native HTML button.
     *
     * @extends Component
     */

    var ClickableComponent = function (_Component) {
        inherits(ClickableComponent, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param  {Player} player
         *         The `Player` that this class should be attached to.
         *
         * @param  {Object} [options]
         *         The key/value store of player options.
         */
        function ClickableComponent(player, options) {
            classCallCheck(this, ClickableComponent);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.emitTapEvents();

            _this.enable();
            return _this;
        }

        /**
         * Create the `Component`s DOM element.
         *
         * @param {string} [tag=div]
         *        The element's node type.
         *
         * @param {Object} [props={}]
         *        An object of properties that should be set on the element.
         *
         * @param {Object} [attributes={}]
         *        An object of attributes that should be set on the element.
         *
         * @return {Element}
         *         The element that gets created.
         */


        ClickableComponent.prototype.createEl = function createEl$$1() {
            var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            props = assign({
                innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
                className: this.buildCSSClass(),
                tabIndex: 0
            }, props);

            if (tag === 'button') {
                log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
            }

            // Add ARIA attributes for clickable element which is not a native HTML button
            attributes = assign({
                'role': 'button',

                // let the screen reader user know that the text of the element may change
                'aria-live': 'polite'
            }, attributes);

            this.tabIndex_ = props.tabIndex;

            var el = _Component.prototype.createEl.call(this, tag, props, attributes);

            this.createControlTextEl(el);

            return el;
        };

        ClickableComponent.prototype.dispose = function dispose() {
            // remove controlTextEl_ on dipose
            this.controlTextEl_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Create a control text element on this `Component`
         *
         * @param {Element} [el]
         *        Parent element for the control text.
         *
         * @return {Element}
         *         The control text element that gets created.
         */


        ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
            this.controlTextEl_ = createEl('span', {
                className: 'vjs-control-text'
            });

            if (el) {
                el.appendChild(this.controlTextEl_);
            }

            this.controlText(this.controlText_, el);

            return this.controlTextEl_;
        };

        /**
         * Get or set the localize text to use for the controls on the `Component`.
         *
         * @param {string} [text]
         *        Control text for element.
         *
         * @param {Element} [el=this.el()]
         *        Element to set the title on.
         *
         * @return {string}
         *         - The control text when getting
         */


        ClickableComponent.prototype.controlText = function controlText(text) {
            var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

            if (text === undefined) {
                return this.controlText_ || 'Need Text';
            }

            var localizedText = this.localize(text);

            this.controlText_ = text;
            textContent(this.controlTextEl_, localizedText);
            if (!this.nonIconControl) {
                // Set title attribute if only an icon is shown
                el.setAttribute('title', localizedText);
            }
        };

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Enable this `Component`s element.
         */


        ClickableComponent.prototype.enable = function enable() {
            if (!this.enabled_) {
                this.enabled_ = true;
                this.removeClass('vjs-disabled');
                this.el_.setAttribute('aria-disabled', 'false');
                if (typeof this.tabIndex_ !== 'undefined') {
                    this.el_.setAttribute('tabIndex', this.tabIndex_);
                }
                this.on(['tap', 'click'], this.handleClick);
                this.on('focus', this.handleFocus);
                this.on('blur', this.handleBlur);
            }
        };

        /**
         * Disable this `Component`s element.
         */


        ClickableComponent.prototype.disable = function disable() {
            this.enabled_ = false;
            this.addClass('vjs-disabled');
            this.el_.setAttribute('aria-disabled', 'true');
            if (typeof this.tabIndex_ !== 'undefined') {
                this.el_.removeAttribute('tabIndex');
            }
            this.off(['tap', 'click'], this.handleClick);
            this.off('focus', this.handleFocus);
            this.off('blur', this.handleBlur);
        };

        /**
         * This gets called when a `ClickableComponent` gets:
         * - Clicked (via the `click` event, listening starts in the constructor)
         * - Tapped (via the `tap` event, listening starts in the constructor)
         * - The following things happen in order:
         *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
         *      `ClickableComponent`.
         *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
         *      {@link ClickableComponent#handleKeyPress}.
         *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
         *      the space or enter key.
         *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
         *      event as a parameter.
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         * @abstract
         */


        ClickableComponent.prototype.handleClick = function handleClick(event) {};

        /**
         * This gets called when a `ClickableComponent` gains focus via a `focus` event.
         * Turns on listening for `keydown` events. When they happen it
         * calls `this.handleKeyPress`.
         *
         * @param {EventTarget~Event} event
         *        The `focus` event that caused this function to be called.
         *
         * @listens focus
         */


        ClickableComponent.prototype.handleFocus = function handleFocus(event) {
            on(document_1, 'keydown', bind(this, this.handleKeyPress));
        };

        /**
         * Called when this ClickableComponent has focus and a key gets pressed down. By
         * default it will call `this.handleClick` when the key is space or enter.
         *
         * @param {EventTarget~Event} event
         *        The `keydown` event that caused this function to be called.
         *
         * @listens keydown
         */


        ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

            // Support Space (32) or Enter (13) key operation to fire a click event
            if (event.which === 32 || event.which === 13) {
                event.preventDefault();
                this.trigger('click');
            } else if (_Component.prototype.handleKeyPress) {

                // Pass keypress handling up for unsupported keys
                _Component.prototype.handleKeyPress.call(this, event);
            }
        };

        /**
         * Called when a `ClickableComponent` loses focus. Turns off the listener for
         * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
         *
         * @param {EventTarget~Event} event
         *        The `blur` event that caused this function to be called.
         *
         * @listens blur
         */


        ClickableComponent.prototype.handleBlur = function handleBlur(event) {
            off(document_1, 'keydown', bind(this, this.handleKeyPress));
        };

        return ClickableComponent;
    }(Component);

    Component.registerComponent('ClickableComponent', ClickableComponent);

    /**
     * @file poster-image.js
     */
    /**
     * A `ClickableComponent` that handles showing the poster image for the player.
     *
     * @extends ClickableComponent
     */

    var PosterImage = function (_ClickableComponent) {
        inherits(PosterImage, _ClickableComponent);

        /**
         * Create an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should attach to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function PosterImage(player, options) {
            classCallCheck(this, PosterImage);

            var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

            _this.update();
            player.on('posterchange', bind(_this, _this.update));
            return _this;
        }

        /**
         * Clean up and dispose of the `PosterImage`.
         */


        PosterImage.prototype.dispose = function dispose() {
            this.player().off('posterchange', this.update);
            _ClickableComponent.prototype.dispose.call(this);
        };

        /**
         * Create the `PosterImage`s DOM element.
         *
         * @return {Element}
         *         The element that gets created.
         */


        PosterImage.prototype.createEl = function createEl$$1() {
            var el = createEl('div', {
                className: 'vjs-poster',

                // Don't want poster to be tabbable.
                tabIndex: -1
            });

            // To ensure the poster image resizes while maintaining its original aspect
            // ratio, use a div with `background-size` when available. For browsers that
            // do not support `background-size` (e.g. IE8), fall back on using a regular
            // img element.
            if (!BACKGROUND_SIZE_SUPPORTED) {
                this.fallbackImg_ = createEl('img');
                el.appendChild(this.fallbackImg_);
            }

            return el;
        };

        /**
         * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
         *
         * @listens Player#posterchange
         *
         * @param {EventTarget~Event} [event]
         *        The `Player#posterchange` event that triggered this function.
         */


        PosterImage.prototype.update = function update(event) {
            var url = this.player().poster();

            this.setSrc(url);

            // If there's no poster source we should display:none on this component
            // so it's not still clickable or right-clickable
            if (url) {
                this.show();
            } else {
                this.hide();
            }
        };

        /**
         * Set the source of the `PosterImage` depending on the display method.
         *
         * @param {string} url
         *        The URL to the source for the `PosterImage`.
         */


        PosterImage.prototype.setSrc = function setSrc(url) {
            if (this.fallbackImg_) {
                this.fallbackImg_.src = url;
            } else {
                var backgroundImage = '';

                // Any falsey values should stay as an empty string, otherwise
                // this will throw an extra error
                if (url) {
                    backgroundImage = 'url("' + url + '")';
                }

                this.el_.style.backgroundImage = backgroundImage;
            }
        };

        /**
         * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
         * {@link ClickableComponent#handleClick} for instances where this will be triggered.
         *
         * @listens tap
         * @listens click
         * @listens keydown
         *
         * @param {EventTarget~Event} event
         +        The `click`, `tap` or `keydown` event that caused this function to be called.
         */


        PosterImage.prototype.handleClick = function handleClick(event) {
            // We don't want a click to trigger playback when controls are disabled
            if (!this.player_.controls()) {
                return;
            }

            if (this.player_.paused()) {
                this.player_.play();
            } else {
                this.player_.pause();
            }
        };

        return PosterImage;
    }(ClickableComponent);

    Component.registerComponent('PosterImage', PosterImage);

    /**
     * @file text-track-display.js
     */
    var darkGray = '#222';
    var lightGray = '#ccc';
    var fontMap = {
        monospace: 'monospace',
        sansSerif: 'sans-serif',
        serif: 'serif',
        monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
        monospaceSerif: '"Courier New", monospace',
        proportionalSansSerif: 'sans-serif',
        proportionalSerif: 'serif',
        casual: '"Comic Sans MS", Impact, fantasy',
        script: '"Monotype Corsiva", cursive',
        smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
    };

    /**
     * Construct an rgba color from a given hex color code.
     *
     * @param {number} color
     *        Hex number for color, like #f0e.
     *
     * @param {number} opacity
     *        Value for opacity, 0.0 - 1.0.
     *
     * @return {string}
     *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
     *
     * @private
     */
    function constructColor(color, opacity) {
        return 'rgba(' +
            // color looks like "#f0e"
            parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
    }

    /**
     * Try to update the style of a DOM element. Some style changes will throw an error,
     * particularly in IE8. Those should be noops.
     *
     * @param {Element} el
     *        The DOM element to be styled.
     *
     * @param {string} style
     *        The CSS property on the element that should be styled.
     *
     * @param {string} rule
     *        The style rule that should be applied to the property.
     *
     * @private
     */
    function tryUpdateStyle(el, style, rule) {
        try {
            el.style[style] = rule;
        } catch (e) {

            // Satisfies linter.
            return;
        }
    }

    /**
     * The component for displaying text track cues.
     *
     * @extends Component
     */

    var TextTrackDisplay = function (_Component) {
        inherits(TextTrackDisplay, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function to call when `TextTrackDisplay` is ready.
         */
        function TextTrackDisplay(player, options, ready) {
            classCallCheck(this, TextTrackDisplay);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));

            player.on('loadstart', bind(_this, _this.toggleDisplay));
            player.on('texttrackchange', bind(_this, _this.updateDisplay));
            player.on('loadstart', bind(_this, _this.preselectTrack));

            // This used to be called during player init, but was causing an error
            // if a track should show by default and the display hadn't loaded yet.
            // Should probably be moved to an external track loader when we support
            // tracks that don't need a display.
            player.ready(bind(_this, function () {
                if (player.tech_ && player.tech_.featuresNativeTextTracks) {
                    this.hide();
                    return;
                }

                player.on('fullscreenchange', bind(this, this.updateDisplay));

                var tracks = this.options_.playerOptions.tracks || [];

                for (var i = 0; i < tracks.length; i++) {
                    this.player_.addRemoteTextTrack(tracks[i], true);
                }

                this.preselectTrack();
            }));
            return _this;
        }

        /**
         * Preselect a track following this precedence:
         * - matches the previously selected {@link TextTrack}'s language and kind
         * - matches the previously selected {@link TextTrack}'s language only
         * - is the first default captions track
         * - is the first default descriptions track
         *
         * @listens Player#loadstart
         */


        TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
            var modes = { captions: 1, subtitles: 1 };
            var trackList = this.player_.textTracks();
            var userPref = this.player_.cache_.selectedLanguage;
            var firstDesc = void 0;
            var firstCaptions = void 0;
            var preferredTrack = void 0;

            for (var i = 0; i < trackList.length; i++) {
                var track = trackList[i];

                if (userPref && userPref.enabled && userPref.language === track.language) {
                    // Always choose the track that matches both language and kind
                    if (track.kind === userPref.kind) {
                        preferredTrack = track;
                        // or choose the first track that matches language
                    } else if (!preferredTrack) {
                        preferredTrack = track;
                    }

                    // clear everything if offTextTrackMenuItem was clicked
                } else if (userPref && !userPref.enabled) {
                    preferredTrack = null;
                    firstDesc = null;
                    firstCaptions = null;
                } else if (track['default']) {
                    if (track.kind === 'descriptions' && !firstDesc) {
                        firstDesc = track;
                    } else if (track.kind in modes && !firstCaptions) {
                        firstCaptions = track;
                    }
                }
            }

            // The preferredTrack matches the user preference and takes
            // precendence over all the other tracks.
            // So, display the preferredTrack before the first default track
            // and the subtitles/captions track before the descriptions track
            if (preferredTrack) {
                preferredTrack.mode = 'showing';
            } else if (firstCaptions) {
                firstCaptions.mode = 'showing';
            } else if (firstDesc) {
                firstDesc.mode = 'showing';
            }
        };

        /**
         * Turn display of {@link TextTrack}'s from the current state into the other state.
         * There are only two states:
         * - 'shown'
         * - 'hidden'
         *
         * @listens Player#loadstart
         */


        TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
            if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                this.hide();
            } else {
                this.show();
            }
        };

        /**
         * Create the {@link Component}'s DOM element.
         *
         * @return {Element}
         *         The element that was created.
         */


        TextTrackDisplay.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-text-track-display'
            }, {
                'aria-live': 'off',
                'aria-atomic': 'true'
            });
        };

        /**
         * Clear all displayed {@link TextTrack}s.
         */


        TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
            if (typeof window_1.WebVTT === 'function') {
                window_1.WebVTT.processCues(window_1, [], this.el_);
            }
        };

        /**
         * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
         * a {@link Player#fullscreenchange} is fired.
         *
         * @listens Player#texttrackchange
         * @listens Player#fullscreenchange
         */


        TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
            var tracks = this.player_.textTracks();

            this.clearDisplay();

            // Track display prioritization model: if multiple tracks are 'showing',
            //  display the first 'subtitles' or 'captions' track which is 'showing',
            //  otherwise display the first 'descriptions' track which is 'showing'

            var descriptionsTrack = null;
            var captionsSubtitlesTrack = null;
            var i = tracks.length;

            while (i--) {
                var track = tracks[i];

                if (track.mode === 'showing') {
                    if (track.kind === 'descriptions') {
                        descriptionsTrack = track;
                    } else {
                        captionsSubtitlesTrack = track;
                    }
                }
            }

            if (captionsSubtitlesTrack) {
                if (this.getAttribute('aria-live') !== 'off') {
                    this.setAttribute('aria-live', 'off');
                }
                this.updateForTrack(captionsSubtitlesTrack);
            } else if (descriptionsTrack) {
                if (this.getAttribute('aria-live') !== 'assertive') {
                    this.setAttribute('aria-live', 'assertive');
                }
                this.updateForTrack(descriptionsTrack);
            }
        };

        /**
         * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
         *
         * @param {TextTrack} track
         *        Text track object to be added to the list.
         */


        TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
            if (typeof window_1.WebVTT !== 'function' || !track.activeCues) {
                return;
            }

            var overrides = this.player_.textTrackSettings.getValues();
            var cues = [];

            for (var _i = 0; _i < track.activeCues.length; _i++) {
                cues.push(track.activeCues[_i]);
            }

            window_1.WebVTT.processCues(window_1, cues, this.el_);

            var i = cues.length;

            while (i--) {
                var cue = cues[i];

                if (!cue) {
                    continue;
                }

                var cueDiv = cue.displayState;

                if (overrides.color) {
                    cueDiv.firstChild.style.color = overrides.color;
                }
                if (overrides.textOpacity) {
                    tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
                }
                if (overrides.backgroundColor) {
                    cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
                }
                if (overrides.backgroundOpacity) {
                    tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
                }
                if (overrides.windowColor) {
                    if (overrides.windowOpacity) {
                        tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
                    } else {
                        cueDiv.style.backgroundColor = overrides.windowColor;
                    }
                }
                if (overrides.edgeStyle) {
                    if (overrides.edgeStyle === 'dropshadow') {
                        cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
                    } else if (overrides.edgeStyle === 'raised') {
                        cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
                    } else if (overrides.edgeStyle === 'depressed') {
                        cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
                    } else if (overrides.edgeStyle === 'uniform') {
                        cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
                    }
                }
                if (overrides.fontPercent && overrides.fontPercent !== 1) {
                    var fontSize = window_1.parseFloat(cueDiv.style.fontSize);

                    cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
                    cueDiv.style.height = 'auto';
                    cueDiv.style.top = 'auto';
                    cueDiv.style.bottom = '2px';
                }
                if (overrides.fontFamily && overrides.fontFamily !== 'default') {
                    if (overrides.fontFamily === 'small-caps') {
                        cueDiv.firstChild.style.fontVariant = 'small-caps';
                    } else {
                        cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
                    }
                }
            }
        };

        return TextTrackDisplay;
    }(Component);

    Component.registerComponent('TextTrackDisplay', TextTrackDisplay);

    /**
     * @file loading-spinner.js
     */
    /**
     * A loading spinner for use during waiting/loading events.
     *
     * @extends Component
     */

    var LoadingSpinner = function (_Component) {
        inherits(LoadingSpinner, _Component);

        function LoadingSpinner() {
            classCallCheck(this, LoadingSpinner);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the `LoadingSpinner`s DOM element.
         *
         * @return {Element}
         *         The dom element that gets created.
         */
        LoadingSpinner.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-loading-spinner',
                dir: 'ltr'
            });
        };

        return LoadingSpinner;
    }(Component);

    Component.registerComponent('LoadingSpinner', LoadingSpinner);

    /**
     * @file button.js
     */
    /**
     * Base class for all buttons.
     *
     * @extends ClickableComponent
     */

    var Button = function (_ClickableComponent) {
        inherits(Button, _ClickableComponent);

        function Button() {
            classCallCheck(this, Button);
            return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
        }

        /**
         * Create the `Button`s DOM element.
         *
         * @param {string} [tag="button"]
         *        The element's node type. This argument is IGNORED: no matter what
         *        is passed, it will always create a `button` element.
         *
         * @param {Object} [props={}]
         *        An object of properties that should be set on the element.
         *
         * @param {Object} [attributes={}]
         *        An object of attributes that should be set on the element.
         *
         * @return {Element}
         *         The element that gets created.
         */
        Button.prototype.createEl = function createEl(tag) {
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            tag = 'button';

            props = assign({
                innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
                className: this.buildCSSClass()
            }, props);

            // Add attributes for button element
            attributes = assign({

                // Necessary since the default button type is "submit"
                'type': 'button',

                // let the screen reader user know that the text of the button may change
                'aria-live': 'polite'
            }, attributes);

            var el = Component.prototype.createEl.call(this, tag, props, attributes);

            this.createControlTextEl(el);

            return el;
        };

        /**
         * Add a child `Component` inside of this `Button`.
         *
         * @param {string|Component} child
         *        The name or instance of a child to add.
         *
         * @param {Object} [options={}]
         *        The key/value store of options that will get passed to children of
         *        the child.
         *
         * @return {Component}
         *         The `Component` that gets added as a child. When using a string the
         *         `Component` will get created by this process.
         *
         * @deprecated since version 5
         */


        Button.prototype.addChild = function addChild(child) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var className = this.constructor.name;

            log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

            // Avoid the error message generated by ClickableComponent's addChild method
            return Component.prototype.addChild.call(this, child, options);
        };

        /**
         * Enable the `Button` element so that it can be activated or clicked. Use this with
         * {@link Button#disable}.
         */


        Button.prototype.enable = function enable() {
            _ClickableComponent.prototype.enable.call(this);
            this.el_.removeAttribute('disabled');
        };

        /**
         * Disable the `Button` element so that it cannot be activated or clicked. Use this with
         * {@link Button#enable}.
         */


        Button.prototype.disable = function disable() {
            _ClickableComponent.prototype.disable.call(this);
            this.el_.setAttribute('disabled', 'disabled');
        };

        /**
         * This gets called when a `Button` has focus and `keydown` is triggered via a key
         * press.
         *
         * @param {EventTarget~Event} event
         *        The event that caused this function to get called.
         *
         * @listens keydown
         */


        Button.prototype.handleKeyPress = function handleKeyPress(event) {

            // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
            if (event.which === 32 || event.which === 13) {
                return;
            }

            // Pass keypress handling up for unsupported keys
            _ClickableComponent.prototype.handleKeyPress.call(this, event);
        };

        return Button;
    }(ClickableComponent);

    Component.registerComponent('Button', Button);

    /**
     * @file big-play-button.js
     */
    /**
     * The initial play button that shows before the video has played. The hiding of the
     * `BigPlayButton` get done via CSS and `Player` states.
     *
     * @extends Button
     */

    var BigPlayButton = function (_Button) {
        inherits(BigPlayButton, _Button);

        function BigPlayButton(player, options) {
            classCallCheck(this, BigPlayButton);

            var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

            _this.mouseused_ = false;

            _this.on('mousedown', _this.handleMouseDown);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
         */


        BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-big-play-button';
        };

        /**
         * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
         * for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        BigPlayButton.prototype.handleClick = function handleClick(event) {
            var playPromise = this.player_.play();

            // exit early if clicked via the mouse
            if (this.mouseused_ && event.clientX && event.clientY) {
                return;
            }

            var cb = this.player_.getChild('controlBar');
            var playToggle = cb && cb.getChild('playToggle');

            if (!playToggle) {
                this.player_.focus();
                return;
            }

            var playFocus = function playFocus() {
                return playToggle.focus();
            };

            if (isPromise(playPromise)) {
                playPromise.then(playFocus, function () {});
            } else {
                this.setTimeout(playFocus, 1);
            }
        };

        BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {
            this.mouseused_ = false;

            _Button.prototype.handleKeyPress.call(this, event);
        };

        BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {
            this.mouseused_ = true;
        };

        return BigPlayButton;
    }(Button);

    /**
     * The text that should display over the `BigPlayButton`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */


    BigPlayButton.prototype.controlText_ = 'Play Video';

    Component.registerComponent('BigPlayButton', BigPlayButton);

    /**
     * @file close-button.js
     */
    /**
     * The `CloseButton` is a `{@link Button}` that fires a `close` event when
     * it gets clicked.
     *
     * @extends Button
     */

    var CloseButton = function (_Button) {
        inherits(CloseButton, _Button);

        /**
         * Creates an instance of the this class.
         *
         * @param  {Player} player
         *         The `Player` that this class should be attached to.
         *
         * @param  {Object} [options]
         *         The key/value store of player options.
         */
        function CloseButton(player, options) {
            classCallCheck(this, CloseButton);

            var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

            _this.controlText(options && options.controlText || _this.localize('Close'));
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        CloseButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * This gets called when a `CloseButton` gets clicked. See
         * {@link ClickableComponent#handleClick} for more information on when this will be
         * triggered
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         * @fires CloseButton#close
         */


        CloseButton.prototype.handleClick = function handleClick(event) {

            /**
             * Triggered when the a `CloseButton` is clicked.
             *
             * @event CloseButton#close
             * @type {EventTarget~Event}
             *
             * @property {boolean} [bubbles=false]
             *           set to false so that the close event does not
             *           bubble up to parents if there is no listener
             */
            this.trigger({ type: 'close', bubbles: false });
        };

        return CloseButton;
    }(Button);

    Component.registerComponent('CloseButton', CloseButton);

    /**
     * @file play-toggle.js
     */
    /**
     * Button to toggle between play and pause.
     *
     * @extends Button
     */

    var PlayToggle = function (_Button) {
        inherits(PlayToggle, _Button);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function PlayToggle(player, options) {
            classCallCheck(this, PlayToggle);

            var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

            _this.on(player, 'play', _this.handlePlay);
            _this.on(player, 'pause', _this.handlePause);
            _this.on(player, 'ended', _this.handleEnded);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * This gets called when an `PlayToggle` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        PlayToggle.prototype.handleClick = function handleClick(event) {
            if (this.player_.paused()) {
                this.player_.play();
            } else {
                this.player_.pause();
            }
        };

        /**
         * This gets called once after the video has ended and the user seeks so that
         * we can change the replay button back to a play button.
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#seeked
         */


        PlayToggle.prototype.handleSeeked = function handleSeeked(event) {
            this.removeClass('vjs-ended');

            if (this.player_.paused()) {
                this.handlePause(event);
            } else {
                this.handlePlay(event);
            }
        };

        /**
         * Add the vjs-playing class to the element so it can change appearance.
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#play
         */


        PlayToggle.prototype.handlePlay = function handlePlay(event) {
            this.removeClass('vjs-ended');
            this.removeClass('vjs-paused');
            this.addClass('vjs-playing');
            // change the button text to "Pause"
            this.controlText('Pause');
        };

        /**
         * Add the vjs-paused class to the element so it can change appearance.
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#pause
         */


        PlayToggle.prototype.handlePause = function handlePause(event) {
            this.removeClass('vjs-playing');
            this.addClass('vjs-paused');
            // change the button text to "Play"
            this.controlText('Play');
        };

        /**
         * Add the vjs-ended class to the element so it can change appearance
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#ended
         */


        PlayToggle.prototype.handleEnded = function handleEnded(event) {
            this.removeClass('vjs-playing');
            this.addClass('vjs-ended');
            // change the button text to "Replay"
            this.controlText('Replay');

            // on the next seek remove the replay button
            this.one(this.player_, 'seeked', this.handleSeeked);
        };

        return PlayToggle;
    }(Button);

    /**
     * The text that should display over the `PlayToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    PlayToggle.prototype.controlText_ = 'Play';

    Component.registerComponent('PlayToggle', PlayToggle);

    /**
     * @file format-time.js
     * @module Format-time
     */

    /**
     * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
     * will force a number of leading zeros to cover the length of the guide.
     *
     * @param {number} seconds
     *        Number of seconds to be turned into a string
     *
     * @param {number} guide
     *        Number (in seconds) to model the string after
     *
     * @return {string}
     *         Time formatted as H:MM:SS or M:SS
     */
    function formatTime(seconds) {
        var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

        seconds = seconds < 0 ? 0 : seconds;
        var s = Math.floor(seconds % 60);
        var m = Math.floor(seconds / 60 % 60);
        var h = Math.floor(seconds / 3600);
        var gm = Math.floor(guide / 60 % 60);
        var gh = Math.floor(guide / 3600);

        // handle invalid times
        if (isNaN(seconds) || seconds === Infinity) {
            // '-' is false for all relational operators (e.g. <, >=) so this setting
            // will add the minimum number of fields specified by the guide
            h = m = s = '-';
        }

        // Check if we need to show hours
        h = h > 0 || gh > 0 ? h + ':' : '';

        // If hours are showing, we may need to add a leading zero.
        // Always show at least one digit of minutes.
        m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

        // Check if leading zero is need for seconds
        s = s < 10 ? '0' + s : s;

        return h + m + s;
    }

    /**
     * @file time-display.js
     */
    /**
     * Displays the time left in the video
     *
     * @extends Component
     */

    var TimeDisplay = function (_Component) {
        inherits(TimeDisplay, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function TimeDisplay(player, options) {
            classCallCheck(this, TimeDisplay);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
            _this.on(player, 'timeupdate', _this.throttledUpdateContent);
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        TimeDisplay.prototype.createEl = function createEl$$1(plainName) {
            var className = this.buildCSSClass();
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: className + ' vjs-time-control vjs-control'
            });

            this.contentEl_ = createEl('div', {
                className: className + '-display'
            }, {
                // tell screen readers not to automatically read the time as it changes
                'aria-live': 'off'
            }, createEl('span', {
                className: 'vjs-control-text',
                textContent: this.localize(this.controlText_)
            }));

            this.updateTextNode_();
            el.appendChild(this.contentEl_);
            return el;
        };

        TimeDisplay.prototype.dispose = function dispose() {
            this.contentEl_ = null;
            this.textNode_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Updates the "remaining time" text node with new content using the
         * contents of the `formattedTime_` property.
         *
         * @private
         */


        TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
            if (!this.contentEl_) {
                return;
            }

            while (this.contentEl_.firstChild) {
                this.contentEl_.removeChild(this.contentEl_.firstChild);
            }

            this.textNode_ = document_1.createTextNode(this.formattedTime_ || '0:00');
            this.contentEl_.appendChild(this.textNode_);
        };

        /**
         * Generates a formatted time for this component to use in display.
         *
         * @param  {number} time
         *         A numeric time, in seconds.
         *
         * @return {string}
         *         A formatted time
         *
         * @private
         */


        TimeDisplay.prototype.formatTime_ = function formatTime_(time) {
            return formatTime(time);
        };

        /**
         * Updates the time display text node if it has what was passed in changed
         * the formatted time.
         *
         * @param {number} time
         *        The time to update to
         *
         * @private
         */


        TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {
            var formattedTime = this.formatTime_(time);

            if (formattedTime === this.formattedTime_) {
                return;
            }

            this.formattedTime_ = formattedTime;
            this.requestAnimationFrame(this.updateTextNode_);
        };

        /**
         * To be filled out in the child class, should update the displayed time
         * in accordance with the fact that the current time has changed.
         *
         * @param {EventTarget~Event} [event]
         *        The `timeupdate`  event that caused this to run.
         *
         * @listens Player#timeupdate
         */


        TimeDisplay.prototype.updateContent = function updateContent(event) {};

        return TimeDisplay;
    }(Component);

    /**
     * The text that should display over the `TimeDisplay`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */


    TimeDisplay.prototype.controlText_ = 'Time';

    Component.registerComponent('TimeDisplay', TimeDisplay);

    /**
     * @file current-time-display.js
     */
    /**
     * Displays the current time
     *
     * @extends Component
     */

    var CurrentTimeDisplay = function (_TimeDisplay) {
        inherits(CurrentTimeDisplay, _TimeDisplay);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function CurrentTimeDisplay(player, options) {
            classCallCheck(this, CurrentTimeDisplay);

            var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

            _this.on(player, 'ended', _this.handleEnded);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-current-time';
        };

        /**
         * Update current time display
         *
         * @param {EventTarget~Event} [event]
         *        The `timeupdate` event that caused this function to run.
         *
         * @listens Player#timeupdate
         */


        CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
            // Allows for smooth scrubbing, when player can't keep up.
            var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

            this.updateFormattedTime_(time);
        };

        /**
         * When the player fires ended there should be no time left. Sadly
         * this is not always the case, lets make it seem like that is the case
         * for users.
         *
         * @param {EventTarget~Event} [event]
         *        The `ended` event that caused this to run.
         *
         * @listens Player#ended
         */


        CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {
            if (!this.player_.duration()) {
                return;
            }
            this.updateFormattedTime_(this.player_.duration());
        };

        return CurrentTimeDisplay;
    }(TimeDisplay);

    /**
     * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */


    CurrentTimeDisplay.prototype.controlText_ = 'Current Time';

    Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);

    /**
     * @file duration-display.js
     */
    /**
     * Displays the duration
     *
     * @extends Component
     */

    var DurationDisplay = function (_TimeDisplay) {
        inherits(DurationDisplay, _TimeDisplay);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function DurationDisplay(player, options) {
            classCallCheck(this, DurationDisplay);

            // we do not want to/need to throttle duration changes,
            // as they should always display the changed duration as
            // it has changed
            var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

            _this.on(player, 'durationchange', _this.updateContent);

            // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
            // listeners could have broken dependent applications/libraries. These
            // can likely be removed for 7.0.
            _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-duration';
        };

        /**
         * Update duration time display.
         *
         * @param {EventTarget~Event} [event]
         *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
         *        this function to be called.
         *
         * @listens Player#durationchange
         * @listens Player#timeupdate
         * @listens Player#loadedmetadata
         */


        DurationDisplay.prototype.updateContent = function updateContent(event) {
            var duration = this.player_.duration();

            if (duration && this.duration_ !== duration) {
                this.duration_ = duration;
                this.updateFormattedTime_(duration);
            }
        };

        return DurationDisplay;
    }(TimeDisplay);

    /**
     * The text that should display over the `DurationDisplay`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */


    DurationDisplay.prototype.controlText_ = 'Duration Time';

    Component.registerComponent('DurationDisplay', DurationDisplay);

    /**
     * @file time-divider.js
     */
    /**
     * The separator between the current time and duration.
     * Can be hidden if it's not needed in the design.
     *
     * @extends Component
     */

    var TimeDivider = function (_Component) {
        inherits(TimeDivider, _Component);

        function TimeDivider() {
            classCallCheck(this, TimeDivider);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the component's DOM element
         *
         * @return {Element}
         *         The element that was created.
         */
        TimeDivider.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-time-control vjs-time-divider',
                innerHTML: '<div><span>/</span></div>'
            });
        };

        return TimeDivider;
    }(Component);

    Component.registerComponent('TimeDivider', TimeDivider);

    /**
     * @file remaining-time-display.js
     */
    /**
     * Displays the time left in the video
     *
     * @extends Component
     */

    var RemainingTimeDisplay = function (_TimeDisplay) {
        inherits(RemainingTimeDisplay, _TimeDisplay);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function RemainingTimeDisplay(player, options) {
            classCallCheck(this, RemainingTimeDisplay);

            var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

            _this.on(player, 'durationchange', _this.throttledUpdateContent);
            _this.on(player, 'ended', _this.handleEnded);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-remaining-time';
        };

        /**
         * The remaining time display prefixes numbers with a "minus" character.
         *
         * @param  {number} time
         *         A numeric time, in seconds.
         *
         * @return {string}
         *         A formatted time
         *
         * @private
         */


        RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {
            return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);
        };

        /**
         * Update remaining time display.
         *
         * @param {EventTarget~Event} [event]
         *        The `timeupdate` or `durationchange` event that caused this to run.
         *
         * @listens Player#timeupdate
         * @listens Player#durationchange
         */


        RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
            if (!this.player_.duration()) {
                return;
            }

            // @deprecated We should only use remainingTimeDisplay
            // as of video.js 7
            if (this.player_.remainingTimeDisplay) {
                this.updateFormattedTime_(this.player_.remainingTimeDisplay());
            } else {
                this.updateFormattedTime_(this.player_.remainingTime());
            }
        };

        /**
         * When the player fires ended there should be no time left. Sadly
         * this is not always the case, lets make it seem like that is the case
         * for users.
         *
         * @param {EventTarget~Event} [event]
         *        The `ended` event that caused this to run.
         *
         * @listens Player#ended
         */


        RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {
            if (!this.player_.duration()) {
                return;
            }
            this.updateFormattedTime_(0);
        };

        return RemainingTimeDisplay;
    }(TimeDisplay);

    /**
     * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */


    RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';

    Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);

    /**
     * @file live-display.js
     */
// TODO - Future make it click to snap to live

    /**
     * Displays the live indicator when duration is Infinity.
     *
     * @extends Component
     */

    var LiveDisplay = function (_Component) {
        inherits(LiveDisplay, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function LiveDisplay(player, options) {
            classCallCheck(this, LiveDisplay);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.updateShowing();
            _this.on(_this.player(), 'durationchange', _this.updateShowing);
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        LiveDisplay.prototype.createEl = function createEl$$1() {
            var el = _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-live-control vjs-control'
            });

            this.contentEl_ = createEl('div', {
                className: 'vjs-live-display',
                innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
            }, {
                'aria-live': 'off'
            });

            el.appendChild(this.contentEl_);
            return el;
        };

        LiveDisplay.prototype.dispose = function dispose() {
            this.contentEl_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
         * it accordingly
         *
         * @param {EventTarget~Event} [event]
         *        The {@link Player#durationchange} event that caused this function to run.
         *
         * @listens Player#durationchange
         */


        LiveDisplay.prototype.updateShowing = function updateShowing(event) {
            if (this.player().duration() === Infinity) {
                this.show();
            } else {
                this.hide();
            }
        };

        return LiveDisplay;
    }(Component);

    Component.registerComponent('LiveDisplay', LiveDisplay);

    /**
     * @file slider.js
     */
    /**
     * The base functionality for a slider. Can be vertical or horizontal.
     * For instance the volume bar or the seek bar on a video is a slider.
     *
     * @extends Component
     */

    var Slider = function (_Component) {
        inherits(Slider, _Component);

        /**
         * Create an instance of this class
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function Slider(player, options) {
            classCallCheck(this, Slider);

            // Set property names to bar to match with the child Slider class is looking for
            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.bar = _this.getChild(_this.options_.barName);

            // Set a horizontal or vertical class on the slider depending on the slider type
            _this.vertical(!!_this.options_.vertical);

            _this.enable();
            return _this;
        }

        /**
         * Are controls are currently enabled for this slider or not.
         *
         * @return {boolean}
         *         true if controls are enabled, false otherwise
         */


        Slider.prototype.enabled = function enabled() {
            return this.enabled_;
        };

        /**
         * Enable controls for this slider if they are disabled
         */


        Slider.prototype.enable = function enable() {
            if (this.enabled()) {
                return;
            }

            this.on('mousedown', this.handleMouseDown);
            this.on('touchstart', this.handleMouseDown);
            this.on('focus', this.handleFocus);
            this.on('blur', this.handleBlur);
            this.on('click', this.handleClick);

            this.on(this.player_, 'controlsvisible', this.update);

            if (this.playerEvent) {
                this.on(this.player_, this.playerEvent, this.update);
            }

            this.removeClass('disabled');
            this.setAttribute('tabindex', 0);

            this.enabled_ = true;
        };

        /**
         * Disable controls for this slider if they are enabled
         */


        Slider.prototype.disable = function disable() {
            if (!this.enabled()) {
                return;
            }
            var doc = this.bar.el_.ownerDocument;

            this.off('mousedown', this.handleMouseDown);
            this.off('touchstart', this.handleMouseDown);
            this.off('focus', this.handleFocus);
            this.off('blur', this.handleBlur);
            this.off('click', this.handleClick);
            this.off(this.player_, 'controlsvisible', this.update);
            this.off(doc, 'mousemove', this.handleMouseMove);
            this.off(doc, 'mouseup', this.handleMouseUp);
            this.off(doc, 'touchmove', this.handleMouseMove);
            this.off(doc, 'touchend', this.handleMouseUp);
            this.removeAttribute('tabindex');

            this.addClass('disabled');

            if (this.playerEvent) {
                this.off(this.player_, this.playerEvent, this.update);
            }
            this.enabled_ = false;
        };

        /**
         * Create the `Button`s DOM element.
         *
         * @param {string} type
         *        Type of element to create.
         *
         * @param {Object} [props={}]
         *        List of properties in Object form.
         *
         * @param {Object} [attributes={}]
         *        list of attributes in Object form.
         *
         * @return {Element}
         *         The element that gets created.
         */


        Slider.prototype.createEl = function createEl$$1(type) {
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            // Add the slider element class to all sub classes
            props.className = props.className + ' vjs-slider';
            props = assign({
                tabIndex: 0
            }, props);

            attributes = assign({
                'role': 'slider',
                'aria-valuenow': 0,
                'aria-valuemin': 0,
                'aria-valuemax': 100,
                'tabIndex': 0
            }, attributes);

            return _Component.prototype.createEl.call(this, type, props, attributes);
        };

        /**
         * Handle `mousedown` or `touchstart` events on the `Slider`.
         *
         * @param {EventTarget~Event} event
         *        `mousedown` or `touchstart` event that triggered this function
         *
         * @listens mousedown
         * @listens touchstart
         * @fires Slider#slideractive
         */


        Slider.prototype.handleMouseDown = function handleMouseDown(event) {
            var doc = this.bar.el_.ownerDocument;

            event.preventDefault();
            blockTextSelection();

            this.addClass('vjs-sliding');
            /**
             * Triggered when the slider is in an active state
             *
             * @event Slider#slideractive
             * @type {EventTarget~Event}
             */
            this.trigger('slideractive');

            this.on(doc, 'mousemove', this.handleMouseMove);
            this.on(doc, 'mouseup', this.handleMouseUp);
            this.on(doc, 'touchmove', this.handleMouseMove);
            this.on(doc, 'touchend', this.handleMouseUp);

            this.handleMouseMove(event);
        };

        /**
         * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
         * The `mousemove` and `touchmove` events will only only trigger this function during
         * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
         * {@link Slider#handleMouseUp}.
         *
         * @param {EventTarget~Event} event
         *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
         *        this function
         *
         * @listens mousemove
         * @listens touchmove
         */


        Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

        /**
         * Handle `mouseup` or `touchend` events on the `Slider`.
         *
         * @param {EventTarget~Event} event
         *        `mouseup` or `touchend` event that triggered this function.
         *
         * @listens touchend
         * @listens mouseup
         * @fires Slider#sliderinactive
         */


        Slider.prototype.handleMouseUp = function handleMouseUp() {
            var doc = this.bar.el_.ownerDocument;

            unblockTextSelection();

            this.removeClass('vjs-sliding');
            /**
             * Triggered when the slider is no longer in an active state.
             *
             * @event Slider#sliderinactive
             * @type {EventTarget~Event}
             */
            this.trigger('sliderinactive');

            this.off(doc, 'mousemove', this.handleMouseMove);
            this.off(doc, 'mouseup', this.handleMouseUp);
            this.off(doc, 'touchmove', this.handleMouseMove);
            this.off(doc, 'touchend', this.handleMouseUp);

            this.update();
        };

        /**
         * Update the progress bar of the `Slider`.
         *
         * @returns {number}
         *          The percentage of progress the progress bar represents as a
         *          number from 0 to 1.
         */


        Slider.prototype.update = function update() {

            // In VolumeBar init we have a setTimeout for update that pops and update
            // to the end of the execution stack. The player is destroyed before then
            // update will cause an error
            if (!this.el_) {
                return;
            }

            // If scrubbing, we could use a cached value to make the handle keep up
            // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but
            // some flash players are slow, so we might want to utilize this later.
            // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
            var progress = this.getPercent();
            var bar = this.bar;

            // If there's no bar...
            if (!bar) {
                return;
            }

            // Protect against no duration and other division issues
            if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
                progress = 0;
            }

            // Convert to a percentage for setting
            var percentage = (progress * 100).toFixed(2) + '%';
            var style = bar.el().style;

            // Set the new bar width or height
            if (this.vertical()) {
                style.height = percentage;
            } else {
                style.width = percentage;
            }

            return progress;
        };

        /**
         * Calculate distance for slider
         *
         * @param {EventTarget~Event} event
         *        The event that caused this function to run.
         *
         * @return {number}
         *         The current position of the Slider.
         *         - postition.x for vertical `Slider`s
         *         - postition.y for horizontal `Slider`s
         */


        Slider.prototype.calculateDistance = function calculateDistance(event) {
            var position = getPointerPosition(this.el_, event);

            if (this.vertical()) {
                return position.y;
            }
            return position.x;
        };

        /**
         * Handle a `focus` event on this `Slider`.
         *
         * @param {EventTarget~Event} event
         *        The `focus` event that caused this function to run.
         *
         * @listens focus
         */


        Slider.prototype.handleFocus = function handleFocus() {
            this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
        };

        /**
         * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
         * arrow keys. This function will only be called when the slider has focus. See
         * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
         *
         * @param {EventTarget~Event} event
         *        the `keydown` event that caused this function to run.
         *
         * @listens keydown
         */


        Slider.prototype.handleKeyPress = function handleKeyPress(event) {
            // Left and Down Arrows
            if (event.which === 37 || event.which === 40) {
                event.preventDefault();
                this.stepBack();

                // Up and Right Arrows
            } else if (event.which === 38 || event.which === 39) {
                event.preventDefault();
                this.stepForward();
            }
        };

        /**
         * Handle a `blur` event on this `Slider`.
         *
         * @param {EventTarget~Event} event
         *        The `blur` event that caused this function to run.
         *
         * @listens blur
         */

        Slider.prototype.handleBlur = function handleBlur() {
            this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
        };

        /**
         * Listener for click events on slider, used to prevent clicks
         *   from bubbling up to parent elements like button menus.
         *
         * @param {Object} event
         *        Event that caused this object to run
         */


        Slider.prototype.handleClick = function handleClick(event) {
            event.stopImmediatePropagation();
            event.preventDefault();
        };

        /**
         * Get/set if slider is horizontal for vertical
         *
         * @param {boolean} [bool]
         *        - true if slider is vertical,
         *        - false is horizontal
         *
         * @return {boolean}
         *         - true if slider is vertical, and getting
         *         - false if the slider is horizontal, and getting
         */


        Slider.prototype.vertical = function vertical(bool) {
            if (bool === undefined) {
                return this.vertical_ || false;
            }

            this.vertical_ = !!bool;

            if (this.vertical_) {
                this.addClass('vjs-slider-vertical');
            } else {
                this.addClass('vjs-slider-horizontal');
            }
        };

        return Slider;
    }(Component);

    Component.registerComponent('Slider', Slider);

    /**
     * @file load-progress-bar.js
     */
    /**
     * Shows loading progress
     *
     * @extends Component
     */

    var LoadProgressBar = function (_Component) {
        inherits(LoadProgressBar, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function LoadProgressBar(player, options) {
            classCallCheck(this, LoadProgressBar);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.partEls_ = [];
            _this.on(player, 'progress', _this.update);
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        LoadProgressBar.prototype.createEl = function createEl$$1() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-load-progress',
                innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
            });
        };

        LoadProgressBar.prototype.dispose = function dispose() {
            this.partEls_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Update progress bar
         *
         * @param {EventTarget~Event} [event]
         *        The `progress` event that caused this function to run.
         *
         * @listens Player#progress
         */


        LoadProgressBar.prototype.update = function update(event) {
            var buffered = this.player_.buffered();
            var duration = this.player_.duration();
            var bufferedEnd = this.player_.bufferedEnd();
            var children = this.partEls_;

            // get the percent width of a time compared to the total end
            var percentify = function percentify(time, end) {
                // no NaN
                var percent = time / end || 0;

                return (percent >= 1 ? 1 : percent) * 100 + '%';
            };

            // update the width of the progress bar
            this.el_.style.width = percentify(bufferedEnd, duration);

            // add child elements to represent the individual buffered time ranges
            for (var i = 0; i < buffered.length; i++) {
                var start = buffered.start(i);
                var end = buffered.end(i);
                var part = children[i];

                if (!part) {
                    part = this.el_.appendChild(createEl());
                    children[i] = part;
                }

                // set the percent based on the width of the progress bar (bufferedEnd)
                part.style.left = percentify(start, bufferedEnd);
                part.style.width = percentify(end - start, bufferedEnd);
            }

            // remove unused buffered range elements
            for (var _i = children.length; _i > buffered.length; _i--) {
                this.el_.removeChild(children[_i - 1]);
            }
            children.length = buffered.length;
        };

        return LoadProgressBar;
    }(Component);

    Component.registerComponent('LoadProgressBar', LoadProgressBar);

    /**
     * @file time-tooltip.js
     */
    /**
     * Time tooltips display a time above the progress bar.
     *
     * @extends Component
     */

    var TimeTooltip = function (_Component) {
        inherits(TimeTooltip, _Component);

        function TimeTooltip() {
            classCallCheck(this, TimeTooltip);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the time tooltip DOM element
         *
         * @return {Element}
         *         The element that was created.
         */
        TimeTooltip.prototype.createEl = function createEl$$1() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-time-tooltip'
            });
        };

        /**
         * Updates the position of the time tooltip relative to the `SeekBar`.
         *
         * @param {Object} seekBarRect
         *        The `ClientRect` for the {@link SeekBar} element.
         *
         * @param {number} seekBarPoint
         *        A number from 0 to 1, representing a horizontal reference point
         *        from the left edge of the {@link SeekBar}
         */


        TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {
            var tooltipRect = getBoundingClientRect(this.el_);
            var playerRect = getBoundingClientRect(this.player_.el());
            var seekBarPointPx = seekBarRect.width * seekBarPoint;

            // do nothing if either rect isn't available
            // for example, if the player isn't in the DOM for testing
            if (!playerRect || !tooltipRect) {
                return;
            }

            // This is the space left of the `seekBarPoint` available within the bounds
            // of the player. We calculate any gap between the left edge of the player
            // and the left edge of the `SeekBar` and add the number of pixels in the
            // `SeekBar` before hitting the `seekBarPoint`
            var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;

            // This is the space right of the `seekBarPoint` available within the bounds
            // of the player. We calculate the number of pixels from the `seekBarPoint`
            // to the right edge of the `SeekBar` and add to that any gap between the
            // right edge of the `SeekBar` and the player.
            var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);

            // This is the number of pixels by which the tooltip will need to be pulled
            // further to the right to center it over the `seekBarPoint`.
            var pullTooltipBy = tooltipRect.width / 2;

            // Adjust the `pullTooltipBy` distance to the left or right depending on
            // the results of the space calculations above.
            if (spaceLeftOfPoint < pullTooltipBy) {
                pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
            } else if (spaceRightOfPoint < pullTooltipBy) {
                pullTooltipBy = spaceRightOfPoint;
            }

            // Due to the imprecision of decimal/ratio based calculations and varying
            // rounding behaviors, there are cases where the spacing adjustment is off
            // by a pixel or two. This adds insurance to these calculations.
            if (pullTooltipBy < 0) {
                pullTooltipBy = 0;
            } else if (pullTooltipBy > tooltipRect.width) {
                pullTooltipBy = tooltipRect.width;
            }

            this.el_.style.right = '-' + pullTooltipBy + 'px';
            textContent(this.el_, content);
        };

        return TimeTooltip;
    }(Component);

    Component.registerComponent('TimeTooltip', TimeTooltip);

    /**
     * @file play-progress-bar.js
     */
    /**
     * Used by {@link SeekBar} to display media playback progress as part of the
     * {@link ProgressControl}.
     *
     * @extends Component
     */

    var PlayProgressBar = function (_Component) {
        inherits(PlayProgressBar, _Component);

        function PlayProgressBar() {
            classCallCheck(this, PlayProgressBar);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the the DOM element for this class.
         *
         * @return {Element}
         *         The element that was created.
         */
        PlayProgressBar.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-play-progress vjs-slider-bar',
                innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
            });
        };

        /**
         * Enqueues updates to its own DOM as well as the DOM of its
         * {@link TimeTooltip} child.
         *
         * @param {Object} seekBarRect
         *        The `ClientRect` for the {@link SeekBar} element.
         *
         * @param {number} seekBarPoint
         *        A number from 0 to 1, representing a horizontal reference point
         *        from the left edge of the {@link SeekBar}
         */


        PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {
            var _this2 = this;

            // If there is an existing rAF ID, cancel it so we don't over-queue.
            if (this.rafId_) {
                this.cancelAnimationFrame(this.rafId_);
            }

            this.rafId_ = this.requestAnimationFrame(function () {
                var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();

                var content = formatTime(time, _this2.player_.duration());
                var timeTooltip = _this2.getChild('timeTooltip');

                if (timeTooltip) {
                    timeTooltip.update(seekBarRect, seekBarPoint, content);
                }
            });
        };

        return PlayProgressBar;
    }(Component);

    /**
     * Default options for {@link PlayProgressBar}.
     *
     * @type {Object}
     * @private
     */


    PlayProgressBar.prototype.options_ = {
        children: []
    };

// Time tooltips should not be added to a player on mobile devices or IE8
    if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
        PlayProgressBar.prototype.options_.children.push('timeTooltip');
    }

    Component.registerComponent('PlayProgressBar', PlayProgressBar);

    /**
     * @file mouse-time-display.js
     */
    /**
     * The {@link MouseTimeDisplay} component tracks mouse movement over the
     * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
     * indicating the time which is represented by a given point in the
     * {@link ProgressControl}.
     *
     * @extends Component
     */

    var MouseTimeDisplay = function (_Component) {
        inherits(MouseTimeDisplay, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The {@link Player} that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function MouseTimeDisplay(player, options) {
            classCallCheck(this, MouseTimeDisplay);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.update = throttle(bind(_this, _this.update), 25);
            return _this;
        }

        /**
         * Create the DOM element for this class.
         *
         * @return {Element}
         *         The element that was created.
         */


        MouseTimeDisplay.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-mouse-display'
            });
        };

        /**
         * Enqueues updates to its own DOM as well as the DOM of its
         * {@link TimeTooltip} child.
         *
         * @param {Object} seekBarRect
         *        The `ClientRect` for the {@link SeekBar} element.
         *
         * @param {number} seekBarPoint
         *        A number from 0 to 1, representing a horizontal reference point
         *        from the left edge of the {@link SeekBar}
         */


        MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
            var _this2 = this;

            // If there is an existing rAF ID, cancel it so we don't over-queue.
            if (this.rafId_) {
                this.cancelAnimationFrame(this.rafId_);
            }

            this.rafId_ = this.requestAnimationFrame(function () {
                var duration = _this2.player_.duration();
                var content = formatTime(seekBarPoint * duration, duration);

                _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
                _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
            });
        };

        return MouseTimeDisplay;
    }(Component);

    /**
     * Default options for `MouseTimeDisplay`
     *
     * @type {Object}
     * @private
     */


    MouseTimeDisplay.prototype.options_ = {
        children: ['timeTooltip']
    };

    Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);

    /**
     * @file seek-bar.js
     */
// The number of seconds the `step*` functions move the timeline.
    var STEP_SECONDS = 5;

// The interval at which the bar should update as it progresses.
    var UPDATE_REFRESH_INTERVAL = 30;

    /**
     * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
     * as its `bar`.
     *
     * @extends Slider
     */

    var SeekBar = function (_Slider) {
        inherits(SeekBar, _Slider);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function SeekBar(player, options) {
            classCallCheck(this, SeekBar);

            var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

            _this.update = throttle(bind(_this, _this.update), UPDATE_REFRESH_INTERVAL);

            _this.on(player, 'timeupdate', _this.update);
            _this.on(player, 'ended', _this.handleEnded);

            // when playing, let's ensure we smoothly update the play progress bar
            // via an interval
            _this.updateInterval = null;

            _this.on(player, ['playing'], function () {
                _this.clearInterval(_this.updateInterval);

                _this.updateInterval = _this.setInterval(function () {
                    _this.requestAnimationFrame(function () {
                        _this.update();
                    });
                }, UPDATE_REFRESH_INTERVAL);
            });

            _this.on(player, ['ended', 'pause', 'waiting'], function () {
                _this.clearInterval(_this.updateInterval);
            });

            _this.on(player, ['timeupdate', 'ended'], _this.update);
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        SeekBar.prototype.createEl = function createEl$$1() {
            return _Slider.prototype.createEl.call(this, 'div', {
                className: 'vjs-progress-holder'
            }, {
                'aria-label': this.localize('Progress Bar')
            });
        };

        /**
         * This function updates the play progress bar and accessiblity
         * attributes to whatever is passed in.
         *
         * @param {number} currentTime
         *        The currentTime value that should be used for accessiblity
         *
         * @param {number} percent
         *        The percentage as a decimal that the bar should be filled from 0-1.
         *
         * @private
         */


        SeekBar.prototype.update_ = function update_(currentTime, percent) {
            var duration = this.player_.duration();

            // machine readable value of progress bar (percentage complete)
            this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));

            // human readable value of progress bar (time complete)
            this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));

            // Update the `PlayProgressBar`.
            this.bar.update(getBoundingClientRect(this.el_), percent);
        };

        /**
         * Update the seek bar's UI.
         *
         * @param {EventTarget~Event} [event]
         *        The `timeupdate` or `ended` event that caused this to run.
         *
         * @listens Player#timeupdate
         *
         * @returns {number}
         *          The current percent at a number from 0-1
         */


        SeekBar.prototype.update = function update(event) {
            var percent = _Slider.prototype.update.call(this);

            this.update_(this.getCurrentTime_(), percent);
            return percent;
        };

        /**
         * Get the value of current time but allows for smooth scrubbing,
         * when player can't keep up.
         *
         * @return {number}
         *         The current time value to display
         *
         * @private
         */


        SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {
            return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
        };

        /**
         * We want the seek bar to be full on ended
         * no matter what the actual internal values are. so we force it.
         *
         * @param {EventTarget~Event} [event]
         *        The `timeupdate` or `ended` event that caused this to run.
         *
         * @listens Player#ended
         */


        SeekBar.prototype.handleEnded = function handleEnded(event) {
            this.update_(this.player_.duration(), 1);
        };

        /**
         * Get the percentage of media played so far.
         *
         * @return {number}
         *         The percentage of media played so far (0 to 1).
         */


        SeekBar.prototype.getPercent = function getPercent() {
            var percent = this.getCurrentTime_() / this.player_.duration();

            return percent >= 1 ? 1 : percent;
        };

        /**
         * Handle mouse down on seek bar
         *
         * @param {EventTarget~Event} event
         *        The `mousedown` event that caused this to run.
         *
         * @listens mousedown
         */


        SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            this.player_.scrubbing(true);

            this.videoWasPlaying = !this.player_.paused();
            this.player_.pause();

            _Slider.prototype.handleMouseDown.call(this, event);
        };

        /**
         * Handle mouse move on seek bar
         *
         * @param {EventTarget~Event} event
         *        The `mousemove` event that caused this to run.
         *
         * @listens mousemove
         */


        SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            var newTime = this.calculateDistance(event) * this.player_.duration();

            // Don't let video end while scrubbing.
            if (newTime === this.player_.duration()) {
                newTime = newTime - 0.1;
            }

            // Set new time (tell player to seek to new time)
            this.player_.currentTime(newTime);
        };

        SeekBar.prototype.enable = function enable() {
            _Slider.prototype.enable.call(this);
            var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

            if (!mouseTimeDisplay) {
                return;
            }

            mouseTimeDisplay.show();
        };

        SeekBar.prototype.disable = function disable() {
            _Slider.prototype.disable.call(this);
            var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

            if (!mouseTimeDisplay) {
                return;
            }

            mouseTimeDisplay.hide();
        };

        /**
         * Handle mouse up on seek bar
         *
         * @param {EventTarget~Event} event
         *        The `mouseup` event that caused this to run.
         *
         * @listens mouseup
         */


        SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
            _Slider.prototype.handleMouseUp.call(this, event);

            this.player_.scrubbing(false);

            /**
             * Trigger timeupdate because we're done seeking and the time has changed.
             * This is particularly useful for if the player is paused to time the time displays.
             *
             * @event Tech#timeupdate
             * @type {EventTarget~Event}
             */
            this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
            if (this.videoWasPlaying) {
                silencePromise(this.player_.play());
            }
        };

        /**
         * Move more quickly fast forward for keyboard-only users
         */


        SeekBar.prototype.stepForward = function stepForward() {
            this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
        };

        /**
         * Move more quickly rewind for keyboard-only users
         */


        SeekBar.prototype.stepBack = function stepBack() {
            this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
        };

        /**
         * Toggles the playback state of the player
         * This gets called when enter or space is used on the seekbar
         *
         * @param {EventTarget~Event} event
         *        The `keydown` event that caused this function to be called
         *
         */


        SeekBar.prototype.handleAction = function handleAction(event) {
            if (this.player_.paused()) {
                this.player_.play();
            } else {
                this.player_.pause();
            }
        };

        /**
         * Called when this SeekBar has focus and a key gets pressed down. By
         * default it will call `this.handleAction` when the key is space or enter.
         *
         * @param {EventTarget~Event} event
         *        The `keydown` event that caused this function to be called.
         *
         * @listens keydown
         */


        SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {

            // Support Space (32) or Enter (13) key operation to fire a click event
            if (event.which === 32 || event.which === 13) {
                event.preventDefault();
                this.handleAction(event);
            } else if (_Slider.prototype.handleKeyPress) {

                // Pass keypress handling up for unsupported keys
                _Slider.prototype.handleKeyPress.call(this, event);
            }
        };

        return SeekBar;
    }(Slider);

    /**
     * Default options for the `SeekBar`
     *
     * @type {Object}
     * @private
     */


    SeekBar.prototype.options_ = {
        children: ['loadProgressBar', 'playProgressBar'],
        barName: 'playProgressBar'
    };

// MouseTimeDisplay tooltips should not be added to a player on mobile devices or IE8
    if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
        SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
    }

    /**
     * Call the update event for this Slider when this event happens on the player.
     *
     * @type {string}
     */
    SeekBar.prototype.playerEvent = 'timeupdate';

    Component.registerComponent('SeekBar', SeekBar);

    /**
     * @file progress-control.js
     */
    /**
     * The Progress Control component contains the seek bar, load progress,
     * and play progress.
     *
     * @extends Component
     */

    var ProgressControl = function (_Component) {
        inherits(ProgressControl, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function ProgressControl(player, options) {
            classCallCheck(this, ProgressControl);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
            _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);

            _this.enable();
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        ProgressControl.prototype.createEl = function createEl$$1() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-progress-control vjs-control'
            });
        };

        /**
         * When the mouse moves over the `ProgressControl`, the pointer position
         * gets passed down to the `MouseTimeDisplay` component.
         *
         * @param {EventTarget~Event} event
         *        The `mousemove` event that caused this function to run.
         *
         * @listen mousemove
         */


        ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {
            var seekBar = this.getChild('seekBar');
            var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
            var seekBarEl = seekBar.el();
            var seekBarRect = getBoundingClientRect(seekBarEl);
            var seekBarPoint = getPointerPosition(seekBarEl, event).x;

            // The default skin has a gap on either side of the `SeekBar`. This means
            // that it's possible to trigger this behavior outside the boundaries of
            // the `SeekBar`. This ensures we stay within it at all times.
            if (seekBarPoint > 1) {
                seekBarPoint = 1;
            } else if (seekBarPoint < 0) {
                seekBarPoint = 0;
            }

            if (mouseTimeDisplay) {
                mouseTimeDisplay.update(seekBarRect, seekBarPoint);
            }
        };

        /**
         * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
         *
         * @method ProgressControl#throttledHandleMouseSeek
         * @param {EventTarget~Event} event
         *        The `mousemove` event that caused this function to run.
         *
         * @listen mousemove
         * @listen touchmove
         */

        /**
         * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
         *
         * @param {EventTarget~Event} event
         *        `mousedown` or `touchstart` event that triggered this function
         *
         * @listens mousemove
         * @listens touchmove
         */


        ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {
            var seekBar = this.getChild('seekBar');

            seekBar.handleMouseMove(event);
        };

        /**
         * Are controls are currently enabled for this progress control.
         *
         * @return {boolean}
         *         true if controls are enabled, false otherwise
         */


        ProgressControl.prototype.enabled = function enabled() {
            return this.enabled_;
        };

        /**
         * Disable all controls on the progress control and its children
         */


        ProgressControl.prototype.disable = function disable() {
            this.children().forEach(function (child) {
                return child.disable && child.disable();
            });

            if (!this.enabled()) {
                return;
            }

            this.off(['mousedown', 'touchstart'], this.handleMouseDown);
            this.off(this.el_, 'mousemove', this.handleMouseMove);
            this.handleMouseUp();

            this.addClass('disabled');

            this.enabled_ = false;
        };

        /**
         * Enable all controls on the progress control and its children
         */


        ProgressControl.prototype.enable = function enable() {
            this.children().forEach(function (child) {
                return child.enable && child.enable();
            });

            if (this.enabled()) {
                return;
            }

            this.on(['mousedown', 'touchstart'], this.handleMouseDown);
            this.on(this.el_, 'mousemove', this.handleMouseMove);
            this.removeClass('disabled');

            this.enabled_ = true;
        };

        /**
         * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
         *
         * @param {EventTarget~Event} event
         *        `mousedown` or `touchstart` event that triggered this function
         *
         * @listens mousedown
         * @listens touchstart
         */


        ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {
            var doc = this.el_.ownerDocument;

            this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
            this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
            this.on(doc, 'mouseup', this.handleMouseUp);
            this.on(doc, 'touchend', this.handleMouseUp);
        };

        /**
         * Handle `mouseup` or `touchend` events on the `ProgressControl`.
         *
         * @param {EventTarget~Event} event
         *        `mouseup` or `touchend` event that triggered this function.
         *
         * @listens touchend
         * @listens mouseup
         */


        ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {
            var doc = this.el_.ownerDocument;

            this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
            this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
            this.off(doc, 'mouseup', this.handleMouseUp);
            this.off(doc, 'touchend', this.handleMouseUp);
        };

        return ProgressControl;
    }(Component);

    /**
     * Default options for `ProgressControl`
     *
     * @type {Object}
     * @private
     */


    ProgressControl.prototype.options_ = {
        children: ['seekBar']
    };

    Component.registerComponent('ProgressControl', ProgressControl);

    /**
     * @file fullscreen-toggle.js
     */
    /**
     * Toggle fullscreen video
     *
     * @extends Button
     */

    var FullscreenToggle = function (_Button) {
        inherits(FullscreenToggle, _Button);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function FullscreenToggle(player, options) {
            classCallCheck(this, FullscreenToggle);

            var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

            _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * Handles fullscreenchange on the player and change control text accordingly.
         *
         * @param {EventTarget~Event} [event]
         *        The {@link Player#fullscreenchange} event that caused this function to be
         *        called.
         *
         * @listens Player#fullscreenchange
         */


        FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
            if (this.player_.isFullscreen()) {
                this.controlText('Non-Fullscreen');
            } else {
                this.controlText('Fullscreen');
            }
        };

        /**
         * This gets called when an `FullscreenToggle` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        FullscreenToggle.prototype.handleClick = function handleClick(event) {
            if (!this.player_.isFullscreen()) {
                this.player_.requestFullscreen();
            } else {
                this.player_.exitFullscreen();
            }
        };

        return FullscreenToggle;
    }(Button);

    /**
     * The text that should display over the `FullscreenToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    FullscreenToggle.prototype.controlText_ = 'Fullscreen';

    Component.registerComponent('FullscreenToggle', FullscreenToggle);

    /**
     * Check if volume control is supported and if it isn't hide the
     * `Component` that was passed  using the `vjs-hidden` class.
     *
     * @param {Component} self
     *        The component that should be hidden if volume is unsupported
     *
     * @param {Player} player
     *        A reference to the player
     *
     * @private
     */
    var checkVolumeSupport = function checkVolumeSupport(self, player) {
        // hide volume controls when they're not supported by the current tech
        if (player.tech_ && !player.tech_.featuresVolumeControl) {
            self.addClass('vjs-hidden');
        }

        self.on(player, 'loadstart', function () {
            if (!player.tech_.featuresVolumeControl) {
                self.addClass('vjs-hidden');
            } else {
                self.removeClass('vjs-hidden');
            }
        });
    };

    /**
     * @file volume-level.js
     */
    /**
     * Shows volume level
     *
     * @extends Component
     */

    var VolumeLevel = function (_Component) {
        inherits(VolumeLevel, _Component);

        function VolumeLevel() {
            classCallCheck(this, VolumeLevel);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */
        VolumeLevel.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-level',
                innerHTML: '<span class="vjs-control-text"></span>'
            });
        };

        return VolumeLevel;
    }(Component);

    Component.registerComponent('VolumeLevel', VolumeLevel);

    /**
     * @file volume-bar.js
     */
// Required children
    /**
     * The bar that contains the volume level and can be clicked on to adjust the level
     *
     * @extends Slider
     */

    var VolumeBar = function (_Slider) {
        inherits(VolumeBar, _Slider);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function VolumeBar(player, options) {
            classCallCheck(this, VolumeBar);

            var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

            _this.on('slideractive', _this.updateLastVolume_);
            _this.on(player, 'volumechange', _this.updateARIAAttributes);
            player.ready(function () {
                return _this.updateARIAAttributes();
            });
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        VolumeBar.prototype.createEl = function createEl$$1() {
            return _Slider.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-bar vjs-slider-bar'
            }, {
                'aria-label': this.localize('Volume Level'),
                'aria-live': 'polite'
            });
        };

        /**
         * Handle mouse down on volume bar
         *
         * @param {EventTarget~Event} event
         *        The `mousedown` event that caused this to run.
         *
         * @listens mousedown
         */


        VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            _Slider.prototype.handleMouseDown.call(this, event);
        };

        /**
         * Handle movement events on the {@link VolumeMenuButton}.
         *
         * @param {EventTarget~Event} event
         *        The event that caused this function to run.
         *
         * @listens mousemove
         */


        VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            this.checkMuted();
            this.player_.volume(this.calculateDistance(event));
        };

        /**
         * If the player is muted unmute it.
         */


        VolumeBar.prototype.checkMuted = function checkMuted() {
            if (this.player_.muted()) {
                this.player_.muted(false);
            }
        };

        /**
         * Get percent of volume level
         *
         * @return {number}
         *         Volume level percent as a decimal number.
         */


        VolumeBar.prototype.getPercent = function getPercent() {
            if (this.player_.muted()) {
                return 0;
            }
            return this.player_.volume();
        };

        /**
         * Increase volume level for keyboard users
         */


        VolumeBar.prototype.stepForward = function stepForward() {
            this.checkMuted();
            this.player_.volume(this.player_.volume() + 0.1);
        };

        /**
         * Decrease volume level for keyboard users
         */


        VolumeBar.prototype.stepBack = function stepBack() {
            this.checkMuted();
            this.player_.volume(this.player_.volume() - 0.1);
        };

        /**
         * Update ARIA accessibility attributes
         *
         * @param {EventTarget~Event} [event]
         *        The `volumechange` event that caused this function to run.
         *
         * @listens Player#volumechange
         */


        VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
            var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();

            this.el_.setAttribute('aria-valuenow', ariaValue);
            this.el_.setAttribute('aria-valuetext', ariaValue + '%');
        };

        /**
         * Returns the current value of the player volume as a percentage
         *
         * @private
         */


        VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {
            return Math.round(this.player_.volume() * 100);
        };

        /**
         * When user starts dragging the VolumeBar, store the volume and listen for
         * the end of the drag. When the drag ends, if the volume was set to zero,
         * set lastVolume to the stored volume.
         *
         * @listens slideractive
         * @private
         */


        VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {
            var _this2 = this;

            var volumeBeforeDrag = this.player_.volume();

            this.one('sliderinactive', function () {
                if (_this2.player_.volume() === 0) {
                    _this2.player_.lastVolume_(volumeBeforeDrag);
                }
            });
        };

        return VolumeBar;
    }(Slider);

    /**
     * Default options for the `VolumeBar`
     *
     * @type {Object}
     * @private
     */


    VolumeBar.prototype.options_ = {
        children: ['volumeLevel'],
        barName: 'volumeLevel'
    };

    /**
     * Call the update event for this Slider when this event happens on the player.
     *
     * @type {string}
     */
    VolumeBar.prototype.playerEvent = 'volumechange';

    Component.registerComponent('VolumeBar', VolumeBar);

    /**
     * @file volume-control.js
     */
// Required children
    /**
     * The component for controlling the volume level
     *
     * @extends Component
     */

    var VolumeControl = function (_Component) {
        inherits(VolumeControl, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         */
        function VolumeControl(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, VolumeControl);

            options.vertical = options.vertical || false;

            // Pass the vertical option down to the VolumeBar if
            // the VolumeBar is turned on.
            if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
                options.volumeBar = options.volumeBar || {};
                options.volumeBar.vertical = options.vertical;
            }

            // hide this control if volume support is missing
            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            checkVolumeSupport(_this, player);

            _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);

            _this.on('mousedown', _this.handleMouseDown);
            _this.on('touchstart', _this.handleMouseDown);

            // while the slider is active (the mouse has been pressed down and
            // is dragging) or in focus we do not want to hide the VolumeBar
            _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {
                _this.volumeBar.addClass('vjs-slider-active');
                _this.addClass('vjs-slider-active');
                _this.trigger('slideractive');
            });

            _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {
                _this.volumeBar.removeClass('vjs-slider-active');
                _this.removeClass('vjs-slider-active');
                _this.trigger('sliderinactive');
            });
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        VolumeControl.prototype.createEl = function createEl() {
            var orientationClass = 'vjs-volume-horizontal';

            if (this.options_.vertical) {
                orientationClass = 'vjs-volume-vertical';
            }

            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-control vjs-control ' + orientationClass
            });
        };

        /**
         * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
         *
         * @param {EventTarget~Event} event
         *        `mousedown` or `touchstart` event that triggered this function
         *
         * @listens mousedown
         * @listens touchstart
         */


        VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {
            var doc = this.el_.ownerDocument;

            this.on(doc, 'mousemove', this.throttledHandleMouseMove);
            this.on(doc, 'touchmove', this.throttledHandleMouseMove);
            this.on(doc, 'mouseup', this.handleMouseUp);
            this.on(doc, 'touchend', this.handleMouseUp);
        };

        /**
         * Handle `mouseup` or `touchend` events on the `VolumeControl`.
         *
         * @param {EventTarget~Event} event
         *        `mouseup` or `touchend` event that triggered this function.
         *
         * @listens touchend
         * @listens mouseup
         */


        VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {
            var doc = this.el_.ownerDocument;

            this.off(doc, 'mousemove', this.throttledHandleMouseMove);
            this.off(doc, 'touchmove', this.throttledHandleMouseMove);
            this.off(doc, 'mouseup', this.handleMouseUp);
            this.off(doc, 'touchend', this.handleMouseUp);
        };

        /**
         * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
         *
         * @param {EventTarget~Event} event
         *        `mousedown` or `touchstart` event that triggered this function
         *
         * @listens mousedown
         * @listens touchstart
         */


        VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {
            this.volumeBar.handleMouseMove(event);
        };

        return VolumeControl;
    }(Component);

    /**
     * Default options for the `VolumeControl`
     *
     * @type {Object}
     * @private
     */


    VolumeControl.prototype.options_ = {
        children: ['volumeBar']
    };

    Component.registerComponent('VolumeControl', VolumeControl);

    /**
     * @file mute-toggle.js
     */
    /**
     * A button component for muting the audio.
     *
     * @extends Button
     */

    var MuteToggle = function (_Button) {
        inherits(MuteToggle, _Button);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function MuteToggle(player, options) {
            classCallCheck(this, MuteToggle);

            // hide this control if volume support is missing
            var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

            checkVolumeSupport(_this, player);

            _this.on(player, ['loadstart', 'volumechange'], _this.update);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
        };

        /**
         * This gets called when an `MuteToggle` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        MuteToggle.prototype.handleClick = function handleClick(event) {
            var vol = this.player_.volume();
            var lastVolume = this.player_.lastVolume_();

            if (vol === 0) {
                var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;

                this.player_.volume(volumeToSet);
                this.player_.muted(false);
            } else {
                this.player_.muted(this.player_.muted() ? false : true);
            }
        };

        /**
         * Update the `MuteToggle` button based on the state of `volume` and `muted`
         * on the player.
         *
         * @param {EventTarget~Event} [event]
         *        The {@link Player#loadstart} event if this function was called
         *        through an event.
         *
         * @listens Player#loadstart
         * @listens Player#volumechange
         */


        MuteToggle.prototype.update = function update(event) {
            this.updateIcon_();
            this.updateControlText_();
        };

        /**
         * Update the appearance of the `MuteToggle` icon.
         *
         * Possible states (given `level` variable below):
         * - 0: crossed out
         * - 1: zero bars of volume
         * - 2: one bar of volume
         * - 3: two bars of volume
         *
         * @private
         */


        MuteToggle.prototype.updateIcon_ = function updateIcon_() {
            var vol = this.player_.volume();
            var level = 3;

            if (vol === 0 || this.player_.muted()) {
                level = 0;
            } else if (vol < 0.33) {
                level = 1;
            } else if (vol < 0.67) {
                level = 2;
            }

            // TODO improve muted icon classes
            for (var i = 0; i < 4; i++) {
                removeClass(this.el_, 'vjs-vol-' + i);
            }
            addClass(this.el_, 'vjs-vol-' + level);
        };

        /**
         * If `muted` has changed on the player, update the control text
         * (`title` attribute on `vjs-mute-control` element and content of
         * `vjs-control-text` element).
         *
         * @private
         */


        MuteToggle.prototype.updateControlText_ = function updateControlText_() {
            var soundOff = this.player_.muted() || this.player_.volume() === 0;
            var text = soundOff ? 'Unmute' : 'Mute';

            if (this.controlText() !== text) {
                this.controlText(text);
            }
        };

        return MuteToggle;
    }(Button);

    /**
     * The text that should display over the `MuteToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    MuteToggle.prototype.controlText_ = 'Mute';

    Component.registerComponent('MuteToggle', MuteToggle);

    /**
     * @file volume-control.js
     */
// Required children
    /**
     * A Component to contain the MuteToggle and VolumeControl so that
     * they can work together.
     *
     * @extends Component
     */

    var VolumePanel = function (_Component) {
        inherits(VolumePanel, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         */
        function VolumePanel(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, VolumePanel);

            if (typeof options.inline !== 'undefined') {
                options.inline = options.inline;
            } else {
                options.inline = true;
            }

            // pass the inline option down to the VolumeControl as vertical if
            // the VolumeControl is on.
            if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
                options.volumeControl = options.volumeControl || {};
                options.volumeControl.vertical = !options.inline;
            }

            // hide this control if volume support is missing
            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            checkVolumeSupport(_this, player);

            // while the slider is active (the mouse has been pressed down and
            // is dragging) we do not want to hide the VolumeBar
            _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);

            _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);
            return _this;
        }

        /**
         * Add vjs-slider-active class to the VolumePanel
         *
         * @listens VolumeControl#slideractive
         * @private
         */


        VolumePanel.prototype.sliderActive_ = function sliderActive_() {
            this.addClass('vjs-slider-active');
        };

        /**
         * Removes vjs-slider-active class to the VolumePanel
         *
         * @listens VolumeControl#sliderinactive
         * @private
         */


        VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {
            this.removeClass('vjs-slider-active');
        };

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        VolumePanel.prototype.createEl = function createEl() {
            var orientationClass = 'vjs-volume-panel-horizontal';

            if (!this.options_.inline) {
                orientationClass = 'vjs-volume-panel-vertical';
            }

            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-volume-panel vjs-control ' + orientationClass
            });
        };

        return VolumePanel;
    }(Component);

    /**
     * Default options for the `VolumeControl`
     *
     * @type {Object}
     * @private
     */


    VolumePanel.prototype.options_ = {
        children: ['muteToggle', 'volumeControl']
    };

    Component.registerComponent('VolumePanel', VolumePanel);

    /**
     * @file menu.js
     */
    /**
     * The Menu component is used to build popup menus, including subtitle and
     * captions selection menus.
     *
     * @extends Component
     */

    var Menu = function (_Component) {
        inherits(Menu, _Component);

        /**
         * Create an instance of this class.
         *
         * @param {Player} player
         *        the player that this component should attach to
         *
         * @param {Object} [options]
         *        Object of option names and values
         *
         */
        function Menu(player, options) {
            classCallCheck(this, Menu);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            if (options) {
                _this.menuButton_ = options.menuButton;
            }

            _this.focusedChild_ = -1;

            _this.on('keydown', _this.handleKeyPress);
            return _this;
        }

        /**
         * Add a {@link MenuItem} to the menu.
         *
         * @param {Object|string} component
         *        The name or instance of the `MenuItem` to add.
         *
         */


        Menu.prototype.addItem = function addItem(component) {
            this.addChild(component);
            component.on('click', bind(this, function (event) {
                // Unpress the associated MenuButton, and move focus back to it
                if (this.menuButton_) {
                    this.menuButton_.unpressButton();

                    // don't focus menu button if item is a caption settings item
                    // because focus will move elsewhere and it logs an error on IE8
                    if (component.name() !== 'CaptionSettingsMenuItem') {
                        this.menuButton_.focus();
                    }
                }
            }));
        };

        /**
         * Create the `Menu`s DOM element.
         *
         * @return {Element}
         *         the element that was created
         */


        Menu.prototype.createEl = function createEl$$1() {
            var contentElType = this.options_.contentElType || 'ul';

            this.contentEl_ = createEl(contentElType, {
                className: 'vjs-menu-content'
            });

            this.contentEl_.setAttribute('role', 'menu');

            var el = _Component.prototype.createEl.call(this, 'div', {
                append: this.contentEl_,
                className: 'vjs-menu'
            });

            el.appendChild(this.contentEl_);

            // Prevent clicks from bubbling up. Needed for Menu Buttons,
            // where a click on the parent is significant
            on(el, 'click', function (event) {
                event.preventDefault();
                event.stopImmediatePropagation();
            });

            return el;
        };

        Menu.prototype.dispose = function dispose() {
            this.contentEl_ = null;

            _Component.prototype.dispose.call(this);
        };

        /**
         * Handle a `keydown` event on this menu. This listener is added in the constructor.
         *
         * @param {EventTarget~Event} event
         *        A `keydown` event that happened on the menu.
         *
         * @listens keydown
         */


        Menu.prototype.handleKeyPress = function handleKeyPress(event) {
            // Left and Down Arrows
            if (event.which === 37 || event.which === 40) {
                event.preventDefault();
                this.stepForward();

                // Up and Right Arrows
            } else if (event.which === 38 || event.which === 39) {
                event.preventDefault();
                this.stepBack();
            }
        };

        /**
         * Move to next (lower) menu item for keyboard users.
         */


        Menu.prototype.stepForward = function stepForward() {
            var stepChild = 0;

            if (this.focusedChild_ !== undefined) {
                stepChild = this.focusedChild_ + 1;
            }
            this.focus(stepChild);
        };

        /**
         * Move to previous (higher) menu item for keyboard users.
         */


        Menu.prototype.stepBack = function stepBack() {
            var stepChild = 0;

            if (this.focusedChild_ !== undefined) {
                stepChild = this.focusedChild_ - 1;
            }
            this.focus(stepChild);
        };

        /**
         * Set focus on a {@link MenuItem} in the `Menu`.
         *
         * @param {Object|string} [item=0]
         *        Index of child item set focus on.
         */


        Menu.prototype.focus = function focus() {
            var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var children = this.children().slice();
            var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

            if (haveTitle) {
                children.shift();
            }

            if (children.length > 0) {
                if (item < 0) {
                    item = 0;
                } else if (item >= children.length) {
                    item = children.length - 1;
                }

                this.focusedChild_ = item;

                children[item].el_.focus();
            }
        };

        return Menu;
    }(Component);

    Component.registerComponent('Menu', Menu);

    /**
     * @file menu-button.js
     */
    /**
     * A `MenuButton` class for any popup {@link Menu}.
     *
     * @extends Component
     */

    var MenuButton = function (_Component) {
        inherits(MenuButton, _Component);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         */
        function MenuButton(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, MenuButton);

            var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

            _this.menuButton_ = new Button(player, options);

            _this.menuButton_.controlText(_this.controlText_);
            _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');

            // Add buildCSSClass values to the button, not the wrapper
            var buttonClass = Button.prototype.buildCSSClass();

            _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;
            _this.menuButton_.removeClass('vjs-control');

            _this.addChild(_this.menuButton_);

            _this.update();

            _this.enabled_ = true;

            _this.on(_this.menuButton_, 'tap', _this.handleClick);
            _this.on(_this.menuButton_, 'click', _this.handleClick);
            _this.on(_this.menuButton_, 'focus', _this.handleFocus);
            _this.on(_this.menuButton_, 'blur', _this.handleBlur);

            _this.on('keydown', _this.handleSubmenuKeyPress);
            return _this;
        }

        /**
         * Update the menu based on the current state of its items.
         */


        MenuButton.prototype.update = function update() {
            var menu = this.createMenu();

            if (this.menu) {
                this.menu.dispose();
                this.removeChild(this.menu);
            }

            this.menu = menu;
            this.addChild(menu);

            /**
             * Track the state of the menu button
             *
             * @type {Boolean}
             * @private
             */
            this.buttonPressed_ = false;
            this.menuButton_.el_.setAttribute('aria-expanded', 'false');

            if (this.items && this.items.length <= this.hideThreshold_) {
                this.hide();
            } else {
                this.show();
            }
        };

        /**
         * Create the menu and add all items to it.
         *
         * @return {Menu}
         *         The constructed menu
         */


        MenuButton.prototype.createMenu = function createMenu() {
            var menu = new Menu(this.player_, { menuButton: this });

            /**
             * Hide the menu if the number of items is less than or equal to this threshold. This defaults
             * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
             * it here because every time we run `createMenu` we need to reset the value.
             *
             * @protected
             * @type {Number}
             */
            this.hideThreshold_ = 0;

            // Add a title list item to the top
            if (this.options_.title) {
                var title = createEl('li', {
                    className: 'vjs-menu-title',
                    innerHTML: toTitleCase(this.options_.title),
                    tabIndex: -1
                });

                this.hideThreshold_ += 1;

                menu.children_.unshift(title);
                prependTo(title, menu.contentEl());
            }

            this.items = this.createItems();

            if (this.items) {
                // Add menu items to the menu
                for (var i = 0; i < this.items.length; i++) {
                    menu.addItem(this.items[i]);
                }
            }

            return menu;
        };

        /**
         * Create the list of menu items. Specific to each subclass.
         *
         * @abstract
         */


        MenuButton.prototype.createItems = function createItems() {};

        /**
         * Create the `MenuButtons`s DOM element.
         *
         * @return {Element}
         *         The element that gets created.
         */


        MenuButton.prototype.createEl = function createEl$$1() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: this.buildWrapperCSSClass()
            }, {});
        };

        /**
         * Allow sub components to stack CSS class names for the wrapper element
         *
         * @return {string}
         *         The constructed wrapper DOM `className`
         */


        MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            var menuButtonClass = 'vjs-menu-button';

            // If the inline option is passed, we want to use different styles altogether.
            if (this.options_.inline === true) {
                menuButtonClass += '-inline';
            } else {
                menuButtonClass += '-popup';
            }

            // TODO: Fix the CSS so that this isn't necessary
            var buttonClass = Button.prototype.buildCSSClass();

            return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        MenuButton.prototype.buildCSSClass = function buildCSSClass() {
            var menuButtonClass = 'vjs-menu-button';

            // If the inline option is passed, we want to use different styles altogether.
            if (this.options_.inline === true) {
                menuButtonClass += '-inline';
            } else {
                menuButtonClass += '-popup';
            }

            return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Get or set the localized control text that will be used for accessibility.
         *
         * > NOTE: This will come from the internal `menuButton_` element.
         *
         * @param {string} [text]
         *        Control text for element.
         *
         * @param {Element} [el=this.menuButton_.el()]
         *        Element to set the title on.
         *
         * @return {string}
         *         - The control text when getting
         */


        MenuButton.prototype.controlText = function controlText(text) {
            var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();

            return this.menuButton_.controlText(text, el);
        };

        /**
         * Handle a click on a `MenuButton`.
         * See {@link ClickableComponent#handleClick} for instances where this is called.
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        MenuButton.prototype.handleClick = function handleClick(event) {
            // When you click the button it adds focus, which will show the menu.
            // So we'll remove focus when the mouse leaves the button. Focus is needed
            // for tab navigation.

            this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {
                this.unpressButton();
                this.el_.blur();
            }));
            if (this.buttonPressed_) {
                this.unpressButton();
            } else {
                this.pressButton();
            }
        };

        /**
         * Set the focus to the actual button, not to this element
         */


        MenuButton.prototype.focus = function focus() {
            this.menuButton_.focus();
        };

        /**
         * Remove the focus from the actual button, not this element
         */


        MenuButton.prototype.blur = function blur() {
            this.menuButton_.blur();
        };

        /**
         * This gets called when a `MenuButton` gains focus via a `focus` event.
         * Turns on listening for `keydown` events. When they happen it
         * calls `this.handleKeyPress`.
         *
         * @param {EventTarget~Event} event
         *        The `focus` event that caused this function to be called.
         *
         * @listens focus
         */


        MenuButton.prototype.handleFocus = function handleFocus() {
            on(document_1, 'keydown', bind(this, this.handleKeyPress));
        };

        /**
         * Called when a `MenuButton` loses focus. Turns off the listener for
         * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
         *
         * @param {EventTarget~Event} event
         *        The `blur` event that caused this function to be called.
         *
         * @listens blur
         */


        MenuButton.prototype.handleBlur = function handleBlur() {
            off(document_1, 'keydown', bind(this, this.handleKeyPress));
        };

        /**
         * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
         * {@link ClickableComponent#handleKeyPress} for instances where this is called.
         *
         * @param {EventTarget~Event} event
         *        The `keydown` event that caused this function to be called.
         *
         * @listens keydown
         */


        MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

            // Escape (27) key or Tab (9) key unpress the 'button'
            if (event.which === 27 || event.which === 9) {
                if (this.buttonPressed_) {
                    this.unpressButton();
                }
                // Don't preventDefault for Tab key - we still want to lose focus
                if (event.which !== 9) {
                    event.preventDefault();
                    // Set focus back to the menu button's button
                    this.menuButton_.el_.focus();
                }
                // Up (38) key or Down (40) key press the 'button'
            } else if (event.which === 38 || event.which === 40) {
                if (!this.buttonPressed_) {
                    this.pressButton();
                    event.preventDefault();
                }
            }
        };

        /**
         * Handle a `keydown` event on a sub-menu. The listener for this is added in
         * the constructor.
         *
         * @param {EventTarget~Event} event
         *        Key press event
         *
         * @listens keydown
         */


        MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

            // Escape (27) key or Tab (9) key unpress the 'button'
            if (event.which === 27 || event.which === 9) {
                if (this.buttonPressed_) {
                    this.unpressButton();
                }
                // Don't preventDefault for Tab key - we still want to lose focus
                if (event.which !== 9) {
                    event.preventDefault();
                    // Set focus back to the menu button's button
                    this.menuButton_.el_.focus();
                }
            }
        };

        /**
         * Put the current `MenuButton` into a pressed state.
         */


        MenuButton.prototype.pressButton = function pressButton() {
            if (this.enabled_) {
                this.buttonPressed_ = true;
                this.menu.lockShowing();
                this.menuButton_.el_.setAttribute('aria-expanded', 'true');

                // set the focus into the submenu, except on iOS where it is resulting in
                // undesired scrolling behavior when the player is in an iframe
                if (IS_IOS && isInFrame()) {
                    // Return early so that the menu isn't focused
                    return;
                }

                this.menu.focus();
            }
        };

        /**
         * Take the current `MenuButton` out of a pressed state.
         */


        MenuButton.prototype.unpressButton = function unpressButton() {
            if (this.enabled_) {
                this.buttonPressed_ = false;
                this.menu.unlockShowing();
                this.menuButton_.el_.setAttribute('aria-expanded', 'false');
            }
        };

        /**
         * Disable the `MenuButton`. Don't allow it to be clicked.
         */


        MenuButton.prototype.disable = function disable() {
            this.unpressButton();

            this.enabled_ = false;
            this.addClass('vjs-disabled');

            this.menuButton_.disable();
        };

        /**
         * Enable the `MenuButton`. Allow it to be clicked.
         */


        MenuButton.prototype.enable = function enable() {
            this.enabled_ = true;
            this.removeClass('vjs-disabled');

            this.menuButton_.enable();
        };

        return MenuButton;
    }(Component);

    Component.registerComponent('MenuButton', MenuButton);

    /**
     * @file track-button.js
     */
    /**
     * The base class for buttons that toggle specific  track types (e.g. subtitles).
     *
     * @extends MenuButton
     */

    var TrackButton = function (_MenuButton) {
        inherits(TrackButton, _MenuButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function TrackButton(player, options) {
            classCallCheck(this, TrackButton);

            var tracks = options.tracks;

            var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

            if (_this.items.length <= 1) {
                _this.hide();
            }

            if (!tracks) {
                return possibleConstructorReturn(_this);
            }

            var updateHandler = bind(_this, _this.update);

            tracks.addEventListener('removetrack', updateHandler);
            tracks.addEventListener('addtrack', updateHandler);
            _this.player_.on('ready', updateHandler);

            _this.player_.on('dispose', function () {
                tracks.removeEventListener('removetrack', updateHandler);
                tracks.removeEventListener('addtrack', updateHandler);
            });
            return _this;
        }

        return TrackButton;
    }(MenuButton);

    Component.registerComponent('TrackButton', TrackButton);

    /**
     * @file menu-item.js
     */
    /**
     * The component for a menu item. `<li>`
     *
     * @extends ClickableComponent
     */

    var MenuItem = function (_ClickableComponent) {
        inherits(MenuItem, _ClickableComponent);

        /**
         * Creates an instance of the this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         *
         */
        function MenuItem(player, options) {
            classCallCheck(this, MenuItem);

            var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

            _this.selectable = options.selectable;

            _this.selected(options.selected);

            if (_this.selectable) {
                // TODO: May need to be either menuitemcheckbox or menuitemradio,
                //       and may need logical grouping of menu items.
                _this.el_.setAttribute('role', 'menuitemcheckbox');
            } else {
                _this.el_.setAttribute('role', 'menuitem');
            }
            return _this;
        }

        /**
         * Create the `MenuItem's DOM element
         *
         * @param {string} [type=li]
         *        Element's node type, not actually used, always set to `li`.
         *
         * @param {Object} [props={}]
         *        An object of properties that should be set on the element
         *
         * @param {Object} [attrs={}]
         *        An object of attributes that should be set on the element
         *
         * @return {Element}
         *         The element that gets created.
         */


        MenuItem.prototype.createEl = function createEl(type, props, attrs) {
            // The control is textual, not just an icon
            this.nonIconControl = true;

            return _ClickableComponent.prototype.createEl.call(this, 'li', assign({
                className: 'vjs-menu-item',
                innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + '</span>',
                tabIndex: -1
            }, props), attrs);
        };

        /**
         * Any click on a `MenuItem` puts int into the selected state.
         * See {@link ClickableComponent#handleClick} for instances where this is called.
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        MenuItem.prototype.handleClick = function handleClick(event) {
            this.selected(true);
        };

        /**
         * Set the state for this menu item as selected or not.
         *
         * @param {boolean} selected
         *        if the menu item is selected or not
         */


        MenuItem.prototype.selected = function selected(_selected) {
            if (this.selectable) {
                if (_selected) {
                    this.addClass('vjs-selected');
                    this.el_.setAttribute('aria-checked', 'true');
                    // aria-checked isn't fully supported by browsers/screen readers,
                    // so indicate selected state to screen reader in the control text.
                    this.controlText(', selected');
                } else {
                    this.removeClass('vjs-selected');
                    this.el_.setAttribute('aria-checked', 'false');
                    // Indicate un-selected state to screen reader
                    this.controlText('');
                }
            }
        };

        return MenuItem;
    }(ClickableComponent);

    Component.registerComponent('MenuItem', MenuItem);

    /**
     * @file text-track-menu-item.js
     */
    /**
     * The specific menu item type for selecting a language within a text track kind
     *
     * @extends MenuItem
     */

    var TextTrackMenuItem = function (_MenuItem) {
        inherits(TextTrackMenuItem, _MenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function TextTrackMenuItem(player, options) {
            classCallCheck(this, TextTrackMenuItem);

            var track = options.track;
            var tracks = player.textTracks();

            // Modify options for parent MenuItem class's init.
            options.label = track.label || track.language || 'Unknown';
            options.selected = track.mode === 'showing';

            var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

            _this.track = track;
            var changeHandler = function changeHandler() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                _this.handleTracksChange.apply(_this, args);
            };
            var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                _this.handleSelectedLanguageChange.apply(_this, args);
            };

            player.on(['loadstart', 'texttrackchange'], changeHandler);
            tracks.addEventListener('change', changeHandler);
            tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
            _this.on('dispose', function () {
                player.off(['loadstart', 'texttrackchange'], changeHandler);
                tracks.removeEventListener('change', changeHandler);
                tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
            });

            // iOS7 doesn't dispatch change events to TextTrackLists when an
            // associated track's mode changes. Without something like
            // Object.observe() (also not present on iOS7), it's not
            // possible to detect changes to the mode attribute and polyfill
            // the change event. As a poor substitute, we manually dispatch
            // change events whenever the controls modify the mode.
            if (tracks.onchange === undefined) {
                var event = void 0;

                _this.on(['tap', 'click'], function () {
                    if (_typeof(window_1.Event) !== 'object') {
                        // Android 2.3 throws an Illegal Constructor error for window.Event
                        try {
                            event = new window_1.Event('change');
                        } catch (err) {
                            // continue regardless of error
                        }
                    }

                    if (!event) {
                        event = document_1.createEvent('Event');
                        event.initEvent('change', true, true);
                    }

                    tracks.dispatchEvent(event);
                });
            }

            // set the default state based on current tracks
            _this.handleTracksChange();
            return _this;
        }

        /**
         * This gets called when an `TextTrackMenuItem` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} event
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
            var kind = this.track.kind;
            var kinds = this.track.kinds;
            var tracks = this.player_.textTracks();

            if (!kinds) {
                kinds = [kind];
            }

            _MenuItem.prototype.handleClick.call(this, event);

            if (!tracks) {
                return;
            }

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                if (track === this.track && kinds.indexOf(track.kind) > -1) {
                    if (track.mode !== 'showing') {
                        track.mode = 'showing';
                    }
                } else if (track.mode !== 'disabled') {
                    track.mode = 'disabled';
                }
            }
        };

        /**
         * Handle text track list change
         *
         * @param {EventTarget~Event} event
         *        The `change` event that caused this function to be called.
         *
         * @listens TextTrackList#change
         */


        TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            this.selected(this.track.mode === 'showing');
        };

        TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
            if (this.track.mode === 'showing') {
                var selectedLanguage = this.player_.cache_.selectedLanguage;

                // Don't replace the kind of track across the same language
                if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
                    return;
                }

                this.player_.cache_.selectedLanguage = {
                    enabled: true,
                    language: this.track.language,
                    kind: this.track.kind
                };
            }
        };

        TextTrackMenuItem.prototype.dispose = function dispose() {
            // remove reference to track object on dispose
            this.track = null;

            _MenuItem.prototype.dispose.call(this);
        };

        return TextTrackMenuItem;
    }(MenuItem);

    Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);

    /**
     * @file off-text-track-menu-item.js
     */
    /**
     * A special menu item for turning of a specific type of text track
     *
     * @extends TextTrackMenuItem
     */

    var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
        inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function OffTextTrackMenuItem(player, options) {
            classCallCheck(this, OffTextTrackMenuItem);

            // Create pseudo track info
            // Requires options['kind']
            options.track = {
                player: player,
                kind: options.kind,
                kinds: options.kinds,
                'default': false,
                mode: 'disabled'
            };

            if (!options.kinds) {
                options.kinds = [options.kind];
            }

            if (options.label) {
                options.track.label = options.label;
            } else {
                options.track.label = options.kinds.join(' and ') + ' off';
            }

            // MenuItem is selectable
            options.selectable = true;

            return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
        }

        /**
         * Handle text track change
         *
         * @param {EventTarget~Event} event
         *        The event that caused this function to run
         */


        OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            var tracks = this.player().textTracks();
            var selected = true;

            for (var i = 0, l = tracks.length; i < l; i++) {
                var track = tracks[i];

                if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
                    selected = false;
                    break;
                }
            }

            this.selected(selected);
        };

        OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
            var tracks = this.player().textTracks();
            var allHidden = true;

            for (var i = 0, l = tracks.length; i < l; i++) {
                var track = tracks[i];

                if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
                    allHidden = false;
                    break;
                }
            }

            if (allHidden) {
                this.player_.cache_.selectedLanguage = {
                    enabled: false
                };
            }
        };

        return OffTextTrackMenuItem;
    }(TextTrackMenuItem);

    Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);

    /**
     * @file text-track-button.js
     */
    /**
     * The base class for buttons that toggle specific text track types (e.g. subtitles)
     *
     * @extends MenuButton
     */

    var TextTrackButton = function (_TrackButton) {
        inherits(TextTrackButton, _TrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         */
        function TextTrackButton(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, TextTrackButton);

            options.tracks = player.textTracks();

            return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
        }

        /**
         * Create a menu item for each text track
         *
         * @param {TextTrackMenuItem[]} [items=[]]
         *        Existing array of items to use during creation
         *
         * @return {TextTrackMenuItem[]}
         *         Array of menu items that were created
         */


        TextTrackButton.prototype.createItems = function createItems() {
            var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;


            // Label is an overide for the [track] off label
            // USed to localise captions/subtitles
            var label = void 0;

            if (this.label_) {
                label = this.label_ + ' off';
            }
            // Add an OFF menu item to turn all tracks off
            items.push(new OffTextTrackMenuItem(this.player_, {
                kinds: this.kinds_,
                kind: this.kind_,
                label: label
            }));

            this.hideThreshold_ += 1;

            var tracks = this.player_.textTracks();

            if (!Array.isArray(this.kinds_)) {
                this.kinds_ = [this.kind_];
            }

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                // only add tracks that are of an appropriate kind and have a label
                if (this.kinds_.indexOf(track.kind) > -1) {

                    var item = new TrackMenuItem(this.player_, {
                        track: track,
                        // MenuItem is selectable
                        selectable: true
                    });

                    item.addClass('vjs-' + track.kind + '-menu-item');
                    items.push(item);
                }
            }

            return items;
        };

        return TextTrackButton;
    }(TrackButton);

    Component.registerComponent('TextTrackButton', TextTrackButton);

    /**
     * @file chapters-track-menu-item.js
     */
    /**
     * The chapter track menu item
     *
     * @extends MenuItem
     */

    var ChaptersTrackMenuItem = function (_MenuItem) {
        inherits(ChaptersTrackMenuItem, _MenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function ChaptersTrackMenuItem(player, options) {
            classCallCheck(this, ChaptersTrackMenuItem);

            var track = options.track;
            var cue = options.cue;
            var currentTime = player.currentTime();

            // Modify options for parent MenuItem class's init.
            options.selectable = true;
            options.label = cue.text;
            options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

            var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

            _this.track = track;
            _this.cue = cue;
            track.addEventListener('cuechange', bind(_this, _this.update));
            return _this;
        }

        /**
         * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
            _MenuItem.prototype.handleClick.call(this);
            this.player_.currentTime(this.cue.startTime);
            this.update(this.cue.startTime);
        };

        /**
         * Update chapter menu item
         *
         * @param {EventTarget~Event} [event]
         *        The `cuechange` event that caused this function to run.
         *
         * @listens TextTrack#cuechange
         */


        ChaptersTrackMenuItem.prototype.update = function update(event) {
            var cue = this.cue;
            var currentTime = this.player_.currentTime();

            // vjs.log(currentTime, cue.startTime);
            this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
        };

        return ChaptersTrackMenuItem;
    }(MenuItem);

    Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);

    /**
     * @file chapters-button.js
     */
    /**
     * The button component for toggling and selecting chapters
     * Chapters act much differently than other text tracks
     * Cues are navigation vs. other tracks of alternative languages
     *
     * @extends TextTrackButton
     */

    var ChaptersButton = function (_TextTrackButton) {
        inherits(ChaptersButton, _TextTrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function to call when this function is ready.
         */
        function ChaptersButton(player, options, ready) {
            classCallCheck(this, ChaptersButton);
            return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        /**
         * Update the menu based on the current state of its items.
         *
         * @param {EventTarget~Event} [event]
         *        An event that triggered this function to run.
         *
         * @listens TextTrackList#addtrack
         * @listens TextTrackList#removetrack
         * @listens TextTrackList#change
         */


        ChaptersButton.prototype.update = function update(event) {
            if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
                this.setTrack(this.findChaptersTrack());
            }
            _TextTrackButton.prototype.update.call(this);
        };

        /**
         * Set the currently selected track for the chapters button.
         *
         * @param {TextTrack} track
         *        The new track to select. Nothing will change if this is the currently selected
         *        track.
         */


        ChaptersButton.prototype.setTrack = function setTrack(track) {
            if (this.track_ === track) {
                return;
            }

            if (!this.updateHandler_) {
                this.updateHandler_ = this.update.bind(this);
            }

            // here this.track_ refers to the old track instance
            if (this.track_) {
                var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

                if (remoteTextTrackEl) {
                    remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
                }

                this.track_ = null;
            }

            this.track_ = track;

            // here this.track_ refers to the new track instance
            if (this.track_) {
                this.track_.mode = 'hidden';

                var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

                if (_remoteTextTrackEl) {
                    _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
                }
            }
        };

        /**
         * Find the track object that is currently in use by this ChaptersButton
         *
         * @return {TextTrack|undefined}
         *         The current track or undefined if none was found.
         */


        ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
            var tracks = this.player_.textTracks() || [];

            for (var i = tracks.length - 1; i >= 0; i--) {
                // We will always choose the last track as our chaptersTrack
                var track = tracks[i];

                if (track.kind === this.kind_) {
                    return track;
                }
            }
        };

        /**
         * Get the caption for the ChaptersButton based on the track label. This will also
         * use the current tracks localized kind as a fallback if a label does not exist.
         *
         * @return {string}
         *         The tracks current label or the localized track kind.
         */


        ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
            if (this.track_ && this.track_.label) {
                return this.track_.label;
            }
            return this.localize(toTitleCase(this.kind_));
        };

        /**
         * Create menu from chapter track
         *
         * @return {Menu}
         *         New menu for the chapter buttons
         */


        ChaptersButton.prototype.createMenu = function createMenu() {
            this.options_.title = this.getMenuCaption();
            return _TextTrackButton.prototype.createMenu.call(this);
        };

        /**
         * Create a menu item for each text track
         *
         * @return {TextTrackMenuItem[]}
         *         Array of menu items
         */


        ChaptersButton.prototype.createItems = function createItems() {
            var items = [];

            if (!this.track_) {
                return items;
            }

            var cues = this.track_.cues;

            if (!cues) {
                return items;
            }

            for (var i = 0, l = cues.length; i < l; i++) {
                var cue = cues[i];
                var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });

                items.push(mi);
            }

            return items;
        };

        return ChaptersButton;
    }(TextTrackButton);

    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */


    ChaptersButton.prototype.kind_ = 'chapters';

    /**
     * The text that should display over the `ChaptersButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    ChaptersButton.prototype.controlText_ = 'Chapters';

    Component.registerComponent('ChaptersButton', ChaptersButton);

    /**
     * @file descriptions-button.js
     */
    /**
     * The button component for toggling and selecting descriptions
     *
     * @extends TextTrackButton
     */

    var DescriptionsButton = function (_TextTrackButton) {
        inherits(DescriptionsButton, _TextTrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function to call when this component is ready.
         */
        function DescriptionsButton(player, options, ready) {
            classCallCheck(this, DescriptionsButton);

            var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

            var tracks = player.textTracks();
            var changeHandler = bind(_this, _this.handleTracksChange);

            tracks.addEventListener('change', changeHandler);
            _this.on('dispose', function () {
                tracks.removeEventListener('change', changeHandler);
            });
            return _this;
        }

        /**
         * Handle text track change
         *
         * @param {EventTarget~Event} event
         *        The event that caused this function to run
         *
         * @listens TextTrackList#change
         */


        DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
            var tracks = this.player().textTracks();
            var disabled = false;

            // Check whether a track of a different kind is showing
            for (var i = 0, l = tracks.length; i < l; i++) {
                var track = tracks[i];

                if (track.kind !== this.kind_ && track.mode === 'showing') {
                    disabled = true;
                    break;
                }
            }

            // If another track is showing, disable this menu button
            if (disabled) {
                this.disable();
            } else {
                this.enable();
            }
        };

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        return DescriptionsButton;
    }(TextTrackButton);

    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */


    DescriptionsButton.prototype.kind_ = 'descriptions';

    /**
     * The text that should display over the `DescriptionsButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    DescriptionsButton.prototype.controlText_ = 'Descriptions';

    Component.registerComponent('DescriptionsButton', DescriptionsButton);

    /**
     * @file subtitles-button.js
     */
    /**
     * The button component for toggling and selecting subtitles
     *
     * @extends TextTrackButton
     */

    var SubtitlesButton = function (_TextTrackButton) {
        inherits(SubtitlesButton, _TextTrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function to call when this component is ready.
         */
        function SubtitlesButton(player, options, ready) {
            classCallCheck(this, SubtitlesButton);
            return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        return SubtitlesButton;
    }(TextTrackButton);

    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */


    SubtitlesButton.prototype.kind_ = 'subtitles';

    /**
     * The text that should display over the `SubtitlesButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    SubtitlesButton.prototype.controlText_ = 'Subtitles';

    Component.registerComponent('SubtitlesButton', SubtitlesButton);

    /**
     * @file caption-settings-menu-item.js
     */
    /**
     * The menu item for caption track settings menu
     *
     * @extends TextTrackMenuItem
     */

    var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
        inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function CaptionSettingsMenuItem(player, options) {
            classCallCheck(this, CaptionSettingsMenuItem);

            options.track = {
                player: player,
                kind: options.kind,
                label: options.kind + ' settings',
                selectable: false,
                'default': false,
                mode: 'disabled'
            };

            // CaptionSettingsMenuItem has no concept of 'selected'
            options.selectable = false;

            options.name = 'CaptionSettingsMenuItem';

            var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

            _this.addClass('vjs-texttrack-settings');
            _this.controlText(', opens ' + options.kind + ' settings dialog');
            return _this;
        }

        /**
         * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
            this.player().getChild('textTrackSettings').open();
        };

        return CaptionSettingsMenuItem;
    }(TextTrackMenuItem);

    Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);

    /**
     * @file captions-button.js
     */
    /**
     * The button component for toggling and selecting captions
     *
     * @extends TextTrackButton
     */

    var CaptionsButton = function (_TextTrackButton) {
        inherits(CaptionsButton, _TextTrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} [ready]
         *        The function to call when this component is ready.
         */
        function CaptionsButton(player, options, ready) {
            classCallCheck(this, CaptionsButton);
            return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        /**
         * Create caption menu items
         *
         * @return {CaptionSettingsMenuItem[]}
         *         The array of current menu items.
         */


        CaptionsButton.prototype.createItems = function createItems() {
            var items = [];

            if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
                items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));

                this.hideThreshold_ += 1;
            }

            return _TextTrackButton.prototype.createItems.call(this, items);
        };

        return CaptionsButton;
    }(TextTrackButton);

    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */


    CaptionsButton.prototype.kind_ = 'captions';

    /**
     * The text that should display over the `CaptionsButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    CaptionsButton.prototype.controlText_ = 'Captions';

    Component.registerComponent('CaptionsButton', CaptionsButton);

    /**
     * @file subs-caps-menu-item.js
     */
    /**
     * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
     * in the SubsCapsMenu.
     *
     * @extends TextTrackMenuItem
     */

    var SubsCapsMenuItem = function (_TextTrackMenuItem) {
        inherits(SubsCapsMenuItem, _TextTrackMenuItem);

        function SubsCapsMenuItem() {
            classCallCheck(this, SubsCapsMenuItem);
            return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));
        }

        SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {
            var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);

            if (this.options_.track.kind === 'captions') {
                innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize('Captions') + '</span>\n      ';
            }

            innerHTML += '</span>';

            var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({
                innerHTML: innerHTML
            }, props), attrs);

            return el;
        };

        return SubsCapsMenuItem;
    }(TextTrackMenuItem);

    Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);

    /**
     * @file sub-caps-button.js
     */
    /**
     * The button component for toggling and selecting captions and/or subtitles
     *
     * @extends TextTrackButton
     */

    var SubsCapsButton = function (_TextTrackButton) {
        inherits(SubsCapsButton, _TextTrackButton);

        function SubsCapsButton(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, SubsCapsButton);

            // Although North America uses "captions" in most cases for
            // "captions and subtitles" other locales use "subtitles"
            var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));

            _this.label_ = 'subtitles';
            if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
                _this.label_ = 'captions';
            }
            _this.menuButton_.controlText(toTitleCase(_this.label_));
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
        };

        SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        /**
         * Create caption/subtitles menu items
         *
         * @return {CaptionSettingsMenuItem[]}
         *         The array of current menu items.
         */


        SubsCapsButton.prototype.createItems = function createItems() {
            var items = [];

            if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
                items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));

                this.hideThreshold_ += 1;
            }

            items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
            return items;
        };

        return SubsCapsButton;
    }(TextTrackButton);

    /**
     * `kind`s of TextTrack to look for to associate it with this menu.
     *
     * @type {array}
     * @private
     */


    SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];

    /**
     * The text that should display over the `SubsCapsButton`s controls.
     *
     *
     * @type {string}
     * @private
     */
    SubsCapsButton.prototype.controlText_ = 'Subtitles';

    Component.registerComponent('SubsCapsButton', SubsCapsButton);

    /**
     * @file audio-track-menu-item.js
     */
    /**
     * An {@link AudioTrack} {@link MenuItem}
     *
     * @extends MenuItem
     */

    var AudioTrackMenuItem = function (_MenuItem) {
        inherits(AudioTrackMenuItem, _MenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function AudioTrackMenuItem(player, options) {
            classCallCheck(this, AudioTrackMenuItem);

            var track = options.track;
            var tracks = player.audioTracks();

            // Modify options for parent MenuItem class's init.
            options.label = track.label || track.language || 'Unknown';
            options.selected = track.enabled;

            var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

            _this.track = track;

            var changeHandler = function changeHandler() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                _this.handleTracksChange.apply(_this, args);
            };

            tracks.addEventListener('change', changeHandler);
            _this.on('dispose', function () {
                tracks.removeEventListener('change', changeHandler);
            });
            return _this;
        }

        /**
         * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
         * for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
            var tracks = this.player_.audioTracks();

            _MenuItem.prototype.handleClick.call(this, event);

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                track.enabled = track === this.track;
            }
        };

        /**
         * Handle any {@link AudioTrack} change.
         *
         * @param {EventTarget~Event} [event]
         *        The {@link AudioTrackList#change} event that caused this to run.
         *
         * @listens AudioTrackList#change
         */


        AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
            this.selected(this.track.enabled);
        };

        return AudioTrackMenuItem;
    }(MenuItem);

    Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);

    /**
     * @file audio-track-button.js
     */
    /**
     * The base class for buttons that toggle specific {@link AudioTrack} types.
     *
     * @extends TrackButton
     */

    var AudioTrackButton = function (_TrackButton) {
        inherits(AudioTrackButton, _TrackButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options={}]
         *        The key/value store of player options.
         */
        function AudioTrackButton(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            classCallCheck(this, AudioTrackButton);

            options.tracks = player.audioTracks();

            return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
        };

        AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
        };

        /**
         * Create a menu item for each audio track
         *
         * @param {AudioTrackMenuItem[]} [items=[]]
         *        An array of existing menu items to use.
         *
         * @return {AudioTrackMenuItem[]}
         *         An array of menu items
         */


        AudioTrackButton.prototype.createItems = function createItems() {
            var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            // if there's only one audio track, there no point in showing it
            this.hideThreshold_ = 1;

            var tracks = this.player_.audioTracks();

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                items.push(new AudioTrackMenuItem(this.player_, {
                    track: track,
                    // MenuItem is selectable
                    selectable: true
                }));
            }

            return items;
        };

        return AudioTrackButton;
    }(TrackButton);

    /**
     * The text that should display over the `AudioTrackButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    AudioTrackButton.prototype.controlText_ = 'Audio Track';
    Component.registerComponent('AudioTrackButton', AudioTrackButton);

    /**
     * @file playback-rate-menu-item.js
     */
    /**
     * The specific menu item type for selecting a playback rate.
     *
     * @extends MenuItem
     */

    var PlaybackRateMenuItem = function (_MenuItem) {
        inherits(PlaybackRateMenuItem, _MenuItem);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function PlaybackRateMenuItem(player, options) {
            classCallCheck(this, PlaybackRateMenuItem);

            var label = options.rate;
            var rate = parseFloat(label, 10);

            // Modify options for parent MenuItem class's init.
            options.label = label;
            options.selected = rate === 1;
            options.selectable = true;

            var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

            _this.label = label;
            _this.rate = rate;

            _this.on(player, 'ratechange', _this.update);
            return _this;
        }

        /**
         * This gets called when an `PlaybackRateMenuItem` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
            _MenuItem.prototype.handleClick.call(this);
            this.player().playbackRate(this.rate);
        };

        /**
         * Update the PlaybackRateMenuItem when the playbackrate changes.
         *
         * @param {EventTarget~Event} [event]
         *        The `ratechange` event that caused this function to run.
         *
         * @listens Player#ratechange
         */


        PlaybackRateMenuItem.prototype.update = function update(event) {
            this.selected(this.player().playbackRate() === this.rate);
        };

        return PlaybackRateMenuItem;
    }(MenuItem);

    /**
     * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    PlaybackRateMenuItem.prototype.contentElType = 'button';

    Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);

    /**
     * @file playback-rate-menu-button.js
     */
    /**
     * The component for controlling the playback rate.
     *
     * @extends MenuButton
     */

    var PlaybackRateMenuButton = function (_MenuButton) {
        inherits(PlaybackRateMenuButton, _MenuButton);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *        The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         */
        function PlaybackRateMenuButton(player, options) {
            classCallCheck(this, PlaybackRateMenuButton);

            var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

            _this.updateVisibility();
            _this.updateLabel();

            _this.on(player, 'loadstart', _this.updateVisibility);
            _this.on(player, 'ratechange', _this.updateLabel);
            return _this;
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {
            var el = _MenuButton.prototype.createEl.call(this);

            this.labelEl_ = createEl('div', {
                className: 'vjs-playback-rate-value',
                innerHTML: '1x'
            });

            el.appendChild(this.labelEl_);

            return el;
        };

        PlaybackRateMenuButton.prototype.dispose = function dispose() {
            this.labelEl_ = null;

            _MenuButton.prototype.dispose.call(this);
        };

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */


        PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
        };

        PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
            return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);
        };

        /**
         * Create the playback rate menu
         *
         * @return {Menu}
         *         Menu object populated with {@link PlaybackRateMenuItem}s
         */


        PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
            var menu = new Menu(this.player());
            var rates = this.playbackRates();

            if (rates) {
                for (var i = rates.length - 1; i >= 0; i--) {
                    menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));
                }
            }

            return menu;
        };

        /**
         * Updates ARIA accessibility attributes
         */


        PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
            // Current playback rate
            this.el().setAttribute('aria-valuenow', this.player().playbackRate());
        };

        /**
         * This gets called when an `PlaybackRateMenuButton` is "clicked". See
         * {@link ClickableComponent} for more detailed information on what a click can be.
         *
         * @param {EventTarget~Event} [event]
         *        The `keydown`, `tap`, or `click` event that caused this function to be
         *        called.
         *
         * @listens tap
         * @listens click
         */


        PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
            // select next rate option
            var currentRate = this.player().playbackRate();
            var rates = this.playbackRates();

            // this will select first one if the last one currently selected
            var newRate = rates[0];

            for (var i = 0; i < rates.length; i++) {
                if (rates[i] > currentRate) {
                    newRate = rates[i];
                    break;
                }
            }
            this.player().playbackRate(newRate);
        };

        /**
         * Get possible playback rates
         *
         * @return {Array}
         *         All possible playback rates
         */


        PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
            return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
        };

        /**
         * Get whether playback rates is supported by the tech
         * and an array of playback rates exists
         *
         * @return {boolean}
         *         Whether changing playback rate is supported
         */


        PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
            return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
        };

        /**
         * Hide playback rate controls when they're no playback rate options to select
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#loadstart
         */


        PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
            if (this.playbackRateSupported()) {
                this.removeClass('vjs-hidden');
            } else {
                this.addClass('vjs-hidden');
            }
        };

        /**
         * Update button label when rate changed
         *
         * @param {EventTarget~Event} [event]
         *        The event that caused this function to run.
         *
         * @listens Player#ratechange
         */


        PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
            if (this.playbackRateSupported()) {
                this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
            }
        };

        return PlaybackRateMenuButton;
    }(MenuButton);

    /**
     * The text that should display over the `FullscreenToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */


    PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

    Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);

    /**
     * @file spacer.js
     */
    /**
     * Just an empty spacer element that can be used as an append point for plugins, etc.
     * Also can be used to create space between elements when necessary.
     *
     * @extends Component
     */

    var Spacer = function (_Component) {
        inherits(Spacer, _Component);

        function Spacer() {
            classCallCheck(this, Spacer);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */
        Spacer.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
        };

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        Spacer.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: this.buildCSSClass()
            });
        };

        return Spacer;
    }(Component);

    Component.registerComponent('Spacer', Spacer);

    /**
     * @file custom-control-spacer.js
     */
    /**
     * Spacer specifically meant to be used as an insertion point for new plugins, etc.
     *
     * @extends Spacer
     */

    var CustomControlSpacer = function (_Spacer) {
        inherits(CustomControlSpacer, _Spacer);

        function CustomControlSpacer() {
            classCallCheck(this, CustomControlSpacer);
            return possibleConstructorReturn(this, _Spacer.apply(this, arguments));
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         */
        CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
        };

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */


        CustomControlSpacer.prototype.createEl = function createEl() {
            var el = _Spacer.prototype.createEl.call(this, {
                className: this.buildCSSClass()
            });

            // No-flex/table-cell mode requires there be some content
            // in the cell to fill the remaining space of the table.
            el.innerHTML = '\xA0';
            return el;
        };

        return CustomControlSpacer;
    }(Spacer);

    Component.registerComponent('CustomControlSpacer', CustomControlSpacer);

    /**
     * @file control-bar.js
     */
// Required children
    /**
     * Container of main controls.
     *
     * @extends Component
     */

    var ControlBar = function (_Component) {
        inherits(ControlBar, _Component);

        function ControlBar() {
            classCallCheck(this, ControlBar);
            return possibleConstructorReturn(this, _Component.apply(this, arguments));
        }

        /**
         * Create the `Component`'s DOM element
         *
         * @return {Element}
         *         The element that was created.
         */
        ControlBar.prototype.createEl = function createEl() {
            return _Component.prototype.createEl.call(this, 'div', {
                className: 'vjs-control-bar',
                dir: 'ltr'
            }, {
                // The control bar is a group, but we don't aria-label it to avoid
                //  over-announcing by JAWS
                role: 'group'
            });
        };

        return ControlBar;
    }(Component);

    /**
     * Default options for `ControlBar`
     *
     * @type {Object}
     * @private
     */


    ControlBar.prototype.options_ = {
        children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']
    };

    Component.registerComponent('ControlBar', ControlBar);

    /**
     * @file error-display.js
     */
    /**
     * A display that indicates an error has occurred. This means that the video
     * is unplayable.
     *
     * @extends ModalDialog
     */

    var ErrorDisplay = function (_ModalDialog) {
        inherits(ErrorDisplay, _ModalDialog);

        /**
         * Creates an instance of this class.
         *
         * @param  {Player} player
         *         The `Player` that this class should be attached to.
         *
         * @param  {Object} [options]
         *         The key/value store of player options.
         */
        function ErrorDisplay(player, options) {
            classCallCheck(this, ErrorDisplay);

            var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

            _this.on(player, 'error', _this.open);
            return _this;
        }

        /**
         * Builds the default DOM `className`.
         *
         * @return {string}
         *         The DOM `className` for this object.
         *
         * @deprecated Since version 5.
         */


        ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
            return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
        };

        /**
         * Gets the localized error message based on the `Player`s error.
         *
         * @return {string}
         *         The `Player`s error message localized or an empty string.
         */


        ErrorDisplay.prototype.content = function content() {
            var error = this.player().error();

            return error ? this.localize(error.message) : '';
        };

        return ErrorDisplay;
    }(ModalDialog);

    /**
     * The default options for an `ErrorDisplay`.
     *
     * @private
     */


    ErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {
        pauseOnOpen: false,
        fillAlways: true,
        temporary: false,
        uncloseable: true
    });

    Component.registerComponent('ErrorDisplay', ErrorDisplay);

    /**
     * @file text-track-settings.js
     */
    var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

    var COLOR_BLACK = ['#000', 'Black'];
    var COLOR_BLUE = ['#00F', 'Blue'];
    var COLOR_CYAN = ['#0FF', 'Cyan'];
    var COLOR_GREEN = ['#0F0', 'Green'];
    var COLOR_MAGENTA = ['#F0F', 'Magenta'];
    var COLOR_RED = ['#F00', 'Red'];
    var COLOR_WHITE = ['#FFF', 'White'];
    var COLOR_YELLOW = ['#FF0', 'Yellow'];

    var OPACITY_OPAQUE = ['1', 'Opaque'];
    var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
    var OPACITY_TRANS = ['0', 'Transparent'];

// Configuration for the various <select> elements in the DOM of this component.
//
// Possible keys include:
//
// `default`:
//   The default option index. Only needs to be provided if not zero.
// `parser`:
//   A function which is used to parse the value from the selected option in
//   a customized way.
// `selector`:
//   The selector used to find the associated <select> element.
    var selectConfigs = {
        backgroundColor: {
            selector: '.vjs-bg-color > select',
            id: 'captions-background-color-%s',
            label: 'Color',
            options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
        },

        backgroundOpacity: {
            selector: '.vjs-bg-opacity > select',
            id: 'captions-background-opacity-%s',
            label: 'Transparency',
            options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
        },

        color: {
            selector: '.vjs-fg-color > select',
            id: 'captions-foreground-color-%s',
            label: 'Color',
            options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
        },

        edgeStyle: {
            selector: '.vjs-edge-style > select',
            id: '%s',
            label: 'Text Edge Style',
            options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
        },

        fontFamily: {
            selector: '.vjs-font-family > select',
            id: 'captions-font-family-%s',
            label: 'Font Family',
            options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
        },

        fontPercent: {
            selector: '.vjs-font-percent > select',
            id: 'captions-font-size-%s',
            label: 'Font Size',
            options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
            'default': 2,
            parser: function parser(v) {
                return v === '1.00' ? null : Number(v);
            }
        },

        textOpacity: {
            selector: '.vjs-text-opacity > select',
            id: 'captions-foreground-opacity-%s',
            label: 'Transparency',
            options: [OPACITY_OPAQUE, OPACITY_SEMI]
        },

        // Options for this object are defined below.
        windowColor: {
            selector: '.vjs-window-color > select',
            id: 'captions-window-color-%s',
            label: 'Color'
        },

        // Options for this object are defined below.
        windowOpacity: {
            selector: '.vjs-window-opacity > select',
            id: 'captions-window-opacity-%s',
            label: 'Transparency',
            options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
        }
    };

    selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

    /**
     * Get the actual value of an option.
     *
     * @param  {string} value
     *         The value to get
     *
     * @param  {Function} [parser]
     *         Optional function to adjust the value.
     *
     * @return {Mixed}
     *         - Will be `undefined` if no value exists
     *         - Will be `undefined` if the given value is "none".
     *         - Will be the actual value otherwise.
     *
     * @private
     */
    function parseOptionValue(value, parser) {
        if (parser) {
            value = parser(value);
        }

        if (value && value !== 'none') {
            return value;
        }
    }

    /**
     * Gets the value of the selected <option> element within a <select> element.
     *
     * @param  {Element} el
     *         the element to look in
     *
     * @param  {Function} [parser]
     *         Optional function to adjust the value.
     *
     * @return {Mixed}
     *         - Will be `undefined` if no value exists
     *         - Will be `undefined` if the given value is "none".
     *         - Will be the actual value otherwise.
     *
     * @private
     */
    function getSelectedOptionValue(el, parser) {
        var value = el.options[el.options.selectedIndex].value;

        return parseOptionValue(value, parser);
    }

    /**
     * Sets the selected <option> element within a <select> element based on a
     * given value.
     *
     * @param {Element} el
     *        The element to look in.
     *
     * @param {string} value
     *        the property to look on.
     *
     * @param {Function} [parser]
     *        Optional function to adjust the value before comparing.
     *
     * @private
     */
    function setSelectedOption(el, value, parser) {
        if (!value) {
            return;
        }

        for (var i = 0; i < el.options.length; i++) {
            if (parseOptionValue(el.options[i].value, parser) === value) {
                el.selectedIndex = i;
                break;
            }
        }
    }

    /**
     * Manipulate Text Tracks settings.
     *
     * @extends ModalDialog
     */

    var TextTrackSettings = function (_ModalDialog) {
        inherits(TextTrackSettings, _ModalDialog);

        /**
         * Creates an instance of this class.
         *
         * @param {Player} player
         *         The `Player` that this class should be attached to.
         *
         * @param {Object} [options]
         *         The key/value store of player options.
         */
        function TextTrackSettings(player, options) {
            classCallCheck(this, TextTrackSettings);

            options.temporary = false;

            var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

            _this.updateDisplay = bind(_this, _this.updateDisplay);

            // fill the modal and pretend we have opened it
            _this.fill();
            _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;

            _this.endDialog = createEl('p', {
                className: 'vjs-control-text',
                textContent: _this.localize('End of dialog window.')
            });
            _this.el().appendChild(_this.endDialog);

            _this.setDefaults();

            // Grab `persistTextTrackSettings` from the player options if not passed in child options
            if (options.persistTextTrackSettings === undefined) {
                _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
            }

            _this.on(_this.$('.vjs-done-button'), 'click', function () {
                _this.saveSettings();
                _this.close();
            });

            _this.on(_this.$('.vjs-default-button'), 'click', function () {
                _this.setDefaults();
                _this.updateDisplay();
            });

            each(selectConfigs, function (config) {
                _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
            });

            if (_this.options_.persistTextTrackSettings) {
                _this.restoreSettings();
            }
            return _this;
        }

        TextTrackSettings.prototype.dispose = function dispose() {
            this.endDialog = null;

            _ModalDialog.prototype.dispose.call(this);
        };

        /**
         * Create a <select> element with configured options.
         *
         * @param {string} key
         *        Configuration key to use during creation.
         *
         * @return {string}
         *         An HTML string.
         *
         * @private
         */


        TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
            var _this2 = this;

            var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';

            var config = selectConfigs[key];
            var id = config.id.replace('%s', this.id_);

            return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'vjs-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + '">'].concat(config.options.map(function (o) {
                var optionId = id + '-' + o[1];

                return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + (legendId !== '' ? legendId + ' ' : '') + id + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
            })).concat('</select>').join('');
        };

        /**
         * Create foreground color element for the component
         *
         * @return {string}
         *         An HTML string.
         *
         * @private
         */


        TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
            var legendId = 'captions-text-legend-' + this.id_;

            return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
        };

        /**
         * Create background color element for the component
         *
         * @return {string}
         *         An HTML string.
         *
         * @private
         */


        TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
            var legendId = 'captions-background-' + this.id_;

            return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
        };

        /**
         * Create window color element for the component
         *
         * @return {string}
         *         An HTML string.
         *
         * @private
         */


        TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
            var legendId = 'captions-window-' + this.id_;

            return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
        };

        /**
         * Create color elements for the component
         *
         * @return {Element}
         *         The element that was created
         *
         * @private
         */


        TextTrackSettings.prototype.createElColors_ = function createElColors_() {
            return createEl('div', {
                className: 'vjs-track-settings-colors',
                innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
            });
        };

        /**
         * Create font elements for the component
         *
         * @return {Element}
         *         The element that was created.
         *
         * @private
         */


        TextTrackSettings.prototype.createElFont_ = function createElFont_() {
            return createEl('div', {
                className: 'vjs-track-settings-font">',
                innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
            });
        };

        /**
         * Create controls for the component
         *
         * @return {Element}
         *         The element that was created.
         *
         * @private
         */


        TextTrackSettings.prototype.createElControls_ = function createElControls_() {
            var defaultsDescription = this.localize('restore all settings to the default values');

            return createEl('div', {
                className: 'vjs-track-settings-controls',
                innerHTML: ['<button class="vjs-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="vjs-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button class="vjs-done-button">' + this.localize('Done') + '</button>'].join('')
            });
        };

        TextTrackSettings.prototype.content = function content() {
            return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
        };

        TextTrackSettings.prototype.label = function label() {
            return this.localize('Caption Settings Dialog');
        };

        TextTrackSettings.prototype.description = function description() {
            return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
        };

        TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
            return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';
        };

        /**
         * Gets an object of text track settings (or null).
         *
         * @return {Object}
         *         An object with config values parsed from the DOM or localStorage.
         */


        TextTrackSettings.prototype.getValues = function getValues() {
            var _this3 = this;

            return reduce(selectConfigs, function (accum, config, key) {
                var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

                if (value !== undefined) {
                    accum[key] = value;
                }

                return accum;
            }, {});
        };

        /**
         * Sets text track settings from an object of values.
         *
         * @param {Object} values
         *        An object with config values parsed from the DOM or localStorage.
         */


        TextTrackSettings.prototype.setValues = function setValues(values) {
            var _this4 = this;

            each(selectConfigs, function (config, key) {
                setSelectedOption(_this4.$(config.selector), values[key], config.parser);
            });
        };

        /**
         * Sets all `<select>` elements to their default values.
         */


        TextTrackSettings.prototype.setDefaults = function setDefaults() {
            var _this5 = this;

            each(selectConfigs, function (config) {
                var index = config.hasOwnProperty('default') ? config['default'] : 0;

                _this5.$(config.selector).selectedIndex = index;
            });
        };

        /**
         * Restore texttrack settings from localStorage
         */


        TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
            var values = void 0;

            try {
                values = JSON.parse(window_1.localStorage.getItem(LOCAL_STORAGE_KEY));
            } catch (err) {
                log$1.warn(err);
            }

            if (values) {
                this.setValues(values);
            }
        };

        /**
         * Save text track settings to localStorage
         */


        TextTrackSettings.prototype.saveSettings = function saveSettings() {
            if (!this.options_.persistTextTrackSettings) {
                return;
            }

            var values = this.getValues();

            try {
                if (Object.keys(values).length) {
                    window_1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
                } else {
                    window_1.localStorage.removeItem(LOCAL_STORAGE_KEY);
                }
            } catch (err) {
                log$1.warn(err);
            }
        };

        /**
         * Update display of text track settings
         */


        TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
            var ttDisplay = this.player_.getChild('textTrackDisplay');

            if (ttDisplay) {
                ttDisplay.updateDisplay();
            }
        };

        /**
         * conditionally blur the element and refocus the captions button
         *
         * @private
         */


        TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
            this.previouslyActiveEl_ = null;
            this.off(document_1, 'keydown', this.handleKeyDown);

            var cb = this.player_.controlBar;
            var subsCapsBtn = cb && cb.subsCapsButton;
            var ccBtn = cb && cb.captionsButton;

            if (subsCapsBtn) {
                subsCapsBtn.focus();
            } else if (ccBtn) {
                ccBtn.focus();
            }
        };

        return TextTrackSettings;
    }(ModalDialog);

    Component.registerComponent('TextTrackSettings', TextTrackSettings);

    var _templateObject$2 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

    /**
     * @file html5.js
     */
    /**
     * HTML5 Media Controller - Wrapper for HTML5 Media API
     *
     * @mixes Tech~SouceHandlerAdditions
     * @extends Tech
     */

    var Html5 = function (_Tech) {
        inherits(Html5, _Tech);

        /**
         * Create an instance of this Tech.
         *
         * @param {Object} [options]
         *        The key/value store of player options.
         *
         * @param {Component~ReadyCallback} ready
         *        Callback function to call when the `HTML5` Tech is ready.
         */
        function Html5(options, ready) {
            classCallCheck(this, Html5);

            var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));

            var source = options.source;
            var crossoriginTracks = false;

            // Set the source if one is provided
            // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
            // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
            // anyway so the error gets fired.
            if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
                _this.setSource(source);
            } else {
                _this.handleLateInit_(_this.el_);
            }

            if (_this.el_.hasChildNodes()) {

                var nodes = _this.el_.childNodes;
                var nodesLength = nodes.length;
                var removeNodes = [];

                while (nodesLength--) {
                    var node = nodes[nodesLength];
                    var nodeName = node.nodeName.toLowerCase();

                    if (nodeName === 'track') {
                        if (!_this.featuresNativeTextTracks) {
                            // Empty video tag tracks so the built-in player doesn't use them also.
                            // This may not be fast enough to stop HTML5 browsers from reading the tags
                            // so we'll need to turn off any default tracks if we're manually doing
                            // captions and subtitles. videoElement.textTracks
                            removeNodes.push(node);
                        } else {
                            // store HTMLTrackElement and TextTrack to remote list
                            _this.remoteTextTrackEls().addTrackElement_(node);
                            _this.remoteTextTracks().addTrack(node.track);
                            _this.textTracks().addTrack(node.track);
                            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
                                crossoriginTracks = true;
                            }
                        }
                    }
                }

                for (var i = 0; i < removeNodes.length; i++) {
                    _this.el_.removeChild(removeNodes[i]);
                }
            }

            _this.proxyNativeTracks_();
            if (_this.featuresNativeTextTracks && crossoriginTracks) {
                log$1.warn(tsml(_templateObject$2));
            }

            // prevent iOS Safari from disabling metadata text tracks during native playback
            _this.restoreMetadataTracksInIOSNativePlayer_();

            // Determine if native controls should be used
            // Our goal should be to get the custom controls on mobile solid everywhere
            // so we can remove this all together. Right now this will block custom
            // controls on touch enabled laptops like the Chrome Pixel
            if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
                _this.setControls(true);
            }

            // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
            // into a `fullscreenchange` event
            _this.proxyWebkitFullscreen_();

            _this.triggerReady();
            return _this;
        }

        /**
         * Dispose of `HTML5` media element and remove all tracks.
         */


        Html5.prototype.dispose = function dispose() {
            Html5.disposeMediaElement(this.el_);
            this.options_ = null;

            // tech will handle clearing of the emulated track list
            _Tech.prototype.dispose.call(this);
        };

        /**
         * When a captions track is enabled in the iOS Safari native player, all other
         * tracks are disabled (including metadata tracks), which nulls all of their
         * associated cue points. This will restore metadata tracks to their pre-fullscreen
         * state in those cases so that cue points are not needlessly lost.
         *
         * @private
         */


        Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
            var textTracks = this.textTracks();
            var metadataTracksPreFullscreenState = void 0;

            // captures a snapshot of every metadata track's current state
            var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {
                metadataTracksPreFullscreenState = [];

                for (var i = 0; i < textTracks.length; i++) {
                    var track = textTracks[i];

                    if (track.kind === 'metadata') {
                        metadataTracksPreFullscreenState.push({
                            track: track,
                            storedMode: track.mode
                        });
                    }
                }
            };

            // snapshot each metadata track's initial state, and update the snapshot
            // each time there is a track 'change' event
            takeMetadataTrackSnapshot();
            textTracks.addEventListener('change', takeMetadataTrackSnapshot);

            this.on('dispose', function () {
                return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
            });

            var restoreTrackMode = function restoreTrackMode() {
                for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
                    var storedTrack = metadataTracksPreFullscreenState[i];

                    if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
                        storedTrack.track.mode = storedTrack.storedMode;
                    }
                }
                // we only want this handler to be executed on the first 'change' event
                textTracks.removeEventListener('change', restoreTrackMode);
            };

            // when we enter fullscreen playback, stop updating the snapshot and
            // restore all track modes to their pre-fullscreen state
            this.on('webkitbeginfullscreen', function () {
                textTracks.removeEventListener('change', takeMetadataTrackSnapshot);

                // remove the listener before adding it just in case it wasn't previously removed
                textTracks.removeEventListener('change', restoreTrackMode);
                textTracks.addEventListener('change', restoreTrackMode);
            });

            // start updating the snapshot again after leaving fullscreen
            this.on('webkitendfullscreen', function () {
                // remove the listener before adding it just in case it wasn't previously removed
                textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
                textTracks.addEventListener('change', takeMetadataTrackSnapshot);

                // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
                textTracks.removeEventListener('change', restoreTrackMode);
            });
        };

        /**
         * Proxy all native track list events to our track lists if the browser we are playing
         * in supports that type of track list.
         *
         * @private
         */


        Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {
            var _this2 = this;

            NORMAL.names.forEach(function (name) {
                var props = NORMAL[name];
                var elTracks = _this2.el()[props.getterName];
                var techTracks = _this2[props.getterName]();

                if (!_this2['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
                    return;
                }
                var listeners = {
                    change: function change(e) {
                        techTracks.trigger({
                            type: 'change',
                            target: techTracks,
                            currentTarget: techTracks,
                            srcElement: techTracks
                        });
                    },
                    addtrack: function addtrack(e) {
                        techTracks.addTrack(e.track);
                    },
                    removetrack: function removetrack(e) {
                        techTracks.removeTrack(e.track);
                    }
                };
                var removeOldTracks = function removeOldTracks() {
                    var removeTracks = [];

                    for (var i = 0; i < techTracks.length; i++) {
                        var found = false;

                        for (var j = 0; j < elTracks.length; j++) {
                            if (elTracks[j] === techTracks[i]) {
                                found = true;
                                break;
                            }
                        }

                        if (!found) {
                            removeTracks.push(techTracks[i]);
                        }
                    }

                    while (removeTracks.length) {
                        techTracks.removeTrack(removeTracks.shift());
                    }
                };

                Object.keys(listeners).forEach(function (eventName) {
                    var listener = listeners[eventName];

                    elTracks.addEventListener(eventName, listener);
                    _this2.on('dispose', function (e) {
                        return elTracks.removeEventListener(eventName, listener);
                    });
                });

                // Remove (native) tracks that are not used anymore
                _this2.on('loadstart', removeOldTracks);
                _this2.on('dispose', function (e) {
                    return _this2.off('loadstart', removeOldTracks);
                });
            });
        };

        /**
         * Create the `Html5` Tech's DOM element.
         *
         * @return {Element}
         *         The element that gets created.
         */


        Html5.prototype.createEl = function createEl$$1() {
            var el = this.options_.tag;

            // Check if this browser supports moving the element into the box.
            // On the iPhone video will break if you move the element,
            // So we have to create a brand new element.
            // If we ingested the player div, we do not need to move the media element.
            if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

                // If the original tag is still there, clone and remove it.
                if (el) {
                    var clone = el.cloneNode(true);

                    if (el.parentNode) {
                        el.parentNode.insertBefore(clone, el);
                    }
                    Html5.disposeMediaElement(el);
                    el = clone;
                } else {
                    el = document_1.createElement('video');

                    // determine if native controls should be used
                    var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
                    var attributes = mergeOptions({}, tagAttributes);

                    if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
                        delete attributes.controls;
                    }

                    setAttributes(el, assign(attributes, {
                        id: this.options_.techId,
                        'class': 'vjs-tech'
                    }));
                }

                el.playerId = this.options_.playerId;
            }

            if (typeof this.options_.preload !== 'undefined') {
                setAttribute(el, 'preload', this.options_.preload);
            }

            // Update specific tag settings, in case they were overridden
            // `autoplay` has to be *last* so that `muted` and `playsinline` are present
            // when iOS/Safari or other browsers attempt to autoplay.
            var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];

            for (var i = 0; i < settingsAttrs.length; i++) {
                var attr = settingsAttrs[i];
                var value = this.options_[attr];

                if (typeof value !== 'undefined') {
                    if (value) {
                        setAttribute(el, attr, attr);
                    } else {
                        removeAttribute(el, attr);
                    }
                    el[attr] = value;
                }
            }

            return el;
        };

        /**
         * This will be triggered if the loadstart event has already fired, before videojs was
         * ready. Two known examples of when this can happen are:
         * 1. If we're loading the playback object after it has started loading
         * 2. The media is already playing the (often with autoplay on) then
         *
         * This function will fire another loadstart so that videojs can catchup.
         *
         * @fires Tech#loadstart
         *
         * @return {undefined}
         *         returns nothing.
         */


        Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
            if (el.networkState === 0 || el.networkState === 3) {
                // The video element hasn't started loading the source yet
                // or didn't find a source
                return;
            }

            if (el.readyState === 0) {
                // NetworkState is set synchronously BUT loadstart is fired at the
                // end of the current stack, usually before setInterval(fn, 0).
                // So at this point we know loadstart may have already fired or is
                // about to fire, and either way the player hasn't seen it yet.
                // We don't want to fire loadstart prematurely here and cause a
                // double loadstart so we'll wait and see if it happens between now
                // and the next loop, and fire it if not.
                // HOWEVER, we also want to make sure it fires before loadedmetadata
                // which could also happen between now and the next loop, so we'll
                // watch for that also.
                var loadstartFired = false;
                var setLoadstartFired = function setLoadstartFired() {
                    loadstartFired = true;
                };

                this.on('loadstart', setLoadstartFired);

                var triggerLoadstart = function triggerLoadstart() {
                    // We did miss the original loadstart. Make sure the player
                    // sees loadstart before loadedmetadata
                    if (!loadstartFired) {
                        this.trigger('loadstart');
                    }
                };

                this.on('loadedmetadata', triggerLoadstart);

                this.ready(function () {
                    this.off('loadstart', setLoadstartFired);
                    this.off('loadedmetadata', triggerLoadstart);

                    if (!loadstartFired) {
                        // We did miss the original native loadstart. Fire it now.
                        this.trigger('loadstart');
                    }
                });

                return;
            }

            // From here on we know that loadstart already fired and we missed it.
            // The other readyState events aren't as much of a problem if we double
            // them, so not going to go to as much trouble as loadstart to prevent
            // that unless we find reason to.
            var eventsToTrigger = ['loadstart'];

            // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
            eventsToTrigger.push('loadedmetadata');

            // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
            if (el.readyState >= 2) {
                eventsToTrigger.push('loadeddata');
            }

            // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
            if (el.readyState >= 3) {
                eventsToTrigger.push('canplay');
            }

            // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
            if (el.readyState >= 4) {
                eventsToTrigger.push('canplaythrough');
            }

            // We still need to give the player time to add event listeners
            this.ready(function () {
                eventsToTrigger.forEach(function (type) {
                    this.trigger(type);
                }, this);
            });
        };

        /**
         * Set current time for the `HTML5` tech.
         *
         * @param {number} seconds
         *        Set the current time of the media to this.
         */


        Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
            try {
                this.el_.currentTime = seconds;
            } catch (e) {
                log$1(e, 'Video is not ready. (Video.js)');
                // this.warning(VideoJS.warnings.videoNotReady);
            }
        };

        /**
         * Get the current duration of the HTML5 media element.
         *
         * @return {number}
         *         The duration of the media or 0 if there is no duration.
         */


        Html5.prototype.duration = function duration() {
            var _this3 = this;

            // Android Chrome will report duration as Infinity for VOD HLS until after
            // playback has started, which triggers the live display erroneously.
            // Return NaN if playback has not started and trigger a durationupdate once
            // the duration can be reliably known.
            if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
                // Wait for the first `timeupdate` with currentTime > 0 - there may be
                // several with 0
                var checkProgress = function checkProgress() {
                    if (_this3.el_.currentTime > 0) {
                        // Trigger durationchange for genuinely live video
                        if (_this3.el_.duration === Infinity) {
                            _this3.trigger('durationchange');
                        }
                        _this3.off('timeupdate', checkProgress);
                    }
                };

                this.on('timeupdate', checkProgress);
                return NaN;
            }
            return this.el_.duration || NaN;
        };

        /**
         * Get the current width of the HTML5 media element.
         *
         * @return {number}
         *         The width of the HTML5 media element.
         */


        Html5.prototype.width = function width() {
            return this.el_.offsetWidth;
        };

        /**
         * Get the current height of the HTML5 media element.
         *
         * @return {number}
         *         The heigth of the HTML5 media element.
         */


        Html5.prototype.height = function height() {
            return this.el_.offsetHeight;
        };

        /**
         * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
         * `fullscreenchange` event.
         *
         * @private
         * @fires fullscreenchange
         * @listens webkitendfullscreen
         * @listens webkitbeginfullscreen
         * @listens webkitbeginfullscreen
         */


        Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
            var _this4 = this;

            if (!('webkitDisplayingFullscreen' in this.el_)) {
                return;
            }

            var endFn = function endFn() {
                this.trigger('fullscreenchange', { isFullscreen: false });
            };

            var beginFn = function beginFn() {
                if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
                    this.one('webkitendfullscreen', endFn);

                    this.trigger('fullscreenchange', { isFullscreen: true });
                }
            };

            this.on('webkitbeginfullscreen', beginFn);
            this.on('dispose', function () {
                _this4.off('webkitbeginfullscreen', beginFn);
                _this4.off('webkitendfullscreen', endFn);
            });
        };

        /**
         * Check if fullscreen is supported on the current playback device.
         *
         * @return {boolean}
         *         - True if fullscreen is supported.
         *         - False if fullscreen is not supported.
         */


        Html5.prototype.supportsFullScreen = function supportsFullScreen() {
            if (typeof this.el_.webkitEnterFullScreen === 'function') {
                var userAgent = window_1.navigator && window_1.navigator.userAgent || '';

                // Seems to be broken in Chromium/Chrome && Safari in Leopard
                if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
                    return true;
                }
            }
            return false;
        };

        /**
         * Request that the `HTML5` Tech enter fullscreen.
         */


        Html5.prototype.enterFullScreen = function enterFullScreen() {
            var video = this.el_;

            if (video.paused && video.networkState <= video.HAVE_METADATA) {
                // attempt to prime the video element for programmatic access
                // this isn't necessary on the desktop but shouldn't hurt
                this.el_.play();

                // playing and pausing synchronously during the transition to fullscreen
                // can get iOS ~6.1 devices into a play/pause loop
                this.setTimeout(function () {
                    video.pause();
                    video.webkitEnterFullScreen();
                }, 0);
            } else {
                video.webkitEnterFullScreen();
            }
        };

        /**
         * Request that the `HTML5` Tech exit fullscreen.
         */


        Html5.prototype.exitFullScreen = function exitFullScreen() {
            this.el_.webkitExitFullScreen();
        };

        /**
         * A getter/setter for the `Html5` Tech's source object.
         * > Note: Please use {@link Html5#setSource}
         *
         * @param {Tech~SourceObject} [src]
         *        The source object you want to set on the `HTML5` techs element.
         *
         * @return {Tech~SourceObject|undefined}
         *         - The current source object when a source is not passed in.
         *         - undefined when setting
         *
         * @deprecated Since version 5.
         */


        Html5.prototype.src = function src(_src) {
            if (_src === undefined) {
                return this.el_.src;
            }

            // Setting src through `src` instead of `setSrc` will be deprecated
            this.setSrc(_src);
        };

        /**
         * Reset the tech by removing all sources and then calling
         * {@link Html5.resetMediaElement}.
         */


        Html5.prototype.reset = function reset() {
            Html5.resetMediaElement(this.el_);
        };

        /**
         * Get the current source on the `HTML5` Tech. Falls back to returning the source from
         * the HTML5 media element.
         *
         * @return {Tech~SourceObject}
         *         The current source object from the HTML5 tech. With a fallback to the
         *         elements source.
         */


        Html5.prototype.currentSrc = function currentSrc() {
            if (this.currentSource_) {
                return this.currentSource_.src;
            }
            return this.el_.currentSrc;
        };

        /**
         * Set controls attribute for the HTML5 media Element.
         *
         * @param {string} val
         *        Value to set the controls attribute to
         */


        Html5.prototype.setControls = function setControls(val) {
            this.el_.controls = !!val;
        };

        /**
         * Create and returns a remote {@link TextTrack} object.
         *
         * @param {string} kind
         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
         *
         * @param {string} [label]
         *        Label to identify the text track
         *
         * @param {string} [language]
         *        Two letter language abbreviation
         *
         * @return {TextTrack}
         *         The TextTrack that gets created.
         */


        Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            if (!this.featuresNativeTextTracks) {
                return _Tech.prototype.addTextTrack.call(this, kind, label, language);
            }

            return this.el_.addTextTrack(kind, label, language);
        };

        /**
         * Creates either native TextTrack or an emulated TextTrack depending
         * on the value of `featuresNativeTextTracks`
         *
         * @param {Object} options
         *        The object should contain the options to intialize the TextTrack with.
         *
         * @param {string} [options.kind]
         *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
         *
         * @param {string} [options.label].
         *        Label to identify the text track
         *
         * @param {string} [options.language]
         *        Two letter language abbreviation.
         *
         * @param {boolean} [options.default]
         *        Default this track to on.
         *
         * @param {string} [options.id]
         *        The internal id to assign this track.
         *
         * @param {string} [options.src]
         *        A source url for the track.
         *
         * @return {HTMLTrackElement}
         *         The track element that gets created.
         */


        Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
            if (!this.featuresNativeTextTracks) {
                return _Tech.prototype.createRemoteTextTrack.call(this, options);
            }
            var htmlTrackElement = document_1.createElement('track');

            if (options.kind) {
                htmlTrackElement.kind = options.kind;
            }
            if (options.label) {
                htmlTrackElement.label = options.label;
            }
            if (options.language || options.srclang) {
                htmlTrackElement.srclang = options.language || options.srclang;
            }
            if (options['default']) {
                htmlTrackElement['default'] = options['default'];
            }
            if (options.id) {
                htmlTrackElement.id = options.id;
            }
            if (options.src) {
                htmlTrackElement.src = options.src;
            }

            return htmlTrackElement;
        };

        /**
         * Creates a remote text track object and returns an html track element.
         *
         * @param {Object} options The object should contain values for
         * kind, language, label, and src (location of the WebVTT file)
         * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
         * automatically removed from the video element whenever the source changes
         * @return {HTMLTrackElement} An Html Track Element.
         * This can be an emulated {@link HTMLTrackElement} or a native one.
         * @deprecated The default value of the "manualCleanup" parameter will default
         * to "false" in upcoming versions of Video.js
         */


        Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
            var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

            if (this.featuresNativeTextTracks) {
                this.el().appendChild(htmlTrackElement);
            }

            return htmlTrackElement;
        };

        /**
         * Remove remote `TextTrack` from `TextTrackList` object
         *
         * @param {TextTrack} track
         *        `TextTrack` object to remove
         */


        Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
            _Tech.prototype.removeRemoteTextTrack.call(this, track);

            if (this.featuresNativeTextTracks) {
                var tracks = this.$$('track');

                var i = tracks.length;

                while (i--) {
                    if (track === tracks[i] || track === tracks[i].track) {
                        this.el().removeChild(tracks[i]);
                    }
                }
            }
        };

        /**
         * Gets available media playback quality metrics as specified by the W3C's Media
         * Playback Quality API.
         *
         * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
         *
         * @return {Object}
         *         An object with supported media playback quality metrics
         */


        Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
            if (typeof this.el().getVideoPlaybackQuality === 'function') {
                return this.el().getVideoPlaybackQuality();
            }

            var videoPlaybackQuality = {};

            if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
                videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
                videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
            }

            if (window_1.performance && typeof window_1.performance.now === 'function') {
                videoPlaybackQuality.creationTime = window_1.performance.now();
            } else if (window_1.performance && window_1.performance.timing && typeof window_1.performance.timing.navigationStart === 'number') {
                videoPlaybackQuality.creationTime = window_1.Date.now() - window_1.performance.timing.navigationStart;
            }

            return videoPlaybackQuality;
        };

        return Html5;
    }(Tech);

    /* HTML5 Support Testing ---------------------------------------------------- */

    if (isReal()) {

        /**
         * Element for testing browser HTML5 media capabilities
         *
         * @type {Element}
         * @constant
         * @private
         */
        Html5.TEST_VID = document_1.createElement('video');
        var track = document_1.createElement('track');

        track.kind = 'captions';
        track.srclang = 'en';
        track.label = 'English';
        Html5.TEST_VID.appendChild(track);
    }

    /**
     * Check if HTML5 media is supported by this browser/device.
     *
     * @return {boolean}
     *         - True if HTML5 media is supported.
     *         - False if HTML5 media is not supported.
     */
    Html5.isSupported = function () {
        // IE9 with no Media Player is a LIAR! (#984)
        try {
            Html5.TEST_VID.volume = 0.5;
        } catch (e) {
            return false;
        }

        return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
    };

    /**
     * Check if the tech can support the given type
     *
     * @param {string} type
     *        The mimetype to check
     * @return {string} 'probably', 'maybe', or '' (empty string)
     */
    Html5.canPlayType = function (type) {
        return Html5.TEST_VID.canPlayType(type);
    };

    /**
     * Check if the tech can support the given source
     * @param {Object} srcObj
     *        The source object
     * @param {Object} options
     *        The options passed to the tech
     * @return {string} 'probably', 'maybe', or '' (empty string)
     */
    Html5.canPlaySource = function (srcObj, options) {
        return Html5.canPlayType(srcObj.type);
    };

    /**
     * Check if the volume can be changed in this browser/device.
     * Volume cannot be changed in a lot of mobile devices.
     * Specifically, it can't be changed from 1 on iOS.
     *
     * @return {boolean}
     *         - True if volume can be controlled
     *         - False otherwise
     */
    Html5.canControlVolume = function () {
        // IE will error if Windows Media Player not installed #3315
        try {
            var volume = Html5.TEST_VID.volume;

            Html5.TEST_VID.volume = volume / 2 + 0.1;
            return volume !== Html5.TEST_VID.volume;
        } catch (e) {
            return false;
        }
    };

    /**
     * Check if the playback rate can be changed in this browser/device.
     *
     * @return {boolean}
     *         - True if playback rate can be controlled
     *         - False otherwise
     */
    Html5.canControlPlaybackRate = function () {
        // Playback rate API is implemented in Android Chrome, but doesn't do anything
        // https://github.com/videojs/video.js/issues/3180
        if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
            return false;
        }
        // IE will error if Windows Media Player not installed #3315
        try {
            var playbackRate = Html5.TEST_VID.playbackRate;

            Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
            return playbackRate !== Html5.TEST_VID.playbackRate;
        } catch (e) {
            return false;
        }
    };

    /**
     * Check to see if native `TextTrack`s are supported by this browser/device.
     *
     * @return {boolean}
     *         - True if native `TextTrack`s are supported.
     *         - False otherwise
     */
    Html5.supportsNativeTextTracks = function () {
        return IS_ANY_SAFARI;
    };

    /**
     * Check to see if native `VideoTrack`s are supported by this browser/device
     *
     * @return {boolean}
     *        - True if native `VideoTrack`s are supported.
     *        - False otherwise
     */
    Html5.supportsNativeVideoTracks = function () {
        return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
    };

    /**
     * Check to see if native `AudioTrack`s are supported by this browser/device
     *
     * @return {boolean}
     *        - True if native `AudioTrack`s are supported.
     *        - False otherwise
     */
    Html5.supportsNativeAudioTracks = function () {
        return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
    };

    /**
     * An array of events available on the Html5 tech.
     *
     * @private
     * @type {Array}
     */
    Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];

    /**
     * Boolean indicating whether the `Tech` supports volume control.
     *
     * @type {boolean}
     * @default {@link Html5.canControlVolume}
     */
    Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

    /**
     * Boolean indicating whether the `Tech` supports changing the speed at which the media
     * plays. Examples:
     *   - Set player to play 2x (twice) as fast
     *   - Set player to play 0.5x (half) as fast
     *
     * @type {boolean}
     * @default {@link Html5.canControlPlaybackRate}
     */
    Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

    /**
     * Boolean indicating whether the `HTML5` tech currently supports the media element
     * moving in the DOM. iOS breaks if you move the media element, so this is set this to
     * false there. Everywhere else this should be true.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.movingMediaElementInDOM = !IS_IOS;

// TODO: Previous comment: No longer appears to be used. Can probably be removed.
//       Is this true?
    /**
     * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
     * when going into fullscreen.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.featuresFullscreenResize = true;

    /**
     * Boolean indicating whether the `HTML5` tech currently supports the progress event.
     * If this is false, manual `progress` events will be triggred instead.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.featuresProgressEvents = true;

    /**
     * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
     * If this is false, manual `timeupdate` events will be triggred instead.
     *
     * @default
     */
    Html5.prototype.featuresTimeupdateEvents = true;

    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeTextTracks}
     */
    Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeVideoTracks}
     */
    Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeAudioTracks}
     */
    Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
    var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
    var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
    var mp4RE = /^video\/mp4/i;

    Html5.patchCanPlayType = function () {

        // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
        if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX) {
            Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                if (type && mpegurlRE.test(type)) {
                    return 'maybe';
                }
                return canPlayType.call(this, type);
            };

            // Override Android 2.2 and less canPlayType method which is broken
        } else if (IS_OLD_ANDROID) {
            Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
                if (type && mp4RE.test(type)) {
                    return 'maybe';
                }
                return canPlayType.call(this, type);
            };
        }
    };

    Html5.unpatchCanPlayType = function () {
        var r = Html5.TEST_VID.constructor.prototype.canPlayType;

        Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
        return r;
    };

// by default, patch the media element
    Html5.patchCanPlayType();

    Html5.disposeMediaElement = function (el) {
        if (!el) {
            return;
        }

        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }

        // remove any child track or source nodes to prevent their loading
        while (el.hasChildNodes()) {
            el.removeChild(el.firstChild);
        }

        // remove any src reference. not setting `src=''` because that causes a warning
        // in firefox
        el.removeAttribute('src');

        // force the media element to update its loading state by calling load()
        // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
        if (typeof el.load === 'function') {
            // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
            (function () {
                try {
                    el.load();
                } catch (e) {
                    // not supported
                }
            })();
        }
    };

    Html5.resetMediaElement = function (el) {
        if (!el) {
            return;
        }

        var sources = el.querySelectorAll('source');
        var i = sources.length;

        while (i--) {
            el.removeChild(sources[i]);
        }

        // remove any src reference.
        // not setting `src=''` because that throws an error
        el.removeAttribute('src');

        if (typeof el.load === 'function') {
            // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
            (function () {
                try {
                    el.load();
                } catch (e) {
                    // satisfy linter
                }
            })();
        }
    };

    /* Native HTML5 element property wrapping ----------------------------------- */
// Wrap native boolean attributes with getters that check both property and attribute
// The list is as followed:
// muted, defaultMuted, autoplay, controls, loop, playsinline
    [
        /**
         * Get the value of `muted` from the media element. `muted` indicates
         * that the volume for the media should be set to silent. This does not actually change
         * the `volume` attribute.
         *
         * @method Html5#muted
         * @return {boolean}
         *         - True if the value of `volume` should be ignored and the audio set to silent.
         *         - False if the value of `volume` should be used.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
         */
        'muted',

        /**
         * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
         * whether the media should start muted or not. Only changes the default state of the
         * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
         * current state.
         *
         * @method Html5#defaultMuted
         * @return {boolean}
         *         - The value of `defaultMuted` from the media element.
         *         - True indicates that the media should start muted.
         *         - False indicates that the media should not start muted
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
         */
        'defaultMuted',

        /**
         * Get the value of `autoplay` from the media element. `autoplay` indicates
         * that the media should start to play as soon as the page is ready.
         *
         * @method Html5#autoplay
         * @return {boolean}
         *         - The value of `autoplay` from the media element.
         *         - True indicates that the media should start as soon as the page loads.
         *         - False indicates that the media should not start as soon as the page loads.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
         */
        'autoplay',

        /**
         * Get the value of `controls` from the media element. `controls` indicates
         * whether the native media controls should be shown or hidden.
         *
         * @method Html5#controls
         * @return {boolean}
         *         - The value of `controls` from the media element.
         *         - True indicates that native controls should be showing.
         *         - False indicates that native controls should be hidden.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
         */
        'controls',

        /**
         * Get the value of `loop` from the media element. `loop` indicates
         * that the media should return to the start of the media and continue playing once
         * it reaches the end.
         *
         * @method Html5#loop
         * @return {boolean}
         *         - The value of `loop` from the media element.
         *         - True indicates that playback should seek back to start once
         *           the end of a media is reached.
         *         - False indicates that playback should not loop back to the start when the
         *           end of the media is reached.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
         */
        'loop',

        /**
         * Get the value of `playsinline` from the media element. `playsinline` indicates
         * to the browser that non-fullscreen playback is preferred when fullscreen
         * playback is the native default, such as in iOS Safari.
         *
         * @method Html5#playsinline
         * @return {boolean}
         *         - The value of `playsinline` from the media element.
         *         - True indicates that the media should play inline.
         *         - False indicates that the media should not play inline.
         *
         * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
         */
        'playsinline'].forEach(function (prop) {
        Html5.prototype[prop] = function () {
            return this.el_[prop] || this.el_.hasAttribute(prop);
        };
    });

// Wrap native boolean attributes with setters that set both property and attribute
// The list is as followed:
// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
// setControls is special-cased above
    [
        /**
         * Set the value of `muted` on the media element. `muted` indicates that the current
         * audio level should be silent.
         *
         * @method Html5#setMuted
         * @param {boolean} muted
         *        - True if the audio should be set to silent
         *        - False otherwise
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
         */
        'muted',

        /**
         * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
         * audio level should be silent, but will only effect the muted level on intial playback..
         *
         * @method Html5.prototype.setDefaultMuted
         * @param {boolean} defaultMuted
         *        - True if the audio should be set to silent
         *        - False otherwise
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
         */
        'defaultMuted',

        /**
         * Set the value of `autoplay` on the media element. `autoplay` indicates
         * that the media should start to play as soon as the page is ready.
         *
         * @method Html5#setAutoplay
         * @param {boolean} autoplay
         *         - True indicates that the media should start as soon as the page loads.
         *         - False indicates that the media should not start as soon as the page loads.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
         */
        'autoplay',

        /**
         * Set the value of `loop` on the media element. `loop` indicates
         * that the media should return to the start of the media and continue playing once
         * it reaches the end.
         *
         * @method Html5#setLoop
         * @param {boolean} loop
         *         - True indicates that playback should seek back to start once
         *           the end of a media is reached.
         *         - False indicates that playback should not loop back to the start when the
         *           end of the media is reached.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
         */
        'loop',

        /**
         * Set the value of `playsinline` from the media element. `playsinline` indicates
         * to the browser that non-fullscreen playback is preferred when fullscreen
         * playback is the native default, such as in iOS Safari.
         *
         * @method Html5#setPlaysinline
         * @param {boolean} playsinline
         *         - True indicates that the media should play inline.
         *         - False indicates that the media should not play inline.
         *
         * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
         */
        'playsinline'].forEach(function (prop) {
        Html5.prototype['set' + toTitleCase(prop)] = function (v) {
            this.el_[prop] = v;

            if (v) {
                this.el_.setAttribute(prop, prop);
            } else {
                this.el_.removeAttribute(prop);
            }
        };
    });

// Wrap native properties with a getter
// The list is as followed
// paused, currentTime, buffered, volume, poster, preload, error, seeking
// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState
// readyState, videoWidth, videoHeight
    [
        /**
         * Get the value of `paused` from the media element. `paused` indicates whether the media element
         * is currently paused or not.
         *
         * @method Html5#paused
         * @return {boolean}
         *         The value of `paused` from the media element.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
         */
        'paused',

        /**
         * Get the value of `currentTime` from the media element. `currentTime` indicates
         * the current second that the media is at in playback.
         *
         * @method Html5#currentTime
         * @return {number}
         *         The value of `currentTime` from the media element.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
         */
        'currentTime',

        /**
         * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
         * object that represents the parts of the media that are already downloaded and
         * available for playback.
         *
         * @method Html5#buffered
         * @return {TimeRange}
         *         The value of `buffered` from the media element.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
         */
        'buffered',

        /**
         * Get the value of `volume` from the media element. `volume` indicates
         * the current playback volume of audio for a media. `volume` will be a value from 0
         * (silent) to 1 (loudest and default).
         *
         * @method Html5#volume
         * @return {number}
         *         The value of `volume` from the media element. Value will be between 0-1.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
         */
        'volume',

        /**
         * Get the value of `poster` from the media element. `poster` indicates
         * that the url of an image file that can/will be shown when no media data is available.
         *
         * @method Html5#poster
         * @return {string}
         *         The value of `poster` from the media element. Value will be a url to an
         *         image.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
         */
        'poster',

        /**
         * Get the value of `preload` from the media element. `preload` indicates
         * what should download before the media is interacted with. It can have the following
         * values:
         * - none: nothing should be downloaded
         * - metadata: poster and the first few frames of the media may be downloaded to get
         *   media dimensions and other metadata
         * - auto: allow the media and metadata for the media to be downloaded before
         *    interaction
         *
         * @method Html5#preload
         * @return {string}
         *         The value of `preload` from the media element. Will be 'none', 'metadata',
         *         or 'auto'.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
         */
        'preload',

        /**
         * Get the value of the `error` from the media element. `error` indicates any
         * MediaError that may have occured during playback. If error returns null there is no
         * current error.
         *
         * @method Html5#error
         * @return {MediaError|null}
         *         The value of `error` from the media element. Will be `MediaError` if there
         *         is a current error and null otherwise.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
         */
        'error',

        /**
         * Get the value of `seeking` from the media element. `seeking` indicates whether the
         * media is currently seeking to a new position or not.
         *
         * @method Html5#seeking
         * @return {boolean}
         *         - The value of `seeking` from the media element.
         *         - True indicates that the media is currently seeking to a new position.
         *         - Flase indicates that the media is not seeking to a new position at this time.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
         */
        'seeking',

        /**
         * Get the value of `seekable` from the media element. `seekable` returns a
         * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
         *
         * @method Html5#seekable
         * @return {TimeRange}
         *         The value of `seekable` from the media element. A `TimeRange` object
         *         indicating the current ranges of time that can be seeked to.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
         */
        'seekable',

        /**
         * Get the value of `ended` from the media element. `ended` indicates whether
         * the media has reached the end or not.
         *
         * @method Html5#ended
         * @return {boolean}
         *         - The value of `ended` from the media element.
         *         - True indicates that the media has ended.
         *         - False indicates that the media has not ended.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
         */
        'ended',

        /**
         * Get the value of `playbackRate` from the media element. `playbackRate` indicates
         * the rate at which the media is currently playing back. Examples:
         *   - if playbackRate is set to 2, media will play twice as fast.
         *   - if playbackRate is set to 0.5, media will play half as fast.
         *
         * @method Html5#playbackRate
         * @return {number}
         *         The value of `playbackRate` from the media element. A number indicating
         *         the current playback speed of the media, where 1 is normal speed.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
         */
        'playbackRate',

        /**
         * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
         * the rate at which the media is currently playing back. This value will not indicate the current
         * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
         *
         * Examples:
         *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
         *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
         *
         * @method Html5.prototype.defaultPlaybackRate
         * @return {number}
         *         The value of `defaultPlaybackRate` from the media element. A number indicating
         *         the current playback speed of the media, where 1 is normal speed.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
         */
        'defaultPlaybackRate',

        /**
         * Get the value of `played` from the media element. `played` returns a `TimeRange`
         * object representing points in the media timeline that have been played.
         *
         * @method Html5#played
         * @return {TimeRange}
         *         The value of `played` from the media element. A `TimeRange` object indicating
         *         the ranges of time that have been played.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
         */
        'played',

        /**
         * Get the value of `networkState` from the media element. `networkState` indicates
         * the current network state. It returns an enumeration from the following list:
         * - 0: NETWORK_EMPTY
         * - 1: NEWORK_IDLE
         * - 2: NETWORK_LOADING
         * - 3: NETWORK_NO_SOURCE
         *
         * @method Html5#networkState
         * @return {number}
         *         The value of `networkState` from the media element. This will be a number
         *         from the list in the description.
         *
         * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
         */
        'networkState',

        /**
         * Get the value of `readyState` from the media element. `readyState` indicates
         * the current state of the media element. It returns an enumeration from the
         * following list:
         * - 0: HAVE_NOTHING
         * - 1: HAVE_METADATA
         * - 2: HAVE_CURRENT_DATA
         * - 3: HAVE_FUTURE_DATA
         * - 4: HAVE_ENOUGH_DATA
         *
         * @method Html5#readyState
         * @return {number}
         *         The value of `readyState` from the media element. This will be a number
         *         from the list in the description.
         *
         * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
         */
        'readyState',

        /**
         * Get the value of `videoWidth` from the video element. `videoWidth` indicates
         * the current width of the video in css pixels.
         *
         * @method Html5#videoWidth
         * @return {number}
         *         The value of `videoWidth` from the video element. This will be a number
         *         in css pixels.
         *
         * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
         */
        'videoWidth',

        /**
         * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
         * the current height of the video in css pixels.
         *
         * @method Html5#videoHeight
         * @return {number}
         *         The value of `videoHeight` from the video element. This will be a number
         *         in css pixels.
         *
         * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
         */
        'videoHeight'].forEach(function (prop) {
        Html5.prototype[prop] = function () {
            return this.el_[prop];
        };
    });

// Wrap native properties with a setter in this format:
// set + toTitleCase(name)
// The list is as follows:
// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate
    [
        /**
         * Set the value of `volume` on the media element. `volume` indicates the current
         * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
         * so on.
         *
         * @method Html5#setVolume
         * @param {number} percentAsDecimal
         *        The volume percent as a decimal. Valid range is from 0-1.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
         */
        'volume',

        /**
         * Set the value of `src` on the media element. `src` indicates the current
         * {@link Tech~SourceObject} for the media.
         *
         * @method Html5#setSrc
         * @param {Tech~SourceObject} src
         *        The source object to set as the current source.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
         */
        'src',

        /**
         * Set the value of `poster` on the media element. `poster` is the url to
         * an image file that can/will be shown when no media data is available.
         *
         * @method Html5#setPoster
         * @param {string} poster
         *        The url to an image that should be used as the `poster` for the media
         *        element.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
         */
        'poster',

        /**
         * Set the value of `preload` on the media element. `preload` indicates
         * what should download before the media is interacted with. It can have the following
         * values:
         * - none: nothing should be downloaded
         * - metadata: poster and the first few frames of the media may be downloaded to get
         *   media dimensions and other metadata
         * - auto: allow the media and metadata for the media to be downloaded before
         *    interaction
         *
         * @method Html5#setPreload
         * @param {string} preload
         *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
         *         or 'auto'.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
         */
        'preload',

        /**
         * Set the value of `playbackRate` on the media element. `playbackRate` indicates
         * the rate at which the media should play back. Examples:
         *   - if playbackRate is set to 2, media will play twice as fast.
         *   - if playbackRate is set to 0.5, media will play half as fast.
         *
         * @method Html5#setPlaybackRate
         * @return {number}
         *         The value of `playbackRate` from the media element. A number indicating
         *         the current playback speed of the media, where 1 is normal speed.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
         */
        'playbackRate',

        /**
         * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
         * the rate at which the media should play back upon initial startup. Changing this value
         * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
         *
         * Example Values:
         *   - if playbackRate is set to 2, media will play twice as fast.
         *   - if playbackRate is set to 0.5, media will play half as fast.
         *
         * @method Html5.prototype.setDefaultPlaybackRate
         * @return {number}
         *         The value of `defaultPlaybackRate` from the media element. A number indicating
         *         the current playback speed of the media, where 1 is normal speed.
         *
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
         */
        'defaultPlaybackRate'].forEach(function (prop) {
        Html5.prototype['set' + toTitleCase(prop)] = function (v) {
            this.el_[prop] = v;
        };
    });

// wrap native functions with a function
// The list is as follows:
// pause, load play
    [
        /**
         * A wrapper around the media elements `pause` function. This will call the `HTML5`
         * media elements `pause` function.
         *
         * @method Html5#pause
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
         */
        'pause',

        /**
         * A wrapper around the media elements `load` function. This will call the `HTML5`s
         * media element `load` function.
         *
         * @method Html5#load
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
         */
        'load',

        /**
         * A wrapper around the media elements `play` function. This will call the `HTML5`s
         * media element `play` function.
         *
         * @method Html5#play
         * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
         */
        'play'].forEach(function (prop) {
        Html5.prototype[prop] = function () {
            return this.el_[prop]();
        };
    });

    Tech.withSourceHandlers(Html5);

    /**
     * Native source handler for Html5, simply passes the source to the media element.
     *
     * @proprety {Tech~SourceObject} source
     *        The source object
     *
     * @proprety {Html5} tech
     *        The instance of the HTML5 tech.
     */
    Html5.nativeSourceHandler = {};

    /**
     * Check if the media element can play the given mime type.
     *
     * @param {string} type
     *        The mimetype to check
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */
    Html5.nativeSourceHandler.canPlayType = function (type) {
        // IE9 on Windows 7 without MediaPlayer throws an error here
        // https://github.com/videojs/video.js/issues/519
        try {
            return Html5.TEST_VID.canPlayType(type);
        } catch (e) {
            return '';
        }
    };

    /**
     * Check if the media element can handle a source natively.
     *
     * @param {Tech~SourceObject} source
     *         The source object
     *
     * @param {Object} [options]
     *         Options to be passed to the tech.
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string).
     */
    Html5.nativeSourceHandler.canHandleSource = function (source, options) {

        // If a type was provided we should rely on that
        if (source.type) {
            return Html5.nativeSourceHandler.canPlayType(source.type);

            // If no type, fall back to checking 'video/[EXTENSION]'
        } else if (source.src) {
            var ext = getFileExtension(source.src);

            return Html5.nativeSourceHandler.canPlayType('video/' + ext);
        }

        return '';
    };

    /**
     * Pass the source to the native media element.
     *
     * @param {Tech~SourceObject} source
     *        The source object
     *
     * @param {Html5} tech
     *        The instance of the Html5 tech
     *
     * @param {Object} [options]
     *        The options to pass to the source
     */
    Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
        tech.setSrc(source.src);
    };

    /**
     * A noop for the native dispose function, as cleanup is not needed.
     */
    Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
    Html5.registerSourceHandler(Html5.nativeSourceHandler);

    Tech.registerTech('Html5', Html5);

    var _templateObject$1 = taggedTemplateLiteralLoose(['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      '], ['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      ']);

    /**
     * @file player.js
     */
// Subclasses Component
// The following imports are used only to ensure that the corresponding modules
// are always included in the video.js package. Importing the modules will
// execute them and they will register themselves with video.js.
// Import Html5 tech, at least for disposing the original video tag.
// The following tech events are simply re-triggered
// on the player when they happen
    var TECH_EVENTS_RETRIGGER = [
        /**
         * Fired while the user agent is downloading media data.
         *
         * @event Player#progress
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `progress` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechProgress_
         * @fires Player#progress
         * @listens Tech#progress
         */
        'progress',

        /**
         * Fires when the loading of an audio/video is aborted.
         *
         * @event Player#abort
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `abort` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechAbort_
         * @fires Player#abort
         * @listens Tech#abort
         */
        'abort',

        /**
         * Fires when the browser is intentionally not getting media data.
         *
         * @event Player#suspend
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `suspend` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechSuspend_
         * @fires Player#suspend
         * @listens Tech#suspend
         */
        'suspend',

        /**
         * Fires when the current playlist is empty.
         *
         * @event Player#emptied
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `emptied` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechEmptied_
         * @fires Player#emptied
         * @listens Tech#emptied
         */
        'emptied',
        /**
         * Fires when the browser is trying to get media data, but data is not available.
         *
         * @event Player#stalled
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `stalled` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechStalled_
         * @fires Player#stalled
         * @listens Tech#stalled
         */
        'stalled',

        /**
         * Fires when the browser has loaded meta data for the audio/video.
         *
         * @event Player#loadedmetadata
         * @type {EventTarget~Event}
         */
        /**
         * Retrigger the `stalled` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechLoadedmetadata_
         * @fires Player#loadedmetadata
         * @listens Tech#loadedmetadata
         */
        'loadedmetadata',

        /**
         * Fires when the browser has loaded the current frame of the audio/video.
         *
         * @event Player#loadeddata
         * @type {event}
         */
        /**
         * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechLoaddeddata_
         * @fires Player#loadeddata
         * @listens Tech#loadeddata
         */
        'loadeddata',

        /**
         * Fires when the current playback position has changed.
         *
         * @event Player#timeupdate
         * @type {event}
         */
        /**
         * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechTimeUpdate_
         * @fires Player#timeupdate
         * @listens Tech#timeupdate
         */
        'timeupdate',

        /**
         * Fires when the playing speed of the audio/video is changed
         *
         * @event Player#ratechange
         * @type {event}
         */
        /**
         * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechRatechange_
         * @fires Player#ratechange
         * @listens Tech#ratechange
         */
        'ratechange',

        /**
         * Fires when the video's intrinsic dimensions change
         *
         * @event Player#resize
         * @type {event}
         */
        /**
         * Retrigger the `resize` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechResize_
         * @fires Player#resize
         * @listens Tech#resize
         */
        'resize',

        /**
         * Fires when the volume has been changed
         *
         * @event Player#volumechange
         * @type {event}
         */
        /**
         * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechVolumechange_
         * @fires Player#volumechange
         * @listens Tech#volumechange
         */
        'volumechange',

        /**
         * Fires when the text track has been changed
         *
         * @event Player#texttrackchange
         * @type {event}
         */
        /**
         * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
         *
         * @private
         * @method Player#handleTechTexttrackchange_
         * @fires Player#texttrackchange
         * @listens Tech#texttrackchange
         */
        'texttrackchange'];

    /**
     * An instance of the `Player` class is created when any of the Video.js setup methods
     * are used to initialize a video.
     *
     * After an instance has been created it can be accessed globally in two ways:
     * 1. By calling `videojs('example_video_1');`
     * 2. By using it directly via  `videojs.players.example_video_1;`
     *
     * @extends Component
     */

    var Player = function (_Component) {
        inherits(Player, _Component);

        /**
         * Create an instance of this class.
         *
         * @param {Element} tag
         *        The original video DOM element used for configuring options.
         *
         * @param {Object} [options]
         *        Object of option names and values.
         *
         * @param {Component~ReadyCallback} [ready]
         *        Ready callback function.
         */
        function Player(tag, options, ready) {
            classCallCheck(this, Player);

            // Make sure tag ID exists
            tag.id = tag.id || 'vjs_video_' + newGUID();

            // Set Options
            // The options argument overrides options set in the video tag
            // which overrides globally set options.
            // This latter part coincides with the load order
            // (tag must exist before Player)
            options = assign(Player.getTagSettings(tag), options);

            // Delay the initialization of children because we need to set up
            // player properties first, and can't use `this` before `super()`
            options.initChildren = false;

            // Same with creating the element
            options.createEl = false;

            // don't auto mixin the evented mixin
            options.evented = false;

            // we don't want the player to report touch activity on itself
            // see enableTouchActivity in Component
            options.reportTouchActivity = false;

            // If language is not set, get the closest lang attribute
            if (!options.language) {
                if (typeof tag.closest === 'function') {
                    var closest = tag.closest('[lang]');

                    if (closest && closest.getAttribute) {
                        options.language = closest.getAttribute('lang');
                    }
                } else {
                    var element = tag;

                    while (element && element.nodeType === 1) {
                        if (getAttributes(element).hasOwnProperty('lang')) {
                            options.language = element.getAttribute('lang');
                            break;
                        }
                        element = element.parentNode;
                    }
                }
            }

            // Run base component initializing with new options

            // Turn off API access because we're loading a new tech that might load asynchronously
            var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

            _this.isReady_ = false;

            // Init state hasStarted_
            _this.hasStarted_ = false;

            // Init state userActive_
            _this.userActive_ = false;

            // if the global option object was accidentally blown away by
            // someone, bail early with an informative error
            if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
                throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
            }

            // Store the original tag used to set options
            _this.tag = tag;

            // Store the tag attributes used to restore html5 element
            _this.tagAttributes = tag && getAttributes(tag);

            // Update current language
            _this.language(_this.options_.language);

            // Update Supported Languages
            if (options.languages) {
                // Normalise player option languages to lowercase
                var languagesToLower = {};

                Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {
                    languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];
                });
                _this.languages_ = languagesToLower;
            } else {
                _this.languages_ = Player.prototype.options_.languages;
            }

            // Cache for video property values.
            _this.cache_ = {};

            // Set poster
            _this.poster_ = options.poster || '';

            // Set controls
            _this.controls_ = !!options.controls;

            // Set default values for lastVolume
            _this.cache_.lastVolume = 1;

            // Original tag settings stored in options
            // now remove immediately so native controls don't flash.
            // May be turned back on by HTML5 tech if nativeControlsForTouch is true
            tag.controls = false;
            tag.removeAttribute('controls');

            /*
     * Store the internal state of scrubbing
     *
     * @private
     * @return {Boolean} True if the user is scrubbing
     */
            _this.scrubbing_ = false;

            _this.el_ = _this.createEl();

            // Make this an evented object and use `el_` as its event bus.
            evented(_this, { eventBusKey: 'el_' });

            // We also want to pass the original player options to each component and plugin
            // as well so they don't need to reach back into the player for options later.
            // We also need to do another copy of this.options_ so we don't end up with
            // an infinite loop.
            var playerOptionsCopy = mergeOptions(_this.options_);

            // Load plugins
            if (options.plugins) {
                var plugins = options.plugins;

                Object.keys(plugins).forEach(function (name$$1) {
                    if (typeof this[name$$1] === 'function') {
                        this[name$$1](plugins[name$$1]);
                    } else {
                        throw new Error('plugin "' + name$$1 + '" does not exist');
                    }
                }, _this);
            }

            _this.options_.playerOptions = playerOptionsCopy;

            _this.middleware_ = [];

            _this.initChildren();

            // Set isAudio based on whether or not an audio tag was used
            _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

            // Update controls className. Can't do this when the controls are initially
            // set because the element doesn't exist yet.
            if (_this.controls()) {
                _this.addClass('vjs-controls-enabled');
            } else {
                _this.addClass('vjs-controls-disabled');
            }

            // Set ARIA label and region role depending on player type
            _this.el_.setAttribute('role', 'region');
            if (_this.isAudio()) {
                _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));
            } else {
                _this.el_.setAttribute('aria-label', _this.localize('Video Player'));
            }

            if (_this.isAudio()) {
                _this.addClass('vjs-audio');
            }

            if (_this.flexNotSupported_()) {
                _this.addClass('vjs-no-flex');
            }

            // TODO: Make this smarter. Toggle user state between touching/mousing
            // using events, since devices can have both touch and mouse events.
            // if (browser.TOUCH_ENABLED) {
            //   this.addClass('vjs-touch-enabled');
            // }

            // iOS Safari has broken hover handling
            if (!IS_IOS) {
                _this.addClass('vjs-workinghover');
            }

            // Make player easily findable by ID
            Player.players[_this.id_] = _this;

            // Add a major version class to aid css in plugins
            var majorVersion = version.split('.')[0];

            _this.addClass('vjs-v' + majorVersion);

            // When the player is first initialized, trigger activity so components
            // like the control bar show themselves if needed
            _this.userActive(true);
            _this.reportUserActivity();
            _this.listenForUserActivity_();

            _this.on('fullscreenchange', _this.handleFullscreenChange_);
            _this.on('stageclick', _this.handleStageClick_);

            _this.changingSrc_ = false;
            _this.playWaitingForReady_ = false;
            _this.playOnLoadstart_ = null;

            _this.forceAutoplayInChrome_();
            return _this;
        }

        /**
         * Destroys the video player and does any necessary cleanup.
         *
         * This is especially helpful if you are dynamically adding and removing videos
         * to/from the DOM.
         *
         * @fires Player#dispose
         */


        Player.prototype.dispose = function dispose() {
            /**
             * Called when the player is being disposed of.
             *
             * @event Player#dispose
             * @type {EventTarget~Event}
             */
            this.trigger('dispose');
            // prevent dispose from being called twice
            this.off('dispose');

            if (this.styleEl_ && this.styleEl_.parentNode) {
                this.styleEl_.parentNode.removeChild(this.styleEl_);
                this.styleEl_ = null;
            }

            // Kill reference to this player
            Player.players[this.id_] = null;

            if (this.tag && this.tag.player) {
                this.tag.player = null;
            }

            if (this.el_ && this.el_.player) {
                this.el_.player = null;
            }

            if (this.tech_) {
                this.tech_.dispose();
            }

            if (this.playerElIngest_) {
                this.playerElIngest_ = null;
            }

            if (this.tag) {
                this.tag = null;
            }

            // the actual .el_ is removed here
            _Component.prototype.dispose.call(this);
        };

        /**
         * Create the `Player`'s DOM element.
         *
         * @return {Element}
         *         The DOM element that gets created.
         */


        Player.prototype.createEl = function createEl$$1() {
            var tag = this.tag;
            var el = void 0;
            var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');
            var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';

            if (playerElIngest) {
                el = this.el_ = tag.parentNode;
            } else if (!divEmbed) {
                el = this.el_ = _Component.prototype.createEl.call(this, 'div');
            }

            // Copy over all the attributes from the tag, including ID and class
            // ID will now reference player box, not the video tag
            var attrs = getAttributes(tag);

            if (divEmbed) {
                el = this.el_ = tag;
                tag = this.tag = document_1.createElement('video');
                while (el.children.length) {
                    tag.appendChild(el.firstChild);
                }

                if (!hasClass(el, 'video-js')) {
                    addClass(el, 'video-js');
                }

                el.appendChild(tag);

                playerElIngest = this.playerElIngest_ = el;
            }

            // set tabindex to -1 so we could focus on the player element
            tag.setAttribute('tabindex', '-1');

            // Remove width/height attrs from tag so CSS can make it 100% width/height
            tag.removeAttribute('width');
            tag.removeAttribute('height');

            Object.getOwnPropertyNames(attrs).forEach(function (attr) {
                // workaround so we don't totally break IE7
                // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
                if (attr === 'class') {
                    el.className += ' ' + attrs[attr];

                    if (divEmbed) {
                        tag.className += ' ' + attrs[attr];
                    }
                } else {
                    el.setAttribute(attr, attrs[attr]);

                    if (divEmbed) {
                        tag.setAttribute(attr, attrs[attr]);
                    }
                }
            });

            // Update tag id/class for use as HTML5 playback tech
            // Might think we should do this after embedding in container so .vjs-tech class
            // doesn't flash 100% width/height, but class only applies with .video-js parent
            tag.playerId = tag.id;
            tag.id += '_html5_api';
            tag.className = 'vjs-tech';

            // Make player findable on elements
            tag.player = el.player = this;
            // Default state of video is paused
            this.addClass('vjs-paused');

            // Add a style element in the player that we'll use to set the width/height
            // of the player in a way that's still overrideable by CSS, just like the
            // video element
            if (window_1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                this.styleEl_ = createStyleElement('vjs-styles-dimensions');
                var defaultsStyleEl = $('.vjs-styles-defaults');
                var head = $('head');

                head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
            }

            // Pass in the width/height/aspectRatio options which will update the style el
            this.width(this.options_.width);
            this.height(this.options_.height);
            this.fluid(this.options_.fluid);
            this.aspectRatio(this.options_.aspectRatio);

            // Hide any links within the video/audio tag, because IE doesn't hide them completely.
            var links = tag.getElementsByTagName('a');

            for (var i = 0; i < links.length; i++) {
                var linkEl = links.item(i);

                addClass(linkEl, 'vjs-hidden');
                linkEl.setAttribute('hidden', 'hidden');
            }

            // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
            // keep track of the original for later so we can know if the source originally failed
            tag.initNetworkState_ = tag.networkState;

            // Wrap video tag in div (el/box) container
            if (tag.parentNode && !playerElIngest) {
                tag.parentNode.insertBefore(el, tag);
            }

            // insert the tag as the first child of the player element
            // then manually add it to the children array so that this.addChild
            // will work properly for other components
            //
            // Breaks iPhone, fixed in HTML5 setup.
            prependTo(tag, el);
            this.children_.unshift(tag);

            // Set lang attr on player to ensure CSS :lang() in consistent with player
            // if it's been set to something different to the doc
            this.el_.setAttribute('lang', this.language_);

            this.el_ = el;

            return el;
        };

        /**
         * A getter/setter for the `Player`'s width. Returns the player's configured value.
         * To get the current width use `currentWidth()`.
         *
         * @param {number} [value]
         *        The value to set the `Player`'s width to.
         *
         * @param {boolean} [skipListeners]
         *        Skip the playerresize event trigger
         *
         * @return {number}
         *         The current width of the `Player` when getting.
         */


        Player.prototype.width = function width(value, skipListeners) {
            return this.dimension('width', value, skipListeners);
        };

        /**
         * A getter/setter for the `Player`'s height. Returns the player's configured value.
         * To get the current height use `currentheight()`.
         *
         * @param {number} [value]
         *        The value to set the `Player`'s heigth to.
         *
         * @param {boolean} [skipListeners]
         *        Skip the playerresize event trigger
         *
         * @return {number}
         *         The current height of the `Player` when getting.
         */


        Player.prototype.height = function height(value, skipListeners) {
            return this.dimension('height', value, skipListeners);
        };

        /**
         * A getter/setter for the `Player`'s width & height.
         *
         * @fires Player#playerresize
         *
         * @param {string} dimension
         *        This string can be:
         *        - 'width'
         *        - 'height'
         *
         * @param {number} [value]
         *        Value for dimension specified in the first argument.
         *
         * @param {boolean} [skipListeners]
         *        Skip the playerresize event trigger
         *
         * @return {number}
         *         The dimension arguments value when getting (width/height).
         */


        Player.prototype.dimension = function dimension(_dimension, value, skipListeners) {
            var privDimension = _dimension + '_';

            if (value === undefined) {
                return this[privDimension] || 0;
            }

            if (value === '') {
                // If an empty string is given, reset the dimension to be automatic
                this[privDimension] = undefined;
                this.updateStyleEl_();
                return;
            }

            var parsedVal = parseFloat(value);

            if (isNaN(parsedVal)) {
                log$1.error('Improper value "' + value + '" supplied for for ' + _dimension);
                return;
            }

            this[privDimension] = parsedVal;
            this.updateStyleEl_();

            // skipListeners allows us to avoid triggering the resize event when setting both width and height
            if (this.isReady_ && !skipListeners) {
                /**
                 * Triggered when the player is resized.
                 *
                 * @event Player#playerresize
                 * @type {EventTarget~Event}
                 */
                this.trigger('playerresize');
            }
        };

        /**
         * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
         *
         * @param {boolean} [bool]
         *        - A value of true adds the class.
         *        - A value of false removes the class.
         *        - No value will toggle the fluid class.
         *
         * @return {boolean|undefined}
         *         - The value of fluid when getting.
         *         - `undefined` when setting.
         */


        Player.prototype.fluid = function fluid(bool) {
            if (bool === undefined) {
                return !!this.fluid_;
            }

            this.fluid_ = !!bool;

            if (bool) {
                this.addClass('vjs-fluid');
            } else {
                this.removeClass('vjs-fluid');
            }

            this.updateStyleEl_();
        };

        /**
         * Get/Set the aspect ratio
         *
         * @param {string} [ratio]
         *        Aspect ratio for player
         *
         * @return {string|undefined}
         *         returns the current aspect ratio when getting
         */

        /**
         * A getter/setter for the `Player`'s aspect ratio.
         *
         * @param {string} [ratio]
         *        The value to set the `Player's aspect ratio to.
         *
         * @return {string|undefined}
         *         - The current aspect ratio of the `Player` when getting.
         *         - undefined when setting
         */


        Player.prototype.aspectRatio = function aspectRatio(ratio) {
            if (ratio === undefined) {
                return this.aspectRatio_;
            }

            // Check for width:height format
            if (!/^\d+\:\d+$/.test(ratio)) {
                throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
            }
            this.aspectRatio_ = ratio;

            // We're assuming if you set an aspect ratio you want fluid mode,
            // because in fixed mode you could calculate width and height yourself.
            this.fluid(true);

            this.updateStyleEl_();
        };

        /**
         * Update styles of the `Player` element (height, width and aspect ratio).
         *
         * @private
         * @listens Tech#loadedmetadata
         */


        Player.prototype.updateStyleEl_ = function updateStyleEl_() {
            if (window_1.VIDEOJS_NO_DYNAMIC_STYLE === true) {
                var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
                var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
                var techEl = this.tech_ && this.tech_.el();

                if (techEl) {
                    if (_width >= 0) {
                        techEl.width = _width;
                    }
                    if (_height >= 0) {
                        techEl.height = _height;
                    }
                }

                return;
            }

            var width = void 0;
            var height = void 0;
            var aspectRatio = void 0;
            var idClass = void 0;

            // The aspect ratio is either used directly or to calculate width and height.
            if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
                // Use any aspectRatio that's been specifically set
                aspectRatio = this.aspectRatio_;
            } else if (this.videoWidth() > 0) {
                // Otherwise try to get the aspect ratio from the video metadata
                aspectRatio = this.videoWidth() + ':' + this.videoHeight();
            } else {
                // Or use a default. The video element's is 2:1, but 16:9 is more common.
                aspectRatio = '16:9';
            }

            // Get the ratio as a decimal we can use to calculate dimensions
            var ratioParts = aspectRatio.split(':');
            var ratioMultiplier = ratioParts[1] / ratioParts[0];

            if (this.width_ !== undefined) {
                // Use any width that's been specifically set
                width = this.width_;
            } else if (this.height_ !== undefined) {
                // Or calulate the width from the aspect ratio if a height has been set
                width = this.height_ / ratioMultiplier;
            } else {
                // Or use the video's metadata, or use the video el's default of 300
                width = this.videoWidth() || 300;
            }

            if (this.height_ !== undefined) {
                // Use any height that's been specifically set
                height = this.height_;
            } else {
                // Otherwise calculate the height from the ratio and the width
                height = width * ratioMultiplier;
            }

            // Ensure the CSS class is valid by starting with an alpha character
            if (/^[^a-zA-Z]/.test(this.id())) {
                idClass = 'dimensions-' + this.id();
            } else {
                idClass = this.id() + '-dimensions';
            }

            // Ensure the right class is still on the player for the style element
            this.addClass(idClass);

            setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
        };

        /**
         * Load/Create an instance of playback {@link Tech} including element
         * and API methods. Then append the `Tech` element in `Player` as a child.
         *
         * @param {string} techName
         *        name of the playback technology
         *
         * @param {string} source
         *        video source
         *
         * @private
         */


        Player.prototype.loadTech_ = function loadTech_(techName, source) {
            var _this2 = this;

            // Pause and remove current playback technology
            if (this.tech_) {
                this.unloadTech_();
            }

            var titleTechName = toTitleCase(techName);
            var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);

            // get rid of the HTML5 video tag as soon as we are using another tech
            if (titleTechName !== 'Html5' && this.tag) {
                Tech.getTech('Html5').disposeMediaElement(this.tag);
                this.tag.player = null;
                this.tag = null;
            }

            this.techName_ = titleTechName;

            // Turn off API access because we're loading a new tech that might load asynchronously
            this.isReady_ = false;

            // Grab tech-specific options from player options and add source and parent element to use.
            var techOptions = {
                source: source,
                'nativeControlsForTouch': this.options_.nativeControlsForTouch,
                'playerId': this.id(),
                'techId': this.id() + '_' + titleTechName + '_api',
                'autoplay': this.options_.autoplay,
                'playsinline': this.options_.playsinline,
                'preload': this.options_.preload,
                'loop': this.options_.loop,
                'muted': this.options_.muted,
                'poster': this.poster(),
                'language': this.language(),
                'playerElIngest': this.playerElIngest_ || false,
                'vtt.js': this.options_['vtt.js']
            };

            ALL.names.forEach(function (name$$1) {
                var props = ALL[name$$1];

                techOptions[props.getterName] = _this2[props.privateName];
            });

            assign(techOptions, this.options_[titleTechName]);
            assign(techOptions, this.options_[camelTechName]);
            assign(techOptions, this.options_[techName.toLowerCase()]);

            if (this.tag) {
                techOptions.tag = this.tag;
            }

            if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
                techOptions.startTime = this.cache_.currentTime;
            }

            // Initialize tech instance
            var TechClass = Tech.getTech(techName);

            if (!TechClass) {
                throw new Error('No Tech named \'' + titleTechName + '\' exists! \'' + titleTechName + '\' should be registered using videojs.registerTech()\'');
            }

            this.tech_ = new TechClass(techOptions);

            // player.triggerReady is always async, so don't need this to be async
            this.tech_.ready(bind(this, this.handleTechReady_), true);

            textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

            // Listen to all HTML5-defined events and trigger them on the player
            TECH_EVENTS_RETRIGGER.forEach(function (event) {
                _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);
            });
            this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
            this.on(this.tech_, 'waiting', this.handleTechWaiting_);
            this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
            this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
            this.on(this.tech_, 'playing', this.handleTechPlaying_);
            this.on(this.tech_, 'ended', this.handleTechEnded_);
            this.on(this.tech_, 'seeking', this.handleTechSeeking_);
            this.on(this.tech_, 'seeked', this.handleTechSeeked_);
            this.on(this.tech_, 'play', this.handleTechPlay_);
            this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
            this.on(this.tech_, 'pause', this.handleTechPause_);
            this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
            this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
            this.on(this.tech_, 'error', this.handleTechError_);
            this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
            this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
            this.on(this.tech_, 'textdata', this.handleTechTextData_);

            this.usingNativeControls(this.techGet_('controls'));

            if (this.controls() && !this.usingNativeControls()) {
                this.addTechControlsListeners_();
            }

            // Add the tech element in the DOM if it was not already there
            // Make sure to not insert the original video element if using Html5
            if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
                prependTo(this.tech_.el(), this.el());
            }

            // Get rid of the original video tag reference after the first tech is loaded
            if (this.tag) {
                this.tag.player = null;
                this.tag = null;
            }
        };

        /**
         * Unload and dispose of the current playback {@link Tech}.
         *
         * @private
         */


        Player.prototype.unloadTech_ = function unloadTech_() {
            var _this3 = this;

            // Save the current text tracks so that we can reuse the same text tracks with the next tech
            ALL.names.forEach(function (name$$1) {
                var props = ALL[name$$1];

                _this3[props.privateName] = _this3[props.getterName]();
            });
            this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);

            this.isReady_ = false;

            this.tech_.dispose();

            this.tech_ = false;
        };

        /**
         * Return a reference to the current {@link Tech}.
         * It will print a warning by default about the danger of using the tech directly
         * but any argument that is passed in will silence the warning.
         *
         * @param {*} [safety]
         *        Anything passed in to silence the warning
         *
         * @return {Tech}
         *         The Tech
         */


        Player.prototype.tech = function tech(safety) {
            if (safety === undefined) {
                log$1.warn(tsml(_templateObject$1));
            }

            return this.tech_;
        };

        /**
         * Set up click and touch listeners for the playback element
         *
         * - On desktops: a click on the video itself will toggle playback
         * - On mobile devices: a click on the video toggles controls
         *   which is done by toggling the user state between active and
         *   inactive
         * - A tap can signal that a user has become active or has become inactive
         *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
         *   quick tap should hide them again (signaling the user is in an inactive
         *   viewing state)
         * - In addition to this, we still want the user to be considered inactive after
         *   a few seconds of inactivity.
         *
         * > Note: the only part of iOS interaction we can't mimic with this setup
         * is a touch and hold on the video element counting as activity in order to
         * keep the controls showing, but that shouldn't be an issue. A touch and hold
         * on any controls will still keep the user active
         *
         * @private
         */


        Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
            // Make sure to remove all the previous listeners in case we are called multiple times.
            this.removeTechControlsListeners_();

            // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
            // trigger mousedown/up.
            // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
            // Any touch events are set to block the mousedown event from happening
            this.on(this.tech_, 'mousedown', this.handleTechClick_);

            // If the controls were hidden we don't want that to change without a tap event
            // so we'll check if the controls were already showing before reporting user
            // activity
            this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
            this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
            this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

            // The tap listener needs to come after the touchend listener because the tap
            // listener cancels out any reportedUserActivity when setting userActive(false)
            this.on(this.tech_, 'tap', this.handleTechTap_);
        };

        /**
         * Remove the listeners used for click and tap controls. This is needed for
         * toggling to controls disabled, where a tap/touch should do nothing.
         *
         * @private
         */


        Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
            // We don't want to just use `this.off()` because there might be other needed
            // listeners added by techs that extend this.
            this.off(this.tech_, 'tap', this.handleTechTap_);
            this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
            this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
            this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
            this.off(this.tech_, 'mousedown', this.handleTechClick_);
        };

        /**
         * Player waits for the tech to be ready
         *
         * @private
         */


        Player.prototype.handleTechReady_ = function handleTechReady_() {
            this.triggerReady();

            // Keep the same volume as before
            if (this.cache_.volume) {
                this.techCall_('setVolume', this.cache_.volume);
            }

            // Look if the tech found a higher resolution poster while loading
            this.handleTechPosterChange_();

            // Update the duration if available
            this.handleTechDurationChange_();

            // Chrome and Safari both have issues with autoplay.
            // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
            // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
            // This fixes both issues. Need to wait for API, so it updates displays correctly
            if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
                try {
                    // Chrome Fix. Fixed in Chrome v16.
                    delete this.tag.poster;
                } catch (e) {
                    log$1('deleting tag.poster throws in some browsers', e);
                }
            }
        };

        /**
         * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
         * function will also trigger {@link Player#firstplay} if it is the first loadstart
         * for a video.
         *
         * @fires Player#loadstart
         * @fires Player#firstplay
         * @listens Tech#loadstart
         * @private
         */


        Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
            // TODO: Update to use `emptied` event instead. See #1277.

            this.removeClass('vjs-ended');
            this.removeClass('vjs-seeking');

            // reset the error state
            this.error(null);

            // If it's already playing we want to trigger a firstplay event now.
            // The firstplay event relies on both the play and loadstart events
            // which can happen in any order for a new source
            if (!this.paused()) {
                /**
                 * Fired when the user agent begins looking for media data
                 *
                 * @event Player#loadstart
                 * @type {EventTarget~Event}
                 */
                this.trigger('loadstart');
                this.trigger('firstplay');
            } else {
                // reset the hasStarted state
                this.hasStarted(false);
                this.trigger('loadstart');
            }
        };

        /**
         * Add/remove the vjs-has-started class
         *
         * @fires Player#firstplay
         *
         * @param {boolean} request
         *        - true: adds the class
         *        - false: remove the class
         *
         * @return {boolean}
         *         the boolean value of hasStarted_
         */


        Player.prototype.hasStarted = function hasStarted(request) {
            if (request === undefined) {
                // act as getter, if we have no request to change
                return this.hasStarted_;
            }

            if (request === this.hasStarted_) {
                return;
            }

            this.hasStarted_ = request;

            if (this.hasStarted_) {
                this.addClass('vjs-has-started');
                this.trigger('firstplay');
            } else {
                this.removeClass('vjs-has-started');
            }
        };

        /**
         * Fired whenever the media begins or resumes playback
         *
         * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
         * @fires Player#play
         * @listens Tech#play
         * @private
         */


        Player.prototype.handleTechPlay_ = function handleTechPlay_() {
            this.removeClass('vjs-ended');
            this.removeClass('vjs-paused');
            this.addClass('vjs-playing');

            // hide the poster when the user hits play
            this.hasStarted(true);
            /**
             * Triggered whenever an {@link Tech#play} event happens. Indicates that
             * playback has started or resumed.
             *
             * @event Player#play
             * @type {EventTarget~Event}
             */
            this.trigger('play');
        };

        /**
         * Retrigger the `waiting` event that was triggered by the {@link Tech}.
         *
         * @fires Player#waiting
         * @listens Tech#waiting
         * @private
         */


        Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
            var _this4 = this;

            this.addClass('vjs-waiting');
            /**
             * A readyState change on the DOM element has caused playback to stop.
             *
             * @event Player#waiting
             * @type {EventTarget~Event}
             */
            this.trigger('waiting');
            this.one('timeupdate', function () {
                return _this4.removeClass('vjs-waiting');
            });
        };

        /**
         * Retrigger the `canplay` event that was triggered by the {@link Tech}.
         * > Note: This is not consistent between browsers. See #1351
         *
         * @fires Player#canplay
         * @listens Tech#canplay
         * @private
         */


        Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
            this.removeClass('vjs-waiting');
            /**
             * The media has a readyState of HAVE_FUTURE_DATA or greater.
             *
             * @event Player#canplay
             * @type {EventTarget~Event}
             */
            this.trigger('canplay');
        };

        /**
         * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
         *
         * @fires Player#canplaythrough
         * @listens Tech#canplaythrough
         * @private
         */


        Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
            this.removeClass('vjs-waiting');
            /**
             * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
             * entire media file can be played without buffering.
             *
             * @event Player#canplaythrough
             * @type {EventTarget~Event}
             */
            this.trigger('canplaythrough');
        };

        /**
         * Retrigger the `playing` event that was triggered by the {@link Tech}.
         *
         * @fires Player#playing
         * @listens Tech#playing
         * @private
         */


        Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
            this.removeClass('vjs-waiting');
            /**
             * The media is no longer blocked from playback, and has started playing.
             *
             * @event Player#playing
             * @type {EventTarget~Event}
             */
            this.trigger('playing');
        };

        /**
         * Retrigger the `seeking` event that was triggered by the {@link Tech}.
         *
         * @fires Player#seeking
         * @listens Tech#seeking
         * @private
         */


        Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
            this.addClass('vjs-seeking');
            /**
             * Fired whenever the player is jumping to a new time
             *
             * @event Player#seeking
             * @type {EventTarget~Event}
             */
            this.trigger('seeking');
        };

        /**
         * Retrigger the `seeked` event that was triggered by the {@link Tech}.
         *
         * @fires Player#seeked
         * @listens Tech#seeked
         * @private
         */


        Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
            this.removeClass('vjs-seeking');
            /**
             * Fired when the player has finished jumping to a new time
             *
             * @event Player#seeked
             * @type {EventTarget~Event}
             */
            this.trigger('seeked');
        };

        /**
         * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
         *
         * @fires Player#firstplay
         * @listens Tech#firstplay
         * @deprecated As of 6.0 firstplay event is deprecated.
         * @deprecated As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
         * @private
         */


        Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
            // If the first starttime attribute is specified
            // then we will start at the given offset in seconds
            if (this.options_.starttime) {
                log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');
                this.currentTime(this.options_.starttime);
            }

            this.addClass('vjs-has-started');
            /**
             * Fired the first time a video is played. Not part of the HLS spec, and this is
             * probably not the best implementation yet, so use sparingly. If you don't have a
             * reason to prevent playback, use `myPlayer.one('play');` instead.
             *
             * @event Player#firstplay
             * @deprecated As of 6.0 firstplay event is deprecated.
             * @type {EventTarget~Event}
             */
            this.trigger('firstplay');
        };

        /**
         * Retrigger the `pause` event that was triggered by the {@link Tech}.
         *
         * @fires Player#pause
         * @listens Tech#pause
         * @private
         */


        Player.prototype.handleTechPause_ = function handleTechPause_() {
            this.removeClass('vjs-playing');
            this.addClass('vjs-paused');
            /**
             * Fired whenever the media has been paused
             *
             * @event Player#pause
             * @type {EventTarget~Event}
             */
            this.trigger('pause');
        };

        /**
         * Retrigger the `ended` event that was triggered by the {@link Tech}.
         *
         * @fires Player#ended
         * @listens Tech#ended
         * @private
         */


        Player.prototype.handleTechEnded_ = function handleTechEnded_() {
            this.addClass('vjs-ended');
            if (this.options_.loop) {
                this.currentTime(0);
                this.play();
            } else if (!this.paused()) {
                this.pause();
            }

            /**
             * Fired when the end of the media resource is reached (currentTime == duration)
             *
             * @event Player#ended
             * @type {EventTarget~Event}
             */
            this.trigger('ended');
        };

        /**
         * Fired when the duration of the media resource is first known or changed
         *
         * @listens Tech#durationchange
         * @private
         */


        Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
            this.duration(this.techGet_('duration'));
        };

        /**
         * Handle a click on the media element to play/pause
         *
         * @param {EventTarget~Event} event
         *        the event that caused this function to trigger
         *
         * @listens Tech#mousedown
         * @private
         */


        Player.prototype.handleTechClick_ = function handleTechClick_(event) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            // When controls are disabled a click should not toggle playback because
            // the click is considered a control
            if (!this.controls_) {
                return;
            }

            if (this.paused()) {
                this.play();
            } else {
                this.pause();
            }
        };

        /**
         * Handle a tap on the media element. It will toggle the user
         * activity state, which hides and shows the controls.
         *
         * @listens Tech#tap
         * @private
         */


        Player.prototype.handleTechTap_ = function handleTechTap_() {
            this.userActive(!this.userActive());
        };

        /**
         * Handle touch to start
         *
         * @listens Tech#touchstart
         * @private
         */


        Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
            this.userWasActive = this.userActive();
        };

        /**
         * Handle touch to move
         *
         * @listens Tech#touchmove
         * @private
         */


        Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
            if (this.userWasActive) {
                this.reportUserActivity();
            }
        };

        /**
         * Handle touch to end
         *
         * @param {EventTarget~Event} event
         *        the touchend event that triggered
         *        this function
         *
         * @listens Tech#touchend
         * @private
         */


        Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
            // Stop the mouse events from also happening
            event.preventDefault();
        };

        /**
         * Fired when the player switches in or out of fullscreen mode
         *
         * @private
         * @listens Player#fullscreenchange
         */


        Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
            if (this.isFullscreen()) {
                this.addClass('vjs-fullscreen');
            } else {
                this.removeClass('vjs-fullscreen');
            }
        };

        /**
         * native click events on the SWF aren't triggered on IE11, Win8.1RT
         * use stageclick events triggered from inside the SWF instead
         *
         * @private
         * @listens stageclick
         */


        Player.prototype.handleStageClick_ = function handleStageClick_() {
            this.reportUserActivity();
        };

        /**
         * Handle Tech Fullscreen Change
         *
         * @param {EventTarget~Event} event
         *        the fullscreenchange event that triggered this function
         *
         * @param {Object} data
         *        the data that was sent with the event
         *
         * @private
         * @listens Tech#fullscreenchange
         * @fires Player#fullscreenchange
         */


        Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
            if (data) {
                this.isFullscreen(data.isFullscreen);
            }
            /**
             * Fired when going in and out of fullscreen.
             *
             * @event Player#fullscreenchange
             * @type {EventTarget~Event}
             */
            this.trigger('fullscreenchange');
        };

        /**
         * Fires when an error occurred during the loading of an audio/video.
         *
         * @private
         * @listens Tech#error
         */


        Player.prototype.handleTechError_ = function handleTechError_() {
            var error = this.tech_.error();

            this.error(error);
        };

        /**
         * Retrigger the `textdata` event that was triggered by the {@link Tech}.
         *
         * @fires Player#textdata
         * @listens Tech#textdata
         * @private
         */


        Player.prototype.handleTechTextData_ = function handleTechTextData_() {
            var data = null;

            if (arguments.length > 1) {
                data = arguments[1];
            }

            /**
             * Fires when we get a textdata event from tech
             *
             * @event Player#textdata
             * @type {EventTarget~Event}
             */
            this.trigger('textdata', data);
        };

        /**
         * Get object for cached values.
         *
         * @return {Object}
         *         get the current object cache
         */


        Player.prototype.getCache = function getCache() {
            return this.cache_;
        };

        /**
         * Pass values to the playback tech
         *
         * @param {string} [method]
         *        the method to call
         *
         * @param {Object} arg
         *        the argument to pass
         *
         * @private
         */


        Player.prototype.techCall_ = function techCall_(method, arg) {
            // If it's not ready yet, call method when it is

            this.ready(function () {
                if (method in allowedSetters) {
                    return set$1(this.middleware_, this.tech_, method, arg);
                }

                try {
                    if (this.tech_) {
                        this.tech_[method](arg);
                    }
                } catch (e) {
                    log$1(e);
                    throw e;
                }
            }, true);
        };

        /**
         * Get calls can't wait for the tech, and sometimes don't need to.
         *
         * @param {string} method
         *        Tech method
         *
         * @return {Function|undefined}
         *         the method or undefined
         *
         * @private
         */


        Player.prototype.techGet_ = function techGet_(method) {
            if (!this.tech_ || !this.tech_.isReady_) {
                return;
            }

            if (method in allowedGetters) {
                return get$1(this.middleware_, this.tech_, method);
            }

            // Flash likes to die and reload when you hide or reposition it.
            // In these cases the object methods go away and we get errors.
            // When that happens we'll catch the errors and inform tech that it's not ready any more.
            try {
                return this.tech_[method]();
            } catch (e) {

                // When building additional tech libs, an expected method may not be defined yet
                if (this.tech_[method] === undefined) {
                    log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
                    throw e;
                }

                // When a method isn't available on the object it throws a TypeError
                if (e.name === 'TypeError') {
                    log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
                    this.tech_.isReady_ = false;
                    throw e;
                }

                // If error unknown, just log and throw
                log$1(e);
                throw e;
            }
        };

        /**
         * Attempt to begin playback at the first opportunity.
         *
         * @return {Promise|undefined}
         *         Returns a `Promise` only if the browser returns one and the player
         *         is ready to begin playback. For some browsers and all non-ready
         *         situations, this will return `undefined`.
         */


        Player.prototype.play = function play() {
            var _this5 = this;

            // If this is called while we have a play queued up on a loadstart, remove
            // that listener to avoid getting in a potentially bad state.
            if (this.playOnLoadstart_) {
                this.off('loadstart', this.playOnLoadstart_);
            }

            // If the player/tech is not ready, queue up another call to `play()` for
            // when it is. This will loop back into this method for another attempt at
            // playback when the tech is ready.
            if (!this.isReady_) {

                // Bail out if we're already waiting for `ready`!
                if (this.playWaitingForReady_) {
                    return;
                }

                this.playWaitingForReady_ = true;
                this.ready(function () {
                    _this5.playWaitingForReady_ = false;
                    silencePromise(_this5.play());
                });

                // If the player/tech is ready and we have a source, we can attempt playback.
            } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {
                return this.techGet_('play');

                // If the tech is ready, but we do not have a source, we'll need to wait
                // for both the `ready` and a `loadstart` when the source is finally
                // resolved by middleware and set on the player.
                //
                // This can happen if `play()` is called while changing sources or before
                // one has been set on the player.
            } else {

                this.playOnLoadstart_ = function () {
                    _this5.playOnLoadstart_ = null;
                    silencePromise(_this5.play());
                };

                this.one('loadstart', this.playOnLoadstart_);
            }
        };

        /**
         * Pause the video playback
         *
         * @return {Player}
         *         A reference to the player object this function was called on
         */


        Player.prototype.pause = function pause() {
            this.techCall_('pause');
        };

        /**
         * Check if the player is paused or has yet to play
         *
         * @return {boolean}
         *         - false: if the media is currently playing
         *         - true: if media is not currently playing
         */


        Player.prototype.paused = function paused() {
            // The initial state of paused should be true (in Safari it's actually false)
            return this.techGet_('paused') === false ? false : true;
        };

        /**
         * Get a TimeRange object representing the current ranges of time that the user
         * has played.
         *
         * @return {TimeRange}
         *         A time range object that represents all the increments of time that have
         *         been played.
         */


        Player.prototype.played = function played() {
            return this.techGet_('played') || createTimeRanges(0, 0);
        };

        /**
         * Returns whether or not the user is "scrubbing". Scrubbing is
         * when the user has clicked the progress bar handle and is
         * dragging it along the progress bar.
         *
         * @param {boolean} [isScrubbing]
         *        wether the user is or is not scrubbing
         *
         * @return {boolean}
         *         The value of scrubbing when getting
         */


        Player.prototype.scrubbing = function scrubbing(isScrubbing) {
            if (typeof isScrubbing === 'undefined') {
                return this.scrubbing_;
            }
            this.scrubbing_ = !!isScrubbing;

            if (isScrubbing) {
                this.addClass('vjs-scrubbing');
            } else {
                this.removeClass('vjs-scrubbing');
            }
        };

        /**
         * Get or set the current time (in seconds)
         *
         * @param {number|string} [seconds]
         *        The time to seek to in seconds
         *
         * @return {number}
         *         - the current time in seconds when getting
         */


        Player.prototype.currentTime = function currentTime(seconds) {
            if (typeof seconds !== 'undefined') {
                if (seconds < 0) {
                    seconds = 0;
                }
                this.techCall_('setCurrentTime', seconds);
                return;
            }

            // cache last currentTime and return. default to 0 seconds
            //
            // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
            // currentTime when scrubbing, but may not provide much performance benefit afterall.
            // Should be tested. Also something has to read the actual current time or the cache will
            // never get updated.
            this.cache_.currentTime = this.techGet_('currentTime') || 0;
            return this.cache_.currentTime;
        };

        /**
         * Normally gets the length in time of the video in seconds;
         * in all but the rarest use cases an argument will NOT be passed to the method
         *
         * > **NOTE**: The video must have started loading before the duration can be
         * known, and in the case of Flash, may not be known until the video starts
         * playing.
         *
         * @fires Player#durationchange
         *
         * @param {number} [seconds]
         *        The duration of the video to set in seconds
         *
         * @return {number}
         *         - The duration of the video in seconds when getting
         */


        Player.prototype.duration = function duration(seconds) {
            if (seconds === undefined) {
                // return NaN if the duration is not known
                return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
            }

            seconds = parseFloat(seconds);

            // Standardize on Inifity for signaling video is live
            if (seconds < 0) {
                seconds = Infinity;
            }

            if (seconds !== this.cache_.duration) {
                // Cache the last set value for optimized scrubbing (esp. Flash)
                this.cache_.duration = seconds;

                if (seconds === Infinity) {
                    this.addClass('vjs-live');
                } else {
                    this.removeClass('vjs-live');
                }
                /**
                 * @event Player#durationchange
                 * @type {EventTarget~Event}
                 */
                this.trigger('durationchange');
            }
        };

        /**
         * Calculates how much time is left in the video. Not part
         * of the native video API.
         *
         * @return {number}
         *         The time remaining in seconds
         */


        Player.prototype.remainingTime = function remainingTime() {
            return this.duration() - this.currentTime();
        };

        /**
         * A remaining time function that is intented to be used when
         * the time is to be displayed directly to the user.
         *
         * @return {number}
         *         The rounded time remaining in seconds
         */


        Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {
            return Math.floor(this.duration()) - Math.floor(this.currentTime());
        };

        //
        // Kind of like an array of portions of the video that have been downloaded.

        /**
         * Get a TimeRange object with an array of the times of the video
         * that have been downloaded. If you just want the percent of the
         * video that's been downloaded, use bufferedPercent.
         *
         * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
         *
         * @return {TimeRange}
         *         A mock TimeRange object (following HTML spec)
         */


        Player.prototype.buffered = function buffered() {
            var buffered = this.techGet_('buffered');

            if (!buffered || !buffered.length) {
                buffered = createTimeRanges(0, 0);
            }

            return buffered;
        };

        /**
         * Get the percent (as a decimal) of the video that's been downloaded.
         * This method is not a part of the native HTML video API.
         *
         * @return {number}
         *         A decimal between 0 and 1 representing the percent
         *         that is bufferred 0 being 0% and 1 being 100%
         */


        Player.prototype.bufferedPercent = function bufferedPercent$$1() {
            return bufferedPercent(this.buffered(), this.duration());
        };

        /**
         * Get the ending time of the last buffered time range
         * This is used in the progress bar to encapsulate all time ranges.
         *
         * @return {number}
         *         The end of the last buffered time range
         */


        Player.prototype.bufferedEnd = function bufferedEnd() {
            var buffered = this.buffered();
            var duration = this.duration();
            var end = buffered.end(buffered.length - 1);

            if (end > duration) {
                end = duration;
            }

            return end;
        };

        /**
         * Get or set the current volume of the media
         *
         * @param  {number} [percentAsDecimal]
         *         The new volume as a decimal percent:
         *         - 0 is muted/0%/off
         *         - 1.0 is 100%/full
         *         - 0.5 is half volume or 50%
         *
         * @return {number}
         *         The current volume as a percent when getting
         */


        Player.prototype.volume = function volume(percentAsDecimal) {
            var vol = void 0;

            if (percentAsDecimal !== undefined) {
                // Force value to between 0 and 1
                vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
                this.cache_.volume = vol;
                this.techCall_('setVolume', vol);

                if (vol > 0) {
                    this.lastVolume_(vol);
                }

                return;
            }

            // Default to 1 when returning current volume.
            vol = parseFloat(this.techGet_('volume'));
            return isNaN(vol) ? 1 : vol;
        };

        /**
         * Get the current muted state, or turn mute on or off
         *
         * @param {boolean} [muted]
         *        - true to mute
         *        - false to unmute
         *
         * @return {boolean}
         *         - true if mute is on and getting
         *         - false if mute is off and getting
         */


        Player.prototype.muted = function muted(_muted) {
            if (_muted !== undefined) {
                this.techCall_('setMuted', _muted);
                return;
            }
            return this.techGet_('muted') || false;
        };

        /**
         * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
         * indicates the state of muted on intial playback.
         *
         * ```js
         *   var myPlayer = videojs('some-player-id');
         *
         *   myPlayer.src("http://www.example.com/path/to/video.mp4");
         *
         *   // get, should be false
         *   console.log(myPlayer.defaultMuted());
         *   // set to true
         *   myPlayer.defaultMuted(true);
         *   // get should be true
         *   console.log(myPlayer.defaultMuted());
         * ```
         *
         * @param {boolean} [defaultMuted]
         *        - true to mute
         *        - false to unmute
         *
         * @return {boolean|Player}
         *         - true if defaultMuted is on and getting
         *         - false if defaultMuted is off and getting
         *         - A reference to the current player when setting
         */


        Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {
            if (_defaultMuted !== undefined) {
                return this.techCall_('setDefaultMuted', _defaultMuted);
            }
            return this.techGet_('defaultMuted') || false;
        };

        /**
         * Get the last volume, or set it
         *
         * @param  {number} [percentAsDecimal]
         *         The new last volume as a decimal percent:
         *         - 0 is muted/0%/off
         *         - 1.0 is 100%/full
         *         - 0.5 is half volume or 50%
         *
         * @return {number}
         *         the current value of lastVolume as a percent when getting
         *
         * @private
         */


        Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {
            if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
                this.cache_.lastVolume = percentAsDecimal;
                return;
            }
            return this.cache_.lastVolume;
        };

        /**
         * Check if current tech can support native fullscreen
         * (e.g. with built in controls like iOS, so not our flash swf)
         *
         * @return {boolean}
         *         if native fullscreen is supported
         */


        Player.prototype.supportsFullScreen = function supportsFullScreen() {
            return this.techGet_('supportsFullScreen') || false;
        };

        /**
         * Check if the player is in fullscreen mode or tell the player that it
         * is or is not in fullscreen mode.
         *
         * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
         * property and instead document.fullscreenElement is used. But isFullscreen is
         * still a valuable property for internal player workings.
         *
         * @param  {boolean} [isFS]
         *         Set the players current fullscreen state
         *
         * @return {boolean}
         *         - true if fullscreen is on and getting
         *         - false if fullscreen is off and getting
         */


        Player.prototype.isFullscreen = function isFullscreen(isFS) {
            if (isFS !== undefined) {
                this.isFullscreen_ = !!isFS;
                return;
            }
            return !!this.isFullscreen_;
        };

        /**
         * Increase the size of the video to full screen
         * In some browsers, full screen is not supported natively, so it enters
         * "full window mode", where the video fills the browser window.
         * In browsers and devices that support native full screen, sometimes the
         * browser's default controls will be shown, and not the Video.js custom skin.
         * This includes most mobile devices (iOS, Android) and older versions of
         * Safari.
         *
         * @fires Player#fullscreenchange
         */


        Player.prototype.requestFullscreen = function requestFullscreen() {
            var fsApi = FullscreenApi;

            this.isFullscreen(true);

            if (fsApi.requestFullscreen) {
                // the browser supports going fullscreen at the element level so we can
                // take the controls fullscreen as well as the video

                // Trigger fullscreenchange event after change
                // We have to specifically add this each time, and remove
                // when canceling fullscreen. Otherwise if there's multiple
                // players on a page, they would all be reacting to the same fullscreen
                // events
                on(document_1, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {
                    this.isFullscreen(document_1[fsApi.fullscreenElement]);

                    // If cancelling fullscreen, remove event listener.
                    if (this.isFullscreen() === false) {
                        off(document_1, fsApi.fullscreenchange, documentFullscreenChange);
                    }
                    /**
                     * @event Player#fullscreenchange
                     * @type {EventTarget~Event}
                     */
                    this.trigger('fullscreenchange');
                }));

                this.el_[fsApi.requestFullscreen]();
            } else if (this.tech_.supportsFullScreen()) {
                // we can't take the video.js controls fullscreen but we can go fullscreen
                // with native controls
                this.techCall_('enterFullScreen');
            } else {
                // fullscreen isn't supported so we'll just stretch the video element to
                // fill the viewport
                this.enterFullWindow();
                /**
                 * @event Player#fullscreenchange
                 * @type {EventTarget~Event}
                 */
                this.trigger('fullscreenchange');
            }
        };

        /**
         * Return the video to its normal size after having been in full screen mode
         *
         * @fires Player#fullscreenchange
         */


        Player.prototype.exitFullscreen = function exitFullscreen() {
            var fsApi = FullscreenApi;

            this.isFullscreen(false);

            // Check for browser element fullscreen support
            if (fsApi.requestFullscreen) {
                document_1[fsApi.exitFullscreen]();
            } else if (this.tech_.supportsFullScreen()) {
                this.techCall_('exitFullScreen');
            } else {
                this.exitFullWindow();
                /**
                 * @event Player#fullscreenchange
                 * @type {EventTarget~Event}
                 */
                this.trigger('fullscreenchange');
            }
        };

        /**
         * When fullscreen isn't supported we can stretch the
         * video container to as wide as the browser will let us.
         *
         * @fires Player#enterFullWindow
         */


        Player.prototype.enterFullWindow = function enterFullWindow() {
            this.isFullWindow = true;

            // Storing original doc overflow value to return to when fullscreen is off
            this.docOrigOverflow = document_1.documentElement.style.overflow;

            // Add listener for esc key to exit fullscreen
            on(document_1, 'keydown', bind(this, this.fullWindowOnEscKey));

            // Hide any scroll bars
            document_1.documentElement.style.overflow = 'hidden';

            // Apply fullscreen styles
            addClass(document_1.body, 'vjs-full-window');

            /**
             * @event Player#enterFullWindow
             * @type {EventTarget~Event}
             */
            this.trigger('enterFullWindow');
        };

        /**
         * Check for call to either exit full window or
         * full screen on ESC key
         *
         * @param {string} event
         *        Event to check for key press
         */


        Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
            if (event.keyCode === 27) {
                if (this.isFullscreen() === true) {
                    this.exitFullscreen();
                } else {
                    this.exitFullWindow();
                }
            }
        };

        /**
         * Exit full window
         *
         * @fires Player#exitFullWindow
         */


        Player.prototype.exitFullWindow = function exitFullWindow() {
            this.isFullWindow = false;
            off(document_1, 'keydown', this.fullWindowOnEscKey);

            // Unhide scroll bars.
            document_1.documentElement.style.overflow = this.docOrigOverflow;

            // Remove fullscreen styles
            removeClass(document_1.body, 'vjs-full-window');

            // Resize the box, controller, and poster to original sizes
            // this.positionAll();
            /**
             * @event Player#exitFullWindow
             * @type {EventTarget~Event}
             */
            this.trigger('exitFullWindow');
        };

        /**
         * Check whether the player can play a given mimetype
         *
         * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
         *
         * @param {string} type
         *        The mimetype to check
         *
         * @return {string}
         *         'probably', 'maybe', or '' (empty string)
         */


        Player.prototype.canPlayType = function canPlayType(type) {
            var can = void 0;

            // Loop through each playback technology in the options order
            for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
                var techName = j[i];
                var tech = Tech.getTech(techName);

                // Support old behavior of techs being registered as components.
                // Remove once that deprecated behavior is removed.
                if (!tech) {
                    tech = Component.getComponent(techName);
                }

                // Check if the current tech is defined before continuing
                if (!tech) {
                    log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                    continue;
                }

                // Check if the browser supports this technology
                if (tech.isSupported()) {
                    can = tech.canPlayType(type);

                    if (can) {
                        return can;
                    }
                }
            }

            return '';
        };

        /**
         * Select source based on tech-order or source-order
         * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
         * defaults to tech-order selection
         *
         * @param {Array} sources
         *        The sources for a media asset
         *
         * @return {Object|boolean}
         *         Object of source and tech order or false
         */


        Player.prototype.selectSource = function selectSource(sources) {
            var _this6 = this;

            // Get only the techs specified in `techOrder` that exist and are supported by the
            // current platform
            var techs = this.options_.techOrder.map(function (techName) {
                return [techName, Tech.getTech(techName)];
            }).filter(function (_ref) {
                var techName = _ref[0],
                    tech = _ref[1];

                // Check if the current tech is defined before continuing
                if (tech) {
                    // Check if the browser supports this technology
                    return tech.isSupported();
                }

                log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                return false;
            });

            // Iterate over each `innerArray` element once per `outerArray` element and execute
            // `tester` with both. If `tester` returns a non-falsy value, exit early and return
            // that value.
            var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
                var found = void 0;

                outerArray.some(function (outerChoice) {
                    return innerArray.some(function (innerChoice) {
                        found = tester(outerChoice, innerChoice);

                        if (found) {
                            return true;
                        }
                    });
                });

                return found;
            };

            var foundSourceAndTech = void 0;
            var flip = function flip(fn) {
                return function (a, b) {
                    return fn(b, a);
                };
            };
            var finder = function finder(_ref2, source) {
                var techName = _ref2[0],
                    tech = _ref2[1];

                if (tech.canPlaySource(source, _this6.options_[techName.toLowerCase()])) {
                    return { source: source, tech: techName };
                }
            };

            // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
            // to select from them based on their priority.
            if (this.options_.sourceOrder) {
                // Source-first ordering
                foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
            } else {
                // Tech-first ordering
                foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
            }

            return foundSourceAndTech || false;
        };

        /**
         * Get or set the video source.
         *
         * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
         *        A SourceObject, an array of SourceObjects, or a string referencing
         *        a URL to a media source. It is _highly recommended_ that an object
         *        or array of objects is used here, so that source selection
         *        algorithms can take the `type` into account.
         *
         *        If not provided, this method acts as a getter.
         *
         * @return {string|undefined}
         *         If the `source` argument is missing, returns the current source
         *         URL. Otherwise, returns nothing/undefined.
         */


        Player.prototype.src = function src(source) {
            var _this7 = this;

            // getter usage
            if (typeof source === 'undefined') {
                return this.cache_.src || '';
            }
            // filter out invalid sources and turn our source into
            // an array of source objects
            var sources = filterSource(source);

            // if a source was passed in then it is invalid because
            // it was filtered to a zero length Array. So we have to
            // show an error
            if (!sources.length) {
                this.setTimeout(function () {
                    this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
                }, 0);
                return;
            }

            // intial sources
            this.cache_.sources = sources;
            this.changingSrc_ = true;

            // intial source
            this.cache_.source = sources[0];

            // middlewareSource is the source after it has been changed by middleware
            setSource(this, sources[0], function (middlewareSource, mws) {
                _this7.middleware_ = mws;

                var err = _this7.src_(middlewareSource);

                if (err) {
                    if (sources.length > 1) {
                        return _this7.src(sources.slice(1));
                    }

                    // We need to wrap this in a timeout to give folks a chance to add error event handlers
                    _this7.setTimeout(function () {
                        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
                    }, 0);

                    // we could not find an appropriate tech, but let's still notify the delegate that this is it
                    // this needs a better comment about why this is needed
                    _this7.triggerReady();

                    return;
                }

                _this7.changingSrc_ = false;
                // video element listed source
                _this7.cache_.src = middlewareSource.src;

                setTech(mws, _this7.tech_);
            });
        };

        /**
         * Set the source object on the tech, returns a boolean that indicates wether
         * there is a tech that can play the source or not
         *
         * @param {Tech~SourceObject} source
         *        The source object to set on the Tech
         *
         * @return {Boolean}
         *         - True if there is no Tech to playback this source
         *         - False otherwise
         *
         * @private
         */


        Player.prototype.src_ = function src_(source) {
            var sourceTech = this.selectSource([source]);

            if (!sourceTech) {
                return true;
            }

            if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
                this.changingSrc_ = true;

                // load this technology with the chosen source
                this.loadTech_(sourceTech.tech, sourceTech.source);
                return false;
            }

            // wait until the tech is ready to set the source
            this.ready(function () {

                // The setSource tech method was added with source handlers
                // so older techs won't support it
                // We need to check the direct prototype for the case where subclasses
                // of the tech do not support source handlers
                if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
                    this.techCall_('setSource', source);
                } else {
                    this.techCall_('src', source.src);
                }

                if (this.options_.preload === 'auto') {
                    this.load();
                }

                // Set the source synchronously if possible (#2326)
            }, true);

            return false;
        };

        /**
         * Begin loading the src data.
         */


        Player.prototype.load = function load() {
            this.techCall_('load');
        };

        /**
         * Reset the player. Loads the first tech in the techOrder,
         * and calls `reset` on the tech`.
         */


        Player.prototype.reset = function reset() {
            this.loadTech_(this.options_.techOrder[0], null);
            this.techCall_('reset');
        };

        /**
         * Returns all of the current source objects.
         *
         * @return {Tech~SourceObject[]}
         *         The current source objects
         */


        Player.prototype.currentSources = function currentSources() {
            var source = this.currentSource();
            var sources = [];

            // assume `{}` or `{ src }`
            if (Object.keys(source).length !== 0) {
                sources.push(source);
            }

            return this.cache_.sources || sources;
        };

        /**
         * Returns the current source object.
         *
         * @return {Tech~SourceObject}
         *         The current source object
         */


        Player.prototype.currentSource = function currentSource() {
            return this.cache_.source || {};
        };

        /**
         * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
         * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
         *
         * @return {string}
         *         The current source
         */


        Player.prototype.currentSrc = function currentSrc() {
            return this.currentSource() && this.currentSource().src || '';
        };

        /**
         * Get the current source type e.g. video/mp4
         * This can allow you rebuild the current source object so that you could load the same
         * source and tech later
         *
         * @return {string}
         *         The source MIME type
         */


        Player.prototype.currentType = function currentType() {
            return this.currentSource() && this.currentSource().type || '';
        };

        /**
         * Get or set the preload attribute
         *
         * @param {boolean} [value]
         *        - true means that we should preload
         *        - false maens that we should not preload
         *
         * @return {string}
         *         The preload attribute value when getting
         */


        Player.prototype.preload = function preload(value) {
            if (value !== undefined) {
                this.techCall_('setPreload', value);
                this.options_.preload = value;
                return;
            }
            return this.techGet_('preload');
        };

        /**
         * Get or set the autoplay attribute.
         *
         * @param {boolean} [value]
         *        - true means that we should autoplay
         *        - false means that we should not autoplay
         *
         * @return {string}
         *         The current value of autoplay when getting
         */


        Player.prototype.autoplay = function autoplay(value) {
            if (value !== undefined) {
                this.techCall_('setAutoplay', value);
                this.options_.autoplay = value;
                this.ready(this.forceAutoplayInChrome_);
                return;
            }
            return this.techGet_('autoplay', value);
        };

        /**
         * chrome started pausing the video when moving in the DOM
         * causing autoplay to not continue due to how Video.js functions.
         * See #4720 for more info.
         *
         * @private
         */


        Player.prototype.forceAutoplayInChrome_ = function forceAutoplayInChrome_() {
            if (this.paused() && (
                    // read from the video element or options
                this.autoplay() || this.options_.autoplay) &&
                // only target desktop chrome
                IS_CHROME && !IS_ANDROID) {
                this.play();
            }
        };

        /**
         * Set or unset the playsinline attribute.
         * Playsinline tells the browser that non-fullscreen playback is preferred.
         *
         * @param {boolean} [value]
         *        - true means that we should try to play inline by default
         *        - false means that we should use the browser's default playback mode,
         *          which in most cases is inline. iOS Safari is a notable exception
         *          and plays fullscreen by default.
         *
         * @return {string|Player}
         *         - the current value of playsinline
         *         - the player when setting
         *
         * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
         */


        Player.prototype.playsinline = function playsinline(value) {
            if (value !== undefined) {
                this.techCall_('setPlaysinline', value);
                this.options_.playsinline = value;
                return this;
            }
            return this.techGet_('playsinline');
        };

        /**
         * Get or set the loop attribute on the video element.
         *
         * @param {boolean} [value]
         *        - true means that we should loop the video
         *        - false means that we should not loop the video
         *
         * @return {string}
         *         The current value of loop when getting
         */


        Player.prototype.loop = function loop(value) {
            if (value !== undefined) {
                this.techCall_('setLoop', value);
                this.options_.loop = value;
                return;
            }
            return this.techGet_('loop');
        };

        /**
         * Get or set the poster image source url
         *
         * @fires Player#posterchange
         *
         * @param {string} [src]
         *        Poster image source URL
         *
         * @return {string}
         *         The current value of poster when getting
         */


        Player.prototype.poster = function poster(src) {
            if (src === undefined) {
                return this.poster_;
            }

            // The correct way to remove a poster is to set as an empty string
            // other falsey values will throw errors
            if (!src) {
                src = '';
            }

            // update the internal poster variable
            this.poster_ = src;

            // update the tech's poster
            this.techCall_('setPoster', src);

            // alert components that the poster has been set
            /**
             * This event fires when the poster image is changed on the player.
             *
             * @event Player#posterchange
             * @type {EventTarget~Event}
             */
            this.trigger('posterchange');
        };

        /**
         * Some techs (e.g. YouTube) can provide a poster source in an
         * asynchronous way. We want the poster component to use this
         * poster source so that it covers up the tech's controls.
         * (YouTube's play button). However we only want to use this
         * source if the player user hasn't set a poster through
         * the normal APIs.
         *
         * @fires Player#posterchange
         * @listens Tech#posterchange
         * @private
         */


        Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
            if (!this.poster_ && this.tech_ && this.tech_.poster) {
                this.poster_ = this.tech_.poster() || '';

                // Let components know the poster has changed
                this.trigger('posterchange');
            }
        };

        /**
         * Get or set whether or not the controls are showing.
         *
         * @fires Player#controlsenabled
         *
         * @param {boolean} [bool]
         *        - true to turn controls on
         *        - false to turn controls off
         *
         * @return {boolean}
         *         The current value of controls when getting
         */


        Player.prototype.controls = function controls(bool) {
            if (bool === undefined) {
                return !!this.controls_;
            }

            bool = !!bool;

            // Don't trigger a change event unless it actually changed
            if (this.controls_ === bool) {
                return;
            }

            this.controls_ = bool;

            if (this.usingNativeControls()) {
                this.techCall_('setControls', bool);
            }

            if (this.controls_) {
                this.removeClass('vjs-controls-disabled');
                this.addClass('vjs-controls-enabled');
                /**
                 * @event Player#controlsenabled
                 * @type {EventTarget~Event}
                 */
                this.trigger('controlsenabled');
                if (!this.usingNativeControls()) {
                    this.addTechControlsListeners_();
                }
            } else {
                this.removeClass('vjs-controls-enabled');
                this.addClass('vjs-controls-disabled');
                /**
                 * @event Player#controlsdisabled
                 * @type {EventTarget~Event}
                 */
                this.trigger('controlsdisabled');
                if (!this.usingNativeControls()) {
                    this.removeTechControlsListeners_();
                }
            }
        };

        /**
         * Toggle native controls on/off. Native controls are the controls built into
         * devices (e.g. default iPhone controls), Flash, or other techs
         * (e.g. Vimeo Controls)
         * **This should only be set by the current tech, because only the tech knows
         * if it can support native controls**
         *
         * @fires Player#usingnativecontrols
         * @fires Player#usingcustomcontrols
         *
         * @param {boolean} [bool]
         *        - true to turn native controls on
         *        - false to turn native controls off
         *
         * @return {boolean}
         *         The current value of native controls when getting
         */


        Player.prototype.usingNativeControls = function usingNativeControls(bool) {
            if (bool === undefined) {
                return !!this.usingNativeControls_;
            }

            bool = !!bool;

            // Don't trigger a change event unless it actually changed
            if (this.usingNativeControls_ === bool) {
                return;
            }

            this.usingNativeControls_ = bool;

            if (this.usingNativeControls_) {
                this.addClass('vjs-using-native-controls');

                /**
                 * player is using the native device controls
                 *
                 * @event Player#usingnativecontrols
                 * @type {EventTarget~Event}
                 */
                this.trigger('usingnativecontrols');
            } else {
                this.removeClass('vjs-using-native-controls');

                /**
                 * player is using the custom HTML controls
                 *
                 * @event Player#usingcustomcontrols
                 * @type {EventTarget~Event}
                 */
                this.trigger('usingcustomcontrols');
            }
        };

        /**
         * Set or get the current MediaError
         *
         * @fires Player#error
         *
         * @param  {MediaError|string|number} [err]
         *         A MediaError or a string/number to be turned
         *         into a MediaError
         *
         * @return {MediaError|null}
         *         The current MediaError when getting (or null)
         */


        Player.prototype.error = function error(err) {
            if (err === undefined) {
                return this.error_ || null;
            }

            // restoring to default
            if (err === null) {
                this.error_ = err;
                this.removeClass('vjs-error');
                if (this.errorDisplay) {
                    this.errorDisplay.close();
                }
                return;
            }

            this.error_ = new MediaError(err);

            // add the vjs-error classname to the player
            this.addClass('vjs-error');

            // log the name of the error type and any message
            // ie8 just logs "[object object]" if you just log the error object
            log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

            /**
             * @event Player#error
             * @type {EventTarget~Event}
             */
            this.trigger('error');

            return;
        };

        /**
         * Report user activity
         *
         * @param {Object} event
         *        Event object
         */


        Player.prototype.reportUserActivity = function reportUserActivity(event) {
            this.userActivity_ = true;
        };

        /**
         * Get/set if user is active
         *
         * @fires Player#useractive
         * @fires Player#userinactive
         *
         * @param {boolean} [bool]
         *        - true if the user is active
         *        - false if the user is inactive
         *
         * @return {boolean}
         *         The current value of userActive when getting
         */


        Player.prototype.userActive = function userActive(bool) {
            if (bool === undefined) {
                return this.userActive_;
            }

            bool = !!bool;

            if (bool === this.userActive_) {
                return;
            }

            this.userActive_ = bool;

            if (this.userActive_) {
                this.userActivity_ = true;
                this.removeClass('vjs-user-inactive');
                this.addClass('vjs-user-active');
                /**
                 * @event Player#useractive
                 * @type {EventTarget~Event}
                 */
                this.trigger('useractive');
                return;
            }

            // Chrome/Safari/IE have bugs where when you change the cursor it can
            // trigger a mousemove event. This causes an issue when you're hiding
            // the cursor when the user is inactive, and a mousemove signals user
            // activity. Making it impossible to go into inactive mode. Specifically
            // this happens in fullscreen when we really need to hide the cursor.
            //
            // When this gets resolved in ALL browsers it can be removed
            // https://code.google.com/p/chromium/issues/detail?id=103041
            if (this.tech_) {
                this.tech_.one('mousemove', function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                });
            }

            this.userActivity_ = false;
            this.removeClass('vjs-user-active');
            this.addClass('vjs-user-inactive');
            /**
             * @event Player#userinactive
             * @type {EventTarget~Event}
             */
            this.trigger('userinactive');
        };

        /**
         * Listen for user activity based on timeout value
         *
         * @private
         */


        Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
            var mouseInProgress = void 0;
            var lastMoveX = void 0;
            var lastMoveY = void 0;
            var handleActivity = bind(this, this.reportUserActivity);

            var handleMouseMove = function handleMouseMove(e) {
                // #1068 - Prevent mousemove spamming
                // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
                if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                    lastMoveX = e.screenX;
                    lastMoveY = e.screenY;
                    handleActivity();
                }
            };

            var handleMouseDown = function handleMouseDown() {
                handleActivity();
                // For as long as the they are touching the device or have their mouse down,
                // we consider them active even if they're not moving their finger or mouse.
                // So we want to continue to update that they are active
                this.clearInterval(mouseInProgress);
                // Setting userActivity=true now and setting the interval to the same time
                // as the activityCheck interval (250) should ensure we never miss the
                // next activityCheck
                mouseInProgress = this.setInterval(handleActivity, 250);
            };

            var handleMouseUp = function handleMouseUp(event) {
                handleActivity();
                // Stop the interval that maintains activity if the mouse/touch is down
                this.clearInterval(mouseInProgress);
            };

            // Any mouse movement will be considered user activity
            this.on('mousedown', handleMouseDown);
            this.on('mousemove', handleMouseMove);
            this.on('mouseup', handleMouseUp);

            // Listen for keyboard navigation
            // Shouldn't need to use inProgress interval because of key repeat
            this.on('keydown', handleActivity);
            this.on('keyup', handleActivity);

            // Run an interval every 250 milliseconds instead of stuffing everything into
            // the mousemove/touchmove function itself, to prevent performance degradation.
            // `this.reportUserActivity` simply sets this.userActivity_ to true, which
            // then gets picked up by this loop
            // http://ejohn.org/blog/learning-from-twitter/
            var inactivityTimeout = void 0;

            this.setInterval(function () {
                // Check to see if mouse/touch activity has happened
                if (!this.userActivity_) {
                    return;
                }

                // Reset the activity tracker
                this.userActivity_ = false;

                // If the user state was inactive, set the state to active
                this.userActive(true);

                // Clear any existing inactivity timeout to start the timer over
                this.clearTimeout(inactivityTimeout);

                var timeout = this.options_.inactivityTimeout;

                if (timeout <= 0) {
                    return;
                }

                // In <timeout> milliseconds, if no more activity has occurred the
                // user will be considered inactive
                inactivityTimeout = this.setTimeout(function () {
                    // Protect against the case where the inactivityTimeout can trigger just
                    // before the next user activity is picked up by the activity check loop
                    // causing a flicker
                    if (!this.userActivity_) {
                        this.userActive(false);
                    }
                }, timeout);
            }, 250);
        };

        /**
         * Gets or sets the current playback rate. A playback rate of
         * 1.0 represents normal speed and 0.5 would indicate half-speed
         * playback, for instance.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
         *
         * @param {number} [rate]
         *       New playback rate to set.
         *
         * @return {number}
         *         The current playback rate when getting or 1.0
         */


        Player.prototype.playbackRate = function playbackRate(rate) {
            if (rate !== undefined) {
                this.techCall_('setPlaybackRate', rate);
                return;
            }

            if (this.tech_ && this.tech_.featuresPlaybackRate) {
                return this.techGet_('playbackRate');
            }
            return 1.0;
        };

        /**
         * Gets or sets the current default playback rate. A default playback rate of
         * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
         * defaultPlaybackRate will only represent what the intial playbackRate of a video was, not
         * not the current playbackRate.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
         *
         * @param {number} [rate]
         *       New default playback rate to set.
         *
         * @return {number|Player}
         *         - The default playback rate when getting or 1.0
         *         - the player when setting
         */


        Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {
            if (rate !== undefined) {
                return this.techCall_('setDefaultPlaybackRate', rate);
            }

            if (this.tech_ && this.tech_.featuresPlaybackRate) {
                return this.techGet_('defaultPlaybackRate');
            }
            return 1.0;
        };

        /**
         * Gets or sets the audio flag
         *
         * @param {boolean} bool
         *        - true signals that this is an audio player
         *        - false signals that this is not an audio player
         *
         * @return {boolean}
         *         The current value of isAudio when getting
         */


        Player.prototype.isAudio = function isAudio(bool) {
            if (bool !== undefined) {
                this.isAudio_ = !!bool;
                return;
            }

            return !!this.isAudio_;
        };

        /**
         * A helper method for adding a {@link TextTrack} to our
         * {@link TextTrackList}.
         *
         * In addition to the W3C settings we allow adding additional info through options.
         *
         * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
         *
         * @param {string} [kind]
         *        the kind of TextTrack you are adding
         *
         * @param {string} [label]
         *        the label to give the TextTrack label
         *
         * @param {string} [language]
         *        the language to set on the TextTrack
         *
         * @return {TextTrack|undefined}
         *         the TextTrack that was added or undefined
         *         if there is no tech
         */


        Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
            if (this.tech_) {
                return this.tech_.addTextTrack(kind, label, language);
            }
        };

        /**
         * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
         * automatically removed from the video element whenever the source changes, unless
         * manualCleanup is set to false.
         *
         * @param {Object} options
         *        Options to pass to {@link HTMLTrackElement} during creation. See
         *        {@link HTMLTrackElement} for object properties that you should use.
         *
         * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
         *
         * @return {HtmlTrackElement}
         *         the HTMLTrackElement that was created and added
         *         to the HtmlTrackElementList and the remote
         *         TextTrackList
         *
         * @deprecated The default value of the "manualCleanup" parameter will default
         *             to "false" in upcoming versions of Video.js
         */


        Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
            if (this.tech_) {
                return this.tech_.addRemoteTextTrack(options, manualCleanup);
            }
        };

        /**
         * Remove a remote {@link TextTrack} from the respective
         * {@link TextTrackList} and {@link HtmlTrackElementList}.
         *
         * @param {Object} track
         *        Remote {@link TextTrack} to remove
         *
         * @return {undefined}
         *         does not return anything
         */


        Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref3$track = _ref3.track,
                track = _ref3$track === undefined ? arguments[0] : _ref3$track;

            // destructure the input into an object with a track argument, defaulting to arguments[0]
            // default the whole argument to an empty object if nothing was passed in

            if (this.tech_) {
                return this.tech_.removeRemoteTextTrack(track);
            }
        };

        /**
         * Gets available media playback quality metrics as specified by the W3C's Media
         * Playback Quality API.
         *
         * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
         *
         * @return {Object|undefined}
         *         An object with supported media playback quality metrics or undefined if there
         *         is no tech or the tech does not support it.
         */


        Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
            return this.techGet_('getVideoPlaybackQuality');
        };

        /**
         * Get video width
         *
         * @return {number}
         *         current video width
         */


        Player.prototype.videoWidth = function videoWidth() {
            return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
        };

        /**
         * Get video height
         *
         * @return {number}
         *         current video height
         */


        Player.prototype.videoHeight = function videoHeight() {
            return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
        };

        /**
         * The player's language code
         * NOTE: The language should be set in the player options if you want the
         * the controls to be built with a specific language. Changing the lanugage
         * later will not update controls text.
         *
         * @param {string} [code]
         *        the language code to set the player to
         *
         * @return {string}
         *         The current language code when getting
         */


        Player.prototype.language = function language(code) {
            if (code === undefined) {
                return this.language_;
            }

            this.language_ = String(code).toLowerCase();
        };

        /**
         * Get the player's language dictionary
         * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
         * Languages specified directly in the player options have precedence
         *
         * @return {Array}
         *         An array of of supported languages
         */


        Player.prototype.languages = function languages() {
            return mergeOptions(Player.prototype.options_.languages, this.languages_);
        };

        /**
         * returns a JavaScript object reperesenting the current track
         * information. **DOES not return it as JSON**
         *
         * @return {Object}
         *         Object representing the current of track info
         */


        Player.prototype.toJSON = function toJSON() {
            var options = mergeOptions(this.options_);
            var tracks = options.tracks;

            options.tracks = [];

            for (var i = 0; i < tracks.length; i++) {
                var track = tracks[i];

                // deep merge tracks and null out player so no circular references
                track = mergeOptions(track);
                track.player = undefined;
                options.tracks[i] = track;
            }

            return options;
        };

        /**
         * Creates a simple modal dialog (an instance of the {@link ModalDialog}
         * component) that immediately overlays the player with arbitrary
         * content and removes itself when closed.
         *
         * @param {string|Function|Element|Array|null} content
         *        Same as {@link ModalDialog#content}'s param of the same name.
         *        The most straight-forward usage is to provide a string or DOM
         *        element.
         *
         * @param {Object} [options]
         *        Extra options which will be passed on to the {@link ModalDialog}.
         *
         * @return {ModalDialog}
         *         the {@link ModalDialog} that was created
         */


        Player.prototype.createModal = function createModal(content, options) {
            var _this8 = this;

            options = options || {};
            options.content = content || '';

            var modal = new ModalDialog(this, options);

            this.addChild(modal);
            modal.on('dispose', function () {
                _this8.removeChild(modal);
            });

            modal.open();
            return modal;
        };

        /**
         * Gets tag settings
         *
         * @param {Element} tag
         *        The player tag
         *
         * @return {Object}
         *         An object containing all of the settings
         *         for a player tag
         */


        Player.getTagSettings = function getTagSettings(tag) {
            var baseOptions = {
                sources: [],
                tracks: []
            };

            var tagOptions = getAttributes(tag);
            var dataSetup = tagOptions['data-setup'];

            if (hasClass(tag, 'vjs-fluid')) {
                tagOptions.fluid = true;
            }

            // Check if data-setup attr exists.
            if (dataSetup !== null) {
                // Parse options JSON
                // If empty string, make it a parsable json object.
                var _safeParseTuple = tuple(dataSetup || '{}'),
                    err = _safeParseTuple[0],
                    data = _safeParseTuple[1];

                if (err) {
                    log$1.error(err);
                }
                assign(tagOptions, data);
            }

            assign(baseOptions, tagOptions);

            // Get tag children settings
            if (tag.hasChildNodes()) {
                var children = tag.childNodes;

                for (var i = 0, j = children.length; i < j; i++) {
                    var child = children[i];
                    // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                    var childName = child.nodeName.toLowerCase();

                    if (childName === 'source') {
                        baseOptions.sources.push(getAttributes(child));
                    } else if (childName === 'track') {
                        baseOptions.tracks.push(getAttributes(child));
                    }
                }
            }

            return baseOptions;
        };

        /**
         * Determine wether or not flexbox is supported
         *
         * @return {boolean}
         *         - true if flexbox is supported
         *         - false if flexbox is not supported
         */


        Player.prototype.flexNotSupported_ = function flexNotSupported_() {
            var elem = document_1.createElement('i');

            // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
            // common flex features that we can rely on when checking for flex support.
            return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
                // IE10-specific (2012 flex spec)
                'msFlexOrder' in elem.style);
        };

        return Player;
    }(Component);

    /**
     * Get the {@link VideoTrackList}
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
     *
     * @return {VideoTrackList}
     *         the current video track list
     *
     * @method Player.prototype.videoTracks
     */

    /**
     * Get the {@link AudioTrackList}
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
     *
     * @return {AudioTrackList}
     *         the current audio track list
     *
     * @method Player.prototype.audioTracks
     */

    /**
     * Get the {@link TextTrackList}
     *
     * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
     *
     * @return {TextTrackList}
     *         the current text track list
     *
     * @method Player.prototype.textTracks
     */

    /**
     * Get the remote {@link TextTrackList}
     *
     * @return {TextTrackList}
     *         The current remote text track list
     *
     * @method Player.prototype.remoteTextTracks
     */

    /**
     * Get the remote {@link HtmlTrackElementList} tracks.
     *
     * @return {HtmlTrackElementList}
     *         The current remote text track element list
     *
     * @method Player.prototype.remoteTextTrackEls
     */

    ALL.names.forEach(function (name$$1) {
        var props = ALL[name$$1];

        Player.prototype[props.getterName] = function () {
            if (this.tech_) {
                return this.tech_[props.getterName]();
            }

            // if we have not yet loadTech_, we create {video,audio,text}Tracks_
            // these will be passed to the tech during loading
            this[props.privateName] = this[props.privateName] || new props.ListClass();
            return this[props.privateName];
        };
    });

    /**
     * Global player list
     *
     * @type {Object}
     */
    Player.players = {};

    var navigator$1 = window_1.navigator;

    /*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */
    Player.prototype.options_ = {
        // Default order of fallback technology
        techOrder: Tech.defaultTechOrder_,

        html5: {},
        flash: {},

        // default inactivity timeout
        inactivityTimeout: 2000,

        // default playback rates
        playbackRates: [],
        // Add playback rate selection by adding rates
        // 'playbackRates': [0.5, 1, 1.5, 2],

        // Included control sets
        children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

        language: navigator$1 && (navigator$1.languages && navigator$1.languages[0] || navigator$1.userLanguage || navigator$1.language) || 'en',

        // locales and their language translations
        languages: {},

        // Default message to show when a video cannot be played.
        notSupportedMessage: 'No compatible source was found for this media.'
    };

    [
        /**
         * Returns whether or not the player is in the "ended" state.
         *
         * @return {Boolean} True if the player is in the ended state, false if not.
         * @method Player#ended
         */
        'ended',
        /**
         * Returns whether or not the player is in the "seeking" state.
         *
         * @return {Boolean} True if the player is in the seeking state, false if not.
         * @method Player#seeking
         */
        'seeking',
        /**
         * Returns the TimeRanges of the media that are currently available
         * for seeking to.
         *
         * @return {TimeRanges} the seekable intervals of the media timeline
         * @method Player#seekable
         */
        'seekable',
        /**
         * Returns the current state of network activity for the element, from
         * the codes in the list below.
         * - NETWORK_EMPTY (numeric value 0)
         *   The element has not yet been initialised. All attributes are in
         *   their initial states.
         * - NETWORK_IDLE (numeric value 1)
         *   The element's resource selection algorithm is active and has
         *   selected a resource, but it is not actually using the network at
         *   this time.
         * - NETWORK_LOADING (numeric value 2)
         *   The user agent is actively trying to download data.
         * - NETWORK_NO_SOURCE (numeric value 3)
         *   The element's resource selection algorithm is active, but it has
         *   not yet found a resource to use.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
         * @return {number} the current network activity state
         * @method Player#networkState
         */
        'networkState',
        /**
         * Returns a value that expresses the current state of the element
         * with respect to rendering the current playback position, from the
         * codes in the list below.
         * - HAVE_NOTHING (numeric value 0)
         *   No information regarding the media resource is available.
         * - HAVE_METADATA (numeric value 1)
         *   Enough of the resource has been obtained that the duration of the
         *   resource is available.
         * - HAVE_CURRENT_DATA (numeric value 2)
         *   Data for the immediate current playback position is available.
         * - HAVE_FUTURE_DATA (numeric value 3)
         *   Data for the immediate current playback position is available, as
         *   well as enough data for the user agent to advance the current
         *   playback position in the direction of playback.
         * - HAVE_ENOUGH_DATA (numeric value 4)
         *   The user agent estimates that enough data is available for
         *   playback to proceed uninterrupted.
         *
         * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
         * @return {number} the current playback rendering state
         * @method Player#readyState
         */
        'readyState'].forEach(function (fn) {
        Player.prototype[fn] = function () {
            return this.techGet_(fn);
        };
    });

    TECH_EVENTS_RETRIGGER.forEach(function (event) {
        Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {
            return this.trigger(event);
        };
    });

    /**
     * Fired when the player has initial duration and dimension information
     *
     * @event Player#loadedmetadata
     * @type {EventTarget~Event}
     */

    /**
     * Fired when the player has downloaded data at the current playback position
     *
     * @event Player#loadeddata
     * @type {EventTarget~Event}
     */

    /**
     * Fired when the current playback position has changed *
     * During playback this is fired every 15-250 milliseconds, depending on the
     * playback technology in use.
     *
     * @event Player#timeupdate
     * @type {EventTarget~Event}
     */

    /**
     * Fired when the volume changes
     *
     * @event Player#volumechange
     * @type {EventTarget~Event}
     */

    /**
     * Reports whether or not a player has a plugin available.
     *
     * This does not report whether or not the plugin has ever been initialized
     * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
     *
     * @method Player#hasPlugin
     * @param  {string}  name
     *         The name of a plugin.
     *
     * @return {boolean}
     *         Whether or not this player has the requested plugin available.
     */

    /**
     * Reports whether or not a player is using a plugin by name.
     *
     * For basic plugins, this only reports whether the plugin has _ever_ been
     * initialized on this player.
     *
     * @method Player#usingPlugin
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {boolean}
     *         Whether or not this player is using the requested plugin.
     */

    Component.registerComponent('Player', Player);

    /**
     * @file plugin.js
     */
    /**
     * The base plugin name.
     *
     * @private
     * @constant
     * @type {string}
     */
    var BASE_PLUGIN_NAME = 'plugin';

    /**
     * The key on which a player's active plugins cache is stored.
     *
     * @private
     * @constant
     * @type     {string}
     */
    var PLUGIN_CACHE_KEY = 'activePlugins_';

    /**
     * Stores registered plugins in a private space.
     *
     * @private
     * @type    {Object}
     */
    var pluginStorage = {};

    /**
     * Reports whether or not a plugin has been registered.
     *
     * @private
     * @param   {string} name
     *          The name of a plugin.
     *
     * @returns {boolean}
     *          Whether or not the plugin has been registered.
     */
    var pluginExists = function pluginExists(name) {
        return pluginStorage.hasOwnProperty(name);
    };

    /**
     * Get a single registered plugin by name.
     *
     * @private
     * @param   {string} name
     *          The name of a plugin.
     *
     * @returns {Function|undefined}
     *          The plugin (or undefined).
     */
    var getPlugin = function getPlugin(name) {
        return pluginExists(name) ? pluginStorage[name] : undefined;
    };

    /**
     * Marks a plugin as "active" on a player.
     *
     * Also, ensures that the player has an object for tracking active plugins.
     *
     * @private
     * @param   {Player} player
     *          A Video.js player instance.
     *
     * @param   {string} name
     *          The name of a plugin.
     */
    var markPluginAsActive = function markPluginAsActive(player, name) {
        player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
        player[PLUGIN_CACHE_KEY][name] = true;
    };

    /**
     * Triggers a pair of plugin setup events.
     *
     * @private
     * @param  {Player} player
     *         A Video.js player instance.
     *
     * @param  {Plugin~PluginEventHash} hash
     *         A plugin event hash.
     *
     * @param  {Boolean} [before]
     *         If true, prefixes the event name with "before". In other words,
     *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
     */
    var triggerSetupEvent = function triggerSetupEvent(player, hash, before) {
        var eventName = (before ? 'before' : '') + 'pluginsetup';

        player.trigger(eventName, hash);
        player.trigger(eventName + ':' + hash.name, hash);
    };

    /**
     * Takes a basic plugin function and returns a wrapper function which marks
     * on the player that the plugin has been activated.
     *
     * @private
     * @param   {string} name
     *          The name of the plugin.
     *
     * @param   {Function} plugin
     *          The basic plugin.
     *
     * @returns {Function}
     *          A wrapper function for the given plugin.
     */
    var createBasicPlugin = function createBasicPlugin(name, plugin) {
        var basicPluginWrapper = function basicPluginWrapper() {

            // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
            // regardless, but we want the hash to be consistent with the hash provided
            // for advanced plugins.
            //
            // The only potentially counter-intuitive thing here is the `instance` in
            // the "pluginsetup" event is the value returned by the `plugin` function.
            triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);

            var instance = plugin.apply(this, arguments);

            markPluginAsActive(this, name);
            triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });

            return instance;
        };

        Object.keys(plugin).forEach(function (prop) {
            basicPluginWrapper[prop] = plugin[prop];
        });

        return basicPluginWrapper;
    };

    /**
     * Takes a plugin sub-class and returns a factory function for generating
     * instances of it.
     *
     * This factory function will replace itself with an instance of the requested
     * sub-class of Plugin.
     *
     * @private
     * @param   {string} name
     *          The name of the plugin.
     *
     * @param   {Plugin} PluginSubClass
     *          The advanced plugin.
     *
     * @returns {Function}
     */
    var createPluginFactory = function createPluginFactory(name, PluginSubClass) {

        // Add a `name` property to the plugin prototype so that each plugin can
        // refer to itself by name.
        PluginSubClass.prototype.name = name;

        return function () {
            triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();

            // The plugin is replaced by a function that returns the current instance.
            this[name] = function () {
                return instance;
            };

            triggerSetupEvent(this, instance.getEventHash());

            return instance;
        };
    };

    /**
     * Parent class for all advanced plugins.
     *
     * @mixes   module:evented~EventedMixin
     * @mixes   module:stateful~StatefulMixin
     * @fires   Player#beforepluginsetup
     * @fires   Player#beforepluginsetup:$name
     * @fires   Player#pluginsetup
     * @fires   Player#pluginsetup:$name
     * @listens Player#dispose
     * @throws  {Error}
     *          If attempting to instantiate the base {@link Plugin} class
     *          directly instead of via a sub-class.
     */

    var Plugin = function () {

        /**
         * Creates an instance of this class.
         *
         * Sub-classes should call `super` to ensure plugins are properly initialized.
         *
         * @param {Player} player
         *        A Video.js player instance.
         */
        function Plugin(player) {
            classCallCheck(this, Plugin);

            if (this.constructor === Plugin) {
                throw new Error('Plugin must be sub-classed; not directly instantiated.');
            }

            this.player = player;

            // Make this object evented, but remove the added `trigger` method so we
            // use the prototype version instead.
            evented(this);
            delete this.trigger;

            stateful(this, this.constructor.defaultState);
            markPluginAsActive(player, this.name);

            // Auto-bind the dispose method so we can use it as a listener and unbind
            // it later easily.
            this.dispose = bind(this, this.dispose);

            // If the player is disposed, dispose the plugin.
            player.on('dispose', this.dispose);
        }

        /**
         * Get the version of the plugin that was set on <pluginName>.VERSION
         */


        Plugin.prototype.version = function version() {
            return this.constructor.VERSION;
        };

        /**
         * Each event triggered by plugins includes a hash of additional data with
         * conventional properties.
         *
         * This returns that object or mutates an existing hash.
         *
         * @param   {Object} [hash={}]
         *          An object to be used as event an event hash.
         *
         * @returns {Plugin~PluginEventHash}
         *          An event hash object with provided properties mixed-in.
         */


        Plugin.prototype.getEventHash = function getEventHash() {
            var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            hash.name = this.name;
            hash.plugin = this.constructor;
            hash.instance = this;
            return hash;
        };

        /**
         * Triggers an event on the plugin object and overrides
         * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
         *
         * @param   {string|Object} event
         *          An event type or an object with a type property.
         *
         * @param   {Object} [hash={}]
         *          Additional data hash to merge with a
         *          {@link Plugin~PluginEventHash|PluginEventHash}.
         *
         * @returns {boolean}
         *          Whether or not default was prevented.
         */


        Plugin.prototype.trigger = function trigger$$1(event) {
            var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return trigger(this.eventBusEl_, event, this.getEventHash(hash));
        };

        /**
         * Handles "statechanged" events on the plugin. No-op by default, override by
         * subclassing.
         *
         * @abstract
         * @param    {Event} e
         *           An event object provided by a "statechanged" event.
         *
         * @param    {Object} e.changes
         *           An object describing changes that occurred with the "statechanged"
         *           event.
         */


        Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};

        /**
         * Disposes a plugin.
         *
         * Subclasses can override this if they want, but for the sake of safety,
         * it's probably best to subscribe the "dispose" event.
         *
         * @fires Plugin#dispose
         */


        Plugin.prototype.dispose = function dispose() {
            var name = this.name,
                player = this.player;

            /**
             * Signals that a advanced plugin is about to be disposed.
             *
             * @event Plugin#dispose
             * @type  {EventTarget~Event}
             */

            this.trigger('dispose');
            this.off();
            player.off('dispose', this.dispose);

            // Eliminate any possible sources of leaking memory by clearing up
            // references between the player and the plugin instance and nulling out
            // the plugin's state and replacing methods with a function that throws.
            player[PLUGIN_CACHE_KEY][name] = false;
            this.player = this.state = null;

            // Finally, replace the plugin name on the player with a new factory
            // function, so that the plugin is ready to be set up again.
            player[name] = createPluginFactory(name, pluginStorage[name]);
        };

        /**
         * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
         *
         * @param   {string|Function} plugin
         *          If a string, matches the name of a plugin. If a function, will be
         *          tested directly.
         *
         * @returns {boolean}
         *          Whether or not a plugin is a basic plugin.
         */


        Plugin.isBasic = function isBasic(plugin) {
            var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;

            return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
        };

        /**
         * Register a Video.js plugin.
         *
         * @param   {string} name
         *          The name of the plugin to be registered. Must be a string and
         *          must not match an existing plugin or a method on the `Player`
         *          prototype.
         *
         * @param   {Function} plugin
         *          A sub-class of `Plugin` or a function for basic plugins.
         *
         * @returns {Function}
         *          For advanced plugins, a factory function for that plugin. For
         *          basic plugins, a wrapper function that initializes the plugin.
         */


        Plugin.registerPlugin = function registerPlugin(name, plugin) {
            if (typeof name !== 'string') {
                throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');
            }

            if (pluginExists(name)) {
                log$1.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
            } else if (Player.prototype.hasOwnProperty(name)) {
                throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
            }

            if (typeof plugin !== 'function') {
                throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');
            }

            pluginStorage[name] = plugin;

            // Add a player prototype method for all sub-classed plugins (but not for
            // the base Plugin class).
            if (name !== BASE_PLUGIN_NAME) {
                if (Plugin.isBasic(plugin)) {
                    Player.prototype[name] = createBasicPlugin(name, plugin);
                } else {
                    Player.prototype[name] = createPluginFactory(name, plugin);
                }
            }

            return plugin;
        };

        /**
         * De-register a Video.js plugin.
         *
         * @param {string} name
         *        The name of the plugin to be deregistered.
         */


        Plugin.deregisterPlugin = function deregisterPlugin(name) {
            if (name === BASE_PLUGIN_NAME) {
                throw new Error('Cannot de-register base plugin.');
            }
            if (pluginExists(name)) {
                delete pluginStorage[name];
                delete Player.prototype[name];
            }
        };

        /**
         * Gets an object containing multiple Video.js plugins.
         *
         * @param   {Array} [names]
         *          If provided, should be an array of plugin names. Defaults to _all_
         *          plugin names.
         *
         * @returns {Object|undefined}
         *          An object containing plugin(s) associated with their name(s) or
         *          `undefined` if no matching plugins exist).
         */


        Plugin.getPlugins = function getPlugins() {
            var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);

            var result = void 0;

            names.forEach(function (name) {
                var plugin = getPlugin(name);

                if (plugin) {
                    result = result || {};
                    result[name] = plugin;
                }
            });

            return result;
        };

        /**
         * Gets a plugin's version, if available
         *
         * @param   {string} name
         *          The name of a plugin.
         *
         * @returns {string}
         *          The plugin's version or an empty string.
         */


        Plugin.getPluginVersion = function getPluginVersion(name) {
            var plugin = getPlugin(name);

            return plugin && plugin.VERSION || '';
        };

        return Plugin;
    }();

    /**
     * Gets a plugin by name if it exists.
     *
     * @static
     * @method   getPlugin
     * @memberOf Plugin
     * @param    {string} name
     *           The name of a plugin.
     *
     * @returns  {Function|undefined}
     *           The plugin (or `undefined`).
     */


    Plugin.getPlugin = getPlugin;

    /**
     * The name of the base plugin class as it is registered.
     *
     * @type {string}
     */
    Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;

    Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);

    /**
     * Documented in player.js
     *
     * @ignore
     */
    Player.prototype.usingPlugin = function (name) {
        return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
    };

    /**
     * Documented in player.js
     *
     * @ignore
     */
    Player.prototype.hasPlugin = function (name) {
        return !!pluginExists(name);
    };

    /**
     * Signals that a plugin is about to be set up on a player.
     *
     * @event    Player#beforepluginsetup
     * @type     {Plugin~PluginEventHash}
     */

    /**
     * Signals that a plugin is about to be set up on a player - by name. The name
     * is the name of the plugin.
     *
     * @event    Player#beforepluginsetup:$name
     * @type     {Plugin~PluginEventHash}
     */

    /**
     * Signals that a plugin has just been set up on a player.
     *
     * @event    Player#pluginsetup
     * @type     {Plugin~PluginEventHash}
     */

    /**
     * Signals that a plugin has just been set up on a player - by name. The name
     * is the name of the plugin.
     *
     * @event    Player#pluginsetup:$name
     * @type     {Plugin~PluginEventHash}
     */

    /**
     * @typedef  {Object} Plugin~PluginEventHash
     *
     * @property {string} instance
     *           For basic plugins, the return value of the plugin function. For
     *           advanced plugins, the plugin instance on which the event is fired.
     *
     * @property {string} name
     *           The name of the plugin.
     *
     * @property {string} plugin
     *           For basic plugins, the plugin function. For advanced plugins, the
     *           plugin class/constructor.
     */

    /**
     * @file extend.js
     * @module extend
     */

    /**
     * A combination of node inherits and babel's inherits (after transpile).
     * Both work the same but node adds `super_` to the subClass
     * and Bable adds the superClass as __proto__. Both seem useful.
     *
     * @param {Object} subClass
     *        The class to inherit to
     *
     * @param {Object} superClass
     *        The class to inherit from
     *
     * @private
     */
    var _inherits = function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });

        if (superClass) {
            // node
            subClass.super_ = superClass;
        }
    };

    /**
     * Function for subclassing using the same inheritance that
     * videojs uses internally
     *
     * @static
     * @const
     *
     * @param {Object} superClass
     *        The class to inherit from
     *
     * @param {Object} [subClassMethods={}]
     *        The class to inherit to
     *
     * @return {Object}
     *         The new object with subClassMethods that inherited superClass.
     */
    var extendFn = function extendFn(superClass) {
        var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var subClass = function subClass() {
            superClass.apply(this, arguments);
        };

        var methods = {};

        if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {
            if (subClassMethods.constructor !== Object.prototype.constructor) {
                subClass = subClassMethods.constructor;
            }
            methods = subClassMethods;
        } else if (typeof subClassMethods === 'function') {
            subClass = subClassMethods;
        }

        _inherits(subClass, superClass);

        // Extend subObj's prototype with functions and other properties from props
        for (var name in methods) {
            if (methods.hasOwnProperty(name)) {
                subClass.prototype[name] = methods[name];
            }
        }

        return subClass;
    };

    /**
     * @file video.js
     * @module videojs
     */
// Include the built-in techs
// HTML5 Element Shim for IE8
    if (typeof HTMLVideoElement === 'undefined' && isReal()) {
        document_1.createElement('video');
        document_1.createElement('audio');
        document_1.createElement('track');
        document_1.createElement('video-js');
    }

    /**
     * Doubles as the main function for users to create a player instance and also
     * the main library object.
     * The `videojs` function can be used to initialize or retrieve a player.
     *
     * @param {string|Element} id
     *        Video element or video element ID
     *
     * @param {Object} [options]
     *        Optional options object for config/settings
     *
     * @param {Component~ReadyCallback} [ready]
     *        Optional ready callback
     *
     * @return {Player}
     *         A player instance
     */
    function videojs(id, options, ready) {
        var tag = void 0;

        // Allow for element or ID to be passed in
        // String ID
        if (typeof id === 'string') {
            var players = videojs.getPlayers();

            // Adjust for jQuery ID syntax
            if (id.indexOf('#') === 0) {
                id = id.slice(1);
            }

            // If a player instance has already been created for this ID return it.
            if (players[id]) {

                // If options or ready function are passed, warn
                if (options) {
                    log$1.warn('Player "' + id + '" is already initialised. Options will not be applied.');
                }

                if (ready) {
                    players[id].ready(ready);
                }

                return players[id];
            }

            // Otherwise get element for ID
            tag = $('#' + id);

            // ID is a media element
        } else {
            tag = id;
        }

        // Check for a useable element
        // re: nodeName, could be a box div also
        if (!tag || !tag.nodeName) {
            throw new TypeError('The element or ID supplied is not valid. (videojs)');
        }

        // Element may have a player attr referring to an already created player instance.
        // If so return that otherwise set up a new player below
        if (tag.player || Player.players[tag.playerId]) {
            return tag.player || Player.players[tag.playerId];
        }

        // Check if element is included in the DOM
        if (isEl(tag) && !document_1.body.contains(tag)) {
            log$1.warn('The element supplied is not included in the DOM');
        }

        options = options || {};

        videojs.hooks('beforesetup').forEach(function (hookFunction) {
            var opts = hookFunction(tag, mergeOptions(options));

            if (!isObject(opts) || Array.isArray(opts)) {
                log$1.error('please return an object in beforesetup hooks');
                return;
            }

            options = mergeOptions(options, opts);
        });

        var PlayerComponent = Component.getComponent('Player');
        // If not, set up a new player
        var player = new PlayerComponent(tag, options, ready);

        videojs.hooks('setup').forEach(function (hookFunction) {
            return hookFunction(player);
        });

        return player;
    }

    /**
     * An Object that contains lifecycle hooks as keys which point to an array
     * of functions that are run when a lifecycle is triggered
     */
    videojs.hooks_ = {};

    /**
     * Get a list of hooks for a specific lifecycle
     * @function videojs.hooks
     *
     * @param {string} type
     *        the lifecyle to get hooks from
     *
     * @param {Function|Function[]} [fn]
     *        Optionally add a hook (or hooks) to the lifecycle that your are getting.
     *
     * @return {Array}
     *         an array of hooks, or an empty array if there are none.
     */
    videojs.hooks = function (type, fn) {
        videojs.hooks_[type] = videojs.hooks_[type] || [];
        if (fn) {
            videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
        }
        return videojs.hooks_[type];
    };

    /**
     * Add a function hook to a specific videojs lifecycle.
     *
     * @param {string} type
     *        the lifecycle to hook the function to.
     *
     * @param {Function|Function[]}
     *        The function or array of functions to attach.
     */
    videojs.hook = function (type, fn) {
        videojs.hooks(type, fn);
    };

    /**
     * Add a function hook that will only run once to a specific videojs lifecycle.
     *
     * @param {string} type
     *        the lifecycle to hook the function to.
     *
     * @param {Function|Function[]}
     *        The function or array of functions to attach.
     */
    videojs.hookOnce = function (type, fn) {
        videojs.hooks(type, [].concat(fn).map(function (original) {
            var wrapper = function wrapper() {
                videojs.removeHook(type, wrapper);
                return original.apply(undefined, arguments);
            };

            return wrapper;
        }));
    };

    /**
     * Remove a hook from a specific videojs lifecycle.
     *
     * @param {string} type
     *        the lifecycle that the function hooked to
     *
     * @param {Function} fn
     *        The hooked function to remove
     *
     * @return {boolean}
     *         The function that was removed or undef
     */
    videojs.removeHook = function (type, fn) {
        var index = videojs.hooks(type).indexOf(fn);

        if (index <= -1) {
            return false;
        }

        videojs.hooks_[type] = videojs.hooks_[type].slice();
        videojs.hooks_[type].splice(index, 1);

        return true;
    };

// Add default styles
    if (window_1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
        var style = $('.vjs-styles-defaults');

        if (!style) {
            style = createStyleElement('vjs-styles-defaults');
            var head = $('head');

            if (head) {
                head.insertBefore(style, head.firstChild);
            }
            setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
        }
    }

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your
// video in the DOM (weird behavior only with minified version)
    autoSetupTimeout(1, videojs);

    /**
     * Current software version. Follows semver.
     *
     * @type {string}
     */
    videojs.VERSION = version;

    /**
     * The global options object. These are the settings that take effect
     * if no overrides are specified when the player is created.
     *
     * @type {Object}
     */
    videojs.options = Player.prototype.options_;

    /**
     * Get an object with the currently created players, keyed by player ID
     *
     * @return {Object}
     *         The created players
     */
    videojs.getPlayers = function () {
        return Player.players;
    };

    /**
     * Expose players object.
     *
     * @memberOf videojs
     * @property {Object} players
     */
    videojs.players = Player.players;

    /**
     * Get a component class object by name
     *
     * @borrows Component.getComponent as videojs.getComponent
     */
    videojs.getComponent = Component.getComponent;

    /**
     * Register a component so it can referred to by name. Used when adding to other
     * components, either through addChild `component.addChild('myComponent')` or through
     * default children options  `{ children: ['myComponent'] }`.
     *
     * > NOTE: You could also just initialize the component before adding.
     * `component.addChild(new MyComponent());`
     *
     * @param {string} name
     *        The class name of the component
     *
     * @param {Component} comp
     *        The component class
     *
     * @return {Component}
     *         The newly registered component
     */
    videojs.registerComponent = function (name$$1, comp) {
        if (Tech.isTech(comp)) {
            log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
        }

        Component.registerComponent.call(Component, name$$1, comp);
    };

    /**
     * Get a Tech class object by name
     *
     * @borrows Tech.getTech as videojs.getTech
     */
    videojs.getTech = Tech.getTech;

    /**
     * Register a Tech so it can referred to by name.
     * This is used in the tech order for the player.
     *
     * @borrows Tech.registerTech as videojs.registerTech
     */
    videojs.registerTech = Tech.registerTech;

    videojs.use = use;

    /**
     * A suite of browser and device tests from {@link browser}.
     *
     * @type {Object}
     * @private
     */
    videojs.browser = browser;

    /**
     * Whether or not the browser supports touch events. Included for backward
     * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
     * instead going forward.
     *
     * @deprecated since version 5.0
     * @type {boolean}
     */
    videojs.TOUCH_ENABLED = TOUCH_ENABLED;

    /**
     * Subclass an existing class
     * Mimics ES6 subclassing with the `extend` keyword
     *
     * @borrows extend:extendFn as videojs.extend
     */
    videojs.extend = extendFn;

    /**
     * Merge two options objects recursively
     * Performs a deep merge like lodash.merge but **only merges plain objects**
     * (not arrays, elements, anything else)
     * Other values will be copied directly from the second object.
     *
     * @borrows merge-options:mergeOptions as videojs.mergeOptions
     */
    videojs.mergeOptions = mergeOptions;

    /**
     * Change the context (this) of a function
     *
     * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
     * `function() {}.bind(newContext);` instead of this.
     *
     * @borrows fn:bind as videojs.bind
     */
    videojs.bind = bind;

    /**
     * Register a Video.js plugin.
     *
     * @borrows plugin:registerPlugin as videojs.registerPlugin
     * @method registerPlugin
     *
     * @param  {string} name
     *         The name of the plugin to be registered. Must be a string and
     *         must not match an existing plugin or a method on the `Player`
     *         prototype.
     *
     * @param  {Function} plugin
     *         A sub-class of `Plugin` or a function for basic plugins.
     *
     * @return {Function}
     *         For advanced plugins, a factory function for that plugin. For
     *         basic plugins, a wrapper function that initializes the plugin.
     */
    videojs.registerPlugin = Plugin.registerPlugin;

    /**
     * Deprecated method to register a plugin with Video.js
     *
     * @deprecated
     *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead
     *
     * @param {string} name
     *        The plugin name
     *
     * @param {Plugin|Function} plugin
     *         The plugin sub-class or function
     */
    videojs.plugin = function (name$$1, plugin) {
        log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
        return Plugin.registerPlugin(name$$1, plugin);
    };

    /**
     * Gets an object containing multiple Video.js plugins.
     *
     * @param  {Array} [names]
     *         If provided, should be an array of plugin names. Defaults to _all_
     *         plugin names.
     *
     * @return {Object|undefined}
     *         An object containing plugin(s) associated with their name(s) or
     *         `undefined` if no matching plugins exist).
     */
    videojs.getPlugins = Plugin.getPlugins;

    /**
     * Gets a plugin by name if it exists.
     *
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {Function|undefined}
     *         The plugin (or `undefined`).
     */
    videojs.getPlugin = Plugin.getPlugin;

    /**
     * Gets a plugin's version, if available
     *
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {string}
     *         The plugin's version or an empty string.
     */
    videojs.getPluginVersion = Plugin.getPluginVersion;

    /**
     * Adding languages so that they're available to all players.
     * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
     *
     * @param {string} code
     *        The language code or dictionary property
     *
     * @param {Object} data
     *        The data values to be translated
     *
     * @return {Object}
     *         The resulting language dictionary object
     */
    videojs.addLanguage = function (code, data) {
        var _mergeOptions;

        code = ('' + code).toLowerCase();

        videojs.options.languages = mergeOptions(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

        return videojs.options.languages[code];
    };

    /**
     * Log messages
     *
     * @borrows log:log as videojs.log
     */
    videojs.log = log$1;

    /**
     * Creates an emulated TimeRange object.
     *
     * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
     */
    /**
     * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
     */
    videojs.createTimeRange = videojs.createTimeRanges = createTimeRanges;

    /**
     * Format seconds as a time string, H:MM:SS or M:SS
     * Supplying a guide (in seconds) will force a number of leading zeros
     * to cover the length of the guide
     *
     * @borrows format-time:formatTime as videojs.formatTime
     */
    videojs.formatTime = formatTime;

    /**
     * Resolve and parse the elements of a URL
     *
     * @borrows url:parseUrl as videojs.parseUrl
     */
    videojs.parseUrl = parseUrl;

    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @borrows url:isCrossOrigin as videojs.isCrossOrigin
     */
    videojs.isCrossOrigin = isCrossOrigin;

    /**
     * Event target class.
     *
     * @borrows EventTarget as videojs.EventTarget
     */
    videojs.EventTarget = EventTarget;

    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @borrows events:on as videojs.on
     */
    videojs.on = on;

    /**
     * Trigger a listener only once for an event
     *
     * @borrows events:one as videojs.one
     */
    videojs.one = one;

    /**
     * Removes event listeners from an element
     *
     * @borrows events:off as videojs.off
     */
    videojs.off = off;

    /**
     * Trigger an event for an element
     *
     * @borrows events:trigger as videojs.trigger
     */
    videojs.trigger = trigger;

    /**
     * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
     *
     * @param {Object} options
     *        settings for the request.
     *
     * @return {XMLHttpRequest|XDomainRequest}
     *         The request object.
     *
     * @see https://github.com/Raynos/xhr
     */
    videojs.xhr = xhr;

    /**
     * TextTrack class
     *
     * @borrows TextTrack as videojs.TextTrack
     */
    videojs.TextTrack = TextTrack;

    /**
     * export the AudioTrack class so that source handlers can create
     * AudioTracks and then add them to the players AudioTrackList
     *
     * @borrows AudioTrack as videojs.AudioTrack
     */
    videojs.AudioTrack = AudioTrack;

    /**
     * export the VideoTrack class so that source handlers can create
     * VideoTracks and then add them to the players VideoTrackList
     *
     * @borrows VideoTrack as videojs.VideoTrack
     */
    videojs.VideoTrack = VideoTrack;

    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @borrows dom:isEl as videojs.isEl
     * @deprecated Use videojs.dom.isEl() instead
     */

    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @borrows dom:isTextNode as videojs.isTextNode
     * @deprecated Use videojs.dom.isTextNode() instead
     */

    /**
     * Creates an element and applies properties.
     *
     * @borrows dom:createEl as videojs.createEl
     * @deprecated Use videojs.dom.createEl() instead
     */

    /**
     * Check if an element has a CSS class
     *
     * @borrows dom:hasElClass as videojs.hasClass
     * @deprecated Use videojs.dom.hasClass() instead
     */

    /**
     * Add a CSS class name to an element
     *
     * @borrows dom:addElClass as videojs.addClass
     * @deprecated Use videojs.dom.addClass() instead
     */

    /**
     * Remove a CSS class name from an element
     *
     * @borrows dom:removeElClass as videojs.removeClass
     * @deprecated Use videojs.dom.removeClass() instead
     */

    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @borrows dom:toggleElClass as videojs.toggleClass
     * @deprecated Use videojs.dom.toggleClass() instead
     */

    /**
     * Apply attributes to an HTML element.
     *
     * @borrows dom:setElAttributes as videojs.setAttribute
     * @deprecated Use videojs.dom.setAttributes() instead
     */

    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @borrows dom:getElAttributes as videojs.getAttributes
     * @deprecated Use videojs.dom.getAttributes() instead
     */

    /**
     * Empties the contents of an element.
     *
     * @borrows dom:emptyEl as videojs.emptyEl
     * @deprecated Use videojs.dom.emptyEl() instead
     */

    /**
     * Normalizes and appends content to an element.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @borrows dom:appendContents as videojs.appendContet
     * @deprecated Use videojs.dom.appendContent() instead
     */

    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @borrows dom:insertContent as videojs.insertContent
     * @deprecated Use videojs.dom.insertContent() instead
     */
    ['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {
        videojs[k] = function () {
            log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');
            return Dom[k].apply(null, arguments);
        };
    });

    /**
     * A safe getComputedStyle with an IE8 fallback.
     *
     * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
     * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
     * that the player doesn't break in these cases.
     * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
     *
     * @borrows computed-style:computedStyle as videojs.computedStyle
     */
    videojs.computedStyle = computedStyle;

    /**
     * Export the Dom utilities for use in external plugins
     * and Tech's
     */
    videojs.dom = Dom;

    /**
     * Export the Url utilities for use in external plugins
     * and Tech's
     */
    videojs.url = Url;

    return videojs;

})));

!function(){!function(a){var b=a&&a.videojs;b&&(b.CDN_VERSION="6.6.3")}(window),function(a,b,c,d,e,f,g){b&&b.HELP_IMPROVE_VIDEOJS!==!1&&(e.random()>.01||(f=b.location,g=b.videojs||{},a.src="//www.google-analytics.com/__utm.gif?utmwv=5.4.2&utmac=UA-16505296-3&utmn=1&utmhn="+d(f.hostname)+"&utmsr="+b.screen.availWidth+"x"+b.screen.availHeight+"&utmul="+(c.language||c.userLanguage||"").toLowerCase()+"&utmr="+d(f.href)+"&utmp="+d(f.hostname+f.pathname)+"&utmcc=__utma%3D1."+e.floor(1e10*e.random())+".1.1.1.1%3B&utme=8(vjsv*cdnv)9("+g.VERSION+"*"+g.CDN_VERSION+")"))}(new Image,window,navigator,encodeURIComponent,Math)}();;
///<jscompress sourcefile="videojs-hlsjs-plugin.js" />
/**
 * videojs-hlsjs-plugin
 * v1.0.10
 * 2019-02-26
 * www.streamroot.io
 * Copyright 漏 2018
 **/
!function(r){var i={};function a(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=r,a.c=i,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(r,i,function(e){return t[e]}.bind(null,i));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,r){"use strict";var i=r(1);window.videojs&&(i.registerConfigPlugin(window.videojs),i.registerSourceHandler(window.videojs)),e.exports={register:i.registerSourceHandler}},function(e,t,r){"use strict";var O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k=r(2);function i(e){var t=this;e&&(t.srOptions_||(t.srOptions_={}),t.srOptions_.hlsjsConfig||(t.srOptions_.hlsjsConfig=e.hlsjsConfig),t.srOptions_.captionConfig||(t.srOptions_.captionConfig=e.captionConfig))}e.exports={registerSourceHandler:function(L){var w={};function r(r,i){i.name_="StreamrootHlsjs";var n,s=i.el(),a={},o=null,l=null,u=null,d=null,c=null,h=null,p=L(i.options_.playerId),f=!1;function g(e){1===a[k.ErrorTypes.MEDIA_ERROR]?n.recoverMediaError():2===a[k.ErrorTypes.MEDIA_ERROR]?(n.swapAudioCodec(),n.recoverMediaError()):2<a[k.ErrorTypes.MEDIA_ERROR]&&(i.error=function(){return e},i.trigger("error"))}function v(e){n.nextLevel=e}function m(e,t){return"boolean"==typeof t&&(this[e]._enabled=t,function(e){for(var t=!0,r=0;r<e.length;r++)if(!e[r]._enabled){t=!1;break}if(t)n.currentLevel=-1;else{var i;for(i=e.length-1;0<=i&&!e[i]._enabled;i--);n.currentLevel=i}}(this)),this[e]._enabled}function y(){if(l){var a=[];if(1<l.levels.length){var e={id:-1,label:"auto",selected:-1===n.manualLevel};a.push(e)}l.levels.forEach(function(e,t){var r,i={};i.id=t,i.selected=t===n.manualLevel,i.label=(r=e).height?r.height+"p":r.width?Math.round(9*r.width/16)+"p":r.bitrate?r.bitrate/1e3+"kbps":0,a.push(i)});var t={qualityData:{video:a},qualitySwitchCallback:v};i.trigger("loadedqualitydata",t),s.removeEventListener("playing",y)}}function E(){for(var e=i.audioTracks(),t=0;t<e.length;t++)if(e[t].enabled){n.audioTrack=t;break}}function _(){var e=n.audioTracks,t=i.audioTracks();if(1<e.length&&0===t.length){for(var r=0;r<e.length;r++)t.addTrack(new L.AudioTrack({id:r,kind:"alternative",label:e[r].name||e[r].lang,language:e[r].lang,enabled:r===n.audioTrack}));t.addEventListener("change",E)}}function T(e){return e.label?e.label:e.language}function b(e,t){return T(e)===T(t)&&e.kind===t.kind}function S(){for(var e=p.textTracks(),t=null,r=0;r<e.length;r++)if("showing"===e[r].mode){t=e[r];break}for(var i=s.textTracks,a=0;a<i.length;a++)"subtitles"!==i[a].kind&&"captions"!==i[a].kind||(i[a].mode=t&&b(i[a],t)?"showing":"disabled")}function A(){n.startLoad(-1),s.removeEventListener("play",A)}function R(){for(var e=function(e){for(var t=[],r=0;r<e.length;r++)"subtitles"!==e[r].kind&&"captions"!==e[r].kind||t.push(e[r]);return t}(s.textTracks),t=p.textTracks(),r=0;r<e.length;r++){for(var i=!1,a=0;a<t.length;a++)if(b(e[r],t[a])){i=!0;break}if(!i){var n=e[r];p.addRemoteTextTrack({kind:n.kind,label:T(n),language:n.language,srclang:n.language},!1)}}S(),f||(t.addEventListener("change",S),f=!0)}function D(e,t){l=t,function(){if(l){var e=p.qualityLevels&&p.qualityLevels();if(e)for(var t=0;t<l.levels.length;t++){var r=l.levels[t],i={id:t,width:r.width,height:r.height,bandwidth:r.bitrate,bitrate:r.bitrate,_enabled:!0};i.enabled=m.bind(e,t),e.addQualityLevel(i)}}}()}function e(){var e=p.srOptions_&&p.srOptions_.hlsjsConfig||i.options_.hlsjsConfig;h=e?function(e){for(var t={},r=Object.keys(e),i=0;i<r.length;i++)t[r[i]]=e[r[i]];return t}(e):{},-1!==["","auto"].indexOf(s.preload)||s.autoplay||void 0!==h.autoStartLoad||(h.autoStartLoad=!1);var f,t=p.srOptions_&&p.srOptions_.captionConfig||i.options_.captionConfig;t&&(h.cueHandler=(f=t,{newCue:function(e,t,r,i){for(var a,n,s,o=window.VTTCue||window.TextTrackCue,l=0;l<i.rows.length;l++)if(s="",!(a=i.rows[l]).isEmpty()){for(var u=0;u<a.chars.length;u++)s+=a.chars[u].uchar;if(n=new o(t,r,s.trim()),null!=f&&"object"===(void 0===f?"undefined":O(f)))for(var d=Object.keys(f),c=0;c<d.length;c++)n[d[c]]=f[d[c]];e.addCue(n),r===t&&e.addCue(new o(r+5,""))}}})),!1===h.autoStartLoad&&s.addEventListener("play",A),s.addEventListener("playing",y),n=new k(h),function(e){if(void 0!==w[e])for(var t=0;t<w[e].length;t++)w[e][t](p,n)}("beforeinitialize"),n.on(k.Events.ERROR,function(e,t){!function(e,t){var r={message:"HLS.js error: "+t.type+" - fatal: "+t.fatal+" - "+t.details};if(a[t.type]?a[t.type]+=1:a[t.type]=1,t.fatal)switch(t.type){case k.ErrorTypes.NETWORK_ERROR:r.code=2,i.error=function(){return r},i.trigger("error");break;case k.ErrorTypes.MEDIA_ERROR:r.code=3,g(r);break;default:n.destroy(),i.error=function(){return r},i.trigger("error")}}(0,t)}),n.on(k.Events.AUDIO_TRACKS_UPDATED,_),n.on(k.Events.MANIFEST_PARSED,D),n.on(k.Events.LEVEL_LOADED,function(e,t){h.liveSyncDuration?c=h.liveSyncDuration:h.liveSyncDurationCount&&(c=h.liveSyncDurationCount*t.details.targetduration),u=t.details.live,d=t.details.totalduration,o=u?1/0:t.details.totalduration}),n.attachMedia(s),s.textTracks.addEventListener("addtrack",R),n.loadSource(r.src)}this.duration=function(){return o||s.duration||0},this.seekable=function(){if(n.media){if(!u)return L.createTimeRanges(0,n.media.duration);var e=Math.round(n.media.duration-d),t=Math.round(n.media.duration-c);return L.createTimeRanges(e,t)}return L.createTimeRanges()},this.dispose=function(){s.removeEventListener("play",A),s.textTracks.removeEventListener("addtrack",R),s.removeEventListener("playing",y),p.textTracks().removeEventListener("change",S),f=!1,p.audioTracks().removeEventListener("change",E),n.destroy()},s.addEventListener("error",function(e){var t=e.currentTarget.error;switch(t.code){case t.MEDIA_ERR_ABORTED:break;case t.MEDIA_ERR_DECODE:g(t);break;case t.MEDIA_ERR_NETWORK:case t.MEDIA_ERR_SRC_NOT_SUPPORTED:break;default:t.message}}),e()}if(r.addHook=function(e,t){w[e]=w[e]||[],w[e].push(t)},r.removeHook=function(e,t){if(void 0===w[e])return!1;var r=w[e].indexOf(t);return-1!==r&&(w[e].splice(r,1),!0)},k.isSupported()){var e;if("function"==typeof L.getTech)e=L.getTech("Html5");else{if("function"!=typeof L.getComponent)return;e=L.getComponent("Html5")}if(!e)return;e.registerSourceHandler({canHandleSource:function(e){return/^application\/x-mpegURL|application\/vnd\.apple\.mpegurl$/i.test(e.type)?"probably":/\.m3u8/i.test(e.src)?"maybe":""},handleSource:function(e,t){return t.hlsProvider&&t.hlsProvider.dispose(),t.hlsProvider=new r(e,t),t.hlsProvider}},0),L.Html5Hlsjs=r}},registerConfigPlugin:function(e){(e.registerPlugin||e.plugin)("streamrootHls",i)}}},function(e,t,r){var i;"undefined"!=typeof window&&(i=function(){return function(r){var i={};function a(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}return a.m=r,a.c=i,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(r,i,function(e){return t[e]}.bind(null,i));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/dist/",a(a.s="./src/hls.js")}({"./node_modules/eventemitter3/index.js":function(e,t,r){"use strict";var i=Object.prototype.hasOwnProperty,h="~";function a(){}function o(e,t,r){this.fn=e,this.context=t,this.once=r||!1}function n(e,t,r,i,a){if("function"!=typeof r)throw new TypeError("The listener must be a function");var n=new o(r,i||e,a),s=h?h+t:t;return e._events[s]?e._events[s].fn?e._events[s]=[e._events[s],n]:e._events[s].push(n):(e._events[s]=n,e._eventsCount++),e}function u(e,t){0==--e._eventsCount?e._events=new a:delete e._events[t]}function s(){this._events=new a,this._eventsCount=0}Object.create&&(a.prototype=Object.create(null),(new a).__proto__||(h=!1)),s.prototype.eventNames=function(){var e,t,r=[];if(0===this._eventsCount)return r;for(t in e=this._events)i.call(e,t)&&r.push(h?t.slice(1):t);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(e)):r},s.prototype.listeners=function(e){var t=h?h+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var i=0,a=r.length,n=new Array(a);i<a;i++)n[i]=r[i].fn;return n},s.prototype.listenerCount=function(e){var t=h?h+e:e,r=this._events[t];return r?r.fn?1:r.length:0},s.prototype.emit=function(e,t,r,i,a,n){var s=h?h+e:e;if(!this._events[s])return!1;var o,l,u=this._events[s],d=arguments.length;if(u.fn){switch(u.once&&this.removeListener(e,u.fn,void 0,!0),d){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,t),!0;case 3:return u.fn.call(u.context,t,r),!0;case 4:return u.fn.call(u.context,t,r,i),!0;case 5:return u.fn.call(u.context,t,r,i,a),!0;case 6:return u.fn.call(u.context,t,r,i,a,n),!0}for(l=1,o=new Array(d-1);l<d;l++)o[l-1]=arguments[l];u.fn.apply(u.context,o)}else{var c,f=u.length;for(l=0;l<f;l++)switch(u[l].once&&this.removeListener(e,u[l].fn,void 0,!0),d){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,t);break;case 3:u[l].fn.call(u[l].context,t,r);break;case 4:u[l].fn.call(u[l].context,t,r,i);break;default:if(!o)for(c=1,o=new Array(d-1);c<d;c++)o[c-1]=arguments[c];u[l].fn.apply(u[l].context,o)}}return!0},s.prototype.on=function(e,t,r){return n(this,e,t,r,!1)},s.prototype.once=function(e,t,r){return n(this,e,t,r,!0)},s.prototype.removeListener=function(e,t,r,i){var a=h?h+e:e;if(!this._events[a])return this;if(!t)return u(this,a),this;var n=this._events[a];if(n.fn)n.fn!==t||i&&!n.once||r&&n.context!==r||u(this,a);else{for(var s=0,o=[],l=n.length;s<l;s++)(n[s].fn!==t||i&&!n[s].once||r&&n[s].context!==r)&&o.push(n[s]);o.length?this._events[a]=1===o.length?o[0]:o:u(this,a)}return this},s.prototype.removeAllListeners=function(e){var t;return e?(t=h?h+e:e,this._events[t]&&u(this,t)):(this._events=new a,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=h,s.EventEmitter=s,e.exports=s},"./node_modules/node-libs-browser/node_modules/events/events.js":function(e,t){function i(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function l(e){return"function"==typeof e}function u(e){return"object"==typeof e&&null!==e}function d(e){return void 0===e}((e.exports=i).EventEmitter=i).prototype._events=void 0,i.prototype._maxListeners=void 0,i.defaultMaxListeners=10,i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},i.prototype.emit=function(e){var t,r,i,a,n,s;if(this._events||(this._events={}),"error"===e&&(!this._events.error||u(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var o=new Error('Uncaught, unspecified "error" event. ('+t+")");throw o.context=t,o}if(d(r=this._events[e]))return!1;if(l(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),r.apply(this,a)}else if(u(r))for(a=Array.prototype.slice.call(arguments,1),i=(s=r.slice()).length,n=0;n<i;n++)s[n].apply(this,a);return!0},i.prototype.on=i.prototype.addListener=function(e,t){var r;if(!l(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,l(t.listener)?t.listener:t),this._events[e]?u(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,u(this._events[e])&&!this._events[e].warned&&(r=d(this._maxListeners)?i.defaultMaxListeners:this._maxListeners)&&0<r&&this._events[e].length>r&&(this._events[e].warned=!0,console.trace),this},i.prototype.once=function(e,t){if(!l(t))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(e,i),r||(r=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},i.prototype.removeListener=function(e,t){var r,i,a,n;if(!l(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(a=(r=this._events[e]).length,i=-1,r===t||l(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(u(r)){for(n=a;0<n--;)if(r[n]===t||r[n].listener&&r[n].listener===t){i=n;break}if(i<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(i,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},i.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(l(r=this._events[e]))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},i.prototype.listeners=function(e){return this._events&&this._events[e]?l(this._events[e])?[this._events[e]]:this._events[e].slice():[]},i.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(l(t))return 1;if(t)return t.length}return 0},i.listenerCount=function(e,t){return e.listenerCount(t)}},"./node_modules/url-toolkit/src/url-toolkit.js":function(e,t,r){var i,d,a,n,c;i=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/,d=/^([^\/?#]*)(.*)$/,a=/(?:\/|^)\.(?=\/)/g,n=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g,c={buildAbsoluteURL:function(e,t,r){if(r=r||{},e=e.trim(),!(t=t.trim())){if(!r.alwaysNormalize)return e;var i=c.parseURL(e);if(!i)throw new Error("Error trying to parse base URL.");return i.path=c.normalizePath(i.path),c.buildURLFromParts(i)}var a=c.parseURL(t);if(!a)throw new Error("Error trying to parse relative URL.");if(a.scheme)return r.alwaysNormalize?(a.path=c.normalizePath(a.path),c.buildURLFromParts(a)):t;var n=c.parseURL(e);if(!n)throw new Error("Error trying to parse base URL.");if(!n.netLoc&&n.path&&"/"!==n.path[0]){var s=d.exec(n.path);n.netLoc=s[1],n.path=s[2]}n.netLoc&&!n.path&&(n.path="/");var o={scheme:n.scheme,netLoc:a.netLoc,path:null,params:a.params,query:a.query,fragment:a.fragment};if(!a.netLoc&&(o.netLoc=n.netLoc,"/"!==a.path[0]))if(a.path){var l=n.path,u=l.substring(0,l.lastIndexOf("/")+1)+a.path;o.path=c.normalizePath(u)}else o.path=n.path,a.params||(o.params=n.params,a.query||(o.query=n.query));return null===o.path&&(o.path=r.alwaysNormalize?c.normalizePath(a.path):a.path),c.buildURLFromParts(o)},parseURL:function(e){var t=i.exec(e);return t?{scheme:t[1]||"",netLoc:t[2]||"",path:t[3]||"",params:t[4]||"",query:t[5]||"",fragment:t[6]||""}:null},normalizePath:function(e){for(e=e.split("").reverse().join("").replace(a,"");e.length!==(e=e.replace(n,"")).length;);return e.split("").reverse().join("")},buildURLFromParts:function(e){return e.scheme+e.netLoc+e.path+e.params+e.query+e.fragment}},e.exports=c},"./node_modules/webworkify-webpack/index.js":function(e,t,h){function l(r){var i={};function a(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=r,a.c=i,a.i=function(e){return e},a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},a.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/",a.oe=function(e){throw e};var e=a(a.s=ENTRY_MODULE);return e.default||e}var p="[\\.|\\-|\\+|\\w|/|@]+",g="\\((/\\*.*?\\*/)?s?.*?("+p+").*?\\)";function v(e){return(e+"").replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}function f(e,t,r){var i={};i[r]=[];var a=t.toString(),n=a.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);if(!n)return i;for(var s,o=n[1],l=new RegExp("(\\\\n|\\W)"+v(o)+g,"g");s=l.exec(a);)"dll-reference"!==s[3]&&i[r].push(s[3]);for(l=new RegExp("\\("+v(o)+'\\("(dll-reference\\s('+p+'))"\\)\\)'+g,"g");s=l.exec(a);)e[s[2]]||(i[r].push(s[1]),e[s[2]]=h(s[1]).m),i[s[2]]=i[s[2]]||[],i[s[2]].push(s[4]);for(var u,d=Object.keys(i),c=0;c<d.length;c++)for(var f=0;f<i[d[c]].length;f++)u=i[d[c]][f],isNaN(1*u)||(i[d[c]][f]=1*i[d[c]][f]);return i}function m(r){return Object.keys(r).reduce(function(e,t){return e||0<r[t].length},!1)}e.exports=function(e,t){t=t||{};var r={main:h.m},i=t.all?{main:Object.keys(r.main)}:function(e,t){for(var r={main:[t]},i={main:[]},a={main:{}};m(r);)for(var n=Object.keys(r),s=0;s<n.length;s++){var o=n[s],l=r[o].pop();if(a[o]=a[o]||{},!a[o][l]&&e[o][l]){a[o][l]=!0,i[o]=i[o]||[],i[o].push(l);for(var u=f(e,e[o][l],o),d=Object.keys(u),c=0;c<d.length;c++)r[d[c]]=r[d[c]]||[],r[d[c]]=r[d[c]].concat(u[d[c]])}}return i}(r,e),a="";Object.keys(i).filter(function(e){return"main"!==e}).forEach(function(t){for(var e=0;i[t][e];)e++;i[t].push(e),r[t][e]="(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",a=a+"var "+t+" = ("+l.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+i[t].map(function(e){return JSON.stringify(e)+": "+r[t][e].toString()}).join(",")+"});\n"}),a=a+"new (("+l.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+i.main.map(function(e){return JSON.stringify(e)+": "+r.main[e].toString()}).join(",")+"}))(self);";var n=new window.Blob([a],{type:"text/javascript"});if(t.bare)return n;var s=(window.URL||window.webkitURL||window.mozURL||window.msURL).createObjectURL(n),o=new window.Worker(s);return o.objectURL=s,o}},"./src/config.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./src/controller/abr-controller.js"),a=r("./src/controller/buffer-controller.js"),n=r("./src/controller/cap-level-controller.js"),s=r("./src/controller/fps-controller.js"),o=r("./src/utils/xhr-loader.js"),l=r("./src/controller/audio-track-controller.js"),u=r("./src/controller/audio-stream-controller.js"),d=r("./src/utils/cues.js"),c=r("./src/controller/timeline-controller.js"),f=r("./src/controller/subtitle-track-controller.js"),h=r("./src/controller/subtitle-stream-controller.js"),p=r("./src/controller/eme-controller.js"),g=r("./src/utils/mediakeys-helper.js");t.hlsDefaultConfig={autoStartLoad:!0,startPosition:-1,defaultAudioCodec:void 0,debug:!1,capLevelOnFPSDrop:!1,capLevelToPlayerSize:!1,initialLiveManifestSize:1,maxBufferLength:30,maxBufferSize:6e7,maxBufferHole:.5,lowBufferWatchdogPeriod:.5,highBufferWatchdogPeriod:3,nudgeOffset:.1,nudgeMaxRetry:3,maxFragLookUpTolerance:.25,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,liveSyncDuration:void 0,liveMaxLatencyDuration:void 0,liveDurationInfinity:!1,liveBackBufferLength:1/0,maxMaxBufferLength:600,enableWorker:!0,enableSoftwareAES:!0,manifestLoadingTimeOut:1e4,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:64e3,startLevel:void 0,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1e3,levelLoadingMaxRetryTimeout:64e3,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1e3,fragLoadingMaxRetryTimeout:64e3,startFragPrefetch:!1,fpsDroppedMonitoringPeriod:5e3,fpsDroppedMonitoringThreshold:.2,appendErrorMaxRetry:3,loader:o.default,fLoader:void 0,pLoader:void 0,xhrSetup:void 0,licenseXhrSetup:void 0,abrController:i.default,bufferController:a.default,capLevelController:n.default,fpsController:s.default,stretchShortVideoTrack:!1,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:!0,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrBandWidthFactor:.95,abrBandWidthUpFactor:.7,abrMaxWithRealBitrate:!1,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0,emeEnabled:!1,widevineLicenseUrl:void 0,requestMediaKeySystemAccessFunc:g.requestMediaKeySystemAccess},t.hlsDefaultConfig.subtitleStreamController=h.SubtitleStreamController,t.hlsDefaultConfig.subtitleTrackController=f.default,t.hlsDefaultConfig.timelineController=c.default,t.hlsDefaultConfig.cueHandler=d,t.hlsDefaultConfig.enableCEA708Captions=!0,t.hlsDefaultConfig.enableWebVTT=!0,t.hlsDefaultConfig.captionsTextTrack1Label="English",t.hlsDefaultConfig.captionsTextTrack1LanguageCode="en",t.hlsDefaultConfig.captionsTextTrack2Label="Spanish",t.hlsDefaultConfig.captionsTextTrack2LanguageCode="es",t.hlsDefaultConfig.audioStreamController=u.default,t.hlsDefaultConfig.audioTrackController=l.default,t.hlsDefaultConfig.emeController=p.default},"./src/controller/abr-controller.js":function(e,r,l){"use strict";(function(s){var i,t=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(r,"__esModule",{value:!0});var E=l("./src/events.js"),a=l("./src/event-handler.js"),_=l("./src/utils/buffer-helper.js"),n=l("./src/errors.js"),T=l("./src/utils/logger.js"),o=l("./src/utils/ewma-bandwidth-estimator.js"),b=window.performance,e=function(r){function e(e){var t=r.call(this,e,E.default.FRAG_LOADING,E.default.FRAG_LOADED,E.default.FRAG_BUFFERED,E.default.ERROR)||this;return t.lastLoadedFragLevel=0,t._nextAutoLevel=-1,t.hls=e,t.timer=null,t._bwEstimator=null,t.onCheck=t._abandonRulesCheck.bind(t),t}return t(e,r),e.prototype.destroy=function(){this.clearTimer(),a.default.prototype.destroy.call(this)},e.prototype.onFragLoading=function(e){var t=e.frag;if("main"===t.type&&(this.timer||(this.fragCurrent=t,this.timer=setInterval(this.onCheck,100)),!this._bwEstimator)){var r=this.hls,i=r.config,a=t.level,n=void 0,s=void 0;s=r.levels[a].details.live?(n=i.abrEwmaFastLive,i.abrEwmaSlowLive):(n=i.abrEwmaFastVoD,i.abrEwmaSlowVoD),this._bwEstimator=new o.default(r,s,n,i.abrEwmaDefaultEstimate)}},e.prototype._abandonRulesCheck=function(){var e=this.hls,t=e.media,r=this.fragCurrent;if(r){var i=r.loader,a=e.minAutoLevel;if(!i||i.stats&&i.stats.aborted)return T.logger.warn("frag loader destroy or aborted, disarm abandonRules"),this.clearTimer(),void(this._nextAutoLevel=-1);var n=i.stats;if(t&&n&&(!t.paused&&0!==t.playbackRate||!t.readyState)&&r.autoLevel&&r.level){var s=b.now()-n.trequest,o=Math.abs(t.playbackRate);if(s>500*r.duration/o){var l=e.levels,u=Math.max(1,n.bw?n.bw/8:1e3*n.loaded/s),d=l[r.level],c=d.realBitrate?Math.max(d.realBitrate,d.bitrate):d.bitrate,f=n.total?n.total:Math.max(n.loaded,Math.round(r.duration*c/8)),h=t.currentTime,p=(f-n.loaded)/u,g=(_.BufferHelper.bufferInfo(t,h,e.config.maxBufferHole).end-h)/o;if(g<2*r.duration/o&&g<p){var v=void 0,m=void 0;for(m=r.level-1;a<m;m--){var y=l[m].realBitrate?Math.max(l[m].realBitrate,l[m].bitrate):l[m].bitrate;if((v=r.duration*y/(6.4*u))<g)break}v<p&&(T.logger.warn("loading too slow, abort fragment loading and switch to level "+m+":fragLoadedDelay["+m+"]<fragLoadedDelay["+(r.level-1)+"];bufferStarvationDelay:"+v.toFixed(1)+"<"+p.toFixed(1)+":"+g.toFixed(1)),e.nextLoadLevel=m,this._bwEstimator.sample(s,n.loaded),i.abort(),this.clearTimer(),e.trigger(E.default.FRAG_LOAD_EMERGENCY_ABORTED,{frag:r,stats:n}))}}}}},e.prototype.onFragLoaded=function(e){var t=e.frag;if("main"===t.type&&s.isFinite(t.sn)){if(this.clearTimer(),this.lastLoadedFragLevel=t.level,this._nextAutoLevel=-1,this.hls.config.abrMaxWithRealBitrate){var r=this.hls.levels[t.level],i=(r.loaded?r.loaded.bytes:0)+e.stats.loaded,a=(r.loaded?r.loaded.duration:0)+e.frag.duration;r.loaded={bytes:i,duration:a},r.realBitrate=Math.round(8*i/a)}if(e.frag.bitrateTest){var n=e.stats;n.tparsed=n.tbuffered=n.tload,this.onFragBuffered(e)}}},e.prototype.onFragBuffered=function(e){var t=e.stats,r=e.frag;if(!0!==t.aborted&&"main"===r.type&&s.isFinite(r.sn)&&(!r.bitrateTest||t.tload===t.tbuffered)){var i=t.tparsed-t.trequest;T.logger.log("latency/loading/parsing/append/kbps:"+Math.round(t.tfirst-t.trequest)+"/"+Math.round(t.tload-t.tfirst)+"/"+Math.round(t.tparsed-t.tload)+"/"+Math.round(t.tbuffered-t.tparsed)+"/"+Math.round(8*t.loaded/(t.tbuffered-t.trequest))),this._bwEstimator.sample(i,t.loaded),t.bwEstimate=this._bwEstimator.getEstimate(),r.bitrateTest?this.bitrateTestDelay=i/1e3:this.bitrateTestDelay=0}},e.prototype.onError=function(e){switch(e.details){case n.ErrorDetails.FRAG_LOAD_ERROR:case n.ErrorDetails.FRAG_LOAD_TIMEOUT:this.clearTimer()}},e.prototype.clearTimer=function(){clearInterval(this.timer),this.timer=null},Object.defineProperty(e.prototype,"nextAutoLevel",{get:function(){var e=this._nextAutoLevel,t=this._bwEstimator;if(!(-1===e||t&&t.canEstimate()))return e;var r=this._nextABRAutoLevel;return-1!==e&&(r=Math.min(e,r)),r},set:function(e){this._nextAutoLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_nextABRAutoLevel",{get:function(){var e=this.hls,t=e.maxAutoLevel,r=e.levels,i=e.config,a=e.minAutoLevel,n=e.media,s=this.lastLoadedFragLevel,o=this.fragCurrent?this.fragCurrent.duration:0,l=n?n.currentTime:0,u=n&&0!==n.playbackRate?Math.abs(n.playbackRate):1,d=this._bwEstimator?this._bwEstimator.getEstimate():i.abrEwmaDefaultEstimate,c=(_.BufferHelper.bufferInfo(n,l,i.maxBufferHole).end-l)/u,f=this._findBestLevel(s,o,d,a,t,c,i.abrBandWidthFactor,i.abrBandWidthUpFactor,r);if(0<=f)return f;T.logger.trace("rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering");var h=o?Math.min(o,i.maxStarvationDelay):i.maxStarvationDelay,p=i.abrBandWidthFactor,g=i.abrBandWidthUpFactor;if(0===c){var v=this.bitrateTestDelay;if(v)h=(o?Math.min(o,i.maxLoadingDelay):i.maxLoadingDelay)-v,T.logger.trace("bitrate test took "+Math.round(1e3*v)+"ms, set first fragment max fetchDuration to "+Math.round(1e3*h)+" ms"),p=g=1}return f=this._findBestLevel(s,o,d,a,t,c+h,p,g,r),Math.max(f,0)},enumerable:!0,configurable:!0}),e.prototype._findBestLevel=function(e,t,r,i,a,n,s,o,l){for(var u=a;i<=u;u--){var d=l[u];if(d){var c=d.details,f=c?c.totalduration/c.fragments.length:t,h=!!c&&c.live,p=void 0;p=u<=e?s*r:o*r;var g=l[u].realBitrate?Math.max(l[u].realBitrate,l[u].bitrate):l[u].bitrate,v=g*f/p;if(T.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: "+u+"/"+Math.round(p)+"/"+g+"/"+f+"/"+n+"/"+v),g<p&&(!v||h&&!this.bitrateTestDelay||v<n))return u}}return-1},e}(a.default);r.default=e}).call(this,l("./src/polyfills/number.js").Number)},"./src/controller/audio-stream-controller.js":function(e,r,n){"use strict";(function(C){var i,t=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(r,"__esModule",{value:!0});var x=n("./src/utils/binary-search.js"),M=n("./src/utils/buffer-helper.js"),h=n("./src/demux/demuxer.js"),F=n("./src/events.js"),f=n("./src/controller/level-helper.js"),a=n("./src/utils/time-ranges.js"),p=n("./src/errors.js"),N=n("./src/utils/logger.js"),j=n("./src/utils/discontinuities.js"),U=n("./src/controller/fragment-tracker.js"),g=n("./src/loader/fragment.js"),B=n("./src/controller/base-stream-controller.js"),G=window.performance,e=function(i){function e(e,t){var r=i.call(this,e,F.default.MEDIA_ATTACHED,F.default.MEDIA_DETACHING,F.default.AUDIO_TRACKS_UPDATED,F.default.AUDIO_TRACK_SWITCHING,F.default.AUDIO_TRACK_LOADED,F.default.KEY_LOADED,F.default.FRAG_LOADED,F.default.FRAG_PARSING_INIT_SEGMENT,F.default.FRAG_PARSING_DATA,F.default.FRAG_PARSED,F.default.ERROR,F.default.BUFFER_RESET,F.default.BUFFER_CREATED,F.default.BUFFER_APPENDED,F.default.BUFFER_FLUSHED,F.default.INIT_PTS_FOUND)||this;return r.fragmentTracker=t,r.config=e.config,r.audioCodecSwap=!1,r._state=B.State.STOPPED,r.initPTS=[],r.waitingFragment=null,r.videoTrackCC=null,r}return t(e,i),e.prototype.onHandlerDestroying=function(){this.stopLoad(),i.prototype.onHandlerDestroying.call(this)},e.prototype.onHandlerDestroyed=function(){this.state=B.State.STOPPED,this.fragmentTracker=null,i.prototype.onHandlerDestroyed.call(this)},e.prototype.onInitPtsFound=function(e){var t=e.id,r=e.frag.cc,i=e.initPTS;"main"===t&&(this.initPTS[r]=i,this.videoTrackCC=r,N.logger.log("InitPTS for cc: "+r+" found from video track: "+i),this.state===B.State.WAITING_INIT_PTS&&this.tick())},e.prototype.startLoad=function(e){if(this.tracks){var t=this.lastCurrentTime;this.stopLoad(),this.setInterval(100),this.fragLoadError=0,this.state=0<t&&-1===e?(N.logger.log("audio:override startPosition with lastCurrentTime @"+t.toFixed(3)),B.State.IDLE):(this.lastCurrentTime=this.startPosition?this.startPosition:e,B.State.STARTING),this.nextLoadPosition=this.startPosition=this.lastCurrentTime,this.tick()}else this.startPosition=e,this.state=B.State.STOPPED},e.prototype.stopLoad=function(){var e=this.fragCurrent;e&&(e.loader&&e.loader.abort(),this.fragmentTracker.removeFragment(e),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=B.State.STOPPED},Object.defineProperty(e.prototype,"state",{get:function(){return this._state},set:function(e){if(this.state!==e){var t=this.state;this._state=e,N.logger.log("audio stream:"+t+"->"+e)}},enumerable:!0,configurable:!0}),e.prototype.doTick=function(){var e,t,r,i=this.hls,a=i.config;switch(this.state){case B.State.ERROR:case B.State.PAUSED:case B.State.BUFFER_FLUSHING:break;case B.State.STARTING:this.state=B.State.WAITING_TRACK,this.loadedmetadata=!1;break;case B.State.IDLE:var n=this.tracks;if(!n)break;if(!this.media&&(this.startFragRequested||!a.startFragPrefetch))break;if(this.loadedmetadata)e=this.media.currentTime;else if(void 0===(e=this.nextLoadPosition))break;var s=this.mediaBuffer?this.mediaBuffer:this.media,o=this.videoBuffer?this.videoBuffer:this.media,l=M.BufferHelper.bufferInfo(s,e,a.maxBufferHole),u=M.BufferHelper.bufferInfo(o,e,a.maxBufferHole),d=l.len,c=l.end,f=this.fragPrevious,h=Math.min(a.maxBufferLength,a.maxMaxBufferLength),p=Math.max(h,u.len),g=this.audioSwitch,v=this.trackId;if((d<p||g)&&v<n.length){if(void 0===(r=n[v].details)){this.state=B.State.WAITING_TRACK;break}if(!g&&this._streamEnded(l,r))return this.hls.trigger(F.default.BUFFER_EOS,{type:"audio"}),void(this.state=B.State.ENDED);var m=r.fragments,y=m.length,E=m[0].start,_=m[y-1].start+m[y-1].duration,T=void 0;if(g)if(r.live&&!r.PTSKnown)N.logger.log("switching audiotrack, live stream, unknown PTS,load first fragment"),c=0;else if(c=e,r.PTSKnown&&e<E){if(!(l.end>E||l.nextStart))return;N.logger.log("alt audio track ahead of main track, seek to start of alt audio track"),this.media.currentTime=E+.05}if(r.initSegment&&!r.initSegment.data)T=r.initSegment;else if(c<=E){if(T=m[0],null!==this.videoTrackCC&&T.cc!==this.videoTrackCC&&(T=j.findFragWithCC(m,this.videoTrackCC)),r.live&&T.loadIdx&&T.loadIdx===this.fragLoadIdx){var b=l.nextStart?l.nextStart:E;return N.logger.log("no alt audio available @currentTime:"+this.media.currentTime+", seeking @"+(b+.05)),void(this.media.currentTime=b+.05)}}else{var S=void 0,A=a.maxFragLookUpTolerance,R=f?m[f.sn-m[0].sn+1]:void 0,D=function(e){var t=Math.min(A,e.duration);return e.start+e.duration-t<=c?1:e.start-t>c&&e.start?-1:0};(S=c<_?(_-A<c&&(A=0),R&&!D(R)?R:x.default.search(m,D)):m[y-1])&&(E=(T=S).start,f&&T.level===f.level&&T.sn===f.sn&&(T.sn<r.endSN?(T=m[T.sn+1-r.startSN],N.logger.log("SN just loaded, load next one: "+T.sn)):T=null))}T&&(T.encrypted?(N.logger.log("Loading key for "+T.sn+" of ["+r.startSN+" ,"+r.endSN+"],track "+v),this.state=B.State.KEY_LOADING,i.trigger(F.default.KEY_LOADING,{frag:T})):(N.logger.log("Loading "+T.sn+", cc: "+T.cc+" of ["+r.startSN+" ,"+r.endSN+"],track "+v+", currentTime:"+e+",bufferEnd:"+c.toFixed(3)),this.fragCurrent=T,(g||this.fragmentTracker.getState(T)===U.FragmentState.NOT_LOADED)&&(this.startFragRequested=!0,C.isFinite(T.sn)&&(this.nextLoadPosition=T.start+T.duration),i.trigger(F.default.FRAG_LOADING,{frag:T}),this.state=B.State.FRAG_LOADING)))}break;case B.State.WAITING_TRACK:(t=this.tracks[this.trackId])&&t.details&&(this.state=B.State.IDLE);break;case B.State.FRAG_LOADING_WAITING_RETRY:var L=G.now(),w=this.retryDate,O=(s=this.media)&&s.seeking;(!w||w<=L||O)&&(N.logger.log("audioStreamController: retryDate reached, switch back to IDLE state"),this.state=B.State.IDLE);break;case B.State.WAITING_INIT_PTS:var k=this.videoTrackCC;if(void 0===this.initPTS[k])break;var I=this.waitingFragment;if(I){var P=I.frag.cc;k!==P?(t=this.tracks[this.trackId]).details&&t.details.live&&(N.logger.warn("Waiting fragment CC ("+P+") does not match video track CC ("+k+")"),this.waitingFragment=null,this.state=B.State.IDLE):(this.state=B.State.FRAG_LOADING,this.onFragLoaded(this.waitingFragment),this.waitingFragment=null)}else this.state=B.State.IDLE;break;case B.State.STOPPED:case B.State.FRAG_LOADING:case B.State.PARSING:case B.State.PARSED:case B.State.ENDED:}},e.prototype.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("ended",this.onvended);var r=this.config;this.tracks&&r.autoStartLoad&&this.startLoad(r.startPosition)},e.prototype.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(N.logger.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1,this.stopLoad()},e.prototype.onAudioTracksUpdated=function(e){N.logger.log("audio tracks updated"),this.tracks=e.audioTracks},e.prototype.onAudioTrackSwitching=function(e){var t=!!e.url;this.trackId=e.id,this.fragCurrent=null,this.state=B.State.PAUSED,this.waitingFragment=null,t?this.setInterval(100):this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),t&&(this.audioSwitch=!0,this.state=B.State.IDLE),this.tick()},e.prototype.onAudioTrackLoaded=function(e){var t=e.details,r=e.id,i=this.tracks[r],a=t.totalduration,n=0;if(N.logger.log("track "+r+" loaded ["+t.startSN+","+t.endSN+"],duration:"+a),t.live){var s=i.details;s&&0<t.fragments.length?(f.mergeDetails(s,t),n=t.fragments[0].start,t.PTSKnown?N.logger.log("live audio playlist sliding:"+n.toFixed(3)):N.logger.log("live audio playlist - outdated PTS, unknown sliding")):(t.PTSKnown=!1,N.logger.log("live audio playlist - first load, unknown sliding"))}else t.PTSKnown=!1;if(i.details=t,!this.startFragRequested){if(-1===this.startPosition){var o=t.startTimeOffset;C.isFinite(o)?(N.logger.log("start time offset found in playlist, adjust startPosition to "+o),this.startPosition=o):this.startPosition=0}this.nextLoadPosition=this.startPosition}this.state===B.State.WAITING_TRACK&&(this.state=B.State.IDLE),this.tick()},e.prototype.onKeyLoaded=function(){this.state===B.State.KEY_LOADING&&(this.state=B.State.IDLE,this.tick())},e.prototype.onFragLoaded=function(e){var t=this.fragCurrent,r=e.frag;if(this.state===B.State.FRAG_LOADING&&t&&"audio"===r.type&&r.level===t.level&&r.sn===t.sn){var i=this.tracks[this.trackId],a=i.details,n=a.totalduration,s=t.level,o=t.sn,l=t.cc,u=this.config.defaultAudioCodec||i.audioCodec||"mp4a.40.2",d=this.stats=e.stats;if("initSegment"===o)this.state=B.State.IDLE,d.tparsed=d.tbuffered=G.now(),a.initSegment.data=e.payload,this.hls.trigger(F.default.FRAG_BUFFERED,{stats:d,frag:t,id:"audio"}),this.tick();else{this.state=B.State.PARSING,this.appended=!1,this.demuxer||(this.demuxer=new h.default(this.hls,"audio"));var c=this.initPTS[l],f=a.initSegment?a.initSegment.data:[];if(a.initSegment||void 0!==c){this.pendingBuffering=!0,N.logger.log("Demuxing "+o+" of ["+a.startSN+" ,"+a.endSN+"],track "+s);this.demuxer.push(e.payload,f,u,null,t,n,!1,c)}else N.logger.log("unknown video PTS for continuity counter "+l+", waiting for video PTS before demuxing audio frag "+o+" of ["+a.startSN+" ,"+a.endSN+"],track "+s),this.waitingFragment=e,this.state=B.State.WAITING_INIT_PTS}}this.fragLoadError=0},e.prototype.onFragParsingInitSegment=function(e){var t=this.fragCurrent,r=e.frag;if(t&&"audio"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===B.State.PARSING){var i=e.tracks,a=void 0;if(i.video&&delete i.video,a=i.audio){a.levelCodec=a.codec,a.id=e.id,this.hls.trigger(F.default.BUFFER_CODECS,i),N.logger.log("audio track:audio,container:"+a.container+",codecs[level/parsed]=["+a.levelCodec+"/"+a.codec+"]");var n=a.initSegment;if(n){var s={type:"audio",data:n,parent:"audio",content:"initSegment"};this.audioSwitch?this.pendingData=[s]:(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(F.default.BUFFER_APPENDING,s))}this.tick()}}},e.prototype.onFragParsingData=function(t){var r=this,e=this.fragCurrent,i=t.frag;if(e&&"audio"===t.id&&"audio"===t.type&&i.sn===e.sn&&i.level===e.level&&this.state===B.State.PARSING){var a=this.trackId,n=this.tracks[a],s=this.hls;C.isFinite(t.endPTS)||(t.endPTS=t.startPTS+e.duration,t.endDTS=t.startDTS+e.duration),e.addElementaryStream(g.default.ElementaryStreamTypes.AUDIO),N.logger.log("parsed "+t.type+",PTS:["+t.startPTS.toFixed(3)+","+t.endPTS.toFixed(3)+"],DTS:["+t.startDTS.toFixed(3)+"/"+t.endDTS.toFixed(3)+"],nb:"+t.nb),f.updateFragPTSDTS(n.details,e,t.startPTS,t.endPTS);var o=this.audioSwitch,l=this.media,u=!1;if(o&&l)if(l.readyState){var d=l.currentTime;N.logger.log("switching audio track : currentTime:"+d),d>=t.startPTS&&(N.logger.log("switching audio track : flushing all audio"),this.state=B.State.BUFFER_FLUSHING,s.trigger(F.default.BUFFER_FLUSHING,{startOffset:0,endOffset:C.POSITIVE_INFINITY,type:"audio"}),u=!0,this.audioSwitch=!1,s.trigger(F.default.AUDIO_TRACK_SWITCHED,{id:a}))}else this.audioSwitch=!1,s.trigger(F.default.AUDIO_TRACK_SWITCHED,{id:a});var c=this.pendingData;if(!c)return N.logger.warn("Apparently attempt to enqueue media payload without codec initialization data upfront"),void s.trigger(F.default.ERROR,{type:p.ErrorTypes.MEDIA_ERROR,details:null,fatal:!0});this.audioSwitch||([t.data1,t.data2].forEach(function(e){e&&e.length&&c.push({type:t.type,data:e,parent:"audio",content:"data"})}),!u&&c.length&&(c.forEach(function(e){r.state===B.State.PARSING&&(r.pendingBuffering=!0,r.hls.trigger(F.default.BUFFER_APPENDING,e))}),this.pendingData=[],this.appended=!0)),this.tick()}},e.prototype.onFragParsed=function(e){var t=this.fragCurrent,r=e.frag;t&&"audio"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===B.State.PARSING&&(this.stats.tparsed=G.now(),this.state=B.State.PARSED,this._checkAppendedParsed())},e.prototype.onBufferReset=function(){this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1},e.prototype.onBufferCreated=function(e){var t=e.tracks.audio;t&&(this.mediaBuffer=t.buffer,this.loadedmetadata=!0),e.tracks.video&&(this.videoBuffer=e.tracks.video.buffer)},e.prototype.onBufferAppended=function(e){if("audio"===e.parent){var t=this.state;t!==B.State.PARSING&&t!==B.State.PARSED||(this.pendingBuffering=0<e.pending,this._checkAppendedParsed())}},e.prototype._checkAppendedParsed=function(){if(!(this.state!==B.State.PARSED||this.appended&&this.pendingBuffering)){var e=this.fragCurrent,t=this.stats,r=this.hls;if(e){this.fragPrevious=e,t.tbuffered=G.now(),r.trigger(F.default.FRAG_BUFFERED,{stats:t,frag:e,id:"audio"});var i=this.mediaBuffer?this.mediaBuffer:this.media;N.logger.log("audio buffered : "+a.default.toString(i.buffered)),this.audioSwitch&&this.appended&&(this.audioSwitch=!1,r.trigger(F.default.AUDIO_TRACK_SWITCHED,{id:this.trackId})),this.state=B.State.IDLE}this.tick()}},e.prototype.onError=function(e){var t=e.frag;if(!t||"audio"===t.type)switch(e.details){case p.ErrorDetails.FRAG_LOAD_ERROR:case p.ErrorDetails.FRAG_LOAD_TIMEOUT:var r=e.frag;if(r&&"audio"!==r.type)break;if(!e.fatal){var i=this.fragLoadError;if(i?i++:i=1,i<=(n=this.config).fragLoadingMaxRetry){this.fragLoadError=i;var a=Math.min(Math.pow(2,i-1)*n.fragLoadingRetryDelay,n.fragLoadingMaxRetryTimeout);N.logger.warn("AudioStreamController: frag loading failed, retry in "+a+" ms"),this.retryDate=G.now()+a,this.state=B.State.FRAG_LOADING_WAITING_RETRY}else N.logger.error("AudioStreamController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=B.State.ERROR}break;case p.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:case p.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:case p.ErrorDetails.KEY_LOAD_ERROR:case p.ErrorDetails.KEY_LOAD_TIMEOUT:this.state!==B.State.ERROR&&(this.state=e.fatal?B.State.ERROR:B.State.IDLE,N.logger.warn("AudioStreamController: "+e.details+" while loading frag, now switching to "+this.state+" state ..."));break;case p.ErrorDetails.BUFFER_FULL_ERROR:if("audio"===e.parent&&(this.state===B.State.PARSING||this.state===B.State.PARSED)){var n,s=this.mediaBuffer,o=this.media.currentTime;if(s&&M.BufferHelper.isBuffered(s,o)&&M.BufferHelper.isBuffered(s,o+.5))(n=this.config).maxMaxBufferLength>=n.maxBufferLength&&(n.maxMaxBufferLength/=2,N.logger.warn("AudioStreamController: reduce max buffer length to "+n.maxMaxBufferLength+"s")),this.state=B.State.IDLE;else N.logger.warn("AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer"),this.fragCurrent=null,this.state=B.State.BUFFER_FLUSHING,this.hls.trigger(F.default.BUFFER_FLUSHING,{startOffset:0,endOffset:C.POSITIVE_INFINITY,type:"audio"})}}},e.prototype.onBufferFlushed=function(){var t=this,e=this.pendingData;e&&e.length?(N.logger.log("AudioStreamController: appending pending audio data after buffer flushed"),e.forEach(function(e){t.hls.trigger(F.default.BUFFER_APPENDING,e)}),this.appended=!0,this.pendingData=[],this.state=B.State.PARSED):(this.state=B.State.IDLE,this.fragPrevious=null,this.tick())},e}(B.default);r.default=e}).call(this,n("./src/polyfills/number.js").Number)},"./src/controller/audio-track-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var o=r("./src/events.js"),n=r("./src/task-loop.js"),l=r("./src/utils/logger.js"),u=r("./src/errors.js"),s=function(r){function e(e){var t=r.call(this,e,o.default.MANIFEST_LOADING,o.default.MANIFEST_PARSED,o.default.AUDIO_TRACK_LOADED,o.default.AUDIO_TRACK_SWITCHED,o.default.LEVEL_LOADED,o.default.ERROR)||this;return t._trackId=-1,t._selectDefaultTrack=!0,t.tracks=[],t.trackIdBlacklist=Object.create(null),t.audioGroupId=null,t}return a(e,r),e.prototype.onManifestLoading=function(){this.tracks=[],this._trackId=-1,this._selectDefaultTrack=!0},e.prototype.onManifestParsed=function(e){var t=this.tracks=e.audioTracks||[];this.hls.trigger(o.default.AUDIO_TRACKS_UPDATED,{audioTracks:t})},e.prototype.onAudioTrackLoaded=function(e){if(e.id>=this.tracks.length)l.logger.warn("Invalid audio track id:",e.id);else{if(l.logger.log("audioTrack "+e.id+" loaded"),this.tracks[e.id].details=e.details,e.details.live&&!this.hasInterval()){var t=1e3*e.details.targetduration;this.setInterval(t)}!e.details.live&&this.hasInterval()&&this.clearInterval()}},e.prototype.onAudioTrackSwitched=function(e){var t=this.tracks[e.id].groupId;t&&this.audioGroupId!==t&&(this.audioGroupId=t)},e.prototype.onLevelLoaded=function(e){var t=this.hls.levels[e.level];if(t.audioGroupIds){var r=t.audioGroupIds[t.urlId];this.audioGroupId!==r&&(this.audioGroupId=r,this._selectInitialAudioTrack())}},e.prototype.onError=function(e){e.type===u.ErrorTypes.NETWORK_ERROR&&(e.fatal&&this.clearInterval(),e.details===u.ErrorDetails.AUDIO_TRACK_LOAD_ERROR&&(l.logger.warn("Network failure on audio-track id:",e.context.id),this._handleLoadError()))},Object.defineProperty(e.prototype,"audioTracks",{get:function(){return this.tracks},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"audioTrack",{get:function(){return this._trackId},set:function(e){this._setAudioTrack(e),this._selectDefaultTrack=!1},enumerable:!0,configurable:!0}),e.prototype._setAudioTrack=function(e){if(this._trackId===e&&this.tracks[this._trackId].details)l.logger.debug("Same id as current audio-track passed, and track details available -> no-op");else if(e<0||e>=this.tracks.length)l.logger.warn("Invalid id passed to audio-track controller");else{var t=this.tracks[e];l.logger.log("Now switching to audio-track index "+e),this.clearInterval(),this._trackId=e;var r=t.url,i=t.type,a=t.id;this.hls.trigger(o.default.AUDIO_TRACK_SWITCHING,{id:a,type:i,url:r}),this._loadTrackDetailsIfNeeded(t)}},e.prototype.doTick=function(){this._updateTrack(this._trackId)},e.prototype._selectInitialAudioTrack=function(){var t=this,e=this.tracks;if(e.length){var r=this.tracks[this._trackId],i=null;if(r&&(i=r.name),this._selectDefaultTrack){var a=e.filter(function(e){return e.default});a.length?e=a:l.logger.warn("No default audio tracks defined")}var n=!1,s=function(){e.forEach(function(e){n||t.audioGroupId&&e.groupId!==t.audioGroupId||i&&i!==e.name||(t._setAudioTrack(e.id),n=!0)})};s(),n||(i=null,s()),n||(l.logger.error("No track found for running audio group-ID: "+this.audioGroupId),this.hls.trigger(o.default.ERROR,{type:u.ErrorTypes.MEDIA_ERROR,details:u.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,fatal:!0}))}},e.prototype._needsTrackLoading=function(e){var t=e.details,r=e.url;return!(t&&!t.live)&&!!r},e.prototype._loadTrackDetailsIfNeeded=function(e){if(this._needsTrackLoading(e)){var t=e.url,r=e.id;l.logger.log("loading audio-track playlist for id: "+r),this.hls.trigger(o.default.AUDIO_TRACK_LOADING,{url:t,id:r})}},e.prototype._updateTrack=function(e){if(!(e<0||e>=this.tracks.length)){this.clearInterval(),this._trackId=e,l.logger.log("trying to update audio-track "+e);var t=this.tracks[e];this._loadTrackDetailsIfNeeded(t)}},e.prototype._handleLoadError=function(){this.trackIdBlacklist[this._trackId]=!0;var e=this._trackId,t=this.tracks[e],r=t.name,i=t.language,a=t.groupId;l.logger.warn("Loading failed on audio track id: "+e+", group-id: "+a+', name/language: "'+r+'" / "'+i+'"');for(var n=e,s=0;s<this.tracks.length;s++){if(!this.trackIdBlacklist[s])if(this.tracks[s].name===r){n=s;break}}n!==e?(l.logger.log("Attempting audio-track fallback id:",n,"group-id:",this.tracks[n].groupId),this._setAudioTrack(n)):l.logger.warn('No fallback audio-track found for name/language: "'+r+'" / "'+i+'"')},e}(n.default);t.default=s},"./src/controller/base-stream-controller.js":function(e,h,a){"use strict";(function(d){var i,r=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(h,"__esModule",{value:!0});var e=a("./src/task-loop.js"),n=a("./src/controller/fragment-tracker.js"),c=a("./src/utils/buffer-helper.js"),f=a("./src/utils/logger.js");h.State={STOPPED:"STOPPED",STARTING:"STARTING",IDLE:"IDLE",PAUSED:"PAUSED",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_TRACK:"WAITING_TRACK",PARSING:"PARSING",PARSED:"PARSED",BUFFER_FLUSHING:"BUFFER_FLUSHING",ENDED:"ENDED",ERROR:"ERROR",WAITING_INIT_PTS:"WAITING_INIT_PTS",WAITING_LEVEL:"WAITING_LEVEL"};var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.doTick=function(){},t.prototype._streamEnded=function(e,t){var r=this.fragCurrent,i=this.fragmentTracker;if(t.live||!r||r.backtracked||r.sn!==t.endSN||e.nextStart)return!1;var a=i.getState(r);return a===n.FragmentState.PARTIAL||a===n.FragmentState.OK},t.prototype.onMediaSeeking=function(){var e=this.config,t=this.media,r=this.mediaBuffer,i=this.state,a=t?t.currentTime:null,n=c.BufferHelper.bufferInfo(r||t,a,this.config.maxBufferHole);if(d.isFinite(a)&&f.logger.log("media seeking to "+a.toFixed(3)),i===h.State.FRAG_LOADING){var s=this.fragCurrent;if(0===n.len&&s){var o=e.maxFragLookUpTolerance,l=s.start-o,u=s.start+s.duration+o;a<l||u<a?(s.loader&&(f.logger.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),s.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.state=h.State.IDLE):f.logger.log("seeking outside of buffer but within currently loaded fragment range")}}else i===h.State.ENDED&&(0===n.len&&(this.fragPrevious=null,this.fragCurrent=null),this.state=h.State.IDLE);t&&(this.lastCurrentTime=a),this.loadedmetadata||(this.nextLoadPosition=this.startPosition=a),this.tick()},t.prototype.onMediaEnded=function(){this.startPosition=this.lastCurrentTime=0},t}(e.default);h.default=t}).call(this,a("./src/polyfills/number.js").Number)},"./src/controller/buffer-controller.js":function(e,r,o){"use strict";(function(i){var a,t=this&&this.__extends||(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(r,"__esModule",{value:!0});var l=o("./src/events.js"),n=o("./src/event-handler.js"),u=o("./src/utils/logger.js"),d=o("./src/errors.js"),s=o("./src/utils/mediasource-helper.js").getMediaSource(),e=function(r){function e(e){var t=r.call(this,e,l.default.MEDIA_ATTACHING,l.default.MEDIA_DETACHING,l.default.MANIFEST_PARSED,l.default.BUFFER_RESET,l.default.BUFFER_APPENDING,l.default.BUFFER_CODECS,l.default.BUFFER_EOS,l.default.BUFFER_FLUSHING,l.default.LEVEL_PTS_UPDATED,l.default.LEVEL_UPDATED)||this;return t._msDuration=null,t._levelDuration=null,t._levelTargetDuration=10,t._live=null,t._objectUrl=null,t.bufferCodecEventsExpected=0,t.onsbue=t.onSBUpdateEnd.bind(t),t.onsbe=t.onSBUpdateError.bind(t),t.pendingTracks={},t.tracks={},t}return t(e,r),e.prototype.destroy=function(){n.default.prototype.destroy.call(this)},e.prototype.onLevelPtsUpdated=function(e){var t=e.type,r=this.tracks.audio;if("audio"===t&&r&&"audio/mpeg"===r.container){var i=this.sourceBuffer.audio;if(.1<Math.abs(i.timestampOffset-e.start)){var a=i.updating;try{i.abort()}catch(e){u.logger.warn("can not abort audio buffer: "+e)}a?this.audioTimestampOffset=e.start:(u.logger.warn("change mpeg audio timestamp offset from "+i.timestampOffset+" to "+e.start),i.timestampOffset=e.start)}}},e.prototype.onManifestParsed=function(e){this.bufferCodecEventsExpected=e.altAudio?2:1,u.logger.log(this.bufferCodecEventsExpected+" bufferCodec event(s) expected")},e.prototype.onMediaAttaching=function(e){var t=this.media=e.media;if(t){var r=this.mediaSource=new s;this.onmso=this.onMediaSourceOpen.bind(this),this.onmse=this.onMediaSourceEnded.bind(this),this.onmsc=this.onMediaSourceClose.bind(this),r.addEventListener("sourceopen",this.onmso),r.addEventListener("sourceended",this.onmse),r.addEventListener("sourceclose",this.onmsc),t.src=window.URL.createObjectURL(r),this._objectUrl=t.src}},e.prototype.onMediaDetaching=function(){u.logger.log("media source detaching");var e=this.mediaSource;if(e){if("open"===e.readyState)try{e.endOfStream()}catch(e){u.logger.warn("onMediaDetaching:"+e.message+" while calling endOfStream")}e.removeEventListener("sourceopen",this.onmso),e.removeEventListener("sourceended",this.onmse),e.removeEventListener("sourceclose",this.onmsc),this.media&&(window.URL.revokeObjectURL(this._objectUrl),this.media.src===this._objectUrl?(this.media.removeAttribute("src"),this.media.load()):u.logger.warn("media.src was changed by a third party - skip cleanup")),this.mediaSource=null,this.media=null,this._objectUrl=null,this.pendingTracks={},this.tracks={},this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0}this.onmso=this.onmse=this.onmsc=null,this.hls.trigger(l.default.MEDIA_DETACHED)},e.prototype.onMediaSourceOpen=function(){u.logger.log("media source opened"),this.hls.trigger(l.default.MEDIA_ATTACHED,{media:this.media});var e=this.mediaSource;e&&e.removeEventListener("sourceopen",this.onmso),this.checkPendingTracks()},e.prototype.checkPendingTracks=function(){var e=this.bufferCodecEventsExpected,t=this.pendingTracks,r=Object.keys(t).length;(r&&!e||2===r)&&(this.createSourceBuffers(t),this.pendingTracks={},this.doAppending())},e.prototype.onMediaSourceClose=function(){u.logger.log("media source closed")},e.prototype.onMediaSourceEnded=function(){u.logger.log("media source ended")},e.prototype.onSBUpdateEnd=function(){if(this.audioTimestampOffset){var e=this.sourceBuffer.audio;u.logger.warn("change mpeg audio timestamp offset from "+e.timestampOffset+" to "+this.audioTimestampOffset),e.timestampOffset=this.audioTimestampOffset,delete this.audioTimestampOffset}this._needsFlush&&this.doFlush(),this._needsEos&&this.checkEos(),this.appending=!1;var r=this.parent,t=this.segments.reduce(function(e,t){return t.parent===r?e+1:e},0),i={},a=this.sourceBuffer;for(var n in a)i[n]=a[n].buffered;this.hls.trigger(l.default.BUFFER_APPENDED,{parent:r,pending:t,timeRanges:i}),this._needsFlush||this.doAppending(),this.updateMediaElementDuration(),0===t&&this.flushLiveBackBuffer()},e.prototype.onSBUpdateError=function(e){u.logger.error("sourceBuffer error:",e),this.hls.trigger(l.default.ERROR,{type:d.ErrorTypes.MEDIA_ERROR,details:d.ErrorDetails.BUFFER_APPENDING_ERROR,fatal:!1})},e.prototype.onBufferReset=function(){var e=this.sourceBuffer;for(var t in e){var r=e[t];try{this.mediaSource.removeSourceBuffer(r),r.removeEventListener("updateend",this.onsbue),r.removeEventListener("error",this.onsbe)}catch(e){}}this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0},e.prototype.onBufferCodecs=function(t){var r=this;if(!Object.keys(this.sourceBuffer).length){Object.keys(t).forEach(function(e){r.pendingTracks[e]=t[e]});var e=this.mediaSource;this.bufferCodecEventsExpected=Math.max(this.bufferCodecEventsExpected-1,0),e&&"open"===e.readyState&&this.checkPendingTracks()}},e.prototype.createSourceBuffers=function(e){var t=this.sourceBuffer,r=this.mediaSource;for(var i in e)if(!t[i]){var a=e[i],n=a.levelCodec||a.codec,s=a.container+";codecs="+n;u.logger.log("creating sourceBuffer("+s+")");try{var o=t[i]=r.addSourceBuffer(s);o.addEventListener("updateend",this.onsbue),o.addEventListener("error",this.onsbe),this.tracks[i]={codec:n,container:a.container},a.buffer=o}catch(e){u.logger.error("error while trying to add sourceBuffer:"+e.message),this.hls.trigger(l.default.ERROR,{type:d.ErrorTypes.MEDIA_ERROR,details:d.ErrorDetails.BUFFER_ADD_CODEC_ERROR,fatal:!1,err:e,mimeType:s})}}this.hls.trigger(l.default.BUFFER_CREATED,{tracks:e})},e.prototype.onBufferAppending=function(e){this._needsFlush||(this.segments?this.segments.push(e):this.segments=[e],this.doAppending())},e.prototype.onBufferAppendFail=function(e){u.logger.error("sourceBuffer error:",e.event),this.hls.trigger(l.default.ERROR,{type:d.ErrorTypes.MEDIA_ERROR,details:d.ErrorDetails.BUFFER_APPENDING_ERROR,fatal:!1})},e.prototype.onBufferEos=function(e){var t=this.sourceBuffer,r=e.type;for(var i in t)r&&i!==r||t[i].ended||(t[i].ended=!0,u.logger.log(i+" sourceBuffer now EOS"));this.checkEos()},e.prototype.checkEos=function(){var e=this.sourceBuffer,t=this.mediaSource;if(t&&"open"===t.readyState){for(var r in e){var i=e[r];if(!i.ended)return;if(i.updating)return void(this._needsEos=!0)}u.logger.log("all media data are available, signal endOfStream() to MediaSource and stop loading fragment");try{t.endOfStream()}catch(e){u.logger.warn("exception while calling mediaSource.endOfStream()")}this._needsEos=!1}else this._needsEos=!1},e.prototype.onBufferFlushing=function(e){this.flushRange.push({start:e.startOffset,end:e.endOffset,type:e.type}),this.flushBufferCounter=0,this.doFlush()},e.prototype.flushLiveBackBuffer=function(){if(this._live){var e=this.hls.config.liveBackBufferLength;if(isFinite(e)&&!(e<0))for(var t=this.media.currentTime,r=this.sourceBuffer,i=Object.keys(r),a=t-Math.max(e,this._levelTargetDuration),n=i.length-1;0<=n;n--){var s=i[n],o=r[s].buffered;0<o.length&&a>o.start(0)&&this.removeBufferRange(s,r[s],0,a)}}},e.prototype.onLevelUpdated=function(e){var t=e.details;0<t.fragments.length&&(this._levelDuration=t.totalduration+t.fragments[0].start,this._levelTargetDuration=t.averagetargetduration||t.targetduration||10,this._live=t.live,this.updateMediaElementDuration())},e.prototype.updateMediaElementDuration=function(){var e,t=this.hls.config;if(null!==this._levelDuration&&this.media&&this.mediaSource&&this.sourceBuffer&&0!==this.media.readyState&&"open"===this.mediaSource.readyState){for(var r in this.sourceBuffer)if(!0===this.sourceBuffer[r].updating)return;e=this.media.duration,null===this._msDuration&&(this._msDuration=this.mediaSource.duration),!0===this._live&&!0===t.liveDurationInfinity?(u.logger.log("Media Source duration is set to Infinity"),this._msDuration=this.mediaSource.duration=1/0):(this._levelDuration>this._msDuration&&this._levelDuration>e||!i.isFinite(e))&&(u.logger.log("Updating Media Source duration to "+this._levelDuration.toFixed(3)),this._msDuration=this.mediaSource.duration=this._levelDuration)}},e.prototype.doFlush=function(){for(;this.flushRange.length;){var e=this.flushRange[0];if(!this.flushBuffer(e.start,e.end,e.type))return void(this._needsFlush=!0);this.flushRange.shift(),this.flushBufferCounter=0}if(0===this.flushRange.length){this._needsFlush=!1;var t=0,r=this.sourceBuffer;try{for(var i in r)t+=r[i].buffered.length}catch(e){u.logger.error("error while accessing sourceBuffer.buffered")}this.appended=t,this.hls.trigger(l.default.BUFFER_FLUSHED)}},e.prototype.doAppending=function(){var t=this.hls,r=this.segments,e=this.sourceBuffer;if(Object.keys(e).length){if(this.media.error)return this.segments=[],void u.logger.error("trying to append although a media error occured, flush segment and abort");if(this.appending)return;if(r&&r.length){var i=r.shift();try{var a=e[i.type];a?a.updating?r.unshift(i):(a.ended=!1,this.parent=i.parent,a.appendBuffer(i.data),this.appendError=0,this.appended++,this.appending=!0):this.onSBUpdateEnd()}catch(e){u.logger.error("error while trying to append buffer:"+e.message),r.unshift(i);var n={type:d.ErrorTypes.MEDIA_ERROR,parent:i.parent};22!==e.code?(this.appendError?this.appendError++:this.appendError=1,n.details=d.ErrorDetails.BUFFER_APPEND_ERROR,this.appendError>t.config.appendErrorMaxRetry?(u.logger.log("fail "+t.config.appendErrorMaxRetry+" times to append segment in sourceBuffer"),this.segments=[],n.fatal=!0):n.fatal=!1):(this.segments=[],n.details=d.ErrorDetails.BUFFER_FULL_ERROR,n.fatal=!1),t.trigger(l.default.ERROR,n)}}}},e.prototype.flushBuffer=function(e,t,r){var i,a=this.sourceBuffer;if(Object.keys(a).length){if(u.logger.log("flushBuffer,pos/start/end: "+this.media.currentTime.toFixed(3)+"/"+e+"/"+t),this.flushBufferCounter<this.appended){for(var n in a)if(!r||n===r){if((i=a[n]).ended=!1,i.updating)return u.logger.warn("cannot flush, sb updating in progress"),!1;if(this.removeBufferRange(n,i,e,t))return this.flushBufferCounter++,!1}}else u.logger.warn("abort flushing too many retries");u.logger.log("buffer flushed")}return!0},e.prototype.removeBufferRange=function(e,t,r,i){try{for(var a=0;a<t.buffered.length;a++){var n=t.buffered.start(a),s=t.buffered.end(a),o=Math.max(n,r),l=Math.min(s,i);if(.5<Math.min(l,s)-o)return u.logger.log("sb remove "+e+" ["+o+","+l+"], of ["+n+","+s+"], pos:"+this.media.currentTime),t.remove(o,l),!0}}catch(e){u.logger.warn("removeBufferRange failed",e)}return!1},e}(n.default);r.default=e}).call(this,o("./src/polyfills/number.js").Number)},"./src/controller/cap-level-controller.js":function(e,r,s){"use strict";(function(i){var a,e=this&&this.__extends||(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(r,"__esModule",{value:!0});var n=s("./src/events.js"),t=function(r){function a(e){var t=r.call(this,e,n.default.FPS_DROP_LEVEL_CAPPING,n.default.MEDIA_ATTACHING,n.default.MANIFEST_PARSED,n.default.BUFFER_CODECS,n.default.MEDIA_DETACHING)||this;return t.autoLevelCapping=i.POSITIVE_INFINITY,t.firstLevel=null,t.levels=[],t.media=null,t.restrictedLevels=[],t.timer=null,t}return e(a,r),a.prototype.destroy=function(){this.hls.config.capLevelToPlayerSize&&(this.media=null,this._stopCapping())},a.prototype.onFpsDropLevelCapping=function(e){a.isLevelAllowed(e.droppedLevel,this.restrictedLevels)&&this.restrictedLevels.push(e.droppedLevel)},a.prototype.onMediaAttaching=function(e){this.media=e.media instanceof window.HTMLVideoElement?e.media:null},a.prototype.onManifestParsed=function(e){var t=this.hls;this.restrictedLevels=[],this.levels=e.levels,this.firstLevel=e.firstLevel,t.config.capLevelToPlayerSize&&e.video&&this._startCapping()},a.prototype.onBufferCodecs=function(e){this.hls.config.capLevelToPlayerSize&&e.video&&this._startCapping()},a.prototype.onLevelsUpdated=function(e){this.levels=e.levels},a.prototype.onMediaDetaching=function(){this._stopCapping()},a.prototype.detectPlayerSize=function(){if(this.media){var e=this.levels?this.levels.length:0;if(e){var t=this.hls;t.autoLevelCapping=this.getMaxLevel(e-1),t.autoLevelCapping>this.autoLevelCapping&&t.streamController.nextLevelSwitch(),this.autoLevelCapping=t.autoLevelCapping}}},a.prototype.getMaxLevel=function(r){var i=this;if(!this.levels)return-1;var e=this.levels.filter(function(e,t){return a.isLevelAllowed(t,i.restrictedLevels)&&t<=r});return a.getMaxLevelByMediaSize(e,this.mediaWidth,this.mediaHeight)},a.prototype._startCapping=function(){this.timer||(this.autoLevelCapping=i.POSITIVE_INFINITY,this.hls.firstLevel=this.getMaxLevel(this.firstLevel),clearInterval(this.timer),this.timer=setInterval(this.detectPlayerSize.bind(this),1e3),this.detectPlayerSize())},a.prototype._stopCapping=function(){this.restrictedLevels=[],this.firstLevel=null,this.autoLevelCapping=i.POSITIVE_INFINITY,this.timer&&(this.timer=clearInterval(this.timer),this.timer=null)},Object.defineProperty(a.prototype,"mediaWidth",{get:function(){var e,t=this.media;return t&&(e=t.width||t.clientWidth||t.offsetWidth,e*=a.contentScaleFactor),e},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"mediaHeight",{get:function(){var e,t=this.media;return t&&(e=t.height||t.clientHeight||t.offsetHeight,e*=a.contentScaleFactor),e},enumerable:!0,configurable:!0}),Object.defineProperty(a,"contentScaleFactor",{get:function(){var e=1;try{e=window.devicePixelRatio}catch(e){}return e},enumerable:!0,configurable:!0}),a.isLevelAllowed=function(e,t){return void 0===t&&(t=[]),-1===t.indexOf(e)},a.getMaxLevelByMediaSize=function(e,t,r){if(!e||e&&!e.length)return-1;for(var i,a,n=e.length-1,s=0;s<e.length;s+=1){var o=e[s];if((o.width>=t||o.height>=r)&&(i=o,!(a=e[s+1])||i.width!==a.width||i.height!==a.height)){n=s;break}}return n},a}(s("./src/event-handler.js").default);r.default=t}).call(this,s("./src/polyfills/number.js").Number)},"./src/controller/eme-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=r("./src/event-handler.js"),s=r("./src/events.js"),o=r("./src/errors.js"),l=r("./src/utils/logger.js"),u=window.XMLHttpRequest,d="com.widevine.alpha",c="com.microsoft.playready",f=function(r){function e(e){var t=r.call(this,e,s.default.MEDIA_ATTACHED,s.default.MANIFEST_PARSED)||this;return t._widevineLicenseUrl=e.config.widevineLicenseUrl,t._licenseXhrSetup=e.config.licenseXhrSetup,t._emeEnabled=e.config.emeEnabled,t._requestMediaKeySystemAccess=e.config.requestMediaKeySystemAccessFunc,t._mediaKeysList=[],t._media=null,t._hasSetMediaKeys=!1,t._isMediaEncrypted=!1,t._requestLicenseFailureCount=0,t}return a(e,r),e.prototype.getLicenseServerUrl=function(e){var t;switch(e){case d:t=this._widevineLicenseUrl;break;default:t=null}return t||(l.logger.error('No license server URL configured for key-system "'+e+'"'),this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})),t},e.prototype._attemptKeySystemAccess=function(t,e,r){var i=this,a=function(e,t,r){switch(e){case d:return i={videoCapabilities:[]},r.forEach(function(e){i.videoCapabilities.push({contentType:'video/mp4; codecs="'+e+'"'})}),[i];default:throw Error("Unknown key-system: "+e)}var i}(t,0,r);a?(l.logger.log("Requesting encrypted media key-system access"),this.requestMediaKeySystemAccess(t,a).then(function(e){i._onMediaKeySystemAccessObtained(t,e)}).catch(function(e){l.logger.error('Failed to obtain key-system "'+t+'" access:',e)})):l.logger.warn("Can not create config for key-system (maybe because platform is not supported):",t)},Object.defineProperty(e.prototype,"requestMediaKeySystemAccess",{get:function(){if(!this._requestMediaKeySystemAccess)throw new Error("No requestMediaKeySystemAccess function configured");return this._requestMediaKeySystemAccess},enumerable:!0,configurable:!0}),e.prototype._onMediaKeySystemAccessObtained=function(t,e){var r=this;l.logger.log('Access for key-system "'+t+'" obtained');var i={mediaKeys:null,mediaKeysSession:null,mediaKeysSessionInitialized:!1,mediaKeySystemAccess:e,mediaKeySystemDomain:t};this._mediaKeysList.push(i),e.createMediaKeys().then(function(e){i.mediaKeys=e,l.logger.log('Media-keys created for key-system "'+t+'"'),r._onMediaKeysCreated()}).catch(function(e){l.logger.error("Failed to create media-keys:",e)})},e.prototype._onMediaKeysCreated=function(){var t=this;this._mediaKeysList.forEach(function(e){e.mediaKeysSession||(e.mediaKeysSession=e.mediaKeys.createSession(),t._onNewMediaKeySession(e.mediaKeysSession))})},e.prototype._onNewMediaKeySession=function(t){var r=this;l.logger.log("New key-system session "+t.sessionId),t.addEventListener("message",function(e){r._onKeySessionMessage(t,e.message)},!1)},e.prototype._onKeySessionMessage=function(t,e){l.logger.log("Got EME message event, creating license request"),this._requestLicense(e,function(e){l.logger.log("Received license data, updating key-session"),t.update(e)})},e.prototype._onMediaEncrypted=function(e,t){l.logger.log('Media is encrypted using "'+e+'" init data type'),this._isMediaEncrypted=!0,this._mediaEncryptionInitDataType=e,this._mediaEncryptionInitData=t,this._attemptSetMediaKeys(),this._generateRequestWithPreferredKeySession()},e.prototype._attemptSetMediaKeys=function(){if(!this._hasSetMediaKeys){var e=this._mediaKeysList[0];if(!e||!e.mediaKeys)return l.logger.error("Fatal: Media is encrypted but no CDM access or no keys have been obtained yet"),void this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_KEYS,fatal:!0});l.logger.log("Setting keys for encrypted media"),this._media.setMediaKeys(e.mediaKeys),this._hasSetMediaKeys=!0}},e.prototype._generateRequestWithPreferredKeySession=function(){var t=this,e=this._mediaKeysList[0];if(!e)return l.logger.error("Fatal: Media is encrypted but not any key-system access has been obtained yet"),void this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:!0});if(e.mediaKeysSessionInitialized)l.logger.warn("Key-Session already initialized but requested again");else{var r=e.mediaKeysSession;r||(l.logger.error("Fatal: Media is encrypted but no key-session existing"),this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:!0}));var i=this._mediaEncryptionInitDataType,a=this._mediaEncryptionInitData;l.logger.log('Generating key-session request for "'+i+'" init data type'),e.mediaKeysSessionInitialized=!0,r.generateRequest(i,a).then(function(){l.logger.debug("Key-session generation succeeded")}).catch(function(e){l.logger.error("Error generating key-session request:",e),t.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:!1})})}},e.prototype._createLicenseXhr=function(t,e,r){var i=new u,a=this._licenseXhrSetup;try{if(a)try{a(i,t)}catch(e){i.open("POST",t,!0),a(i,t)}i.readyState||i.open("POST",t,!0)}catch(e){return l.logger.error("Error setting up key-system license XHR",e),void this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})}return i.responseType="arraybuffer",i.onreadystatechange=this._onLicenseRequestReadyStageChange.bind(this,i,t,e,r),i},e.prototype._onLicenseRequestReadyStageChange=function(e,t,r,i){switch(e.readyState){case 4:if(200===e.status)this._requestLicenseFailureCount=0,l.logger.log("License request succeeded"),i(e.response);else{if(l.logger.error("License Request XHR failed ("+t+"). Status: "+e.status+" ("+e.statusText+")"),this._requestLicenseFailureCount++,this._requestLicenseFailureCount<=3){var a=3-this._requestLicenseFailureCount+1;return l.logger.warn("Retrying license request, "+a+" attempts left"),void this._requestLicense(r,i)}this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})}}},e.prototype._generateLicenseRequestChallenge=function(e,t){var r;return e.mediaKeySystemDomain===c?l.logger.error("PlayReady is not supported (yet)"):e.mediaKeySystemDomain===d?r=t:l.logger.error("Unsupported key-system:",e.mediaKeySystemDomain),r},e.prototype._requestLicense=function(e,t){l.logger.log("Requesting content license for key-system");var r=this._mediaKeysList[0];if(!r)return l.logger.error("Fatal error: Media is encrypted but no key-system access has been obtained yet"),void this.hls.trigger(s.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:!0});var i=this.getLicenseServerUrl(r.mediaKeySystemDomain),a=this._createLicenseXhr(i,e,t);l.logger.log("Sending license request to URL: "+i),a.send(this._generateLicenseRequestChallenge(r,e))},e.prototype.onMediaAttached=function(e){var t=this;if(this._emeEnabled){var r=e.media;(this._media=r).addEventListener("encrypted",function(e){t._onMediaEncrypted(e.initDataType,e.initData)})}},e.prototype.onManifestParsed=function(e){if(this._emeEnabled){var t=e.levels.map(function(e){return e.audioCodec}),r=e.levels.map(function(e){return e.videoCodec});this._attemptKeySystemAccess(d,t,r)}},e}(n.default);t.default=f},"./src/controller/fps-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var d=r("./src/events.js"),n=r("./src/event-handler.js"),c=r("./src/utils/logger.js"),f=window.performance,s=function(t){function e(e){return t.call(this,e,d.default.MEDIA_ATTACHING)||this}return a(e,t),e.prototype.destroy=function(){this.timer&&clearInterval(this.timer),this.isVideoPlaybackQualityAvailable=!1},e.prototype.onMediaAttaching=function(e){var t=this.hls.config;t.capLevelOnFPSDrop&&("function"==typeof(this.video=e.media instanceof window.HTMLVideoElement?e.media:null).getVideoPlaybackQuality&&(this.isVideoPlaybackQualityAvailable=!0),clearInterval(this.timer),this.timer=setInterval(this.checkFPSInterval.bind(this),t.fpsDroppedMonitoringPeriod))},e.prototype.checkFPS=function(e,t,r){var i=f.now();if(t){if(this.lastTime){var a=i-this.lastTime,n=r-this.lastDroppedFrames,s=t-this.lastDecodedFrames,o=1e3*n/a,l=this.hls;if(l.trigger(d.default.FPS_DROP,{currentDropped:n,currentDecoded:s,totalDroppedFrames:r}),0<o&&n>l.config.fpsDroppedMonitoringThreshold*s){var u=l.currentLevel;c.logger.warn("drop FPS ratio greater than max allowed value for currentLevel: "+u),0<u&&(-1===l.autoLevelCapping||l.autoLevelCapping>=u)&&(u-=1,l.trigger(d.default.FPS_DROP_LEVEL_CAPPING,{level:u,droppedLevel:l.currentLevel}),l.autoLevelCapping=u,l.streamController.nextLevelSwitch())}}this.lastTime=i,this.lastDroppedFrames=r,this.lastDecodedFrames=t}},e.prototype.checkFPSInterval=function(){var e=this.video;if(e)if(this.isVideoPlaybackQualityAvailable){var t=e.getVideoPlaybackQuality();this.checkFPS(e,t.totalVideoFrames,t.droppedVideoFrames)}else this.checkFPS(e,e.webkitDecodedFrameCount,e.webkitDroppedFrameCount)},e}(n.default);t.default=s},"./src/controller/fragment-finders.js":function(e,t,r){"use strict";(function(n){Object.defineProperty(t,"__esModule",{value:!0});var s=r("./src/utils/binary-search.js");function o(e,t,r){void 0===e&&(e=0),void 0===t&&(t=0);var i=Math.min(t,r.duration+(r.deltaPTS?r.deltaPTS:0));return r.start+r.duration-i<=e?1:r.start-i>e&&r.start?-1:0}function l(e,t,r){var i=1e3*Math.min(t,r.duration+(r.deltaPTS?r.deltaPTS:0));return r.endProgramDateTime-i>e}t.findFragmentByPDT=function(e,t,r){if(!Array.isArray(e)||!e.length||!n.isFinite(t))return null;if(t<e[0].programDateTime)return null;if(t>=e[e.length-1].endProgramDateTime)return null;r=r||0;for(var i=0;i<e.length;++i){var a=e[i];if(l(t,r,a))return a}return null},t.findFragmentByPTS=function(e,t,r,i){void 0===r&&(r=0),void 0===i&&(i=0);var a=e?t[e.sn-t[0].sn+1]:null;return a&&!o(r,i,a)?a:s.default.search(t,o.bind(null,r,i))},t.fragmentWithinToleranceTest=o,t.pdtWithinToleranceTest=l}).call(this,r("./src/polyfills/number.js").Number)},"./src/controller/fragment-tracker.js":function(e,o,r){"use strict";(function(i){var a,t=this&&this.__extends||(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(o,"__esModule",{value:!0});var n=r("./src/event-handler.js"),s=r("./src/events.js");o.FragmentState={NOT_LOADED:"NOT_LOADED",APPENDING:"APPENDING",PARTIAL:"PARTIAL",OK:"OK"};var e=function(r){function e(e){var t=r.call(this,e,s.default.BUFFER_APPENDED,s.default.FRAG_BUFFERED,s.default.FRAG_LOADED)||this;return t.bufferPadding=.2,t.fragments=Object.create(null),t.timeRanges=Object.create(null),t.config=e.config,t}return t(e,r),e.prototype.destroy=function(){this.fragments=null,this.timeRanges=null,this.config=null,n.default.prototype.destroy.call(this),r.prototype.destroy.call(this)},e.prototype.getBufferedFrag=function(i,a){var n=this.fragments,e=Object.keys(n).filter(function(e){var t=n[e];if(t.body.type!==a)return!1;if(!t.buffered)return!1;var r=t.body;return r.startPTS<=i&&i<=r.endPTS});if(0===e.length)return null;var t=e.pop();return n[t].body},e.prototype.detectEvictedFragments=function(a,n){var s,o,l=this;Object.keys(this.fragments).forEach(function(e){var t=l.fragments[e];if(!0===t.buffered){var r=t.range[a];if(r){s=r.time;for(var i=0;i<s.length;i++)if(o=s[i],!1===l.isTimeBuffered(o.startPTS,o.endPTS,n)){l.removeFragment(t.body);break}}}})},e.prototype.detectPartialFragments=function(r){var i=this,e=this.getFragmentKey(r),a=this.fragments[e];a&&(a.buffered=!0,Object.keys(this.timeRanges).forEach(function(e){if(r.hasElementaryStream(e)){var t=i.timeRanges[e];a.range[e]=i.getBufferedTimes(r.startPTS,r.endPTS,t)}}))},e.prototype.getBufferedTimes=function(e,t,r){for(var i,a,n=[],s=!1,o=0;o<r.length;o++){if(i=r.start(o)-this.bufferPadding,a=r.end(o)+this.bufferPadding,i<=e&&t<=a){n.push({startPTS:Math.max(e,r.start(o)),endPTS:Math.min(t,r.end(o))});break}if(e<a&&i<t)n.push({startPTS:Math.max(e,r.start(o)),endPTS:Math.min(t,r.end(o))}),s=!0;else if(t<=i)break}return{time:n,partial:s}},e.prototype.getFragmentKey=function(e){return e.type+"_"+e.level+"_"+e.urlId+"_"+e.sn},e.prototype.getPartialFragment=function(r){var i,a,n,s=this,o=null,l=0;return Object.keys(this.fragments).forEach(function(e){var t=s.fragments[e];s.isPartial(t)&&(a=t.body.startPTS-s.bufferPadding,n=t.body.endPTS+s.bufferPadding,a<=r&&r<=n&&(i=Math.min(r-a,n-r),l<=i&&(o=t.body,l=i)))}),o},e.prototype.getState=function(e){var t=this.getFragmentKey(e),r=this.fragments[t],i=o.FragmentState.NOT_LOADED;return void 0!==r&&(i=r.buffered?!0===this.isPartial(r)?o.FragmentState.PARTIAL:o.FragmentState.OK:o.FragmentState.APPENDING),i},e.prototype.isPartial=function(e){return!0===e.buffered&&(void 0!==e.range.video&&!0===e.range.video.partial||void 0!==e.range.audio&&!0===e.range.audio.partial)},e.prototype.isTimeBuffered=function(e,t,r){for(var i,a,n=0;n<r.length;n++){if(i=r.start(n)-this.bufferPadding,a=r.end(n)+this.bufferPadding,i<=e&&t<=a)return!0;if(t<=i)return!1}return!1},e.prototype.onFragLoaded=function(e){var t=e.frag;i.isFinite(t.sn)&&!t.bitrateTest&&(this.fragments[this.getFragmentKey(t)]={body:t,range:Object.create(null),buffered:!1})},e.prototype.onBufferAppended=function(e){var r=this;this.timeRanges=e.timeRanges,Object.keys(this.timeRanges).forEach(function(e){var t=r.timeRanges[e];r.detectEvictedFragments(e,t)})},e.prototype.onFragBuffered=function(e){this.detectPartialFragments(e.frag)},e.prototype.hasFragment=function(e){var t=this.getFragmentKey(e);return void 0!==this.fragments[t]},e.prototype.removeFragment=function(e){var t=this.getFragmentKey(e);delete this.fragments[t]},e.prototype.removeAllFragments=function(){this.fragments=Object.create(null)},e}(n.default);o.FragmentTracker=e}).call(this,r("./src/polyfills/number.js").Number)},"./src/controller/gap-controller.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=r("./src/utils/buffer-helper.js"),o=r("./src/errors.js"),u=r("./src/events.js"),d=r("./src/utils/logger.js"),i=function(){function e(e,t,r,i){this.config=e,this.media=t,this.fragmentTracker=r,this.hls=i,this.stallReported=!1}return e.prototype.poll=function(e,t){var r=this.config,i=this.media,a=i.currentTime,n=window.performance.now();if(a!==e)return this.stallReported&&(d.logger.warn("playback not stuck anymore @"+a+", after "+Math.round(n-this.stalled)+"ms"),this.stallReported=!1),this.stalled=null,void(this.nudgeRetry=0);if(!(i.ended||!i.buffered.length||2<i.readyState||i.seeking&&l.BufferHelper.isBuffered(i,a))){var s=n-this.stalled,o=l.BufferHelper.bufferInfo(i,a,r.maxBufferHole);this.stalled?(1e3<=s&&this._reportStall(o.len),this._tryFixBufferStall(o,s)):this.stalled=n}},e.prototype._tryFixBufferStall=function(e,t){var r=this.config,i=this.fragmentTracker,a=this.media.currentTime,n=i.getPartialFragment(a);n&&this._trySkipBufferHole(n),.5<e.len&&t>1e3*r.highBufferWatchdogPeriod&&(this.stalled=null,this._tryNudgeBuffer())},e.prototype._reportStall=function(e){var t=this.hls,r=this.media;this.stallReported||(this.stallReported=!0,d.logger.warn("Playback stalling at @"+r.currentTime+" due to low buffer"),t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_STALLED_ERROR,fatal:!1,buffer:e}))},e.prototype._trySkipBufferHole=function(e){for(var t=this.hls,r=this.media,i=r.currentTime,a=0,n=0;n<r.buffered.length;n++){var s=r.buffered.start(n);if(a<=i&&i<s)return r.currentTime=Math.max(s,r.currentTime+.1),d.logger.warn("skipping hole, adjusting currentTime from "+i+" to "+r.currentTime),this.stalled=null,void t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_SEEK_OVER_HOLE,fatal:!1,reason:"fragment loaded with buffer holes, seeking from "+i+" to "+r.currentTime,frag:e});a=r.buffered.end(n)}},e.prototype._tryNudgeBuffer=function(){var e=this.config,t=this.hls,r=this.media,i=r.currentTime,a=(this.nudgeRetry||0)+1;if((this.nudgeRetry=a)<e.nudgeMaxRetry){var n=i+a*e.nudgeOffset;d.logger.log("adjust currentTime from "+i+" to "+n),r.currentTime=n,t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_NUDGE_ON_STALL,fatal:!1})}else d.logger.error("still stuck in high buffer @"+i+" after "+e.nudgeMaxRetry+", raise fatal error"),t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_STALLED_ERROR,fatal:!0})},e}();t.default=i},"./src/controller/id3-track-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=r("./src/events.js"),s=r("./src/event-handler.js"),c=r("./src/demux/id3.js"),o=r("./src/utils/texttrack-utils.js"),l=function(r){function e(e){var t=r.call(this,e,n.default.MEDIA_ATTACHED,n.default.MEDIA_DETACHING,n.default.FRAG_PARSING_METADATA)||this;return t.id3Track=void 0,t.media=void 0,t}return a(e,r),e.prototype.destroy=function(){s.default.prototype.destroy.call(this)},e.prototype.onMediaAttached=function(e){this.media=e.media,this.media},e.prototype.onMediaDetaching=function(){o.clearCurrentCues(this.id3Track),this.id3Track=void 0,this.media=void 0},e.prototype.getID3Track=function(e){for(var t=0;t<e.length;t++){var r=e[t];if("metadata"===r.kind&&"id3"===r.label)return o.sendAddTrackEvent(r,this.media),r}return this.media.addTextTrack("metadata","id3")},e.prototype.onFragParsingMetadata=function(e){var t=e.frag,r=e.samples;this.id3Track||(this.id3Track=this.getID3Track(this.media.textTracks),this.id3Track.mode="hidden");for(var i=window.WebKitDataCue||window.VTTCue||window.TextTrackCue,a=0;a<r.length;a++){var n=c.default.getID3Frames(r[a].data);if(n){var s=r[a].pts,o=a<r.length-1?r[a+1].pts:t.endPTS;s===o&&(o+=1e-4);for(var l=0;l<n.length;l++){var u=n[l];if(!c.default.isTimeStampFrame(u)){var d=new i(s,o,"");d.value=u,this.id3Track.addCue(d)}}}}},e}(s.default);t.default=l},"./src/controller/level-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var u,d=r("./src/events.js"),n=r("./src/event-handler.js"),c=r("./src/utils/logger.js"),f=r("./src/errors.js"),h=r("./src/utils/codecs.js"),p=r("./src/controller/level-helper.js"),l=window.performance,s=function(r){function e(e){var t=r.call(this,e,d.default.MANIFEST_LOADED,d.default.LEVEL_LOADED,d.default.AUDIO_TRACK_SWITCHED,d.default.FRAG_LOADED,d.default.ERROR)||this;return t.canload=!1,t.currentLevelIndex=null,t.manualLevelIndex=-1,t.timer=null,u=/chrome|firefox/.test(navigator.userAgent.toLowerCase()),t}return a(e,r),e.prototype.onHandlerDestroying=function(){this.clearTimer(),this.manualLevelIndex=-1},e.prototype.clearTimer=function(){null!==this.timer&&(clearTimeout(this.timer),this.timer=null)},e.prototype.startLoad=function(){var e=this._levels;this.canload=!0,this.levelRetryCount=0,e&&e.forEach(function(e){e.loadError=0;var t=e.details;t&&t.live&&(e.details=void 0)}),null!==this.timer&&this.loadLevel()},e.prototype.stopLoad=function(){this.canload=!1},e.prototype.onManifestLoaded=function(e){var t,r=[],i=[],a={},n=null,s=!1,o=!1;if(e.levels.forEach(function(e){var t=e.attrs;e.loadError=0,e.fragmentError=!1,s=s||!!e.videoCodec,o=o||!!e.audioCodec,u&&e.audioCodec&&-1!==e.audioCodec.indexOf("mp4a.40.34")&&(e.audioCodec=void 0),(n=a[e.bitrate])?n.url.push(e.url):(e.url=[e.url],e.urlId=0,a[e.bitrate]=e,r.push(e)),t&&(t.AUDIO&&(o=!0,p.addGroupId(n||e,"audio",t.AUDIO)),t.SUBTITLES&&p.addGroupId(n||e,"text",t.SUBTITLES))}),s&&o&&(r=r.filter(function(e){return!!e.videoCodec})),r=r.filter(function(e){var t=e.audioCodec,r=e.videoCodec;return(!t||h.isCodecSupportedInMp4(t,"audio"))&&(!r||h.isCodecSupportedInMp4(r,"video"))}),e.audioTracks&&(i=e.audioTracks.filter(function(e){return!e.audioCodec||h.isCodecSupportedInMp4(e.audioCodec,"audio")})).forEach(function(e,t){e.id=t}),0<r.length){t=r[0].bitrate,r.sort(function(e,t){return e.bitrate-t.bitrate}),this._levels=r;for(var l=0;l<r.length;l++)if(r[l].bitrate===t){this._firstLevel=l,c.logger.log("manifest loaded,"+r.length+" level(s) found, first bitrate:"+t);break}this.hls.trigger(d.default.MANIFEST_PARSED,{levels:r,audioTracks:i,firstLevel:this._firstLevel,stats:e.stats,audio:o,video:s,altAudio:i.some(function(e){return!!e.url})})}else this.hls.trigger(d.default.ERROR,{type:f.ErrorTypes.MEDIA_ERROR,details:f.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:!0,url:this.hls.url,reason:"no level with compatible codecs found in manifest"})},Object.defineProperty(e.prototype,"levels",{get:function(){return this._levels},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"level",{get:function(){return this.currentLevelIndex},set:function(e){var t=this._levels;t&&(e=Math.min(e,t.length-1),this.currentLevelIndex===e&&t[e].details||this.setLevelInternal(e))},enumerable:!0,configurable:!0}),e.prototype.setLevelInternal=function(e){var t=this._levels,r=this.hls;if(0<=e&&e<t.length){if(this.clearTimer(),this.currentLevelIndex!==e){c.logger.log("switching to level "+e);var i=t[this.currentLevelIndex=e];i.level=e,r.trigger(d.default.LEVEL_SWITCHING,i)}var a=t[e],n=a.details;if(!n||n.live){var s=a.urlId;r.trigger(d.default.LEVEL_LOADING,{url:a.url[s],level:e,id:s})}}else r.trigger(d.default.ERROR,{type:f.ErrorTypes.OTHER_ERROR,details:f.ErrorDetails.LEVEL_SWITCH_ERROR,level:e,fatal:!1,reason:"invalid level idx"})},Object.defineProperty(e.prototype,"manualLevel",{get:function(){return this.manualLevelIndex},set:function(e){this.manualLevelIndex=e,void 0===this._startLevel&&(this._startLevel=e),-1!==e&&(this.level=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"firstLevel",{get:function(){return this._firstLevel},set:function(e){this._firstLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startLevel",{get:function(){if(void 0!==this._startLevel)return this._startLevel;var e=this.hls.config.startLevel;return void 0!==e?e:this._firstLevel},set:function(e){this._startLevel=e},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){if(e.fatal)e.type===f.ErrorTypes.NETWORK_ERROR&&this.clearTimer();else{var t,r=!1,i=!1;switch(e.details){case f.ErrorDetails.FRAG_LOAD_ERROR:case f.ErrorDetails.FRAG_LOAD_TIMEOUT:case f.ErrorDetails.KEY_LOAD_ERROR:case f.ErrorDetails.KEY_LOAD_TIMEOUT:t=e.frag.level,i=!0;break;case f.ErrorDetails.LEVEL_LOAD_ERROR:case f.ErrorDetails.LEVEL_LOAD_TIMEOUT:t=e.context.level,r=!0;break;case f.ErrorDetails.REMUX_ALLOC_ERROR:t=e.level,r=!0}void 0!==t&&this.recoverLevel(e,t,r,i)}},e.prototype.recoverLevel=function(e,t,r,i){var a,n,s,o=this,l=this.hls.config,u=e.details,d=this._levels[t];if(d.loadError++,d.fragmentError=i,r){if(!(this.levelRetryCount+1<=l.levelLoadingMaxRetry))return c.logger.error("level controller, cannot recover from "+u+" error"),this.currentLevelIndex=null,this.clearTimer(),void(e.fatal=!0);n=Math.min(Math.pow(2,this.levelRetryCount)*l.levelLoadingRetryDelay,l.levelLoadingMaxRetryTimeout),this.timer=setTimeout(function(){return o.loadLevel()},n),e.levelRetry=!0,this.levelRetryCount++,c.logger.warn("level controller, "+u+", retry in "+n+" ms, current retry count is "+this.levelRetryCount)}(r||i)&&(1<(a=d.url.length)&&d.loadError<a?(d.urlId=(d.urlId+1)%a,d.details=void 0,c.logger.warn("level controller, "+u+" for level "+t+": switching to redundant URL-id "+d.urlId)):-1===this.manualLevelIndex?(s=0===t?this._levels.length-1:t-1,c.logger.warn("level controller, "+u+": switch to "+s),this.hls.nextAutoLevel=this.currentLevelIndex=s):i&&(c.logger.warn("level controller, "+u+": reload a fragment"),this.currentLevelIndex=null))},e.prototype.onFragLoaded=function(e){var t=e.frag;if(void 0!==t&&"main"===t.type){var r=this._levels[t.level];void 0!==r&&(r.fragmentError=!1,r.loadError=0,this.levelRetryCount=0)}},e.prototype.onLevelLoaded=function(e){var t=this,r=e.level;if(r===this.currentLevelIndex){var i=this._levels[r];i.fragmentError||(i.loadError=0,this.levelRetryCount=0);var a=e.details;if(a.live){var n=1e3*(a.averagetargetduration?a.averagetargetduration:a.targetduration),s=n,o=i.details;o&&a.endSN===o.endSN&&(s/=2,c.logger.log("same live playlist, reload twice faster")),s-=l.now()-e.stats.trequest,s=Math.max(n/2,Math.round(s)),c.logger.log("live playlist, reload in "+Math.round(s)+" ms"),this.timer=setTimeout(function(){return t.loadLevel()},s)}else this.clearTimer()}},e.prototype.onAudioTrackSwitched=function(e){var t=this.hls.audioTracks[e.id].groupId,r=this.hls.levels[this.currentLevelIndex];if(r&&r.audioGroupIds){var i=r.audioGroupIds.findIndex(function(e){return e===t});i!==r.urlId&&(r.urlId=i,this.startLoad())}},e.prototype.loadLevel=function(){if(c.logger.debug("call to loadLevel"),null!==this.currentLevelIndex&&this.canload){var e=this._levels[this.currentLevelIndex];if("object"==typeof e&&0<e.url.length){var t=this.currentLevelIndex,r=e.urlId,i=e.url[r];c.logger.log("Attempt loading level index "+t+" with URL-id "+r),this.hls.trigger(d.default.LEVEL_LOADING,{url:i,level:t,id:r})}}},Object.defineProperty(e.prototype,"nextLoadLevel",{get:function(){return-1!==this.manualLevelIndex?this.manualLevelIndex:this.hls.nextAutoLevel},set:function(e){this.level=e,-1===this.manualLevelIndex&&(this.hls.nextAutoLevel=e)},enumerable:!0,configurable:!0}),e}(n.default);t.default=s},"./src/controller/level-helper.js":function(e,t,r){"use strict";(function(h){Object.defineProperty(t,"__esModule",{value:!0});var p=r("./src/utils/logger.js");function g(e,t,r){var i=e[t],a=e[r],n=a.startPTS;h.isFinite(n)?t<r?(i.duration=n-i.start,i.duration<0&&p.logger.warn("negative duration computed for frag "+i.sn+",level "+i.level+", there should be some duration drift between playlist and fragment!")):(a.duration=i.start-n,a.duration<0&&p.logger.warn("negative duration computed for frag "+a.sn+",level "+a.level+", there should be some duration drift between playlist and fragment!")):a.start=t<r?i.start+i.duration:Math.max(i.start-a.duration,0)}function v(e,t,r,i,a,n){var s=r;if(h.isFinite(t.startPTS)){var o=Math.abs(t.startPTS-r);h.isFinite(t.deltaPTS)?t.deltaPTS=Math.max(o,t.deltaPTS):t.deltaPTS=o,s=Math.max(r,t.startPTS),r=Math.min(r,t.startPTS),i=Math.max(i,t.endPTS),a=Math.min(a,t.startDTS),n=Math.max(n,t.endDTS)}var l=r-t.start;t.start=t.startPTS=r,t.maxStartPTS=s,t.endPTS=i,t.startDTS=a,t.endDTS=n,t.duration=i-r;var u,d,c,f=t.sn;if(!e||f<e.startSN||f>e.endSN)return 0;for(u=f-e.startSN,(d=e.fragments)[u]=t,c=u;0<c;c--)g(d,c,c-1);for(c=u;c<d.length-1;c++)g(d,c,c+1);return e.PTSKnown=!0,l}t.addGroupId=function(e,t,r){switch(t){case"audio":e.audioGroupIds||(e.audioGroupIds=[]),e.audioGroupIds.push(r);break;case"text":e.textGroupIds||(e.textGroupIds=[]),e.textGroupIds.push(r)}},t.updatePTS=g,t.updateFragPTSDTS=v,t.mergeDetails=function(e,t){var r,i=Math.max(e.startSN,t.startSN)-t.startSN,a=Math.min(e.endSN,t.endSN)-t.startSN,n=t.startSN-e.startSN,s=e.fragments,o=t.fragments,l=0;if(t.initSegment&&e.initSegment&&(t.initSegment=e.initSegment),a<i)t.PTSKnown=!1;else{for(var u=i;u<=a;u++){var d=s[n+u],c=o[u];c&&d&&(l=d.cc-c.cc,h.isFinite(d.startPTS)&&(c.start=c.startPTS=d.startPTS,c.endPTS=d.endPTS,c.duration=d.duration,c.backtracked=d.backtracked,c.dropped=d.dropped,r=c))}if(l)for(p.logger.log("discontinuity sliding from playlist, take drift into account"),u=0;u<o.length;u++)o[u].cc+=l;if(r)v(t,r,r.startPTS,r.endPTS,r.startDTS,r.endDTS);else if(0<=n&&n<s.length){var f=s[n].start;for(u=0;u<o.length;u++)o[u].start+=f}t.PTSKnown=e.PTSKnown}}}).call(this,r("./src/polyfills/number.js").Number)},"./src/controller/stream-controller.js":function(e,l,_){"use strict";(function(u){var i,t=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(l,"__esModule",{value:!0});var p=_("./src/utils/binary-search.js"),f=_("./src/utils/buffer-helper.js"),h=_("./src/demux/demuxer.js"),g=_("./src/events.js"),r=_("./src/controller/fragment-tracker.js"),d=_("./src/loader/fragment.js"),a=_("./src/loader/playlist-loader.js"),c=_("./src/controller/level-helper.js"),n=_("./src/utils/time-ranges.js"),s=_("./src/errors.js"),v=_("./src/utils/logger.js"),m=_("./src/utils/discontinuities.js"),y=_("./src/controller/fragment-finders.js"),o=_("./src/controller/gap-controller.js"),E=_("./src/controller/base-stream-controller.js"),e=function(i){function e(e,t){var r=i.call(this,e,g.default.MEDIA_ATTACHED,g.default.MEDIA_DETACHING,g.default.MANIFEST_LOADING,g.default.MANIFEST_PARSED,g.default.LEVEL_LOADED,g.default.KEY_LOADED,g.default.FRAG_LOADED,g.default.FRAG_LOAD_EMERGENCY_ABORTED,g.default.FRAG_PARSING_INIT_SEGMENT,g.default.FRAG_PARSING_DATA,g.default.FRAG_PARSED,g.default.ERROR,g.default.AUDIO_TRACK_SWITCHING,g.default.AUDIO_TRACK_SWITCHED,g.default.BUFFER_CREATED,g.default.BUFFER_APPENDED,g.default.BUFFER_FLUSHED)||this;return r.fragmentTracker=t,r.config=e.config,r.audioCodecSwap=!1,r._state=E.State.STOPPED,r.stallReported=!1,r.gapController=null,r}return t(e,i),e.prototype.onHandlerDestroying=function(){this.stopLoad(),i.prototype.onHandlerDestroying.call(this)},e.prototype.onHandlerDestroyed=function(){this.state=E.State.STOPPED,this.fragmentTracker=null,i.prototype.onHandlerDestroyed.call(this)},e.prototype.startLoad=function(e){if(this.levels){var t=this.lastCurrentTime,r=this.hls;if(this.stopLoad(),this.setInterval(100),this.level=-1,this.fragLoadError=0,!this.startFragRequested){var i=r.startLevel;-1===i&&(i=0,this.bitrateTest=!0),this.level=r.nextLoadLevel=i,this.loadedmetadata=!1}0<t&&-1===e&&(v.logger.log("override startPosition with lastCurrentTime @"+t.toFixed(3)),e=t),this.state=E.State.IDLE,this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}else this.forceStartLoad=!0,this.state=E.State.STOPPED},e.prototype.stopLoad=function(){var e=this.fragCurrent;e&&(e.loader&&e.loader.abort(),this.fragmentTracker.removeFragment(e),this.fragCurrent=null),this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.clearInterval(),this.state=E.State.STOPPED,this.forceStartLoad=!1},e.prototype.doTick=function(){switch(this.state){case E.State.BUFFER_FLUSHING:this.fragLoadError=0;break;case E.State.IDLE:this._doTickIdle();break;case E.State.WAITING_LEVEL:var e=this.levels[this.level];e&&e.details&&(this.state=E.State.IDLE);break;case E.State.FRAG_LOADING_WAITING_RETRY:var t=window.performance.now(),r=this.retryDate;(!r||r<=t||this.media&&this.media.seeking)&&(v.logger.log("mediaController: retryDate reached, switch back to IDLE state"),this.state=E.State.IDLE);break;case E.State.ERROR:case E.State.STOPPED:case E.State.FRAG_LOADING:case E.State.PARSING:case E.State.PARSED:case E.State.ENDED:}this._checkBuffer(),this._checkFragmentChanged()},e.prototype._doTickIdle=function(){var e=this.hls,t=e.config,r=this.media;if(void 0!==this.levelLastLoaded&&(r||!this.startFragRequested&&t.startFragPrefetch)){var i;i=this.loadedmetadata?r.currentTime:this.nextLoadPosition;var a=e.nextLoadLevel,n=this.levels[a];if(n){var s,o=n.bitrate;s=o?Math.max(8*t.maxBufferSize/o,t.maxBufferLength):t.maxBufferLength,s=Math.min(s,t.maxMaxBufferLength);var l=f.BufferHelper.bufferInfo(this.mediaBuffer?this.mediaBuffer:r,i,t.maxBufferHole),u=l.len;if(!(s<=u)){v.logger.trace("buffer length of "+u.toFixed(3)+" is below max of "+s.toFixed(3)+". checking for more payload ..."),this.level=e.nextLoadLevel=a;var d=n.details;if(!d||d.live&&this.levelLastLoaded!==a)this.state=E.State.WAITING_LEVEL;else{if(this._streamEnded(l,d)){var c={};return this.altAudio&&(c.type="video"),this.hls.trigger(g.default.BUFFER_EOS,c),void(this.state=E.State.ENDED)}this._fetchPayloadOrEos(i,l,d)}}}}},e.prototype._fetchPayloadOrEos=function(e,t,r){var i=this.fragPrevious,a=this.level,n=r.fragments,s=n.length;if(0!==s){var o,l=n[0].start,u=n[s-1].start+n[s-1].duration,d=t.end;if(r.initSegment&&!r.initSegment.data)o=r.initSegment;else if(r.live){var c=this.config.initialLiveManifestSize;if(s<c)return void v.logger.warn("Can not start playback of a level, reason: not enough fragments "+s+" < "+c);if(null===(o=this._ensureFragmentAtLivePoint(r,d,l,u,i,n,s)))return}else d<l&&(o=n[0]);o||(o=this._findFragment(l,i,s,n,d,u,r)),o&&(o.encrypted?(v.logger.log("Loading key for "+o.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+a),this._loadKey(o)):(v.logger.log("Loading "+o.sn+" of ["+r.startSN+" ,"+r.endSN+"],level "+a+", currentTime:"+e.toFixed(3)+",bufferEnd:"+d.toFixed(3)),this._loadFragment(o)))}},e.prototype._ensureFragmentAtLivePoint=function(e,t,r,i,a,n,s){var o,l=this.hls.config,u=this.media,d=void 0!==l.liveMaxLatencyDuration?l.liveMaxLatencyDuration:l.liveMaxLatencyDurationCount*e.targetduration;if(t<Math.max(r-l.maxFragLookUpTolerance,i-d)){var c=this.liveSyncPosition=this.computeLivePosition(r,e);v.logger.log("buffer end: "+t.toFixed(3)+" is located too far from the end of live sliding playlist, reset currentTime to : "+c.toFixed(3)),t=c,u&&u.readyState&&u.duration>c&&(u.currentTime=c),this.nextLoadPosition=c}if(e.PTSKnown&&i<t&&u&&u.readyState)return null;if(this.startFragRequested&&!e.PTSKnown){if(a)if(e.hasProgramDateTime)v.logger.log("live playlist, switching playlist, load frag with same PDT: "+a.programDateTime),o=y.findFragmentByPDT(n,a.endProgramDateTime,l.maxFragLookUpTolerance);else{var f=a.sn+1;if(f>=e.startSN&&f<=e.endSN){var h=n[f-e.startSN];a.cc===h.cc&&(o=h,v.logger.log("live playlist, switching playlist, load frag with next SN: "+o.sn))}o||(o=p.default.search(n,function(e){return a.cc-e.cc}))&&v.logger.log("live playlist, switching playlist, load frag with same CC: "+o.sn)}o||(o=n[Math.min(s-1,Math.round(s/2))],v.logger.log("live playlist, switching playlist, unknown, load middle frag : "+o.sn))}return o},e.prototype._findFragment=function(e,t,r,i,a,n,s){var o,l=this.hls.config;if(a<n){var u=a>n-l.maxFragLookUpTolerance?0:l.maxFragLookUpTolerance;o=y.findFragmentByPTS(t,i,a,u)}else o=i[r-1];if(o){var d=o.sn-s.startSN,c=t&&o.level===t.level,f=i[d-1],h=i[d+1];if(t&&o.sn===t.sn)if(c&&!o.backtracked)if(o.sn<s.endSN){var p=t.deltaPTS;p&&p>l.maxBufferHole&&t.dropped&&d?(o=f,v.logger.warn("SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this")):(o=h,v.logger.log("SN just loaded, load next one: "+o.sn,o))}else o=null;else o.backtracked&&(h&&h.backtracked?(v.logger.warn("Already backtracked from fragment "+h.sn+", will not backtrack to fragment "+o.sn+". Loading fragment "+h.sn),o=h):(v.logger.warn("Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"),o.dropped=0,f?(o=f).backtracked=!0:d&&(o=null)))}return o},e.prototype._loadKey=function(e){this.state=E.State.KEY_LOADING,this.hls.trigger(g.default.KEY_LOADING,{frag:e})},e.prototype._loadFragment=function(e){var t=this.fragmentTracker.getState(e);this.fragCurrent=e,this.startFragRequested=!0,u.isFinite(e.sn)&&!e.bitrateTest&&(this.nextLoadPosition=e.start+e.duration),e.backtracked||t===r.FragmentState.NOT_LOADED||t===r.FragmentState.PARTIAL?(e.autoLevel=this.hls.autoLevelEnabled,e.bitrateTest=this.bitrateTest,this.hls.trigger(g.default.FRAG_LOADING,{frag:e}),this.demuxer||(this.demuxer=new h.default(this.hls,"main")),this.state=E.State.FRAG_LOADING):t===r.FragmentState.APPENDING&&this._reduceMaxBufferLength(e.duration)&&this.fragmentTracker.removeFragment(e)},Object.defineProperty(e.prototype,"state",{get:function(){return this._state},set:function(e){if(this.state!==e){var t=this.state;this._state=e,v.logger.log("main stream:"+t+"->"+e),this.hls.trigger(g.default.STREAM_STATE_TRANSITION,{previousState:t,nextState:e})}},enumerable:!0,configurable:!0}),e.prototype.getBufferedFrag=function(e){return this.fragmentTracker.getBufferedFrag(e,a.default.LevelType.MAIN)},Object.defineProperty(e.prototype,"currentLevel",{get:function(){var e=this.media;if(e){var t=this.getBufferedFrag(e.currentTime);if(t)return t.level}return-1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nextBufferedFrag",{get:function(){var e=this.media;return e?this.followingBufferedFrag(this.getBufferedFrag(e.currentTime)):null},enumerable:!0,configurable:!0}),e.prototype.followingBufferedFrag=function(e){return e?this.getBufferedFrag(e.endPTS+.5):null},Object.defineProperty(e.prototype,"nextLevel",{get:function(){var e=this.nextBufferedFrag;return e?e.level:-1},enumerable:!0,configurable:!0}),e.prototype._checkFragmentChanged=function(){var e,t,r=this.media;if(r&&r.readyState&&!1===r.seeking&&((t=r.currentTime)>this.lastCurrentTime&&(this.lastCurrentTime=t),f.BufferHelper.isBuffered(r,t)?e=this.getBufferedFrag(t):f.BufferHelper.isBuffered(r,t+.1)&&(e=this.getBufferedFrag(t+.1)),e)){var i=e;if(i!==this.fragPlaying){this.hls.trigger(g.default.FRAG_CHANGED,{frag:i});var a=i.level;this.fragPlaying&&this.fragPlaying.level===a||this.hls.trigger(g.default.LEVEL_SWITCHED,{level:a}),this.fragPlaying=i}}},e.prototype.immediateLevelSwitch=function(){if(v.logger.log("immediateLevelSwitch"),!this.immediateSwitch){this.immediateSwitch=!0;var e=this.media,t=void 0;e?(t=e.paused,e.pause()):t=!0,this.previouslyPaused=t}var r=this.fragCurrent;r&&r.loader&&r.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(0,u.POSITIVE_INFINITY)},e.prototype.immediateLevelSwitchEnd=function(){var e=this.media;e&&e.buffered.length&&(this.immediateSwitch=!1,f.BufferHelper.isBuffered(e,e.currentTime)&&(e.currentTime-=1e-4),this.previouslyPaused||e.play())},e.prototype.nextLevelSwitch=function(){var e=this.media;if(e&&e.readyState){var t,r=void 0,i=void 0;if((t=this.getBufferedFrag(e.currentTime))&&1<t.startPTS&&this.flushMainBuffer(0,t.startPTS-1),e.paused)r=0;else{var a=this.hls.nextLoadLevel,n=this.levels[a],s=this.fragLastKbps;r=s&&this.fragCurrent?this.fragCurrent.duration*n.bitrate/(1e3*s)+1:0}if((i=this.getBufferedFrag(e.currentTime+r))&&(i=this.followingBufferedFrag(i))){var o=this.fragCurrent;o&&o.loader&&o.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(i.maxStartPTS,u.POSITIVE_INFINITY)}}},e.prototype.flushMainBuffer=function(e,t){this.state=E.State.BUFFER_FLUSHING;var r={startOffset:e,endOffset:t};this.altAudio&&(r.type="video"),this.hls.trigger(g.default.BUFFER_FLUSHING,r)},e.prototype.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvseeked=this.onMediaSeeked.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("seeked",this.onvseeked),t.addEventListener("ended",this.onvended);var r=this.config;this.levels&&r.autoStartLoad&&this.hls.startLoad(r.startPosition),this.gapController=new o.default(r,t,this.fragmentTracker,this.hls)},e.prototype.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(v.logger.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0);var t=this.levels;t&&t.forEach(function(e){e.details&&e.details.fragments.forEach(function(e){e.backtracked=void 0})}),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("seeked",this.onvseeked),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=null,this.loadedmetadata=!1,this.stopLoad()},e.prototype.onMediaSeeked=function(){var e=this.media,t=e?e.currentTime:void 0;u.isFinite(t)&&v.logger.log("media seeked to "+t.toFixed(3)),this.tick()},e.prototype.onManifestLoading=function(){v.logger.log("trigger BUFFER_RESET"),this.hls.trigger(g.default.BUFFER_RESET),this.fragmentTracker.removeAllFragments(),this.stalled=!1,this.startPosition=this.lastCurrentTime=0},e.prototype.onManifestParsed=function(e){var t,r=!1,i=!1;e.levels.forEach(function(e){(t=e.audioCodec)&&(-1!==t.indexOf("mp4a.40.2")&&(r=!0),-1!==t.indexOf("mp4a.40.5")&&(i=!0))}),this.audioCodecSwitch=r&&i,this.audioCodecSwitch&&v.logger.log("both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),this.levels=e.levels,this.startFragRequested=!1;var a=this.config;(a.autoStartLoad||this.forceStartLoad)&&this.hls.startLoad(a.startPosition)},e.prototype.onLevelLoaded=function(e){var t=e.details,r=e.level,i=this.levels[this.levelLastLoaded],a=this.levels[r],n=t.totalduration,s=0;if(v.logger.log("level "+r+" loaded ["+t.startSN+","+t.endSN+"],duration:"+n),t.live){var o=a.details;o&&0<t.fragments.length?(c.mergeDetails(o,t),s=t.fragments[0].start,this.liveSyncPosition=this.computeLivePosition(s,o),t.PTSKnown&&u.isFinite(s)?v.logger.log("live playlist sliding:"+s.toFixed(3)):(v.logger.log("live playlist - outdated PTS, unknown sliding"),m.alignStream(this.fragPrevious,i,t))):(v.logger.log("live playlist - first load, unknown sliding"),t.PTSKnown=!1,m.alignStream(this.fragPrevious,i,t))}else t.PTSKnown=!1;if(a.details=t,this.levelLastLoaded=r,this.hls.trigger(g.default.LEVEL_UPDATED,{details:t,level:r}),!1===this.startFragRequested){if(-1===this.startPosition||-1===this.lastCurrentTime){var l=t.startTimeOffset;u.isFinite(l)?(l<0&&(v.logger.log("negative start time offset "+l+", count from end of last fragment"),l=s+n+l),v.logger.log("start time offset found in playlist, adjust startPosition to "+l),this.startPosition=l):t.live?(this.startPosition=this.computeLivePosition(s,t),v.logger.log("configure startPosition to "+this.startPosition)):this.startPosition=0,this.lastCurrentTime=this.startPosition}this.nextLoadPosition=this.startPosition}this.state===E.State.WAITING_LEVEL&&(this.state=E.State.IDLE),this.tick()},e.prototype.onKeyLoaded=function(){this.state===E.State.KEY_LOADING&&(this.state=E.State.IDLE,this.tick())},e.prototype.onFragLoaded=function(e){var t=this.fragCurrent,r=this.hls,i=this.levels,a=this.media,n=e.frag;if(this.state===E.State.FRAG_LOADING&&t&&"main"===n.type&&n.level===t.level&&n.sn===t.sn){var s=e.stats,o=i[t.level],l=o.details;if(this.bitrateTest=!1,this.stats=s,v.logger.log("Loaded "+t.sn+" of ["+l.startSN+" ,"+l.endSN+"],level "+t.level),n.bitrateTest&&r.nextLoadLevel)this.state=E.State.IDLE,this.startFragRequested=!1,s.tparsed=s.tbuffered=window.performance.now(),r.trigger(g.default.FRAG_BUFFERED,{stats:s,frag:t,id:"main"}),this.tick();else if("initSegment"===n.sn)this.state=E.State.IDLE,s.tparsed=s.tbuffered=window.performance.now(),l.initSegment.data=e.payload,r.trigger(g.default.FRAG_BUFFERED,{stats:s,frag:t,id:"main"}),this.tick();else{v.logger.log("Parsing "+t.sn+" of ["+l.startSN+" ,"+l.endSN+"],level "+t.level+", cc "+t.cc),this.state=E.State.PARSING,this.pendingBuffering=!0,this.appended=!1,n.bitrateTest&&(n.bitrateTest=!1,this.fragmentTracker.onFragLoaded({frag:n}));var u=!(a&&a.seeking)&&(l.PTSKnown||!l.live),d=l.initSegment?l.initSegment.data:[],c=this._getAudioCodec(o);(this.demuxer=this.demuxer||new h.default(this.hls,"main")).push(e.payload,d,c,o.videoCodec,t,l.totalduration,u)}}this.fragLoadError=0},e.prototype.onFragParsingInitSegment=function(e){var t=this.fragCurrent,r=e.frag;if(t&&"main"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===E.State.PARSING){var i=e.tracks,a=void 0,n=void 0;if(i.audio&&this.altAudio&&delete i.audio,n=i.audio){var s=this.levels[this.level].audioCodec,o=navigator.userAgent.toLowerCase();s&&this.audioCodecSwap&&(v.logger.log("swapping playlist audio codec"),s=-1!==s.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5"),this.audioCodecSwitch&&1!==n.metadata.channelCount&&-1===o.indexOf("firefox")&&(s="mp4a.40.5"),-1!==o.indexOf("android")&&"audio/mpeg"!==n.container&&(s="mp4a.40.2",v.logger.log("Android: force audio codec to "+s)),n.levelCodec=s,n.id=e.id}for(a in(n=i.video)&&(n.levelCodec=this.levels[this.level].videoCodec,n.id=e.id),this.hls.trigger(g.default.BUFFER_CODECS,i),i){n=i[a],v.logger.log("main track:"+a+",container:"+n.container+",codecs[level/parsed]=["+n.levelCodec+"/"+n.codec+"]");var l=n.initSegment;l&&(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(g.default.BUFFER_APPENDING,{type:a,data:l,parent:"main",content:"initSegment"}))}this.tick()}},e.prototype.onFragParsingData=function(t){var r=this,e=this.fragCurrent,i=t.frag;if(e&&"main"===t.id&&i.sn===e.sn&&i.level===e.level&&("audio"!==t.type||!this.altAudio)&&this.state===E.State.PARSING){var a=this.levels[this.level],n=e;if(u.isFinite(t.endPTS)||(t.endPTS=t.startPTS+e.duration,t.endDTS=t.startDTS+e.duration),!0===t.hasAudio&&n.addElementaryStream(d.default.ElementaryStreamTypes.AUDIO),!0===t.hasVideo&&n.addElementaryStream(d.default.ElementaryStreamTypes.VIDEO),v.logger.log("Parsed "+t.type+",PTS:["+t.startPTS.toFixed(3)+","+t.endPTS.toFixed(3)+"],DTS:["+t.startDTS.toFixed(3)+"/"+t.endDTS.toFixed(3)+"],nb:"+t.nb+",dropped:"+(t.dropped||0)),"video"===t.type)if(n.dropped=t.dropped,n.dropped)if(n.backtracked)v.logger.warn("Already backtracked on this fragment, appending with the gap",n.sn);else{var s=a.details;if(!s||n.sn!==s.startSN)return v.logger.warn("missing video frame(s), backtracking fragment",n.sn),this.fragmentTracker.removeFragment(n),n.backtracked=!0,this.nextLoadPosition=t.startPTS,this.state=E.State.IDLE,this.fragPrevious=n,void this.tick();v.logger.warn("missing video frame(s) on first frag, appending with gap",n.sn)}else n.backtracked=!1;var o=c.updateFragPTSDTS(a.details,n,t.startPTS,t.endPTS,t.startDTS,t.endDTS),l=this.hls;l.trigger(g.default.LEVEL_PTS_UPDATED,{details:a.details,level:this.level,drift:o,type:t.type,start:t.startPTS,end:t.endPTS}),[t.data1,t.data2].forEach(function(e){e&&e.length&&r.state===E.State.PARSING&&(r.appended=!0,r.pendingBuffering=!0,l.trigger(g.default.BUFFER_APPENDING,{type:t.type,data:e,parent:"main",content:"data"}))}),this.tick()}},e.prototype.onFragParsed=function(e){var t=this.fragCurrent,r=e.frag;t&&"main"===e.id&&r.sn===t.sn&&r.level===t.level&&this.state===E.State.PARSING&&(this.stats.tparsed=window.performance.now(),this.state=E.State.PARSED,this._checkAppendedParsed())},e.prototype.onAudioTrackSwitching=function(e){var t=!!e.url,r=e.id;if(!t){if(this.mediaBuffer!==this.media){v.logger.log("switching on main audio, use media.buffered to schedule main fragment loading"),this.mediaBuffer=this.media;var i=this.fragCurrent;i.loader&&(v.logger.log("switching to main audio track, cancel main fragment load"),i.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=E.State.IDLE}var a=this.hls;a.trigger(g.default.BUFFER_FLUSHING,{startOffset:0,endOffset:u.POSITIVE_INFINITY,type:"audio"}),a.trigger(g.default.AUDIO_TRACK_SWITCHED,{id:r}),this.altAudio=!1}},e.prototype.onAudioTrackSwitched=function(e){var t=e.id,r=!!this.hls.audioTracks[t].url;if(r){var i=this.videoBuffer;i&&this.mediaBuffer!==i&&(v.logger.log("switching on alternate audio, use video.buffered to schedule main fragment loading"),this.mediaBuffer=i)}this.altAudio=r,this.tick()},e.prototype.onBufferCreated=function(e){var t,r,i=e.tracks,a=!1;for(var n in i){var s=i[n];"main"===s.id?(t=s,"video"===(r=n)&&(this.videoBuffer=i[n].buffer)):a=!0}this.mediaBuffer=a&&t?(v.logger.log("alternate track found, use "+r+".buffered to schedule main fragment loading"),t.buffer):this.media},e.prototype.onBufferAppended=function(e){if("main"===e.parent){var t=this.state;t!==E.State.PARSING&&t!==E.State.PARSED||(this.pendingBuffering=0<e.pending,this._checkAppendedParsed())}},e.prototype._checkAppendedParsed=function(){if(!(this.state!==E.State.PARSED||this.appended&&this.pendingBuffering)){var e=this.fragCurrent;if(e){var t=this.mediaBuffer?this.mediaBuffer:this.media;v.logger.log("main buffered : "+n.default.toString(t.buffered)),this.fragPrevious=e;var r=this.stats;r.tbuffered=window.performance.now(),this.fragLastKbps=Math.round(8*r.total/(r.tbuffered-r.tfirst)),this.hls.trigger(g.default.FRAG_BUFFERED,{stats:r,frag:e,id:"main"}),this.state=E.State.IDLE}this.tick()}},e.prototype.onError=function(e){var t=e.frag||this.fragCurrent;if(!t||"main"===t.type){var r=!!this.media&&f.BufferHelper.isBuffered(this.media,this.media.currentTime)&&f.BufferHelper.isBuffered(this.media,this.media.currentTime+.5);switch(e.details){case s.ErrorDetails.FRAG_LOAD_ERROR:case s.ErrorDetails.FRAG_LOAD_TIMEOUT:case s.ErrorDetails.KEY_LOAD_ERROR:case s.ErrorDetails.KEY_LOAD_TIMEOUT:if(!e.fatal)if(this.fragLoadError+1<=this.config.fragLoadingMaxRetry){var i=Math.min(Math.pow(2,this.fragLoadError)*this.config.fragLoadingRetryDelay,this.config.fragLoadingMaxRetryTimeout);v.logger.warn("mediaController: frag loading failed, retry in "+i+" ms"),this.retryDate=window.performance.now()+i,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.fragLoadError++,this.state=E.State.FRAG_LOADING_WAITING_RETRY}else v.logger.error("mediaController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=E.State.ERROR;break;case s.ErrorDetails.LEVEL_LOAD_ERROR:case s.ErrorDetails.LEVEL_LOAD_TIMEOUT:this.state!==E.State.ERROR&&(e.fatal?(this.state=E.State.ERROR,v.logger.warn("streamController: "+e.details+",switch to "+this.state+" state ...")):e.levelRetry||this.state!==E.State.WAITING_LEVEL||(this.state=E.State.IDLE));break;case s.ErrorDetails.BUFFER_FULL_ERROR:"main"!==e.parent||this.state!==E.State.PARSING&&this.state!==E.State.PARSED||(r?(this._reduceMaxBufferLength(this.config.maxBufferLength),this.state=E.State.IDLE):(v.logger.warn("buffer full error also media.currentTime is not buffered, flush everything"),this.fragCurrent=null,this.flushMainBuffer(0,u.POSITIVE_INFINITY)))}}},e.prototype._reduceMaxBufferLength=function(e){var t=this.config;return t.maxMaxBufferLength>=e&&(t.maxMaxBufferLength/=2,v.logger.warn("main:reduce max buffer length to "+t.maxMaxBufferLength+"s"),!0)},e.prototype._checkBuffer=function(){var e=this.media;if(e&&0!==e.readyState){var t=(this.mediaBuffer?this.mediaBuffer:e).buffered;!this.loadedmetadata&&t.length?(this.loadedmetadata=!0,this._seekToStartPos()):this.immediateSwitch?this.immediateLevelSwitchEnd():this.gapController.poll(this.lastCurrentTime,t)}},e.prototype.onFragLoadEmergencyAborted=function(){this.state=E.State.IDLE,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.tick()},e.prototype.onBufferFlushed=function(){var e=this.mediaBuffer?this.mediaBuffer:this.media;e&&this.fragmentTracker.detectEvictedFragments(d.default.ElementaryStreamTypes.VIDEO,e.buffered),this.state=E.State.IDLE,this.fragPrevious=null},e.prototype.swapAudioCodec=function(){this.audioCodecSwap=!this.audioCodecSwap},e.prototype.computeLivePosition=function(e,t){var r=void 0!==this.config.liveSyncDuration?this.config.liveSyncDuration:this.config.liveSyncDurationCount*t.targetduration;return e+Math.max(0,t.totalduration-r)},e.prototype._seekToStartPos=function(){var e=this.media,t=e.currentTime,r=e.seeking?t:this.startPosition;t!==r&&(v.logger.log("target start position not buffered, seek to buffered.start(0) "+r+" from current time "+t+" "),e.currentTime=r)},e.prototype._getAudioCodec=function(e){var t=this.config.defaultAudioCodec||e.audioCodec;return this.audioCodecSwap&&(v.logger.log("swapping playlist audio codec"),t&&(t=-1!==t.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5")),t},Object.defineProperty(e.prototype,"liveSyncPosition",{get:function(){return this._liveSyncPosition},set:function(e){this._liveSyncPosition=e},enumerable:!0,configurable:!0}),e}(E.default);l.default=e}).call(this,_("./src/polyfills/number.js").Number)},"./src/controller/subtitle-stream-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var p=r("./src/events.js"),g=r("./src/utils/logger.js"),n=r("./src/crypt/decrypter.js"),s=r("./src/task-loop.js"),v=r("./src/utils/buffer-helper.js"),m=r("./src/controller/fragment-finders.js"),y=r("./src/controller/fragment-tracker.js"),o=window.performance;t.SubtitleStreamControllerState={STOPPED:"STOPPED",IDLE:"IDLE",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING"};var E=t.SubtitleStreamControllerState,l=function(i){function e(e,t){var r=i.call(this,e,p.default.MEDIA_ATTACHED,p.default.MEDIA_DETACHING,p.default.ERROR,p.default.KEY_LOADED,p.default.FRAG_LOADED,p.default.SUBTITLE_TRACKS_UPDATED,p.default.SUBTITLE_TRACK_SWITCH,p.default.SUBTITLE_TRACK_LOADED,p.default.SUBTITLE_FRAG_PROCESSED)||this;return r.fragmentTracker=t,r.config=e.config,r.state=E.STOPPED,r.tracks=[],r.tracksBuffered=[],r.currentTrackId=-1,r.decrypter=new n.default(e,e.config),r}return a(e,i),e.prototype.onHandlerDestroyed=function(){this.fragmentTracker=null,this.state=E.STOPPED,i.prototype.onHandlerDestroyed.call(this)},e.prototype.onSubtitleFragProcessed=function(e){if(this.state=E.IDLE,e.success){var t=this.tracksBuffered[this.currentTrackId],r=e.frag;if(this.fragPrevious=r,t){for(var i,a=0;a<t.length;a++)if(r.start>=t[a].start&&r.start<=t[a].end){i=t[a];break}i?i.end=r.start+r.duration:t.push({start:r.start,end:r.start+r.duration})}}},e.prototype.onMediaAttached=function(e){this.media=e.media,this.state=E.IDLE},e.prototype.onMediaDetaching=function(){this.media=null,this.state=E.STOPPED},e.prototype.onError=function(e){var t=e.frag;t&&"subtitle"===t.type&&(this.state=E.IDLE)},e.prototype.onSubtitleTracksUpdated=function(e){var t=this;g.logger.log("subtitle tracks updated"),this.tracksBuffered=[],this.tracks=e.subtitleTracks,this.tracks.forEach(function(e){t.tracksBuffered[e.id]=[]})},e.prototype.onSubtitleTrackSwitch=function(e){if(this.currentTrackId=e.id,this.tracks&&-1!==this.currentTrackId){var t=this.tracks[this.currentTrackId];t&&t.details&&this.setInterval(500)}else this.clearInterval()},e.prototype.onSubtitleTrackLoaded=function(e){var t=e.id,r=e.details;this.tracks?(this.tracks[t]&&(g.logger.log("Updating subtitle track details"),this.tracks[t].details=r),this.setInterval(500)):g.logger.warn("Can not update subtitle details, no tracks found")},e.prototype.onKeyLoaded=function(){this.state===E.KEY_LOADING&&(this.state=E.IDLE)},e.prototype.onFragLoaded=function(e){var t=this.fragCurrent,r=e.frag.decryptdata,i=e.frag,a=this.hls;if(this.state===E.FRAG_LOADING&&t&&"subtitle"===e.frag.type&&t.sn===e.frag.sn&&0<e.payload.byteLength&&r&&r.key&&"AES-128"===r.method){var n=o.now();this.decrypter.decrypt(e.payload,r.key.buffer,r.iv.buffer,function(e){var t=o.now();a.trigger(p.default.FRAG_DECRYPTED,{frag:i,payload:e,stats:{tstart:n,tdecrypt:t}})})}},e.prototype.doTick=function(){if(this.media)switch(this.state){case E.IDLE:var e=this.tracks,t=this.currentTrackId;if(!e||!e[t]||!e[t].details)break;var r=e[t].details,i=this.config,a=i.maxBufferHole,n=Math.min(i.maxBufferLength,i.maxMaxBufferLength),s=i.maxFragLookUpTolerance,o=v.BufferHelper.bufferedInfo(this._getBuffered(),this.media.currentTime,a),l=o.end,u=o.len,d=r.fragments,c=d.length,f=d[c-1].start+d[c-1].duration,h=void 0;u<n&&l<f?h=m.findFragmentByPTS(this.fragPrevious,d,l,s):r.hasProgramDateTime&&this.fragPrevious&&(h=m.findFragmentByPDT(d,this.fragPrevious.endProgramDateTime,s)),h&&h.encrypted?(g.logger.log("Loading key for "+h.sn),this.state=E.KEY_LOADING,this.hls.trigger(p.default.KEY_LOADING,{frag:h})):h&&this.fragmentTracker.getState(h)===y.FragmentState.NOT_LOADED&&(h.trackId=t,this.fragCurrent=h,this.state=E.FRAG_LOADING,this.hls.trigger(p.default.FRAG_LOADING,{frag:h}))}else this.state=E.IDLE},e.prototype._getBuffered=function(){return this.tracksBuffered[this.currentTrackId]||[]},e}(s.default);t.SubtitleStreamController=l},"./src/controller/subtitle-track-controller.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=r("./src/events.js"),s=r("./src/event-handler.js"),o=r("./src/utils/logger.js");function l(e){for(var t=[],r=0;r<e.length;r++)"subtitles"===e[r].kind&&t.push(e[r]);return t}var u=function(r){function e(e){var t=r.call(this,e,n.default.MEDIA_ATTACHED,n.default.MEDIA_DETACHING,n.default.MANIFEST_LOADING,n.default.MANIFEST_LOADED,n.default.SUBTITLE_TRACK_LOADED)||this;return t.tracks=[],t.trackId=-1,t.media=null,t.subtitleDisplay=!0,t}return a(e,r),e.prototype._onTextTracksChanged=function(){if(this.media){for(var e=-1,t=l(this.media.textTracks),r=0;r<t.length;r++)if("hidden"===t[r].mode)e=r;else if("showing"===t[r].mode){e=r;break}this.subtitleTrack=e}},e.prototype.destroy=function(){s.default.prototype.destroy.call(this)},e.prototype.onMediaAttached=function(e){var t=this;this.media=e.media,this.media&&(this.queuedDefaultTrack&&(this.subtitleTrack=this.queuedDefaultTrack,delete this.queuedDefaultTrack),this.trackChangeListener=this._onTextTracksChanged.bind(this),this.useTextTrackPolling=!(this.media.textTracks&&"onchange"in this.media.textTracks),this.useTextTrackPolling?this.subtitlePollingInterval=setInterval(function(){t.trackChangeListener()},500):this.media.textTracks.addEventListener("change",this.trackChangeListener))},e.prototype.onMediaDetaching=function(){this.media&&(this.useTextTrackPolling?clearInterval(this.subtitlePollingInterval):this.media.textTracks.removeEventListener("change",this.trackChangeListener),this.media=null)},e.prototype.onManifestLoading=function(){this.tracks=[],this.trackId=-1},e.prototype.onManifestLoaded=function(e){var t=this,r=e.subtitles||[];this.tracks=r,this.trackId=-1,this.hls.trigger(n.default.SUBTITLE_TRACKS_UPDATED,{subtitleTracks:r}),r.forEach(function(e){e.default&&(t.media?t.subtitleTrack=e.id:t.queuedDefaultTrack=e.id)})},e.prototype.onTick=function(){var e=this.trackId,t=this.tracks[e];if(t){var r=t.details;r&&!r.live||(o.logger.log("(re)loading playlist for subtitle track "+e),this.hls.trigger(n.default.SUBTITLE_TRACK_LOADING,{url:t.url,id:e}))}},e.prototype.onSubtitleTrackLoaded=function(e){var t=this;e.id<this.tracks.length&&(o.logger.log("subtitle track "+e.id+" loaded"),this.tracks[e.id].details=e.details,e.details.live&&!this.timer&&(this.timer=setInterval(function(){t.onTick()},1e3*e.details.targetduration,this)),!e.details.live&&this.timer&&this._stopTimer())},Object.defineProperty(e.prototype,"subtitleTracks",{get:function(){return this.tracks},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"subtitleTrack",{get:function(){return this.trackId},set:function(e){this.trackId!==e&&(this._toggleTrackModes(e),this.setSubtitleTrackInternal(e))},enumerable:!0,configurable:!0}),e.prototype.setSubtitleTrackInternal=function(e){var t=this.hls,r=this.tracks;if(!("number"!=typeof e||e<-1||e>=r.length)&&(this._stopTimer(),this.trackId=e,o.logger.log("switching to subtitle track "+e),t.trigger(n.default.SUBTITLE_TRACK_SWITCH,{id:e}),-1!==e)){var i=r[e],a=i.details;a&&!a.live||(o.logger.log("(re)loading playlist for subtitle track "+e),t.trigger(n.default.SUBTITLE_TRACK_LOADING,{url:i.url,id:e}))}},e.prototype._stopTimer=function(){this.timer&&(clearInterval(this.timer),this.timer=null)},e.prototype._toggleTrackModes=function(e){var t=this.media,r=this.subtitleDisplay,i=this.trackId;if(t){var a=l(t.textTracks);if(-1===e)[].slice.call(a).forEach(function(e){e.mode="disabled"});else{var n=a[i];n&&(n.mode="disabled")}var s=a[e];s&&(s.mode=r?"showing":"hidden")}},e}(s.default);t.default=u},"./src/controller/timeline-controller.js":function(e,a,f){"use strict";(function(s){var i,t=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(a,"__esModule",{value:!0});var o=f("./src/events.js"),r=f("./src/event-handler.js"),n=f("./src/utils/cea-608-parser.js"),l=f("./src/utils/output-filter.js"),u=f("./src/utils/webvtt-parser.js"),d=f("./src/utils/logger.js"),c=f("./src/utils/texttrack-utils.js");var e=function(a){function e(e){var t=a.call(this,e,o.default.MEDIA_ATTACHING,o.default.MEDIA_DETACHING,o.default.FRAG_PARSING_USERDATA,o.default.FRAG_DECRYPTED,o.default.MANIFEST_LOADING,o.default.MANIFEST_LOADED,o.default.FRAG_LOADED,o.default.LEVEL_SWITCHING,o.default.INIT_PTS_FOUND)||this;if(t.hls=e,t.config=e.config,t.enabled=!0,t.Cues=e.config.cueHandler,t.textTracks=[],t.tracks=[],t.unparsedVttFrags=[],t.initPTS=[],t.cueRanges=[],t.captionsTracks={},t.captionsProperties={textTrack1:{label:t.config.captionsTextTrack1Label,languageCode:t.config.captionsTextTrack1LanguageCode},textTrack2:{label:t.config.captionsTextTrack2Label,languageCode:t.config.captionsTextTrack2LanguageCode}},t.config.enableCEA708Captions){var r=new l.default(t,"textTrack1"),i=new l.default(t,"textTrack2");t.cea608Parser=new n.default(0,r,i)}return t}return t(e,a),e.prototype.addCues=function(e,t,r,i){for(var a,n,s,o,l=this.cueRanges,u=!1,d=l.length;d--;){var c=l[d],f=(a=c[0],n=c[1],s=t,o=r,Math.min(n,o)-Math.max(a,s));if(0<=f&&(c[0]=Math.min(c[0],t),c[1]=Math.max(c[1],r),u=!0,.5<f/(r-t)))return}u||l.push([t,r]),this.Cues.newCue(this.captionsTracks[e],t,r,i)},e.prototype.onInitPtsFound=function(e){var t=this;if("main"===e.id&&(this.initPTS[e.frag.cc]=e.initPTS),this.unparsedVttFrags.length){var r=this.unparsedVttFrags;this.unparsedVttFrags=[],r.forEach(function(e){t.onFragLoaded(e)})}},e.prototype.getExistingTrack=function(e){var t=this.media;if(t)for(var r=0;r<t.textTracks.length;r++){var i=t.textTracks[r];if(i[e])return i}return null},e.prototype.createCaptionsTrack=function(e){var t=this.captionsProperties[e],r=t.label,i=t.languageCode,a=this.captionsTracks;if(!a[e]){var n=this.getExistingTrack(e);if(n)a[e]=n,c.clearCurrentCues(a[e]),c.sendAddTrackEvent(a[e],this.media);else{var s=this.createTextTrack("captions",r,i);s&&(s[e]=!0,a[e]=s)}}},e.prototype.createTextTrack=function(e,t,r){var i=this.media;if(i)return i.addTextTrack(e,t,r)},e.prototype.destroy=function(){r.default.prototype.destroy.call(this)},e.prototype.onMediaAttaching=function(e){this.media=e.media,this._cleanTracks()},e.prototype.onMediaDetaching=function(){var t=this.captionsTracks;Object.keys(t).forEach(function(e){c.clearCurrentCues(t[e]),delete t[e]})},e.prototype.onManifestLoading=function(){this.lastSn=-1,this.prevCC=-1,this.vttCCs={ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:!1}},this._cleanTracks()},e.prototype._cleanTracks=function(){var e=this.media;if(e){var t=e.textTracks;if(t)for(var r=0;r<t.length;r++)c.clearCurrentCues(t[r])}},e.prototype.onManifestLoaded=function(e){var a=this;if(this.textTracks=[],this.unparsedVttFrags=this.unparsedVttFrags||[],this.initPTS=[],this.cueRanges=[],this.config.enableWebVTT){this.tracks=e.subtitles||[];var n=this.media?this.media.textTracks:[];this.tracks.forEach(function(i,e){var t;if(e<n.length){var r=[].slice.call(n).find(function(e){return r=i,(t=e)&&t.label===r.name&&!(t.textTrack1||t.textTrack2);var t,r});r&&(t=r)}t||(t=a.createTextTrack("subtitles",i.name,i.lang)),i.default?t.mode=a.hls.subtitleDisplay?"showing":"hidden":t.mode="disabled",a.textTracks.push(t)})}},e.prototype.onLevelSwitching=function(){this.enabled="NONE"!==this.hls.currentLevel.closedCaptions},e.prototype.onFragLoaded=function(e){var t=e.frag,r=e.payload;if("main"===t.type){var i=t.sn;if(i!==this.lastSn+1){var a=this.cea608Parser;a&&a.reset()}this.lastSn=i}else if("subtitle"===t.type)if(r.byteLength){if(!s.isFinite(this.initPTS[t.cc]))return this.unparsedVttFrags.push(e),void(this.initPTS.length&&this.hls.trigger(o.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t}));var n=t.decryptdata;null!=n&&null!=n.key&&"AES-128"===n.method||this._parseVTTs(t,r)}else this.hls.trigger(o.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})},e.prototype._parseVTTs=function(t,e){var r=this.vttCCs;r[t.cc]||(r[t.cc]={start:t.start,prevCC:this.prevCC,new:!0},this.prevCC=t.cc);var a=this.textTracks,n=this.hls;u.default.parse(e,this.initPTS[t.cc],r,t.cc,function(e){var i=a[t.trackId];"disabled"!==i.mode?(e.forEach(function(t){if(!i.cues.getCueById(t.id))try{i.addCue(t)}catch(e){var r=new window.TextTrackCue(t.startTime,t.endTime,t.text);r.id=t.id,i.addCue(r)}}),n.trigger(o.default.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:t})):n.trigger(o.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})},function(e){d.logger.log("Failed to parse VTT cue: "+e),n.trigger(o.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})})},e.prototype.onFragDecrypted=function(e){var t=e.payload,r=e.frag;if("subtitle"===r.type){if(!s.isFinite(this.initPTS[r.cc]))return void this.unparsedVttFrags.push(e);this._parseVTTs(r,t)}},e.prototype.onFragParsingUserdata=function(e){if(this.enabled&&this.config.enableCEA708Captions)for(var t=0;t<e.samples.length;t++){var r=this.extractCea608Data(e.samples[t].bytes);this.cea608Parser.addData(e.samples[t].pts,r)}},e.prototype.extractCea608Data=function(e){for(var t,r,i,a=31&e[0],n=2,s=[],o=0;o<a;o++)t=e[n++],r=127&e[n++],i=127&e[n++],0===r&&0===i||0!=(4&t)&&0===(3&t)&&(s.push(r),s.push(i));return s},e}(r.default);a.default=e}).call(this,f("./src/polyfills/number.js").Number)},"./src/crypt/aes-crypto.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.subtle=e,this.aesIV=t}return e.prototype.decrypt=function(e,t){return this.subtle.decrypt({name:"AES-CBC",iv:this.aesIV},t,e)},e}();t.default=i},"./src/crypt/aes-decryptor.js":function(e,t,r){"use strict";function x(e){var t=e.byteLength,r=t&&new DataView(e).getUint8(t-1);return r?e.slice(0,t-r):e}Object.defineProperty(t,"__esModule",{value:!0}),t.removePadding=x;var i=function(){function e(){this.rcon=[0,1,2,4,8,16,32,64,128,27,54],this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.sBox=new Uint32Array(256),this.invSBox=new Uint32Array(256),this.key=new Uint32Array(0),this.initTable()}return e.prototype.uint8ArrayToUint32Array_=function(e){for(var t=new DataView(e),r=new Uint32Array(4),i=0;i<4;i++)r[i]=t.getUint32(4*i);return r},e.prototype.initTable=function(){var e=this.sBox,t=this.invSBox,r=this.subMix,i=r[0],a=r[1],n=r[2],s=r[3],o=this.invSubMix,l=o[0],u=o[1],d=o[2],c=o[3],f=new Uint32Array(256),h=0,p=0,g=0;for(g=0;g<256;g++)f[g]=g<128?g<<1:g<<1^283;for(g=0;g<256;g++){var v=p^p<<1^p<<2^p<<3^p<<4;v=v>>>8^255&v^99;var m=f[t[e[h]=v]=h],y=f[m],E=f[y],_=257*f[v]^16843008*v;i[h]=_<<24|_>>>8,a[h]=_<<16|_>>>16,n[h]=_<<8|_>>>24,s[h]=_,_=16843009*E^65537*y^257*m^16843008*h,l[v]=_<<24|_>>>8,u[v]=_<<16|_>>>16,d[v]=_<<8|_>>>24,c[v]=_,h?(h=m^f[f[f[E^m]]],p^=f[f[p]]):h=p=1}},e.prototype.expandKey=function(e){for(var t=this.uint8ArrayToUint32Array_(e),r=!0,i=0;i<t.length&&r;)r=t[i]===this.key[i],i++;if(!r){this.key=t;var a=this.keySize=t.length;if(4!==a&&6!==a&&8!==a)throw new Error("Invalid aes key size="+a);var n,s,o,l,u=this.ksRows=4*(a+6+1),d=this.keySchedule=new Uint32Array(u),c=this.invKeySchedule=new Uint32Array(u),f=this.sBox,h=this.rcon,p=this.invSubMix,g=p[0],v=p[1],m=p[2],y=p[3];for(n=0;n<u;n++)n<a?o=d[n]=t[n]:(l=o,n%a==0?(l=f[(l=l<<8|l>>>24)>>>24]<<24|f[l>>>16&255]<<16|f[l>>>8&255]<<8|f[255&l],l^=h[n/a|0]<<24):6<a&&n%a==4&&(l=f[l>>>24]<<24|f[l>>>16&255]<<16|f[l>>>8&255]<<8|f[255&l]),d[n]=o=(d[n-a]^l)>>>0);for(s=0;s<u;s++)n=u-s,l=3&s?d[n]:d[n-4],c[s]=s<4||n<=4?l:g[f[l>>>24]]^v[f[l>>>16&255]]^m[f[l>>>8&255]]^y[f[255&l]],c[s]=c[s]>>>0}},e.prototype.networkToHostOrderSwap=function(e){return e<<24|(65280&e)<<8|(16711680&e)>>8|e>>>24},e.prototype.decrypt=function(e,t,r,i){for(var a,n,s,o,l,u,d,c,f,h,p,g,v,m,y=this.keySize+6,E=this.invKeySchedule,_=this.invSBox,T=this.invSubMix,b=T[0],S=T[1],A=T[2],R=T[3],D=this.uint8ArrayToUint32Array_(r),L=D[0],w=D[1],O=D[2],k=D[3],I=new Int32Array(e),P=new Int32Array(I.length),C=this.networkToHostOrderSwap;t<I.length;){for(f=C(I[t]),h=C(I[t+1]),p=C(I[t+2]),g=C(I[t+3]),l=f^E[0],u=g^E[1],d=p^E[2],c=h^E[3],v=4,m=1;m<y;m++)a=b[l>>>24]^S[u>>16&255]^A[d>>8&255]^R[255&c]^E[v],n=b[u>>>24]^S[d>>16&255]^A[c>>8&255]^R[255&l]^E[v+1],s=b[d>>>24]^S[c>>16&255]^A[l>>8&255]^R[255&u]^E[v+2],o=b[c>>>24]^S[l>>16&255]^A[u>>8&255]^R[255&d]^E[v+3],l=a,u=n,d=s,c=o,v+=4;a=_[l>>>24]<<24^_[u>>16&255]<<16^_[d>>8&255]<<8^_[255&c]^E[v],n=_[u>>>24]<<24^_[d>>16&255]<<16^_[c>>8&255]<<8^_[255&l]^E[v+1],s=_[d>>>24]<<24^_[c>>16&255]<<16^_[l>>8&255]<<8^_[255&u]^E[v+2],o=_[c>>>24]<<24^_[l>>16&255]<<16^_[u>>8&255]<<8^_[255&d]^E[v+3],v+=3,P[t]=C(a^L),P[t+1]=C(o^w),P[t+2]=C(s^O),P[t+3]=C(n^k),L=f,w=h,O=p,k=g,t+=4}return i?x(P.buffer):P.buffer},e.prototype.destroy=function(){this.key=void 0,this.keySize=void 0,this.ksRows=void 0,this.sBox=void 0,this.invSBox=void 0,this.subMix=void 0,this.invSubMix=void 0,this.keySchedule=void 0,this.invKeySchedule=void 0,this.rcon=void 0},e}();t.default=i},"./src/crypt/decrypter.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r("./src/crypt/aes-crypto.js"),l=r("./src/crypt/fast-aes-key.js"),u=r("./src/crypt/aes-decryptor.js"),n=r("./src/errors.js"),d=r("./src/utils/logger.js"),s=r("./src/events.js"),c=r("./src/utils/get-self-scope.js").getSelfScope(),i=function(){function e(e,t,r){var i=(void 0===r?{}:r).removePKCS7Padding,a=void 0===i||i;if(this.logEnabled=!0,this.observer=e,this.config=t,this.removePKCS7Padding=a)try{var n=c.crypto;n&&(this.subtle=n.subtle||n.webkitSubtle)}catch(e){}this.disableWebCrypto=!this.subtle}return e.prototype.isSync=function(){return this.disableWebCrypto&&this.config.enableSoftwareAES},e.prototype.decrypt=function(t,r,i,a){var n=this;if(this.disableWebCrypto&&this.config.enableSoftwareAES){this.logEnabled&&(d.logger.log("JS AES decrypt"),this.logEnabled=!1);var e=this.decryptor;e||(this.decryptor=e=new u.default),e.expandKey(r),a(e.decrypt(t,0,i,this.removePKCS7Padding))}else{this.logEnabled&&(d.logger.log("WebCrypto AES decrypt"),this.logEnabled=!1);var s=this.subtle;this.key!==r&&(this.key=r,this.fastAesKey=new l.default(s,r)),this.fastAesKey.expandKey().then(function(e){new o.default(s,i).decrypt(t,e).catch(function(e){n.onWebCryptoError(e,t,r,i,a)}).then(function(e){a(e)})}).catch(function(e){n.onWebCryptoError(e,t,r,i,a)})}},e.prototype.onWebCryptoError=function(e,t,r,i,a){this.config.enableSoftwareAES?(d.logger.log("WebCrypto Error, disable WebCrypto API"),this.disableWebCrypto=!0,this.logEnabled=!0,this.decrypt(t,r,i,a)):(d.logger.error("decrypting error : "+e.message),this.observer.trigger(s.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_DECRYPT_ERROR,fatal:!0,reason:e.message}))},e.prototype.destroy=function(){var e=this.decryptor;e&&(e.destroy(),this.decryptor=void 0)},e}();t.default=i},"./src/crypt/fast-aes-key.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.subtle=e,this.key=t}return e.prototype.expandKey=function(){return this.subtle.importKey("raw",this.key,{name:"AES-CBC"},!1,["encrypt","decrypt"])},e}();t.default=i},"./src/demux/aacdemuxer.js":function(e,t,r){"use strict";(function(p){Object.defineProperty(t,"__esModule",{value:!0});var g=r("./src/demux/adts.js"),v=r("./src/utils/logger.js"),m=r("./src/demux/id3.js"),e=function(){function e(e,t,r){this.observer=e,this.config=r,this.remuxer=t}return e.prototype.resetInitSegment=function(e,t,r,i){this._audioTrack={container:"audio/adts",type:"audio",id:0,sequenceNumber:0,isAAC:!0,samples:[],len:0,manifestCodec:t,duration:i,inputTimeScale:9e4}},e.prototype.resetTimeStamp=function(){},e.probe=function(e){if(!e)return!1;for(var t=(m.default.getID3Data(e,0)||[]).length,r=e.length;t<r;t++)if(g.probe(e,t))return v.logger.log("ADTS sync word found !"),!0;return!1},e.prototype.append=function(e,t,r,i){for(var a=this._audioTrack,n=m.default.getID3Data(e,0)||[],s=m.default.getTimeStamp(n),o=p.isFinite(s)?90*s:9e4*t,l=0,u=o,d=e.length,c=n.length,f=[{pts:u,dts:u,data:n}];c<d-1;)if(g.isHeader(e,c)&&c+5<d){g.initTrackConfig(a,this.observer,e,c,a.manifestCodec);var h=g.appendFrame(a,e,c,o,l);if(!h){v.logger.log("Unable to parse AAC frame");break}c+=h.length,u=h.sample.pts,l++}else m.default.isHeader(e,c)?(n=m.default.getID3Data(e,c),f.push({pts:u,dts:u,data:n}),c+=n.length):c++;this.remuxer.remux(a,{samples:[]},{samples:f,inputTimeScale:9e4},{samples:[]},t,r,i)},e.prototype.destroy=function(){},e}();t.default=e}).call(this,r("./src/polyfills/number.js").Number)},"./src/demux/adts.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var f=r("./src/utils/logger.js"),h=r("./src/errors.js"),p=r("./src/events.js");function s(e,t,r,i){var a,n,s,o,l,u=navigator.userAgent.toLowerCase(),d=i,c=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];if(a=1+((192&t[r+2])>>>6),n=(60&t[r+2])>>>2,!(c.length-1<n))return o=(1&t[r+2])<<2,o|=(192&t[r+3])>>>6,f.logger.log("manifest codec:"+i+",ADTS data:type:"+a+",sampleingIndex:"+n+"["+c[n]+"Hz],channelConfig:"+o),s=/firefox/i.test(u)?6<=n?(a=5,l=new Array(4),n-3):(a=2,l=new Array(2),n):-1!==u.indexOf("android")?(a=2,l=new Array(2),n):(a=5,l=new Array(4),i&&(-1!==i.indexOf("mp4a.40.29")||-1!==i.indexOf("mp4a.40.5"))||!i&&6<=n?n-3:((i&&-1!==i.indexOf("mp4a.40.2")&&(6<=n&&1===o||/vivaldi/i.test(u))||!i&&1===o)&&(a=2,l=new Array(2)),n)),l[0]=a<<3,l[0]|=(14&n)>>1,l[1]|=(1&n)<<7,l[1]|=o<<3,5===a&&(l[1]|=(14&s)>>1,l[2]=(1&s)<<7,l[2]|=8,l[3]=0),{config:l,samplerate:c[n],channelCount:o,codec:"mp4a.40."+a,manifestCodec:d};e.trigger(p.default.ERROR,{type:h.ErrorTypes.MEDIA_ERROR,details:h.ErrorDetails.FRAG_PARSING_ERROR,fatal:!0,reason:"invalid ADTS sampling index:"+n})}function a(e,t){return 255===e[t]&&240==(246&e[t+1])}function l(e,t){return 1&e[t+1]?7:9}function u(e,t){return(3&e[t+3])<<11|e[t+4]<<3|(224&e[t+5])>>>5}function d(e){return 9216e4/e}function c(e,t,r,i,a){var n,s,o=e.length;if(n=l(e,t),s=u(e,t),0<(s-=n)&&t+n+s<=o)return{headerLength:n,frameLength:s,stamp:r+i*a}}t.getAudioConfig=s,t.isHeaderPattern=a,t.getHeaderLength=l,t.getFullFrameLength=u,t.isHeader=function(e,t){return!!(t+1<e.length&&a(e,t))},t.probe=function(e,t){if(t+1<e.length&&a(e,t)){var r=l(e,t);t+5<e.length&&(r=u(e,t));var i=t+r;if(i===e.length||i+1<e.length&&a(e,i))return!0}return!1},t.initTrackConfig=function(e,t,r,i,a){if(!e.samplerate){var n=s(t,r,i,a);e.config=n.config,e.samplerate=n.samplerate,e.channelCount=n.channelCount,e.codec=n.codec,e.manifestCodec=n.manifestCodec,f.logger.log("parsed codec:"+e.codec+",rate:"+n.samplerate+",nb channel:"+n.channelCount)}},t.getFrameDuration=d,t.parseFrameHeader=c,t.appendFrame=function(e,t,r,i,a){var n=c(t,r,i,a,d(e.samplerate));if(n){var s=n.stamp,o=n.headerLength,l=n.frameLength,u={unit:t.subarray(r+o,r+o+l),pts:s,dts:s};return e.samples.push(u),e.len+=l,{sample:u,length:l+o}}}},"./src/demux/demuxer-inline.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var g,S=r("./src/events.js"),A=r("./src/errors.js"),v=r("./src/crypt/decrypter.js"),R=r("./src/demux/aacdemuxer.js"),D=r("./src/demux/mp4demuxer.js"),L=r("./src/demux/tsdemuxer.js"),w=r("./src/demux/mp3demuxer.js"),O=r("./src/remux/mp4-remuxer.js"),k=r("./src/remux/passthrough-remuxer.js"),i=r("./src/utils/get-self-scope.js"),a=r("./src/utils/logger.js"),n=i.getSelfScope();try{g=n.performance.now.bind(n.performance)}catch(e){a.logger.debug("Unable to use Performance API on this environment"),g=n.Date.now}var s=function(){function e(e,t,r,i){this.observer=e,this.typeSupported=t,this.config=r,this.vendor=i}return e.prototype.destroy=function(){var e=this.demuxer;e&&e.destroy()},e.prototype.push=function(e,r,i,a,n,s,o,l,u,d,c,f){var h=this;if(0<e.byteLength&&null!=r&&null!=r.key&&"AES-128"===r.method){var t=this.decrypter;null==t&&(t=this.decrypter=new v.default(this.observer,this.config));var p=g();t.decrypt(e,r.key.buffer,r.iv.buffer,function(e){var t=g();h.observer.trigger(S.default.FRAG_DECRYPTED,{stats:{tstart:p,tdecrypt:t}}),h.pushDecrypted(new Uint8Array(e),r,new Uint8Array(i),a,n,s,o,l,u,d,c,f)})}else this.pushDecrypted(new Uint8Array(e),r,new Uint8Array(i),a,n,s,o,l,u,d,c,f)},e.prototype.pushDecrypted=function(e,t,r,i,a,n,s,o,l,u,d,c){var f=this.demuxer;if(!f||(s||o)&&!this.probe(e)){for(var h=this.observer,p=this.typeSupported,g=this.config,v=[{demux:L.default,remux:O.default},{demux:D.default,remux:k.default},{demux:R.default,remux:O.default},{demux:w.default,remux:O.default}],m=0,y=v.length;m<y;m++){var E=v[m],_=E.demux.probe;if(_(e)){var T=this.remuxer=new E.remux(h,g,p,this.vendor);f=new E.demux(h,T,g,p),this.probe=_;break}}if(!f)return void h.trigger(S.default.ERROR,{type:A.ErrorTypes.MEDIA_ERROR,details:A.ErrorDetails.FRAG_PARSING_ERROR,fatal:!0,reason:"no demux matching with content found"});this.demuxer=f}var b=this.remuxer;(s||o)&&(f.resetInitSegment(r,i,a,u),b.resetInitSegment()),s&&(f.resetTimeStamp(c),b.resetTimeStamp(c)),"function"==typeof f.setDecryptData&&f.setDecryptData(t),f.append(e,n,l,d)},e}();t.default=s},"./src/demux/demuxer-worker.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r("./src/demux/demuxer-inline.js"),o=r("./src/events.js"),l=r("./src/utils/logger.js"),u=r("./node_modules/node-libs-browser/node_modules/events/events.js");t.default=function(a){var i=new u.EventEmitter;i.trigger=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];i.emit.apply(i,[e,e].concat(t))},i.off=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];i.removeListener.apply(i,[e].concat(t))};var n=function(e,t){a.postMessage({event:e,data:t})};a.addEventListener("message",function(e){var t=e.data;switch(t.cmd){case"init":var r=JSON.parse(t.config);a.demuxer=new s.default(i,t.typeSupported,r,t.vendor),l.enableLogs(r.debug),n("init",null);break;case"demux":a.demuxer.push(t.data,t.decryptdata,t.initSegment,t.audioCodec,t.videoCodec,t.timeOffset,t.discontinuity,t.trackSwitch,t.contiguous,t.duration,t.accurateTimeOffset,t.defaultInitPTS)}}),i.on(o.default.FRAG_DECRYPTED,n),i.on(o.default.FRAG_PARSING_INIT_SEGMENT,n),i.on(o.default.FRAG_PARSED,n),i.on(o.default.ERROR,n),i.on(o.default.FRAG_PARSING_METADATA,n),i.on(o.default.FRAG_PARSING_USERDATA,n),i.on(o.default.INIT_PTS_FOUND,n),i.on(o.default.FRAG_PARSING_DATA,function(e,t){var r=[],i={event:e,data:t};t.data1&&(i.data1=t.data1.buffer,r.push(t.data1.buffer),delete t.data1),t.data2&&(i.data2=t.data2.buffer,r.push(t.data2.buffer),delete t.data2),a.postMessage(i,r)})}},"./src/demux/demuxer.js":function(e,i,a){"use strict";(function(m){Object.defineProperty(i,"__esModule",{value:!0});var u=a("./node_modules/webworkify-webpack/index.js"),d=a("./src/events.js"),c=a("./src/demux/demuxer-inline.js"),y=a("./src/utils/logger.js"),f=a("./src/errors.js"),e=a("./src/utils/mediasource-helper.js"),t=a("./src/utils/get-self-scope.js"),h=a("./src/observer.js"),p=t.getSelfScope(),g=e.getMediaSource(),r=function(){function e(r,e){var i=this;this.hls=r,this.id=e;var t=this.observer=new h.Observer,a=r.config,n=function(e,t){(t=t||{}).frag=i.frag,t.id=i.id,r.trigger(e,t)};t.on(d.default.FRAG_DECRYPTED,n),t.on(d.default.FRAG_PARSING_INIT_SEGMENT,n),t.on(d.default.FRAG_PARSING_DATA,n),t.on(d.default.FRAG_PARSED,n),t.on(d.default.ERROR,n),t.on(d.default.FRAG_PARSING_METADATA,n),t.on(d.default.FRAG_PARSING_USERDATA,n),t.on(d.default.INIT_PTS_FOUND,n);var s={mp4:g.isTypeSupported("video/mp4"),mpeg:g.isTypeSupported("audio/mpeg"),mp3:g.isTypeSupported('audio/mp4; codecs="mp3"')},o=navigator.vendor;if(a.enableWorker&&"undefined"!=typeof Worker){y.logger.log("demuxing in webworker");var l=void 0;try{l=this.w=u("./src/demux/demuxer-worker.js"),this.onwmsg=this.onWorkerMessage.bind(this),l.addEventListener("message",this.onwmsg),l.onerror=function(e){r.trigger(d.default.ERROR,{type:f.ErrorTypes.OTHER_ERROR,details:f.ErrorDetails.INTERNAL_EXCEPTION,fatal:!0,event:"demuxerWorker",err:{message:e.message+" ("+e.filename+":"+e.lineno+")"}})},l.postMessage({cmd:"init",typeSupported:s,vendor:o,id:e,config:JSON.stringify(a)})}catch(e){y.logger.warn("Error in worker:",e),y.logger.error("Error while initializing DemuxerWorker, fallback on DemuxerInline"),l&&p.URL.revokeObjectURL(l.objectURL),this.demuxer=new c.default(t,s,a,o),this.w=void 0}}else this.demuxer=new c.default(t,s,a,o)}return e.prototype.destroy=function(){var e=this.w;if(e)e.removeEventListener("message",this.onwmsg),e.terminate(),this.w=null;else{var t=this.demuxer;t&&(t.destroy(),this.demuxer=null)}var r=this.observer;r&&(r.removeAllListeners(),this.observer=null)},e.prototype.push=function(e,t,r,i,a,n,s,o){var l=this.w,u=m.isFinite(a.startPTS)?a.startPTS:a.start,d=a.decryptdata,c=this.frag,f=!(c&&a.cc===c.cc),h=!(c&&a.level===c.level),p=c&&a.sn===c.sn+1,g=!h&&p;if(f&&y.logger.log(this.id+":discontinuity detected"),h&&y.logger.log(this.id+":switch detected"),this.frag=a,l)l.postMessage({cmd:"demux",data:e,decryptdata:d,initSegment:t,audioCodec:r,videoCodec:i,timeOffset:u,discontinuity:f,trackSwitch:h,contiguous:g,duration:n,accurateTimeOffset:s,defaultInitPTS:o},e instanceof ArrayBuffer?[e]:[]);else{var v=this.demuxer;v&&v.push(e,d,t,r,i,u,f,h,g,n,s,o)}},e.prototype.onWorkerMessage=function(e){var t=e.data,r=this.hls;switch(t.event){case"init":p.URL.revokeObjectURL(this.w.objectURL);break;case d.default.FRAG_PARSING_DATA:t.data.data1=new Uint8Array(t.data1),t.data2&&(t.data.data2=new Uint8Array(t.data2));default:t.data=t.data||{},t.data.frag=this.frag,t.data.id=this.id,r.trigger(t.event,t.data)}},e}();i.default=r}).call(this,a("./src/polyfills/number.js").Number)},"./src/demux/exp-golomb.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./src/utils/logger.js"),a=function(){function e(e){this.data=e,this.bytesAvailable=e.byteLength,this.word=0,this.bitsAvailable=0}return e.prototype.loadWord=function(){var e=this.data,t=this.bytesAvailable,r=e.byteLength-t,i=new Uint8Array(4),a=Math.min(4,t);if(0===a)throw new Error("no bytes available");i.set(e.subarray(r,r+a)),this.word=new DataView(i.buffer).getUint32(0),this.bitsAvailable=8*a,this.bytesAvailable-=a},e.prototype.skipBits=function(e){var t;this.bitsAvailable>e||(e-=this.bitsAvailable,e-=(t=e>>3)>>3,this.bytesAvailable-=t,this.loadWord()),this.word<<=e,this.bitsAvailable-=e},e.prototype.readBits=function(e){var t=Math.min(this.bitsAvailable,e),r=this.word>>>32-t;return 32<e&&i.logger.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=t,0<this.bitsAvailable?this.word<<=t:0<this.bytesAvailable&&this.loadWord(),0<(t=e-t)&&this.bitsAvailable?r<<t|this.readBits(t):r},e.prototype.skipLZ=function(){var e;for(e=0;e<this.bitsAvailable;++e)if(0!=(this.word&2147483648>>>e))return this.word<<=e,this.bitsAvailable-=e,e;return this.loadWord(),e+this.skipLZ()},e.prototype.skipUEG=function(){this.skipBits(1+this.skipLZ())},e.prototype.skipEG=function(){this.skipBits(1+this.skipLZ())},e.prototype.readUEG=function(){var e=this.skipLZ();return this.readBits(e+1)-1},e.prototype.readEG=function(){var e=this.readUEG();return 1&e?1+e>>>1:-1*(e>>>1)},e.prototype.readBoolean=function(){return 1===this.readBits(1)},e.prototype.readUByte=function(){return this.readBits(8)},e.prototype.readUShort=function(){return this.readBits(16)},e.prototype.readUInt=function(){return this.readBits(32)},e.prototype.skipScalingList=function(e){var t,r=8,i=8;for(t=0;t<e;t++)0!==i&&(i=(r+this.readEG()+256)%256),r=0===i?r:i},e.prototype.readSPS=function(){var e,t,r,i,a,n,s,o=0,l=0,u=0,d=0,c=this.readUByte.bind(this),f=this.readBits.bind(this),h=this.readUEG.bind(this),p=this.readBoolean.bind(this),g=this.skipBits.bind(this),v=this.skipEG.bind(this),m=this.skipUEG.bind(this),y=this.skipScalingList.bind(this);if(c(),e=c(),f(5),g(3),c(),m(),100===e||110===e||122===e||244===e||44===e||83===e||86===e||118===e||128===e){var E=h();if(3===E&&g(1),m(),m(),g(1),p())for(n=3!==E?8:12,s=0;s<n;s++)p()&&y(s<6?16:64)}m();var _=h();if(0===_)h();else if(1===_)for(g(1),v(),v(),t=h(),s=0;s<t;s++)v();m(),g(1),r=h(),i=h(),0===(a=f(1))&&g(1),g(1),p()&&(o=h(),l=h(),u=h(),d=h());var T=[1,1];if(p()&&p())switch(c()){case 1:T=[1,1];break;case 2:T=[12,11];break;case 3:T=[10,11];break;case 4:T=[16,11];break;case 5:T=[40,33];break;case 6:T=[24,11];break;case 7:T=[20,11];break;case 8:T=[32,11];break;case 9:T=[80,33];break;case 10:T=[18,11];break;case 11:T=[15,11];break;case 12:T=[64,33];break;case 13:T=[160,99];break;case 14:T=[4,3];break;case 15:T=[3,2];break;case 16:T=[2,1];break;case 255:T=[c()<<8|c(),c()<<8|c()]}return{width:Math.ceil(16*(r+1)-2*o-2*l),height:(2-a)*(i+1)*16-(a?2:4)*(u+d),pixelRatio:T}},e.prototype.readSliceType=function(){return this.readUByte(),this.readUEG(),this.readUEG()},e}();t.default=a},"./src/demux/id3.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function o(){}return o.isHeader=function(e,t){return t+10<=e.length&&73===e[t]&&68===e[t+1]&&51===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},o.isFooter=function(e,t){return t+10<=e.length&&51===e[t]&&68===e[t+1]&&73===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},o.getID3Data=function(e,t){for(var r=t,i=0;o.isHeader(e,t);){i+=10,i+=o._readSize(e,t+6),o.isFooter(e,t+10)&&(i+=10),t+=i}if(0<i)return e.subarray(r,r+i)},o._readSize=function(e,t){var r=0;return r=(127&e[t])<<21,r|=(127&e[t+1])<<14,r|=(127&e[t+2])<<7,r|=127&e[t+3]},o.getTimeStamp=function(e){for(var t=o.getID3Frames(e),r=0;r<t.length;r++){var i=t[r];if(o.isTimeStampFrame(i))return o._readTimeStamp(i)}},o.isTimeStampFrame=function(e){return e&&"PRIV"===e.key&&"com.apple.streaming.transportStreamTimestamp"===e.info},o._getFrameData=function(e){var t=String.fromCharCode(e[0],e[1],e[2],e[3]),r=o._readSize(e,4);return{type:t,size:r,data:e.subarray(10,10+r)}},o.getID3Frames=function(e){for(var t=0,r=[];o.isHeader(e,t);){for(var i=o._readSize(e,t+6),a=(t+=10)+i;t+8<a;){var n=o._getFrameData(e.subarray(t)),s=o._decodeFrame(n);s&&r.push(s),t+=n.size+10}o.isFooter(e,t)&&(t+=10)}return r},o._decodeFrame=function(e){return"PRIV"===e.type?o._decodePrivFrame(e):"T"===e.type[0]?o._decodeTextFrame(e):"W"===e.type[0]?o._decodeURLFrame(e):void 0},o._readTimeStamp=function(e){if(8===e.data.byteLength){var t=new Uint8Array(e.data),r=1&t[3],i=(t[4]<<23)+(t[5]<<15)+(t[6]<<7)+t[7];return i/=45,r&&(i+=47721858.84),Math.round(i)}},o._decodePrivFrame=function(e){if(!(e.size<2)){var t=o._utf8ArrayToStr(e.data,!0),r=new Uint8Array(e.data.subarray(t.length+1));return{key:e.type,info:t,data:r.buffer}}},o._decodeTextFrame=function(e){if(!(e.size<2)){if("TXXX"===e.type){var t=1,r=o._utf8ArrayToStr(e.data.subarray(t));t+=r.length+1;var i=o._utf8ArrayToStr(e.data.subarray(t));return{key:e.type,info:r,data:i}}var a=o._utf8ArrayToStr(e.data.subarray(1));return{key:e.type,data:a}}},o._decodeURLFrame=function(e){if("WXXX"===e.type){if(e.size<2)return;var t=1,r=o._utf8ArrayToStr(e.data.subarray(t));t+=r.length+1;var i=o._utf8ArrayToStr(e.data.subarray(t));return{key:e.type,info:r,data:i}}var a=o._utf8ArrayToStr(e.data);return{key:e.type,data:a}},o._utf8ArrayToStr=function(e,t){void 0===t&&(t=!1);for(var r,i,a,n=e.length,s="",o=0;o<n;){if(0===(r=e[o++])&&t)return s;if(0!==r&&3!==r)switch(r>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:s+=String.fromCharCode(r);break;case 12:case 13:i=e[o++],s+=String.fromCharCode((31&r)<<6|63&i);break;case 14:i=e[o++],a=e[o++],s+=String.fromCharCode((15&r)<<12|(63&i)<<6|(63&a)<<0)}}return s},o}(),a=i._utf8ArrayToStr;t.utf8ArrayToStr=a,t.default=i},"./src/demux/mp3demuxer.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var p=r("./src/demux/id3.js"),a=r("./src/utils/logger.js"),g=r("./src/demux/mpegaudio.js"),i=function(){function e(e,t,r){this.observer=e,this.config=r,this.remuxer=t}return e.prototype.resetInitSegment=function(e,t,r,i){this._audioTrack={container:"audio/mpeg",type:"audio",id:-1,sequenceNumber:0,isAAC:!1,samples:[],len:0,manifestCodec:t,duration:i,inputTimeScale:9e4}},e.prototype.resetTimeStamp=function(){},e.probe=function(e){var t,r,i=p.default.getID3Data(e,0);if(i&&void 0!==p.default.getTimeStamp(i))for(t=i.length,r=Math.min(e.length-1,t+100);t<r;t++)if(g.default.probe(e,t))return a.logger.log("MPEG Audio sync word found !"),!0;return!1},e.prototype.append=function(e,t,r,i){for(var a=p.default.getID3Data(e,0),n=p.default.getTimeStamp(a),s=n?90*n:9e4*t,o=a.length,l=e.length,u=0,d=0,c=this._audioTrack,f=[{pts:s,dts:s,data:a}];o<l;)if(g.default.isHeader(e,o)){var h=g.default.appendFrame(c,e,o,s,u);if(!h)break;o+=h.length,d=h.sample.pts,u++}else p.default.isHeader(e,o)?(a=p.default.getID3Data(e,o),f.push({pts:d,dts:d,data:a}),o+=a.length):o++;this.remuxer.remux(c,{samples:[]},{samples:f,inputTimeScale:9e4},{samples:[]},t,r,i)},e.prototype.destroy=function(){},e}();t.default=i},"./src/demux/mp4demuxer.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var f=r("./src/utils/logger.js"),l=r("./src/events.js"),o=Math.pow(2,32)-1,i=function(){function g(e,t){this.observer=e,this.remuxer=t}return g.prototype.resetTimeStamp=function(e){this.initPTS=e},g.prototype.resetInitSegment=function(e,t,r,i){if(e&&e.byteLength){var a=this.initData=g.parseInitSegment(e);null==t&&(t="mp4a.40.5"),null==r&&(r="avc1.42e01e");var n={};a.audio&&a.video?n.audiovideo={container:"video/mp4",codec:t+","+r,initSegment:i?e:null}:(a.audio&&(n.audio={container:"audio/mp4",codec:t,initSegment:i?e:null}),a.video&&(n.video={container:"video/mp4",codec:r,initSegment:i?e:null})),this.observer.trigger(l.default.FRAG_PARSING_INIT_SEGMENT,{tracks:n})}else t&&(this.audioCodec=t),r&&(this.videoCodec=r)},g.probe=function(e){return 0<g.findBox({data:e,start:0,end:Math.min(e.length,16384)},["moof"]).length},g.bin2str=function(e){return String.fromCharCode.apply(null,e)},g.readUint16=function(e,t){e.data&&(t+=e.start,e=e.data);var r=e[t]<<8|e[t+1];return r<0?65536+r:r},g.readUint32=function(e,t){e.data&&(t+=e.start,e=e.data);var r=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3];return r<0?4294967296+r:r},g.writeUint32=function(e,t,r){e.data&&(t+=e.start,e=e.data),e[t]=r>>24,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r},g.findBox=function(e,t){var r,i,a,n,s,o,l=[];if(e.data?(s=e.start,a=e.end,e=e.data):(s=0,a=e.byteLength),!t.length)return null;for(r=s;r<a;)o=1<(i=g.readUint32(e,r))?r+i:a,g.bin2str(e.subarray(r+4,r+8))===t[0]&&(1===t.length?l.push({data:e,start:r+8,end:o}):(n=g.findBox({data:e,start:r+8,end:o},t.slice(1))).length&&(l=l.concat(n))),r=o;return l},g.parseSegmentIndex=function(e){var t,r=g.findBox(e,["moov"])[0],i=r?r.end:null,a=0,n=g.findBox(e,["sidx"]);if(!n||!n[0])return null;t=[];var s=(n=n[0]).data[0],o=g.readUint32(n,a=0===s?8:16);a+=4;a+=0===s?8:16,a+=2;var l=n.end+0,u=g.readUint16(n,a);a+=2;for(var d=0;d<u;d++){var c=a,f=g.readUint32(n,c),h=2147483647&f;if(1===(2147483648&f)>>>31)return;var p=g.readUint32(n,c+=4);c+=4,t.push({referenceSize:h,subsegmentDuration:p,info:{duration:p/o,start:l,end:l+h-1}}),l+=h,a=c+=4}return{earliestPresentationTime:0,timescale:o,version:s,referencesCount:u,references:t,moovEndOffset:i}},g.parseInitSegment=function(e){var c=[];return g.findBox(e,["moov","trak"]).forEach(function(e){var t=g.findBox(e,["tkhd"])[0];if(t){var r=t.data[t.start],i=0===r?12:20,a=g.readUint32(t,i),n=g.findBox(e,["mdia","mdhd"])[0];if(n){r=n.data[n.start];var s=g.readUint32(n,i=0===r?12:20),o=g.findBox(e,["mdia","hdlr"])[0];if(o){var l={soun:"audio",vide:"video"}[g.bin2str(o.data.subarray(o.start+8,o.start+12))];if(l){var u=g.findBox(e,["mdia","minf","stbl","stsd"]);if(u.length){u=u[0];var d=g.bin2str(u.data.subarray(u.start+12,u.start+16));f.logger.log("MP4Demuxer:"+l+":"+d+" found")}c[a]={timescale:s,type:l},c[l]={timescale:s,id:a}}}}}}),c},g.getStartDTS=function(a,e){var t,r,i;return t=g.findBox(e,["moof","traf"]),r=[].concat.apply([],t.map(function(i){return g.findBox(i,["tfhd"]).map(function(e){var t,r;return t=g.readUint32(e,4),r=a[t].timescale||9e4,g.findBox(i,["tfdt"]).map(function(e){var t,r;return t=e.data[e.start],r=g.readUint32(e,4),1===t&&(r*=Math.pow(2,32),r+=g.readUint32(e,8)),r})[0]/r})})),i=Math.min.apply(null,r),isFinite(i)?i:0},g.offsetStartDTS=function(i,e,s){g.findBox(e,["moof","traf"]).map(function(r){return g.findBox(r,["tfhd"]).map(function(e){var t=g.readUint32(e,4),n=i[t].timescale||9e4;g.findBox(r,["tfdt"]).map(function(e){var t=e.data[e.start],r=g.readUint32(e,4);if(0===t)g.writeUint32(e,4,r-s*n);else{r*=Math.pow(2,32),r+=g.readUint32(e,8),r-=s*n,r=Math.max(r,0);var i=Math.floor(r/(o+1)),a=Math.floor(r%(o+1));g.writeUint32(e,4,i),g.writeUint32(e,8,a)}})})})},g.prototype.append=function(e,t,r,i){var a=this.initData;a||(this.resetInitSegment(e,this.audioCodec,this.videoCodec,!1),a=this.initData);var n,s=this.initPTS;if(void 0===s){var o=g.getStartDTS(a,e);this.initPTS=s=o-t,this.observer.trigger(l.default.INIT_PTS_FOUND,{initPTS:s})}g.offsetStartDTS(a,e,s),n=g.getStartDTS(a,e),this.remuxer.remux(a.audio,a.video,null,null,n,r,i,e)},g.prototype.destroy=function(){},g}();t.default=i},"./src/demux/mpegaudio.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var g={BitratesMap:[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],SamplingRateMap:[44100,48e3,32e3,22050,24e3,16e3,11025,12e3,8e3],SamplesCoefficients:[[0,72,144,12],[0,0,0,0],[0,72,144,12],[0,144,144,12]],BytesInSlot:[0,1,1,4],appendFrame:function(e,t,r,i,a){if(!(r+24>t.length)){var n=this.parseHeader(t,r);if(n&&r+n.frameLength<=t.length){var s=i+a*(9e4*n.samplesPerFrame/n.sampleRate),o={unit:t.subarray(r,r+n.frameLength),pts:s,dts:s};return e.config=[],e.channelCount=n.channelCount,e.samplerate=n.sampleRate,e.samples.push(o),e.len+=n.frameLength,{sample:o,length:n.frameLength}}}},parseHeader:function(e,t){var r=e[t+1]>>3&3,i=e[t+1]>>1&3,a=e[t+2]>>4&15,n=e[t+2]>>2&3,s=e[t+2]>>1&1;if(1!==r&&0!==a&&15!==a&&3!==n){var o=3===r?3-i:3===i?3:4,l=1e3*g.BitratesMap[14*o+a-1],u=3===r?0:2===r?1:2,d=g.SamplingRateMap[3*u+n],c=e[t+3]>>6==3?1:2,f=g.SamplesCoefficients[r][i],h=g.BytesInSlot[i],p=8*f*h;return{sampleRate:d,channelCount:c,frameLength:parseInt(f*l/d+s,10)*h,samplesPerFrame:p}}},isHeaderPattern:function(e,t){return 255===e[t]&&224==(224&e[t+1])&&0!=(6&e[t+1])},isHeader:function(e,t){return!!(t+1<e.length&&this.isHeaderPattern(e,t))},probe:function(e,t){if(t+1<e.length&&this.isHeaderPattern(e,t)){var r=this.parseHeader(e,t),i=4;r&&r.frameLength&&(i=r.frameLength);var a=t+i;if(a===e.length||a+1<e.length&&this.isHeaderPattern(e,a))return!0}return!1}};t.default=g},"./src/demux/sample-aes.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=r("./src/crypt/decrypter.js"),i=function(){function e(e,t,r,i){this.decryptdata=r,this.discardEPB=i,this.decrypter=new a.default(e,t,{removePKCS7Padding:!1})}return e.prototype.decryptBuffer=function(e,t){this.decrypter.decrypt(e,this.decryptdata.key.buffer,this.decryptdata.iv.buffer,t)},e.prototype.decryptAacSample=function(t,r,i,a){var n=t[r].unit,e=n.subarray(16,n.length-n.length%16),s=e.buffer.slice(e.byteOffset,e.byteOffset+e.length),o=this;this.decryptBuffer(s,function(e){e=new Uint8Array(e),n.set(e,16),a||o.decryptAacSamples(t,r+1,i)})},e.prototype.decryptAacSamples=function(e,t,r){for(;;t++){if(t>=e.length)return void r();if(!(e[t].unit.length<32)){var i=this.decrypter.isSync();if(this.decryptAacSample(e,t,r,i),!i)return}}},e.prototype.getAvcEncryptedData=function(e){for(var t=16*Math.floor((e.length-48)/160)+16,r=new Int8Array(t),i=0,a=32;a<=e.length-16;a+=160,i+=16)r.set(e.subarray(a,a+16),i);return r},e.prototype.getAvcDecryptedUnit=function(e,t){t=new Uint8Array(t);for(var r=0,i=32;i<=e.length-16;i+=160,r+=16)e.set(t.subarray(r,r+16),i);return e},e.prototype.decryptAvcSample=function(t,r,i,a,n,s){var o=this.discardEPB(n.data),e=this.getAvcEncryptedData(o),l=this;this.decryptBuffer(e.buffer,function(e){n.data=l.getAvcDecryptedUnit(o,e),s||l.decryptAvcSamples(t,r,i+1,a)})},e.prototype.decryptAvcSamples=function(e,t,r,i){for(;;t++,r=0){if(t>=e.length)return void i();for(var a=e[t].units;!(r>=a.length);r++){var n=a[r];if(!(n.length<=48||1!==n.type&&5!==n.type)){var s=this.decrypter.isSync();if(this.decryptAvcSample(e,t,r,i,n,s),!s)return}}}},e}();t.default=i},"./src/demux/tsdemuxer.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var v=r("./src/demux/adts.js"),o=r("./src/demux/mpegaudio.js"),P=r("./src/events.js"),A=r("./src/demux/exp-golomb.js"),i=r("./src/demux/sample-aes.js"),C=r("./src/utils/logger.js"),x=r("./src/errors.js"),a={video:1,audio:2,id3:3,text:4},n=function(){function I(e,t,r,i){this.observer=e,this.config=r,this.typeSupported=i,this.remuxer=t,this.sampleAes=null}return I.prototype.setDecryptData=function(e){null!=e&&null!=e.key&&"SAMPLE-AES"===e.method?this.sampleAes=new i.default(this.observer,this.config,e,this.discardEPB):this.sampleAes=null},I.probe=function(e){var t=I._syncOffset(e);return!(t<0)&&(t&&C.logger.warn("MPEG2-TS detected but first sync word found @ offset "+t+", junk ahead ?"),!0)},I._syncOffset=function(e){for(var t=Math.min(1e3,e.length-564),r=0;r<t;){if(71===e[r]&&71===e[r+188]&&71===e[r+376])return r;r++}return-1},I.createTrack=function(e,t){return{container:"video"===e||"audio"===e?"video/mp2t":void 0,type:e,id:a[e],pid:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],len:0,dropped:"video"===e?0:void 0,isAAC:"audio"===e||void 0,duration:"audio"===e?t:void 0}},I.prototype.resetInitSegment=function(e,t,r,i){this.pmtParsed=!1,this._pmtId=-1,this._avcTrack=I.createTrack("video",i),this._audioTrack=I.createTrack("audio",i),this._id3Track=I.createTrack("id3",i),this._txtTrack=I.createTrack("text",i),this.aacOverFlow=null,this.aacLastPTS=null,this.avcSample=null,this.audioCodec=t,this.videoCodec=r,this._duration=i},I.prototype.resetTimeStamp=function(){},I.prototype.append=function(e,t,r,i){var a,n,s,o,l,u=e.length,d=!1;this.contiguous=r;var c=this.pmtParsed,f=this._avcTrack,h=this._audioTrack,p=this._id3Track,g=f.pid,v=h.pid,m=p.pid,y=this._pmtId,E=f.pesData,_=h.pesData,T=p.pesData,b=this._parsePAT,S=this._parsePMT,A=this._parsePES,R=this._parseAVCPES.bind(this),D=this._parseAACPES.bind(this),L=this._parseMPEGPES.bind(this),w=this._parseID3PES.bind(this),O=I._syncOffset(e);for(u-=(u+O)%188,a=O;a<u;a+=188)if(71===e[a]){if(n=!!(64&e[a+1]),s=((31&e[a+1])<<8)+e[a+2],1<(48&e[a+3])>>4){if((o=a+5+e[a+4])===a+188)continue}else o=a+4;switch(s){case g:n&&(E&&(l=A(E))&&void 0!==l.pts&&R(l,!1),E={data:[],size:0}),E&&(E.data.push(e.subarray(o,a+188)),E.size+=a+188-o);break;case v:n&&(_&&(l=A(_))&&void 0!==l.pts&&(h.isAAC?D(l):L(l)),_={data:[],size:0}),_&&(_.data.push(e.subarray(o,a+188)),_.size+=a+188-o);break;case m:n&&(T&&(l=A(T))&&void 0!==l.pts&&w(l),T={data:[],size:0}),T&&(T.data.push(e.subarray(o,a+188)),T.size+=a+188-o);break;case 0:n&&(o+=e[o]+1),y=this._pmtId=b(e,o);break;case y:n&&(o+=e[o]+1);var k=S(e,o,!0===this.typeSupported.mpeg||!0===this.typeSupported.mp3,null!=this.sampleAes);0<(g=k.avc)&&(f.pid=g),0<(v=k.audio)&&(h.pid=v,h.isAAC=k.isAAC),0<(m=k.id3)&&(p.pid=m),d&&!c&&(C.logger.log("reparse from beginning"),d=!1,a=O-188),c=this.pmtParsed=!0;break;case 17:case 8191:break;default:d=!0}}else this.observer.trigger(P.default.ERROR,{type:x.ErrorTypes.MEDIA_ERROR,details:x.ErrorDetails.FRAG_PARSING_ERROR,fatal:!1,reason:"TS packet did not start with 0x47"});E&&(l=A(E))&&void 0!==l.pts?(R(l,!0),f.pesData=null):f.pesData=E,_&&(l=A(_))&&void 0!==l.pts?(h.isAAC?D(l):L(l),h.pesData=null):(_&&_.size&&C.logger.log("last AAC PES packet truncated,might overlap between fragments"),h.pesData=_),T&&(l=A(T))&&void 0!==l.pts?(w(l),p.pesData=null):p.pesData=T,null==this.sampleAes?this.remuxer.remux(h,f,p,this._txtTrack,t,r,i):this.decryptAndRemux(h,f,p,this._txtTrack,t,r,i)},I.prototype.decryptAndRemux=function(e,t,r,i,a,n,s){if(e.samples&&e.isAAC){var o=this;this.sampleAes.decryptAacSamples(e.samples,0,function(){o.decryptAndRemuxAvc(e,t,r,i,a,n,s)})}else this.decryptAndRemuxAvc(e,t,r,i,a,n,s)},I.prototype.decryptAndRemuxAvc=function(e,t,r,i,a,n,s){if(t.samples){var o=this;this.sampleAes.decryptAvcSamples(t.samples,0,0,function(){o.remuxer.remux(e,t,r,i,a,n,s)})}else this.remuxer.remux(e,t,r,i,a,n,s)},I.prototype.destroy=function(){this._initPTS=this._initDTS=void 0,this._duration=0},I.prototype._parsePAT=function(e,t){return(31&e[t+10])<<8|e[t+11]},I.prototype._parsePMT=function(e,t,r,i){var a,n,s={audio:-1,avc:-1,id3:-1,isAAC:!0};for(a=t+3+((15&e[t+1])<<8|e[t+2])-4,t+=12+((15&e[t+10])<<8|e[t+11]);t<a;){switch(n=(31&e[t+1])<<8|e[t+2],e[t]){case 207:if(!i){C.logger.log("unkown stream type:"+e[t]);break}case 15:-1===s.audio&&(s.audio=n);break;case 21:-1===s.id3&&(s.id3=n);break;case 219:if(!i){C.logger.log("unkown stream type:"+e[t]);break}case 27:-1===s.avc&&(s.avc=n);break;case 3:case 4:r?-1===s.audio&&(s.audio=n,s.isAAC=!1):C.logger.log("MPEG audio found, not supported in this browser for now");break;case 36:C.logger.warn("HEVC stream type found, not supported for now");break;default:C.logger.log("unkown stream type:"+e[t])}t+=5+((15&e[t+3])<<8|e[t+4])}return s},I.prototype._parsePES=function(e){var t,r,i,a,n,s,o,l,u=0,d=e.data;if(!e||0===e.size)return null;for(;d[0].length<19&&1<d.length;){var c=new Uint8Array(d[0].length+d[1].length);c.set(d[0]),c.set(d[1],d[0].length),d[0]=c,d.splice(1,1)}if(1!==((t=d[0])[0]<<16)+(t[1]<<8)+t[2])return null;if((i=(t[4]<<8)+t[5])&&i>e.size-6)return null;192&(r=t[7])&&(4294967295<(s=536870912*(14&t[9])+4194304*(255&t[10])+16384*(254&t[11])+128*(255&t[12])+(254&t[13])/2)&&(s-=8589934592),64&r?(4294967295<(o=536870912*(14&t[14])+4194304*(255&t[15])+16384*(254&t[16])+128*(255&t[17])+(254&t[18])/2)&&(o-=8589934592),54e5<s-o&&(C.logger.warn(Math.round((s-o)/9e4)+"s delta between PTS and DTS, align them"),s=o)):o=s),l=(a=t[8])+9,e.size-=l,n=new Uint8Array(e.size);for(var f=0,h=d.length;f<h;f++){var p=(t=d[f]).byteLength;if(l){if(p<l){l-=p;continue}t=t.subarray(l),p-=l,l=0}n.set(t,u),u+=p}return i&&(i-=a+3),{data:n,pts:s,dts:o,len:i}},I.prototype.pushAccesUnit=function(e,t){if(e.units.length&&e.frame){var r=t.samples,i=r.length;!this.config.forceKeyFrameOnDiscontinuity||!0===e.key||t.sps&&(i||this.contiguous)?(e.id=i,r.push(e)):t.dropped++}e.debug.length&&C.logger.log(e.pts+"/"+e.dts+":"+e.debug)},I.prototype._parseAVCPES=function(p,e){var g,v,m,y=this,E=this._avcTrack,t=this._parseAVCNALu(p.data),_=this.avcSample,T=!1,b=this.pushAccesUnit.bind(this),S=function(e,t,r,i){return{key:e,pts:t,dts:r,units:[],debug:i}};p.data=null,_&&t.length&&!E.audFound&&(b(_,E),_=this.avcSample=S(!1,p.pts,p.dts,"")),t.forEach(function(e){switch(e.type){case 1:v=!0,_||(_=y.avcSample=S(!0,p.pts,p.dts,"")),_.frame=!0;var t=e.data;if(T&&4<t.length){var r=new A.default(t).readSliceType();2!==r&&4!==r&&7!==r&&9!==r||(_.key=!0)}break;case 5:v=!0,_||(_=y.avcSample=S(!0,p.pts,p.dts,"")),_.key=!0,_.frame=!0;break;case 6:v=!0,(g=new A.default(y.discardEPB(e.data))).readUByte();for(var i=0,a=0,n=!1,s=0;!n&&1<g.bytesAvailable;){for(i=0;i+=s=g.readUByte(),255===s;);for(a=0;a+=s=g.readUByte(),255===s;);if(4===i&&0!==g.bytesAvailable){if(n=!0,181===g.readUByte())if(49===g.readUShort())if(1195456820===g.readUInt())if(3===g.readUByte()){var o=g.readUByte(),l=31&o,u=[o,g.readUByte()];for(m=0;m<l;m++)u.push(g.readUByte()),u.push(g.readUByte()),u.push(g.readUByte());y._insertSampleInOrder(y._txtTrack.samples,{type:3,pts:p.pts,bytes:u})}}else if(a<g.bytesAvailable)for(m=0;m<a;m++)g.readUByte()}break;case 7:if(T=v=!0,!E.sps){var d=(g=new A.default(e.data)).readSPS();E.width=d.width,E.height=d.height,E.pixelRatio=d.pixelRatio,E.sps=[e.data],E.duration=y._duration;var c=e.data.subarray(1,4),f="avc1.";for(m=0;m<3;m++){var h=c[m].toString(16);h.length<2&&(h="0"+h),f+=h}E.codec=f}break;case 8:v=!0,E.pps||(E.pps=[e.data]);break;case 9:v=!1,E.audFound=!0,_&&b(_,E),_=y.avcSample=S(!1,p.pts,p.dts,"");break;case 12:v=!1;break;default:v=!1,_&&(_.debug+="unknown NAL "+e.type+" ")}_&&v&&_.units.push(e)}),e&&_&&(b(_,E),this.avcSample=null)},I.prototype._insertSampleInOrder=function(e,t){var r=e.length;if(0<r){if(t.pts>=e[r-1].pts)e.push(t);else for(var i=r-1;0<=i;i--)if(t.pts<e[i].pts){e.splice(i,0,t);break}}else e.push(t)},I.prototype._getLastNalUnit=function(){var e,t=this.avcSample;if(!t||0===t.units.length){var r=this._avcTrack.samples;t=r[r.length-1]}if(t){var i=t.units;e=i[i.length-1]}return e},I.prototype._parseAVCNALu=function(e){var t,r,i,a,n=0,s=e.byteLength,o=this._avcTrack,l=o.naluState||0,u=l,d=[],c=-1;for(-1===l&&(a=31&e[c=0],l=0,n=1);n<s;)if(t=e[n++],l)if(1!==l)if(t)if(1===t){var f,h;if(0<=c)i={data:e.subarray(c,n-l-1),type:a},d.push(i);else if(f=this._getLastNalUnit())if(u&&n<=4-u&&f.state&&(f.data=f.data.subarray(0,f.data.byteLength-u)),0<(r=n-l-1))(h=new Uint8Array(f.data.byteLength+r)).set(f.data,0),h.set(e.subarray(0,r),f.data.byteLength),f.data=h;l=n<s?(a=31&e[c=n],0):-1}else l=0;else l=3;else l=t?0:2;else l=t?0:1;(0<=c&&0<=l&&(i={data:e.subarray(c,s),type:a,state:l},d.push(i)),0===d.length)&&((f=this._getLastNalUnit())&&((h=new Uint8Array(f.data.byteLength+e.byteLength)).set(f.data,0),h.set(e,f.data.byteLength),f.data=h));return o.naluState=l,d},I.prototype.discardEPB=function(e){for(var t,r,i=e.byteLength,a=[],n=1;n<i-2;)0===e[n]&&0===e[n+1]&&3===e[n+2]?(a.push(n+2),n+=2):n++;if(0===a.length)return e;t=i-a.length,r=new Uint8Array(t);var s=0;for(n=0;n<t;s++,n++)s===a[0]&&(s++,a.shift()),r[n]=e[s];return r},I.prototype._parseAACPES=function(e){var t,r,i,a,n,s=this._audioTrack,o=e.data,l=e.pts,u=this.aacOverFlow,d=this.aacLastPTS;if(u){var c=new Uint8Array(u.byteLength+o.byteLength);c.set(u,0),c.set(o,u.byteLength),o=c}for(i=0,n=o.length;i<n-1&&!v.isHeader(o,i);i++);if(i){var f=void 0,h=void 0;if(h=i<n-1?(f="AAC PES did not start with ADTS header,offset:"+i,!1):(f="no ADTS header found in AAC PES",!0),C.logger.warn("parsing error:"+f),this.observer.trigger(P.default.ERROR,{type:x.ErrorTypes.MEDIA_ERROR,details:x.ErrorDetails.FRAG_PARSING_ERROR,fatal:h,reason:f}),h)return}if(v.initTrackConfig(s,this.observer,o,i,this.audioCodec),r=0,t=v.getFrameDuration(s.samplerate),u&&d){var p=d+t;1<Math.abs(p-l)&&(C.logger.log("AAC: align PTS for overlapping frames by "+Math.round((p-l)/90)),l=p)}for(;i<n;)if(v.isHeader(o,i)&&i+5<n){var g=v.appendFrame(s,o,i,l,r);if(!g)break;i+=g.length,a=g.sample.pts,r++}else i++;u=i<n?o.subarray(i,n):null,this.aacOverFlow=u,this.aacLastPTS=a},I.prototype._parseMPEGPES=function(e){for(var t=e.data,r=t.length,i=0,a=0,n=e.pts;a<r;)if(o.default.isHeader(t,a)){var s=o.default.appendFrame(this._audioTrack,t,a,n,i);if(!s)break;a+=s.length,i++}else a++},I.prototype._parseID3PES=function(e){this._id3Track.samples.push(e)},I}();t.default=n},"./src/errors.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorTypes={NETWORK_ERROR:"networkError",MEDIA_ERROR:"mediaError",KEY_SYSTEM_ERROR:"keySystemError",MUX_ERROR:"muxError",OTHER_ERROR:"otherError"},t.ErrorDetails={KEY_SYSTEM_NO_KEYS:"keySystemNoKeys",KEY_SYSTEM_NO_ACCESS:"keySystemNoAccess",KEY_SYSTEM_NO_SESSION:"keySystemNoSession",KEY_SYSTEM_LICENSE_REQUEST_FAILED:"keySystemLicenseRequestFailed",MANIFEST_LOAD_ERROR:"manifestLoadError",MANIFEST_LOAD_TIMEOUT:"manifestLoadTimeOut",MANIFEST_PARSING_ERROR:"manifestParsingError",MANIFEST_INCOMPATIBLE_CODECS_ERROR:"manifestIncompatibleCodecsError",LEVEL_LOAD_ERROR:"levelLoadError",LEVEL_LOAD_TIMEOUT:"levelLoadTimeOut",LEVEL_SWITCH_ERROR:"levelSwitchError",AUDIO_TRACK_LOAD_ERROR:"audioTrackLoadError",AUDIO_TRACK_LOAD_TIMEOUT:"audioTrackLoadTimeOut",FRAG_LOAD_ERROR:"fragLoadError",FRAG_LOAD_TIMEOUT:"fragLoadTimeOut",FRAG_DECRYPT_ERROR:"fragDecryptError",FRAG_PARSING_ERROR:"fragParsingError",REMUX_ALLOC_ERROR:"remuxAllocError",KEY_LOAD_ERROR:"keyLoadError",KEY_LOAD_TIMEOUT:"keyLoadTimeOut",BUFFER_ADD_CODEC_ERROR:"bufferAddCodecError",BUFFER_APPEND_ERROR:"bufferAppendError",BUFFER_APPENDING_ERROR:"bufferAppendingError",BUFFER_STALLED_ERROR:"bufferStalledError",BUFFER_FULL_ERROR:"bufferFullError",BUFFER_SEEK_OVER_HOLE:"bufferSeekOverHole",BUFFER_NUDGE_ON_STALL:"bufferNudgeOnStall",INTERNAL_EXCEPTION:"internalException"}},"./src/event-handler.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./src/utils/logger.js"),a=r("./src/errors.js"),n=r("./src/events.js"),s={hlsEventGeneric:!0,hlsHandlerDestroying:!0,hlsHandlerDestroyed:!0},o=function(){function e(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.hls=e,this.onEvent=this.onEvent.bind(this),this.handledEvents=t,this.useGenericHandler=!0,this.registerListeners()}return e.prototype.destroy=function(){this.onHandlerDestroying(),this.unregisterListeners(),this.onHandlerDestroyed()},e.prototype.onHandlerDestroying=function(){},e.prototype.onHandlerDestroyed=function(){},e.prototype.isEventHandler=function(){return"object"==typeof this.handledEvents&&this.handledEvents.length&&"function"==typeof this.onEvent},e.prototype.registerListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(e){if(s[e])throw new Error("Forbidden event-name: "+e);this.hls.on(e,this.onEvent)},this)},e.prototype.unregisterListeners=function(){this.isEventHandler()&&this.handledEvents.forEach(function(e){this.hls.off(e,this.onEvent)},this)},e.prototype.onEvent=function(e,t){this.onEventGeneric(e,t)},e.prototype.onEventGeneric=function(t,e){try{(function(e,t){var r="on"+e.replace("hls","");if("function"!=typeof this[r])throw new Error("Event "+e+" has no generic handler in this "+this.constructor.name+" class (tried "+r+")");return this[r].bind(this,t)}).call(this,t,e).call()}catch(e){i.logger.error("An internal error happened while handling event "+t+'. Error message: "'+e.message+'". Here is a stacktrace:',e),this.hls.trigger(n.default.ERROR,{type:a.ErrorTypes.OTHER_ERROR,details:a.ErrorDetails.INTERNAL_EXCEPTION,fatal:!1,event:t,err:e})}},e}();t.default=o},"./src/events.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={MEDIA_ATTACHING:"hlsMediaAttaching",MEDIA_ATTACHED:"hlsMediaAttached",MEDIA_DETACHING:"hlsMediaDetaching",MEDIA_DETACHED:"hlsMediaDetached",BUFFER_RESET:"hlsBufferReset",BUFFER_CODECS:"hlsBufferCodecs",BUFFER_CREATED:"hlsBufferCreated",BUFFER_APPENDING:"hlsBufferAppending",BUFFER_APPENDED:"hlsBufferAppended",BUFFER_EOS:"hlsBufferEos",BUFFER_FLUSHING:"hlsBufferFlushing",BUFFER_FLUSHED:"hlsBufferFlushed",MANIFEST_LOADING:"hlsManifestLoading",MANIFEST_LOADED:"hlsManifestLoaded",MANIFEST_PARSED:"hlsManifestParsed",LEVEL_SWITCHING:"hlsLevelSwitching",LEVEL_SWITCHED:"hlsLevelSwitched",LEVEL_LOADING:"hlsLevelLoading",LEVEL_LOADED:"hlsLevelLoaded",LEVEL_UPDATED:"hlsLevelUpdated",LEVEL_PTS_UPDATED:"hlsLevelPtsUpdated",AUDIO_TRACKS_UPDATED:"hlsAudioTracksUpdated",AUDIO_TRACK_SWITCHING:"hlsAudioTrackSwitching",AUDIO_TRACK_SWITCHED:"hlsAudioTrackSwitched",AUDIO_TRACK_LOADING:"hlsAudioTrackLoading",AUDIO_TRACK_LOADED:"hlsAudioTrackLoaded",SUBTITLE_TRACKS_UPDATED:"hlsSubtitleTracksUpdated",SUBTITLE_TRACK_SWITCH:"hlsSubtitleTrackSwitch",SUBTITLE_TRACK_LOADING:"hlsSubtitleTrackLoading",SUBTITLE_TRACK_LOADED:"hlsSubtitleTrackLoaded",SUBTITLE_FRAG_PROCESSED:"hlsSubtitleFragProcessed",INIT_PTS_FOUND:"hlsInitPtsFound",FRAG_LOADING:"hlsFragLoading",FRAG_LOAD_PROGRESS:"hlsFragLoadProgress",FRAG_LOAD_EMERGENCY_ABORTED:"hlsFragLoadEmergencyAborted",FRAG_LOADED:"hlsFragLoaded",FRAG_DECRYPTED:"hlsFragDecrypted",FRAG_PARSING_INIT_SEGMENT:"hlsFragParsingInitSegment",FRAG_PARSING_USERDATA:"hlsFragParsingUserdata",FRAG_PARSING_METADATA:"hlsFragParsingMetadata",FRAG_PARSING_DATA:"hlsFragParsingData",FRAG_PARSED:"hlsFragParsed",FRAG_BUFFERED:"hlsFragBuffered",FRAG_CHANGED:"hlsFragChanged",FPS_DROP:"hlsFpsDrop",FPS_DROP_LEVEL_CAPPING:"hlsFpsDropLevelCapping",ERROR:"hlsError",DESTROYING:"hlsDestroying",KEY_LOADING:"hlsKeyLoading",KEY_LOADED:"hlsKeyLoaded",STREAM_STATE_TRANSITION:"hlsStreamStateTransition"}},"./src/hls.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/url-toolkit/src/url-toolkit.js"),s=r("./src/errors.js"),b=r("./src/loader/playlist-loader.js"),S=r("./src/loader/fragment-loader.js"),A=r("./src/loader/key-loader.js"),R=r("./src/controller/fragment-tracker.js"),D=r("./src/controller/stream-controller.js"),L=r("./src/controller/level-controller.js"),w=r("./src/controller/id3-track-controller.js"),o=r("./src/is-supported.js"),O=r("./src/utils/logger.js"),l=r("./src/config.js"),u=r("./src/events.js"),d=function(_){function T(e){void 0===e&&(e={});var t=_.call(this)||this,r=T.DefaultConfig;if((e.liveSyncDurationCount||e.liveMaxLatencyDurationCount)&&(e.liveSyncDuration||e.liveMaxLatencyDuration))throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");for(var i in r)i in e||(e[i]=r[i]);if(void 0!==e.liveMaxLatencyDurationCount&&e.liveMaxLatencyDurationCount<=e.liveSyncDurationCount)throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');if(void 0!==e.liveMaxLatencyDuration&&(e.liveMaxLatencyDuration<=e.liveSyncDuration||void 0===e.liveSyncDuration))throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');O.enableLogs(e.debug),t.config=e,t._autoLevelCapping=-1;var a=t.abrController=new e.abrController(t),n=new e.bufferController(t),s=new e.capLevelController(t),o=new e.fpsController(t),l=new b.default(t),u=new S.default(t),d=new A.default(t),c=new w.default(t),f=t.levelController=new L.default(t),h=new R.FragmentTracker(t),p=[f,t.streamController=new D.default(t,h)],g=e.audioStreamController;g&&p.push(new g(t,h)),t.networkControllers=p;var v=[l,u,d,a,n,s,o,c,h];if(g=e.audioTrackController){var m=new g(t);t.audioTrackController=m,v.push(m)}if(g=e.subtitleTrackController){var y=new g(t);t.subtitleTrackController=y,v.push(y)}if(g=e.emeController){var E=new g(t);t.emeController=E,v.push(E)}return(g=e.subtitleStreamController)&&v.push(new g(t,h)),(g=e.timelineController)&&v.push(new g(t)),t.coreComponents=v,t}return a(T,_),Object.defineProperty(T,"version",{get:function(){return"0.12.2"},enumerable:!0,configurable:!0}),T.isSupported=function(){return o.isSupported()},Object.defineProperty(T,"Events",{get:function(){return u.default},enumerable:!0,configurable:!0}),Object.defineProperty(T,"ErrorTypes",{get:function(){return s.ErrorTypes},enumerable:!0,configurable:!0}),Object.defineProperty(T,"ErrorDetails",{get:function(){return s.ErrorDetails},enumerable:!0,configurable:!0}),Object.defineProperty(T,"DefaultConfig",{get:function(){return T.defaultConfig?T.defaultConfig:l.hlsDefaultConfig},set:function(e){T.defaultConfig=e},enumerable:!0,configurable:!0}),T.prototype.destroy=function(){O.logger.log("destroy"),this.trigger(u.default.DESTROYING),this.detachMedia(),this.coreComponents.concat(this.networkControllers).forEach(function(e){e.destroy()}),this.url=null,this.removeAllListeners(),this._autoLevelCapping=-1},T.prototype.attachMedia=function(e){O.logger.log("attachMedia"),this.media=e,this.trigger(u.default.MEDIA_ATTACHING,{media:e})},T.prototype.detachMedia=function(){O.logger.log("detachMedia"),this.trigger(u.default.MEDIA_DETACHING),this.media=null},T.prototype.loadSource=function(e){e=n.buildAbsoluteURL(window.location.href,e,{alwaysNormalize:!0}),O.logger.log("loadSource:"+e),this.url=e,this.trigger(u.default.MANIFEST_LOADING,{url:e})},T.prototype.startLoad=function(t){void 0===t&&(t=-1),O.logger.log("startLoad("+t+")"),this.networkControllers.forEach(function(e){e.startLoad(t)})},T.prototype.stopLoad=function(){O.logger.log("stopLoad"),this.networkControllers.forEach(function(e){e.stopLoad()})},T.prototype.swapAudioCodec=function(){O.logger.log("swapAudioCodec"),this.streamController.swapAudioCodec()},T.prototype.recoverMediaError=function(){O.logger.log("recoverMediaError");var e=this.media;this.detachMedia(),this.attachMedia(e)},Object.defineProperty(T.prototype,"levels",{get:function(){return this.levelController.levels},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"currentLevel",{get:function(){return this.streamController.currentLevel},set:function(e){O.logger.log("set currentLevel:"+e),this.loadLevel=e,this.streamController.immediateLevelSwitch()},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"nextLevel",{get:function(){return this.streamController.nextLevel},set:function(e){O.logger.log("set nextLevel:"+e),this.levelController.manualLevel=e,this.streamController.nextLevelSwitch()},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"loadLevel",{get:function(){return this.levelController.level},set:function(e){O.logger.log("set loadLevel:"+e),this.levelController.manualLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"nextLoadLevel",{get:function(){return this.levelController.nextLoadLevel},set:function(e){this.levelController.nextLoadLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"firstLevel",{get:function(){return Math.max(this.levelController.firstLevel,this.minAutoLevel)},set:function(e){O.logger.log("set firstLevel:"+e),this.levelController.firstLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"startLevel",{get:function(){return this.levelController.startLevel},set:function(e){O.logger.log("set startLevel:"+e);-1!==e&&(e=Math.max(e,this.minAutoLevel)),this.levelController.startLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"autoLevelCapping",{get:function(){return this._autoLevelCapping},set:function(e){O.logger.log("set autoLevelCapping:"+e),this._autoLevelCapping=e},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"autoLevelEnabled",{get:function(){return-1===this.levelController.manualLevel},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"manualLevel",{get:function(){return this.levelController.manualLevel},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"minAutoLevel",{get:function(){for(var e=this.levels,t=this.config.minAutoBitrate,r=e?e.length:0,i=0;i<r;i++){if(t<(e[i].realBitrate?Math.max(e[i].realBitrate,e[i].bitrate):e[i].bitrate))return i}return 0},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"maxAutoLevel",{get:function(){var e=this.levels,t=this.autoLevelCapping;return-1===t&&e&&e.length?e.length-1:t},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"nextAutoLevel",{get:function(){return Math.min(Math.max(this.abrController.nextAutoLevel,this.minAutoLevel),this.maxAutoLevel)},set:function(e){this.abrController.nextAutoLevel=Math.max(this.minAutoLevel,e)},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"audioTracks",{get:function(){var e=this.audioTrackController;return e?e.audioTracks:[]},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"audioTrack",{get:function(){var e=this.audioTrackController;return e?e.audioTrack:-1},set:function(e){var t=this.audioTrackController;t&&(t.audioTrack=e)},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"liveSyncPosition",{get:function(){return this.streamController.liveSyncPosition},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"subtitleTracks",{get:function(){var e=this.subtitleTrackController;return e?e.subtitleTracks:[]},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"subtitleTrack",{get:function(){var e=this.subtitleTrackController;return e?e.subtitleTrack:-1},set:function(e){var t=this.subtitleTrackController;t&&(t.subtitleTrack=e)},enumerable:!0,configurable:!0}),Object.defineProperty(T.prototype,"subtitleDisplay",{get:function(){var e=this.subtitleTrackController;return!!e&&e.subtitleDisplay},set:function(e){var t=this.subtitleTrackController;t&&(t.subtitleDisplay=e)},enumerable:!0,configurable:!0}),T}(r("./src/observer.js").Observer);t.default=d},"./src/is-supported.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=r("./src/utils/mediasource-helper.js");t.isSupported=function(){var e=a.getMediaSource(),t=window.SourceBuffer||window.WebKitSourceBuffer,r=e&&"function"==typeof e.isTypeSupported&&e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),i=!t||t.prototype&&"function"==typeof t.prototype.appendBuffer&&"function"==typeof t.prototype.remove;return!!r&&!!i}},"./src/loader/fragment-loader.js":function(e,a,o){"use strict";(function(h){var i,t=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(a,"__esModule",{value:!0});var s=o("./src/events.js"),e=o("./src/event-handler.js"),n=o("./src/errors.js"),p=o("./src/utils/logger.js"),r=function(i){function e(e){var t=i.call(this,e,s.default.FRAG_LOADING)||this;return t.loaders={},t}return t(e,i),e.prototype.destroy=function(){var e=this.loaders;for(var t in e){var r=e[t];r&&r.destroy()}this.loaders={},i.prototype.destroy.call(this)},e.prototype.onFragLoading=function(e){var t=e.frag,r=t.type,i=this.loaders,a=this.hls.config,n=a.fLoader,s=a.loader;t.loaded=0;var o,l,u,d=i[r];d&&(p.logger.warn("abort previous fragment loader for type: "+r),d.abort()),d=i[r]=t.loader=a.fLoader?new n(a):new s(a),o={url:t.url,frag:t,responseType:"arraybuffer",progressData:!1};var c=t.byteRangeStartOffset,f=t.byteRangeEndOffset;h.isFinite(c)&&h.isFinite(f)&&(o.rangeStart=c,o.rangeEnd=f),l={timeout:a.fragLoadingTimeOut,maxRetry:0,retryDelay:0,maxRetryDelay:a.fragLoadingMaxRetryTimeout},u={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this),onProgress:this.loadprogress.bind(this)},d.load(o,l,u)},e.prototype.loadsuccess=function(e,t,r,i){void 0===i&&(i=null);var a=e.data,n=r.frag;n.loader=void 0,this.loaders[n.type]=void 0,this.hls.trigger(s.default.FRAG_LOADED,{payload:a,frag:n,stats:t,networkDetails:i})},e.prototype.loaderror=function(e,t,r){void 0===r&&(r=null);var i=t.frag,a=i.loader;a&&a.abort(),this.loaders[i.type]=void 0,this.hls.trigger(s.default.ERROR,{type:n.ErrorTypes.NETWORK_ERROR,details:n.ErrorDetails.FRAG_LOAD_ERROR,fatal:!1,frag:t.frag,response:e,networkDetails:r})},e.prototype.loadtimeout=function(e,t,r){void 0===r&&(r=null);var i=t.frag,a=i.loader;a&&a.abort(),this.loaders[i.type]=void 0,this.hls.trigger(s.default.ERROR,{type:n.ErrorTypes.NETWORK_ERROR,details:n.ErrorDetails.FRAG_LOAD_TIMEOUT,fatal:!1,frag:t.frag,networkDetails:r})},e.prototype.loadprogress=function(e,t,r,i){void 0===i&&(i=null);var a=t.frag;a.loaded=e.loaded,this.hls.trigger(s.default.FRAG_LOAD_PROGRESS,{frag:a,stats:e,networkDetails:i})},e}(e.default);a.default=r}).call(this,o("./src/polyfills/number.js").Number)},"./src/loader/fragment.js":function(e,a,n){"use strict";(function(r){Object.defineProperty(a,"__esModule",{value:!0});var e=n("./node_modules/url-toolkit/src/url-toolkit.js"),i=n("./src/loader/level-key.js"),t=function(){function t(){var e;this._url=null,this._byteRange=null,this._decryptdata=null,this.tagList=[],this.programDateTime=null,this.rawProgramDateTime=null,this._elementaryStreams=((e={})[t.ElementaryStreamTypes.AUDIO]=!1,e[t.ElementaryStreamTypes.VIDEO]=!1,e)}return Object.defineProperty(t,"ElementaryStreamTypes",{get:function(){return{AUDIO:"audio",VIDEO:"video"}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"url",{get:function(){return!this._url&&this.relurl&&(this._url=e.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:!0})),this._url},set:function(e){this._url=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"byteRange",{get:function(){if(!this._byteRange&&!this.rawByteRange)return[];if(this._byteRange)return this._byteRange;var e=[];if(this.rawByteRange){var t=this.rawByteRange.split("@",2);if(1===t.length){var r=this.lastByteRangeEndOffset;e[0]=r||0}else e[0]=parseInt(t[1]);e[1]=parseInt(t[0])+e[0],this._byteRange=e}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"byteRangeStartOffset",{get:function(){return this.byteRange[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"byteRangeEndOffset",{get:function(){return this.byteRange[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"decryptdata",{get:function(){return this._decryptdata||(this._decryptdata=this.fragmentDecryptdataFromLevelkey(this.levelkey,this.sn)),this._decryptdata},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"endProgramDateTime",{get:function(){if(!r.isFinite(this.programDateTime))return null;var e=r.isFinite(this.duration)?this.duration:0;return this.programDateTime+1e3*e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"encrypted",{get:function(){return!(!this.decryptdata||null===this.decryptdata.uri||null!==this.decryptdata.key)},enumerable:!0,configurable:!0}),t.prototype.addElementaryStream=function(e){this._elementaryStreams[e]=!0},t.prototype.hasElementaryStream=function(e){return!0===this._elementaryStreams[e]},t.prototype.createInitializationVector=function(e){for(var t=new Uint8Array(16),r=12;r<16;r++)t[r]=e>>8*(15-r)&255;return t},t.prototype.fragmentDecryptdataFromLevelkey=function(e,t){var r=e;return e&&e.method&&e.uri&&!e.iv&&((r=new i.default).method=e.method,r.baseuri=e.baseuri,r.reluri=e.reluri,r.iv=this.createInitializationVector(t)),r},t}();a.default=t}).call(this,n("./src/polyfills/number.js").Number)},"./src/loader/key-loader.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var d=r("./src/events.js"),n=r("./src/event-handler.js"),s=r("./src/errors.js"),c=r("./src/utils/logger.js"),o=function(r){function e(e){var t=r.call(this,e,d.default.KEY_LOADING)||this;return t.loaders={},t.decryptkey=null,t.decrypturl=null,t}return a(e,r),e.prototype.destroy=function(){for(var e in this.loaders){var t=this.loaders[e];t&&t.destroy()}this.loaders={},n.default.prototype.destroy.call(this)},e.prototype.onKeyLoading=function(e){var t=e.frag,r=t.type,i=this.loaders[r],a=t.decryptdata,n=a.uri;if(n!==this.decrypturl||null===this.decryptkey){var s=this.hls.config;i&&(c.logger.warn("abort previous key loader for type:"+r),i.abort()),t.loader=this.loaders[r]=new s.loader(s),this.decrypturl=n,this.decryptkey=null;var o,l,u;o={url:n,frag:t,responseType:"arraybuffer"},l={timeout:s.fragLoadingTimeOut,maxRetry:0,retryDelay:s.fragLoadingRetryDelay,maxRetryDelay:s.fragLoadingMaxRetryTimeout},u={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)},t.loader.load(o,l,u)}else this.decryptkey&&(a.key=this.decryptkey,this.hls.trigger(d.default.KEY_LOADED,{frag:t}))},e.prototype.loadsuccess=function(e,t,r){var i=r.frag;this.decryptkey=i.decryptdata.key=new Uint8Array(e.data),i.loader=void 0,this.loaders[i.type]=void 0,this.hls.trigger(d.default.KEY_LOADED,{frag:i})},e.prototype.loaderror=function(e,t){var r=t.frag,i=r.loader;i&&i.abort(),this.loaders[t.type]=void 0,this.hls.trigger(d.default.ERROR,{type:s.ErrorTypes.NETWORK_ERROR,details:s.ErrorDetails.KEY_LOAD_ERROR,fatal:!1,frag:r,response:e})},e.prototype.loadtimeout=function(e,t){var r=t.frag,i=r.loader;i&&i.abort(),this.loaders[t.type]=void 0,this.hls.trigger(d.default.ERROR,{type:s.ErrorTypes.NETWORK_ERROR,details:s.ErrorDetails.KEY_LOAD_TIMEOUT,fatal:!1,frag:r})},e}(n.default);t.default=o},"./src/loader/level-key.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./node_modules/url-toolkit/src/url-toolkit.js"),a=function(){function e(){this.method=null,this.key=null,this.iv=null,this._uri=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return!this._uri&&this.reluri&&(this._uri=i.buildAbsoluteURL(this.baseuri,this.reluri,{alwaysNormalize:!0})),this._uri},enumerable:!0,configurable:!0}),e}();t.default=a},"./src/loader/level.js":function(e,r,t){"use strict";(function(t){Object.defineProperty(r,"__esModule",{value:!0});var e=function(){function e(e){this.endCC=0,this.endSN=0,this.fragments=[],this.initSegment=null,this.live=!0,this.needSidxRanges=!1,this.startCC=0,this.startSN=0,this.startTimeOffset=null,this.targetduration=0,this.totalduration=0,this.type=null,this.url=e,this.version=null}return Object.defineProperty(e.prototype,"hasProgramDateTime",{get:function(){return!(!this.fragments[0]||!t.isFinite(this.fragments[0].programDateTime))},enumerable:!0,configurable:!0}),e}();r.default=e}).call(this,t("./src/polyfills/number.js").Number)},"./src/loader/m3u8-parser.js":function(e,t,i){"use strict";(function(O){Object.defineProperty(t,"__esModule",{value:!0});var r=i("./node_modules/url-toolkit/src/url-toolkit.js"),k=i("./src/loader/fragment.js"),I=i("./src/loader/level.js"),P=i("./src/loader/level-key.js"),C=i("./src/utils/attr-list.js"),x=i("./src/utils/logger.js"),l=i("./src/utils/codecs.js"),u=/#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g,c=/#EXT-X-MEDIA:(.*)/g,M=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/|(?!#)([\S+ ?]+)/.source,/|#EXT-X-BYTERANGE:*(.+)/.source,/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/|#.*/.source].join(""),"g"),F=/(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,N=/\.(mp4|m4s|m4v|m4a)$/i,e=function(){function d(){}return d.findGroup=function(e,t){if(!e)return null;for(var r=null,i=0;i<e.length;i++){var a=e[i];a.id===t&&(r=a)}return r},d.convertAVC1ToAVCOTI=function(e){var t,r=e.split(".");return 2<r.length?(t=r.shift()+".",t+=parseInt(r.shift()).toString(16),t+=("000"+parseInt(r.shift()).toString(16)).substr(-4)):t=e,t},d.resolve=function(e,t){return r.buildAbsoluteURL(t,e,{alwaysNormalize:!0})},d.parseMasterPlaylist=function(e,t){var r,i=[];function a(i,a){["video","audio"].forEach(function(t){var r=i.filter(function(e){return l.isCodecType(e,t)});if(r.length){var e=r.filter(function(e){return 0===e.lastIndexOf("avc1",0)||0===e.lastIndexOf("mp4a",0)});a[t+"Codec"]=0<e.length?e[0]:r[0],i=i.filter(function(e){return-1===r.indexOf(e)})}}),a.unknownCodecs=i}for(u.lastIndex=0;null!=(r=u.exec(e));){var n={},s=n.attrs=new C.default(r[1]);n.url=d.resolve(r[2],t);var o=s.decimalResolution("RESOLUTION");o&&(n.width=o.width,n.height=o.height),n.bitrate=s.decimalInteger("AVERAGE-BANDWIDTH")||s.decimalInteger("BANDWIDTH"),n.name=s.NAME,a([].concat((s.CODECS||"").split(/[ ,]+/)),n),n.videoCodec&&-1!==n.videoCodec.indexOf("avc1")&&(n.videoCodec=d.convertAVC1ToAVCOTI(n.videoCodec)),i.push(n)}return i},d.parseMasterPlaylistMedia=function(e,t,r,i){var a;void 0===i&&(i=[]);var n=[],s=0;for(c.lastIndex=0;null!==(a=c.exec(e));){var o={},l=new C.default(a[1]);if(l.TYPE===r){if(o.groupId=l["GROUP-ID"],o.name=l.NAME,o.type=r,o.default="YES"===l.DEFAULT,o.autoselect="YES"===l.AUTOSELECT,o.forced="YES"===l.FORCED,l.URI&&(o.url=d.resolve(l.URI,t)),o.lang=l.LANGUAGE,o.name||(o.name=o.lang),i.length){var u=d.findGroup(i,o.groupId);o.audioCodec=u?u.codec:i[0].codec}o.id=s++,n.push(o)}}return n},d.parseLevelPlaylist=function(e,t,r,i,a){var n,s,o=0,l=0,u=new I.default(t),d=new P.default,c=0,f=null,h=new k.default,p=null;for(M.lastIndex=0;null!==(n=M.exec(e));){var g=n[1];if(g){h.duration=parseFloat(g);var v=(" "+n[2]).slice(1);h.title=v||null,h.tagList.push(v?["INF",g,v]:["INF",g])}else if(n[3]){if(O.isFinite(h.duration)){var m=o++;h.type=i,h.start=l,h.levelkey=d,h.sn=m,h.level=r,h.cc=c,h.urlId=a,h.baseurl=t,h.relurl=(" "+n[3]).slice(1),j(h,f),u.fragments.push(h),l+=(f=h).duration,h=new k.default}}else if(n[4]){if(h.rawByteRange=(" "+n[4]).slice(1),f){var y=f.byteRangeEndOffset;y&&(h.lastByteRangeEndOffset=y)}}else if(n[5])h.rawProgramDateTime=(" "+n[5]).slice(1),h.tagList.push(["PROGRAM-DATE-TIME",h.rawProgramDateTime]),null===p&&(p=u.fragments.length);else{for(n=n[0].match(F),s=1;s<n.length&&void 0===n[s];s++);var E=(" "+n[s+1]).slice(1),_=(" "+n[s+2]).slice(1);switch(n[s]){case"#":h.tagList.push(_?[E,_]:[E]);break;case"PLAYLIST-TYPE":u.type=E.toUpperCase();break;case"MEDIA-SEQUENCE":o=u.startSN=parseInt(E);break;case"TARGETDURATION":u.targetduration=parseFloat(E);break;case"VERSION":u.version=parseInt(E);break;case"EXTM3U":break;case"ENDLIST":u.live=!1;break;case"DIS":c++,h.tagList.push(["DIS"]);break;case"DISCONTINUITY-SEQ":c=parseInt(E);break;case"KEY":var T=E,b=new C.default(T),S=b.enumeratedString("METHOD"),A=b.URI,R=b.hexadecimalInteger("IV");S&&(d=new P.default,A&&0<=["AES-128","SAMPLE-AES","SAMPLE-AES-CENC"].indexOf(S)&&(d.method=S,d.baseuri=t,d.reluri=A,d.key=null,d.iv=R));break;case"START":var D=E,L=new C.default(D).decimalFloatingPoint("TIME-OFFSET");O.isFinite(L)&&(u.startTimeOffset=L);break;case"MAP":var w=new C.default(E);h.relurl=w.URI,h.rawByteRange=w.BYTERANGE,h.baseurl=t,h.level=r,h.type=i,h.sn="initSegment",u.initSegment=h,(h=new k.default).rawProgramDateTime=u.initSegment.rawProgramDateTime;break;default:x.logger.warn("line parsed but not handled: "+n)}}}return(h=f)&&!h.relurl&&(u.fragments.pop(),l-=h.duration),u.totalduration=l,u.averagetargetduration=l/u.fragments.length,u.endSN=o-1,u.startCC=u.fragments[0]?u.fragments[0].cc:0,u.endCC=c,!u.initSegment&&u.fragments.length&&u.fragments.every(function(e){return N.test(e.relurl)})&&(x.logger.warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"),(h=new k.default).relurl=u.fragments[0].relurl,h.baseurl=t,h.level=r,h.type=i,h.sn="initSegment",u.initSegment=h,u.needSidxRanges=!0),p&&function(e,t){for(var r=e[t],i=t-1;0<=i;i--){var a=e[i];a.programDateTime=r.programDateTime-1e3*a.duration,r=a}}(u.fragments,p),u},d}();function j(e,t){e.rawProgramDateTime?e.programDateTime=Date.parse(e.rawProgramDateTime):t&&t.programDateTime&&(e.programDateTime=t.endProgramDateTime),O.isFinite(e.programDateTime)||(e.programDateTime=null,e.rawProgramDateTime=null)}t.default=e}).call(this,i("./src/polyfills/number.js").Number)},"./src/loader/playlist-loader.js":function(e,s,o){"use strict";(function(v){var i,e=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(s,"__esModule",{value:!0});var m=o("./src/events.js"),t=o("./src/event-handler.js"),l=o("./src/errors.js"),f=o("./src/utils/logger.js"),n=o("./src/demux/mp4demuxer.js"),y=o("./src/loader/m3u8-parser.js"),E=window.performance,_={MANIFEST:"manifest",LEVEL:"level",AUDIO_TRACK:"audioTrack",SUBTITLE_TRACK:"subtitleTrack"},a={MAIN:"main",AUDIO:"audio",SUBTITLE:"subtitle"},r=function(r){function g(e){var t=r.call(this,e,m.default.MANIFEST_LOADING,m.default.LEVEL_LOADING,m.default.AUDIO_TRACK_LOADING,m.default.SUBTITLE_TRACK_LOADING)||this;return t.loaders={},t}return e(g,r),Object.defineProperty(g,"ContextType",{get:function(){return _},enumerable:!0,configurable:!0}),Object.defineProperty(g,"LevelType",{get:function(){return a},enumerable:!0,configurable:!0}),g.canHaveQualityLevels=function(e){return e!==_.AUDIO_TRACK&&e!==_.SUBTITLE_TRACK},g.mapContextToLevelType=function(e){switch(e.type){case _.AUDIO_TRACK:return a.AUDIO;case _.SUBTITLE_TRACK:return a.SUBTITLE;default:return a.MAIN}},g.getResponseUrl=function(e,t){var r=e.url;return void 0!==r&&0!==r.indexOf("data:")||(r=t.url),r},g.prototype.createInternalLoader=function(e){var t=this.hls.config,r=t.pLoader,i=t.loader,a=new(r||i)(t);return e.loader=a,this.loaders[e.type]=a},g.prototype.getInternalLoader=function(e){return this.loaders[e.type]},g.prototype.resetInternalLoader=function(e){this.loaders[e]&&delete this.loaders[e]},g.prototype.destroyInternalLoaders=function(){for(var e in this.loaders){var t=this.loaders[e];t&&t.destroy(),this.resetInternalLoader(e)}},g.prototype.destroy=function(){this.destroyInternalLoaders(),r.prototype.destroy.call(this)},g.prototype.onManifestLoading=function(e){this.load(e.url,{type:_.MANIFEST,level:0,id:null})},g.prototype.onLevelLoading=function(e){this.load(e.url,{type:_.LEVEL,level:e.level,id:e.id})},g.prototype.onAudioTrackLoading=function(e){this.load(e.url,{type:_.AUDIO_TRACK,level:null,id:e.id})},g.prototype.onSubtitleTrackLoading=function(e){this.load(e.url,{type:_.SUBTITLE_TRACK,level:null,id:e.id})},g.prototype.load=function(e,t){var r=this.hls.config;f.logger.debug("Loading playlist of type "+t.type+", level: "+t.level+", id: "+t.id);var i,a,n,s,o=this.getInternalLoader(t);if(o){var l=o.context;if(l&&l.url===e)return f.logger.trace("playlist request ongoing"),!1;f.logger.warn("aborting previous loader for type: "+t.type),o.abort()}switch(t.type){case _.MANIFEST:i=r.manifestLoadingMaxRetry,a=r.manifestLoadingTimeOut,n=r.manifestLoadingRetryDelay,s=r.manifestLoadingMaxRetryTimeout;break;case _.LEVEL:i=0,a=r.levelLoadingTimeOut;break;default:i=r.levelLoadingMaxRetry,a=r.levelLoadingTimeOut,n=r.levelLoadingRetryDelay,s=r.levelLoadingMaxRetryTimeout}o=this.createInternalLoader(t),t.url=e,t.responseType=t.responseType||"";var u={timeout:a,maxRetry:i,retryDelay:n,maxRetryDelay:s},d={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};return f.logger.debug("Calling internal loader delegate for URL: "+e),o.load(t,u,d),!0},g.prototype.loadsuccess=function(e,t,r,i){if(void 0===i&&(i=null),r.isSidxRequest)return this._handleSidxRequest(e,r),void this._handlePlaylistLoaded(e,t,r,i);this.resetInternalLoader(r.type);var a=e.data;t.tload=E.now(),0===a.indexOf("#EXTM3U")?0<a.indexOf("#EXTINF:")||0<a.indexOf("#EXT-X-TARGETDURATION:")?this._handleTrackOrLevelPlaylist(e,t,r,i):this._handleMasterPlaylist(e,t,r,i):this._handleManifestParsingError(e,r,"no EXTM3U delimiter",i)},g.prototype.loaderror=function(e,t,r){void 0===r&&(r=null),this._handleNetworkError(t,r,!1,e)},g.prototype.loadtimeout=function(e,t,r){void 0===r&&(r=null),this._handleNetworkError(t,r,!0)},g.prototype._handleMasterPlaylist=function(e,t,r,i){var a=this.hls,n=e.data,s=g.getResponseUrl(e,r),o=y.default.parseMasterPlaylist(n,s);if(o.length){var l=o.map(function(e){return{id:e.attrs.AUDIO,codec:e.audioCodec}}),u=y.default.parseMasterPlaylistMedia(n,s,"AUDIO",l),d=y.default.parseMasterPlaylistMedia(n,s,"SUBTITLES");if(u.length){var c=!1;u.forEach(function(e){e.url||(c=!0)}),!1===c&&o[0].audioCodec&&!o[0].attrs.AUDIO&&(f.logger.log("audio codec signaled in quality level, but no embedded audio track signaled, create one"),u.unshift({type:"main",name:"main"}))}a.trigger(m.default.MANIFEST_LOADED,{levels:o,audioTracks:u,subtitles:d,url:s,stats:t,networkDetails:i})}else this._handleManifestParsingError(e,r,"no level found in manifest",i)},g.prototype._handleTrackOrLevelPlaylist=function(e,t,r,i){var a=this.hls,n=r.id,s=r.level,o=r.type,l=g.getResponseUrl(e,r),u=v.isFinite(n)?n:0,d=v.isFinite(s)?s:u,c=g.mapContextToLevelType(r),f=y.default.parseLevelPlaylist(e.data,l,d,c,u);if(f.tload=t.tload,o===_.MANIFEST){var h={url:l,details:f};a.trigger(m.default.MANIFEST_LOADED,{levels:[h],audioTracks:[],url:l,stats:t,networkDetails:i})}if(t.tparsed=E.now(),f.needSidxRanges){var p=f.initSegment.url;this.load(p,{isSidxRequest:!0,type:o,level:s,levelDetails:f,id:n,rangeStart:0,rangeEnd:2048,responseType:"arraybuffer"})}else r.levelDetails=f,this._handlePlaylistLoaded(e,t,r,i)},g.prototype._handleSidxRequest=function(e,t){var r=n.default.parseSegmentIndex(new Uint8Array(e.data));if(r){var i=r.references,a=t.levelDetails;i.forEach(function(e,t){var r=e.info,i=a.fragments[t];0===i.byteRange.length&&(i.rawByteRange=String(1+r.end-r.start)+"@"+String(r.start))}),a.initSegment.rawByteRange=String(r.moovEndOffset)+"@0"}},g.prototype._handleManifestParsingError=function(e,t,r,i){this.hls.trigger(m.default.ERROR,{type:l.ErrorTypes.NETWORK_ERROR,details:l.ErrorDetails.MANIFEST_PARSING_ERROR,fatal:!0,url:e.url,reason:r,networkDetails:i})},g.prototype._handleNetworkError=function(e,t,r,i){var a,n;void 0===r&&(r=!1),void 0===i&&(i=null),f.logger.info("A network error occured while loading a "+e.type+"-type playlist");var s=this.getInternalLoader(e);switch(e.type){case _.MANIFEST:a=r?l.ErrorDetails.MANIFEST_LOAD_TIMEOUT:l.ErrorDetails.MANIFEST_LOAD_ERROR,n=!0;break;case _.LEVEL:a=r?l.ErrorDetails.LEVEL_LOAD_TIMEOUT:l.ErrorDetails.LEVEL_LOAD_ERROR,n=!1;break;case _.AUDIO_TRACK:a=r?l.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:l.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,n=!1;break;default:n=!1}s&&(s.abort(),this.resetInternalLoader(e.type));var o={type:l.ErrorTypes.NETWORK_ERROR,details:a,fatal:n,url:s.url,loader:s,context:e,networkDetails:t};i&&(o.response=i),this.hls.trigger(m.default.ERROR,o)},g.prototype._handlePlaylistLoaded=function(e,t,r,i){var a=r.type,n=r.level,s=r.id,o=r.levelDetails;if(o.targetduration)if(g.canHaveQualityLevels(r.type))this.hls.trigger(m.default.LEVEL_LOADED,{details:o,level:n||0,id:s||0,stats:t,networkDetails:i});else switch(a){case _.AUDIO_TRACK:this.hls.trigger(m.default.AUDIO_TRACK_LOADED,{details:o,id:s,stats:t,networkDetails:i});break;case _.SUBTITLE_TRACK:this.hls.trigger(m.default.SUBTITLE_TRACK_LOADED,{details:o,id:s,stats:t,networkDetails:i})}else this._handleManifestParsingError(e,r,"invalid target duration",i)},g}(t.default);s.default=r}).call(this,o("./src/polyfills/number.js").Number)},"./src/observer.js":function(e,t,r){"use strict";var i,a=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.trigger=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.emit.apply(this,[e,e].concat(t))},t}(r("./node_modules/eventemitter3/index.js").EventEmitter);t.Observer=n},"./src/polyfills/number.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./src/utils/get-self-scope.js").getSelfScope().Number;(t.Number=i).isFinite=i.isFinite||function(e){return"number"==typeof e&&isFinite(e)}},"./src/remux/aac-helper.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.getSilentFrame=function(e,t){switch(e){case"mp4a.40.2":if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]);break;default:if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null},e}();t.default=i},"./src/remux/mp4-generator.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Math.pow(2,32)-1,i=function(){function f(){}return f.init=function(){var e;for(e in f.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]})f.types.hasOwnProperty(e)&&(f.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]);var t=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),r=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);f.HDLR_TYPES={video:t,audio:r};var i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),a=new Uint8Array([0,0,0,0,0,0,0,0]);f.STTS=f.STSC=f.STCO=a,f.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),f.VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),f.SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),f.STSD=new Uint8Array([0,0,0,0,0,0,0,1]);var n=new Uint8Array([105,115,111,109]),s=new Uint8Array([97,118,99,49]),o=new Uint8Array([0,0,0,1]);f.FTYP=f.box(f.types.ftyp,n,o,n,s),f.DINF=f.box(f.types.dinf,f.box(f.types.dref,i))},f.box=function(e){for(var t,r=Array.prototype.slice.call(arguments,1),i=8,a=r.length,n=a;a--;)i+=r[a].byteLength;for((t=new Uint8Array(i))[0]=i>>24&255,t[1]=i>>16&255,t[2]=i>>8&255,t[3]=255&i,t.set(e,4),a=0,i=8;a<n;a++)t.set(r[a],i),i+=r[a].byteLength;return t},f.hdlr=function(e){return f.box(f.types.hdlr,f.HDLR_TYPES[e])},f.mdat=function(e){return f.box(f.types.mdat,e)},f.mdhd=function(e,t){t*=e;var r=Math.floor(t/(o+1)),i=Math.floor(t%(o+1));return f.box(f.types.mdhd,new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,255&e,r>>24,r>>16&255,r>>8&255,255&r,i>>24,i>>16&255,i>>8&255,255&i,85,196,0,0]))},f.mdia=function(e){return f.box(f.types.mdia,f.mdhd(e.timescale,e.duration),f.hdlr(e.type),f.minf(e))},f.mfhd=function(e){return f.box(f.types.mfhd,new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e]))},f.minf=function(e){return"audio"===e.type?f.box(f.types.minf,f.box(f.types.smhd,f.SMHD),f.DINF,f.stbl(e)):f.box(f.types.minf,f.box(f.types.vmhd,f.VMHD),f.DINF,f.stbl(e))},f.moof=function(e,t,r){return f.box(f.types.moof,f.mfhd(e),f.traf(r,t))},f.moov=function(e){for(var t=e.length,r=[];t--;)r[t]=f.trak(e[t]);return f.box.apply(null,[f.types.moov,f.mvhd(e[0].timescale,e[0].duration)].concat(r).concat(f.mvex(e)))},f.mvex=function(e){for(var t=e.length,r=[];t--;)r[t]=f.trex(e[t]);return f.box.apply(null,[f.types.mvex].concat(r))},f.mvhd=function(e,t){t*=e;var r=Math.floor(t/(o+1)),i=Math.floor(t%(o+1)),a=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,255&e,r>>24,r>>16&255,r>>8&255,255&r,i>>24,i>>16&255,i>>8&255,255&i,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return f.box(f.types.mvhd,a)},f.sdtp=function(e){var t,r,i=e.samples||[],a=new Uint8Array(4+i.length);for(r=0;r<i.length;r++)t=i[r].flags,a[r+4]=t.dependsOn<<4|t.isDependedOn<<2|t.hasRedundancy;return f.box(f.types.sdtp,a)},f.stbl=function(e){return f.box(f.types.stbl,f.stsd(e),f.box(f.types.stts,f.STTS),f.box(f.types.stsc,f.STSC),f.box(f.types.stsz,f.STSZ),f.box(f.types.stco,f.STCO))},f.avc1=function(e){var t,r,i,a=[],n=[];for(t=0;t<e.sps.length;t++)i=(r=e.sps[t]).byteLength,a.push(i>>>8&255),a.push(255&i),a=a.concat(Array.prototype.slice.call(r));for(t=0;t<e.pps.length;t++)i=(r=e.pps[t]).byteLength,n.push(i>>>8&255),n.push(255&i),n=n.concat(Array.prototype.slice.call(r));var s=f.box(f.types.avcC,new Uint8Array([1,a[3],a[4],a[5],255,224|e.sps.length].concat(a).concat([e.pps.length]).concat(n))),o=e.width,l=e.height,u=e.pixelRatio[0],d=e.pixelRatio[1];return f.box(f.types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,o>>8&255,255&o,l>>8&255,255&l,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),s,f.box(f.types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192])),f.box(f.types.pasp,new Uint8Array([u>>24,u>>16&255,u>>8&255,255&u,d>>24,d>>16&255,d>>8&255,255&d])))},f.esds=function(e){var t=e.config.length;return new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e.config).concat([6,1,2]))},f.mp4a=function(e){var t=e.samplerate;return f.box(f.types.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,t>>8&255,255&t,0,0]),f.box(f.types.esds,f.esds(e)))},f.mp3=function(e){var t=e.samplerate;return f.box(f.types[".mp3"],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,t>>8&255,255&t,0,0]))},f.stsd=function(e){return"audio"===e.type?e.isAAC||"mp3"!==e.codec?f.box(f.types.stsd,f.STSD,f.mp4a(e)):f.box(f.types.stsd,f.STSD,f.mp3(e)):f.box(f.types.stsd,f.STSD,f.avc1(e))},f.tkhd=function(e){var t=e.id,r=e.duration*e.timescale,i=e.width,a=e.height,n=Math.floor(r/(o+1)),s=Math.floor(r%(o+1));return f.box(f.types.tkhd,new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,0,0,0,0,n>>24,n>>16&255,n>>8&255,255&n,s>>24,s>>16&255,s>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,i>>8&255,255&i,0,0,a>>8&255,255&a,0,0]))},f.traf=function(e,t){var r=f.sdtp(e),i=e.id,a=Math.floor(t/(o+1)),n=Math.floor(t%(o+1));return f.box(f.types.traf,f.box(f.types.tfhd,new Uint8Array([0,0,0,0,i>>24,i>>16&255,i>>8&255,255&i])),f.box(f.types.tfdt,new Uint8Array([1,0,0,0,a>>24,a>>16&255,a>>8&255,255&a,n>>24,n>>16&255,n>>8&255,255&n])),f.trun(e,r.length+16+20+8+16+8+8),r)},f.trak=function(e){return e.duration=e.duration||4294967295,f.box(f.types.trak,f.tkhd(e),f.mdia(e))},f.trex=function(e){var t=e.id;return f.box(f.types.trex,new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]))},f.trun=function(e,t){var r,i,a,n,s,o,l=e.samples||[],u=l.length,d=12+16*u,c=new Uint8Array(d);for(t+=8+d,c.set([0,0,15,1,u>>>24&255,u>>>16&255,u>>>8&255,255&u,t>>>24&255,t>>>16&255,t>>>8&255,255&t],0),r=0;r<u;r++)a=(i=l[r]).duration,n=i.size,s=i.flags,o=i.cts,c.set([a>>>24&255,a>>>16&255,a>>>8&255,255&a,n>>>24&255,n>>>16&255,n>>>8&255,255&n,s.isLeading<<2|s.dependsOn,s.isDependedOn<<6|s.hasRedundancy<<4|s.paddingValue<<1|s.isNonSync,61440&s.degradPrio,15&s.degradPrio,o>>>24&255,o>>>16&255,o>>>8&255,255&o],12+16*r);return f.box(f.types.trun,c)},f.initSegment=function(e){f.types||f.init();var t,r=f.moov(e);return(t=new Uint8Array(f.FTYP.byteLength+r.byteLength)).set(f.FTYP),t.set(r,f.FTYP.byteLength),t},f}();t.default=i},"./src/remux/mp4-remuxer.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var H=r("./src/remux/aac-helper.js"),z=r("./src/remux/mp4-generator.js"),Q=r("./src/events.js"),$=r("./src/errors.js"),J=r("./src/utils/logger.js"),i=function(){function e(e,t,r,i){this.observer=e,this.config=t,this.typeSupported=r;var a=navigator.userAgent;this.isSafari=i&&-1<i.indexOf("Apple")&&a&&!a.match("CriOS"),this.ISGenerated=!1}return e.prototype.destroy=function(){},e.prototype.resetTimeStamp=function(e){this._initPTS=this._initDTS=e},e.prototype.resetInitSegment=function(){this.ISGenerated=!1},e.prototype.remux=function(e,t,r,i,a,n,s){if(this.ISGenerated||this.generateIS(e,t,a),this.ISGenerated){var o=e.samples.length,l=t.samples.length,u=a,d=a;if(o&&l){var c=(e.samples[0].pts-t.samples[0].pts)/t.inputTimeScale;u+=Math.max(0,c),d+=Math.max(0,-c)}if(o){e.timescale||(J.logger.warn("regenerate InitSegment as audio detected"),this.generateIS(e,t,a));var f=this.remuxAudio(e,u,n,s);if(l){var h=void 0;f&&(h=f.endPTS-f.startPTS),t.timescale||(J.logger.warn("regenerate InitSegment as video detected"),this.generateIS(e,t,a)),this.remuxVideo(t,d,n,h,s)}}else if(l){var p=this.remuxVideo(t,d,n,0,s);p&&e.codec&&this.remuxEmptyAudio(e,u,n,p)}}r.samples.length&&this.remuxID3(r,a),i.samples.length&&this.remuxText(i,a),this.observer.trigger(Q.default.FRAG_PARSED)},e.prototype.generateIS=function(e,t,r){var i,a,n=this.observer,s=e.samples,o=t.samples,l=this.typeSupported,u="audio/mp4",d={},c={tracks:d},f=void 0===this._initPTS;if(f&&(i=a=1/0),e.config&&s.length&&(e.timescale=e.samplerate,J.logger.log("audio sampling rate : "+e.samplerate),e.isAAC||(l.mpeg?(u="audio/mpeg",e.codec=""):l.mp3&&(e.codec="mp3")),d.audio={container:u,codec:e.codec,initSegment:!e.isAAC&&l.mpeg?new Uint8Array:z.default.initSegment([e]),metadata:{channelCount:e.channelCount}},f&&(i=a=s[0].pts-e.inputTimeScale*r)),t.sps&&t.pps&&o.length){var h=t.inputTimeScale;t.timescale=h,d.video={container:"video/mp4",codec:t.codec,initSegment:z.default.initSegment([t]),metadata:{width:t.width,height:t.height}},f&&(i=Math.min(i,o[0].pts-h*r),a=Math.min(a,o[0].dts-h*r),this.observer.trigger(Q.default.INIT_PTS_FOUND,{initPTS:i}))}Object.keys(d).length?(n.trigger(Q.default.FRAG_PARSING_INIT_SEGMENT,c),this.ISGenerated=!0,f&&(this._initPTS=i,this._initDTS=a)):n.trigger(Q.default.ERROR,{type:$.ErrorTypes.MEDIA_ERROR,details:$.ErrorDetails.FRAG_PARSING_ERROR,fatal:!1,reason:"no audio/video samples found"})},e.prototype.remuxVideo=function(e,t,r,i,a){var n,s,o,l,u,d,c,f=8,h=e.timescale,p=e.samples,g=[],v=p.length,m=this._PTSNormalize,y=this._initPTS,E=this.nextAvcDts,_=this.isSafari;if(0!==v){_&&(r|=p.length&&E&&(a&&Math.abs(t-E/h)<.1||Math.abs(p[0].pts-E-y)<h/5)),r||(E=t*h),p.forEach(function(e){e.pts=m(e.pts-y,E),e.dts=m(e.dts-y,E)}),p.sort(function(e,t){var r=e.dts-t.dts,i=e.pts-t.pts;return r||i||e.id-t.id});var T=p.reduce(function(e,t){return Math.max(Math.min(e,t.pts-t.dts),-18e3)},0);if(T<0){J.logger.warn("PTS < DTS detected in video samples, shifting DTS by "+Math.round(T/90)+" ms to overcome this issue");for(var b=0;b<p.length;b++)p[b].dts+=T}var S=p[0];u=Math.max(S.dts,0),l=Math.max(S.pts,0);var A=Math.round((u-E)/90);r&&A&&(1<A?J.logger.log("AVC:"+A+" ms hole between fragments detected,filling it"):A<-1&&J.logger.log("AVC:"+-A+" ms overlapping between fragments detected"),u=E,p[0].dts=u,l=Math.max(l-A,E),p[0].pts=l,J.logger.log("Video/PTS/DTS adjusted: "+Math.round(l/90)+"/"+Math.round(u/90)+",delta:"+A+" ms")),S=p[p.length-1],c=Math.max(S.dts,0),d=Math.max(S.pts,0,c),_&&(n=Math.round((c-u)/(p.length-1)));var R=0,D=0;for(b=0;b<v;b++){for(var L=p[b],w=L.units,O=w.length,k=0,I=0;I<O;I++)k+=w[I].data.length;D+=k,R+=O,L.length=k,L.dts=_?u+b*n:Math.max(L.dts,u),L.pts=Math.max(L.pts,L.dts)}var P=D+4*R+8;try{s=new Uint8Array(P)}catch(e){return void this.observer.trigger(Q.default.ERROR,{type:$.ErrorTypes.MUX_ERROR,details:$.ErrorDetails.REMUX_ALLOC_ERROR,fatal:!1,bytes:P,reason:"fail allocating video mdat "+P})}var C=new DataView(s.buffer);C.setUint32(0,P),s.set(z.default.types.mdat,4);for(b=0;b<v;b++){var x=p[b],M=x.units,F=0,N=void 0;for(I=0,O=M.length;I<O;I++){var j=M[I],U=j.data,B=j.data.byteLength;C.setUint32(f,B),f+=4,s.set(U,f),f+=B,F+=4+B}if(_)N=Math.max(0,n*Math.round((x.pts-x.dts)/n));else{if(b<v-1)n=p[b+1].dts-x.dts;else{var G=this.config,K=x.dts-p[0<b?b-1:b].dts;if(G.stretchShortVideoTrack){var H=G.maxBufferHole,V=Math.floor(H*h),W=(i?l+i*h:this.nextAudioPts)-x.pts;V<W?((n=W-K)<0&&(n=K),J.logger.log("It is approximately "+W/90+" ms to the next segment; using duration "+n/90+" ms for the last video frame.")):n=K}else n=K}N=Math.round(x.pts-x.dts)}g.push({size:F,duration:n,cts:N,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:x.key?2:1,isNonSync:x.key?0:1}})}this.nextAvcDts=c+n;var Y=e.dropped;if(e.len=0,e.nbNalu=0,e.dropped=0,g.length&&-1<navigator.userAgent.toLowerCase().indexOf("chrome")){var q=g[0].flags;q.dependsOn=2,q.isNonSync=0}e.samples=g,o=z.default.moof(e.sequenceNumber++,u,e),e.samples=[];var X={data1:o,data2:s,startPTS:l/h,endPTS:(d+n)/h,startDTS:u/h,endDTS:this.nextAvcDts/h,type:"video",hasAudio:!1,hasVideo:!0,nb:g.length,dropped:Y};return this.observer.trigger(Q.default.FRAG_PARSING_DATA,X),X}},e.prototype.remuxAudio=function(e,t,r,i){var a,n,s,o,l,u,d,c=e.inputTimeScale,f=e.timescale,h=c/f,p=(e.isAAC?1024:1152)*h,g=this._PTSNormalize,v=this._initPTS,m=!e.isAAC&&this.typeSupported.mpeg,y=e.samples,E=[],_=this.nextAudioPts;if(r|=y.length&&_&&(i&&Math.abs(t-_/c)<.1||Math.abs(y[0].pts-_-v)<20*p),y.forEach(function(e){e.pts=e.dts=g(e.pts-v,t*c)}),0!==(y=y.filter(function(e){return 0<=e.pts})).length){if(r||(_=i?t*c:y[0].pts),e.isAAC)for(var T=this.config.maxAudioFramesDrift,b=0,S=_;b<y.length;){var A,R=y[b];A=(C=R.pts)-S;var D=Math.abs(1e3*A/c);if(A<=-T*p)J.logger.warn("Dropping 1 audio frame @ "+(S/c).toFixed(3)+"s due to "+Math.round(D)+" ms overlap."),y.splice(b,1),e.len-=R.unit.length;else if(T*p<=A&&D<1e4&&S){var L=Math.round(A/p);J.logger.warn("Injecting "+L+" audio frame @ "+(S/c).toFixed(3)+"s due to "+Math.round(1e3*A/c)+" ms gap.");for(var w=0;w<L;w++){var O=Math.max(S,0);(s=H.default.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(J.logger.log("Unable to get silent frame for given audio codec; duplicating last frame instead."),s=R.unit.subarray()),y.splice(b,0,{unit:s,pts:O,dts:O}),e.len+=s.length,S+=p,b++}R.pts=R.dts=S,S+=p,b++}else Math.abs(A),R.pts=R.dts=S,S+=p,b++}w=0;for(var k=y.length;w<k;w++){var I=y[w],P=I.unit,C=I.pts;if(void 0!==d)n.duration=Math.round((C-d)/h);else{var x=Math.round(1e3*(C-_)/c),M=0;if(r&&e.isAAC&&x){if(0<x&&x<1e4)M=Math.round((C-_)/p),J.logger.log(x+" ms hole between AAC samples detected,filling it"),0<M&&((s=H.default.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(s=P.subarray()),e.len+=M*s.length);else if(x<-12){J.logger.log("drop overlapping AAC sample, expected/parsed/delta:"+(_/c).toFixed(3)+"s/"+(C/c).toFixed(3)+"s/"+-x+"ms"),e.len-=P.byteLength;continue}C=_}if(u=C,!(0<e.len))return;var F=m?e.len:e.len+8;a=m?0:8;try{o=new Uint8Array(F)}catch(e){return void this.observer.trigger(Q.default.ERROR,{type:$.ErrorTypes.MUX_ERROR,details:$.ErrorDetails.REMUX_ALLOC_ERROR,fatal:!1,bytes:F,reason:"fail allocating audio mdat "+F})}m||(new DataView(o.buffer).setUint32(0,F),o.set(z.default.types.mdat,4));for(b=0;b<M;b++)(s=H.default.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(J.logger.log("Unable to get silent frame for given audio codec; duplicating this frame instead."),s=P.subarray()),o.set(s,a),a+=s.byteLength,n={size:s.byteLength,cts:0,duration:1024,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},E.push(n)}o.set(P,a);var N=P.byteLength;a+=N,n={size:N,cts:0,duration:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},E.push(n),d=C}var j=0,U=E.length;if(2<=U&&(j=E[U-2].duration,n.duration=j),U){this.nextAudioPts=_=d+h*j,e.len=0,e.samples=E,l=m?new Uint8Array:z.default.moof(e.sequenceNumber++,u/h,e),e.samples=[];var B=u/c,G=_/c,K={data1:l,data2:o,startPTS:B,endPTS:G,startDTS:B,endDTS:G,type:"audio",hasAudio:!0,hasVideo:!1,nb:U};return this.observer.trigger(Q.default.FRAG_PARSING_DATA,K),K}return null}},e.prototype.remuxEmptyAudio=function(e,t,r,i){var a=e.inputTimeScale,n=a/(e.samplerate?e.samplerate:a),s=this.nextAudioPts,o=(void 0!==s?s:i.startDTS*a)+this._initDTS,l=i.endDTS*a+this._initDTS,u=1024*n,d=Math.ceil((l-o)/u),c=H.default.getSilentFrame(e.manifestCodec||e.codec,e.channelCount);if(J.logger.warn("remux empty Audio"),c){for(var f=[],h=0;h<d;h++){var p=o+h*u;f.push({unit:c,pts:p,dts:p}),e.len+=c.length}e.samples=f,this.remuxAudio(e,t,r)}else J.logger.trace("Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!")},e.prototype.remuxID3=function(e){var t,r=e.samples.length,i=e.inputTimeScale,a=this._initPTS,n=this._initDTS;if(r){for(var s=0;s<r;s++)(t=e.samples[s]).pts=(t.pts-a)/i,t.dts=(t.dts-n)/i;this.observer.trigger(Q.default.FRAG_PARSING_METADATA,{samples:e.samples})}e.samples=[]},e.prototype.remuxText=function(e){e.samples.sort(function(e,t){return e.pts-t.pts});var t,r=e.samples.length,i=e.inputTimeScale,a=this._initPTS;if(r){for(var n=0;n<r;n++)(t=e.samples[n]).pts=(t.pts-a)/i;this.observer.trigger(Q.default.FRAG_PARSING_USERDATA,{samples:e.samples})}e.samples=[]},e.prototype._PTSNormalize=function(e,t){var r;if(void 0===t)return e;for(r=t<e?-8589934592:8589934592;4294967296<Math.abs(e-t);)e+=r;return e},e}();t.default=i},"./src/remux/passthrough-remuxer.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var d=r("./src/events.js"),i=function(){function e(e){this.observer=e}return e.prototype.destroy=function(){},e.prototype.resetTimeStamp=function(){},e.prototype.resetInitSegment=function(){},e.prototype.remux=function(e,t,r,i,a,n,s,o){var l=this.observer,u="";e&&(u+="audio"),t&&(u+="video"),l.trigger(d.default.FRAG_PARSING_DATA,{data1:o,startPTS:a,startDTS:a,type:u,hasAudio:!!e,hasVideo:!!t,nb:1,dropped:0}),l.trigger(d.default.FRAG_PARSED)},e}();t.default=i},"./src/task-loop.js":function(e,t,r){"use strict";var i,n=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var a=function(a){function e(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var i=a.apply(this,[e].concat(t))||this;return i._tickInterval=null,i._tickTimer=null,i._tickCallCount=0,i._boundTick=i.tick.bind(i),i}return n(e,a),e.prototype.onHandlerDestroying=function(){this.clearNextTick(),this.clearInterval()},e.prototype.hasInterval=function(){return!!this._tickInterval},e.prototype.hasNextTick=function(){return!!this._tickTimer},e.prototype.setInterval=function(e){return!this._tickInterval&&(this._tickInterval=setInterval(this._boundTick,e),!0)},e.prototype.clearInterval=function(){return!!this._tickInterval&&(clearInterval(this._tickInterval),!(this._tickInterval=null))},e.prototype.clearNextTick=function(){return!!this._tickTimer&&(clearTimeout(this._tickTimer),!(this._tickTimer=null))},e.prototype.tick=function(){this._tickCallCount++,1===this._tickCallCount&&(this.doTick(),1<this._tickCallCount&&(this.clearNextTick(),this._tickTimer=setTimeout(this._boundTick,0)),this._tickCallCount=0)},e.prototype.doTick=function(){},e}(r("./src/event-handler.js").default);t.default=a},"./src/utils/attr-list.js":function(e,t,r){"use strict";(function(i){Object.defineProperty(t,"__esModule",{value:!0});var a=/^(\d+)x(\d+)$/,n=/\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,e=function(){function r(e){for(var t in"string"==typeof e&&(e=r.parseAttrList(e)),e)e.hasOwnProperty(t)&&(this[t]=e[t])}return r.prototype.decimalInteger=function(e){var t=parseInt(this[e],10);return t>i.MAX_SAFE_INTEGER?1/0:t},r.prototype.hexadecimalInteger=function(e){if(this[e]){var t=(this[e]||"0x").slice(2);t=(1&t.length?"0":"")+t;for(var r=new Uint8Array(t.length/2),i=0;i<t.length/2;i++)r[i]=parseInt(t.slice(2*i,2*i+2),16);return r}return null},r.prototype.hexadecimalIntegerAsNumber=function(e){var t=parseInt(this[e],16);return t>i.MAX_SAFE_INTEGER?1/0:t},r.prototype.decimalFloatingPoint=function(e){return parseFloat(this[e])},r.prototype.enumeratedString=function(e){return this[e]},r.prototype.decimalResolution=function(e){var t=a.exec(this[e]);if(null!==t)return{width:parseInt(t[1],10),height:parseInt(t[2],10)}},r.parseAttrList=function(e){var t,r={};for(n.lastIndex=0;null!==(t=n.exec(e));){var i=t[2];0===i.indexOf('"')&&i.lastIndexOf('"')===i.length-1&&(i=i.slice(1,-1)),r[t[1]]=i}return r},r}();t.default=e}).call(this,r("./src/polyfills/number.js").Number)},"./src/utils/binary-search.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={search:function(e,t){for(var r=0,i=e.length-1,a=null,n=null;r<=i;){var s=t(n=e[a=(r+i)/2|0]);if(0<s)r=a+1;else{if(!(s<0))return n;i=a-1}}return null}}},"./src/utils/buffer-helper.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.isBuffered=function(e,t){try{if(e)for(var r=e.buffered,i=0;i<r.length;i++)if(t>=r.start(i)&&t<=r.end(i))return!0}catch(e){}return!1},e.bufferInfo=function(e,t,r){try{if(e){var i=e.buffered,a=[],n=void 0;for(n=0;n<i.length;n++)a.push({start:i.start(n),end:i.end(n)});return this.bufferedInfo(a,t,r)}}catch(e){}return{len:0,start:t,end:t,nextStart:void 0}},e.bufferedInfo=function(e,t,r){var i,a,n,s,o,l=[];for(e.sort(function(e,t){var r=e.start-t.start;return r||t.end-e.end}),o=0;o<e.length;o++){var u=l.length;if(u){var d=l[u-1].end;e[o].start-d<r?e[o].end>d&&(l[u-1].end=e[o].end):l.push(e[o])}else l.push(e[o])}for(i=o=0,a=n=t;o<l.length;o++){var c=l[o].start,f=l[o].end;if(c<=t+r&&t<f)a=c,i=(n=f)-t;else if(t+r<c){s=c;break}}return{len:i,start:a,end:n,nextStart:s}},e}();t.BufferHelper=i},"./src/utils/cea-608-parser.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,128:174,129:176,130:189,131:191,132:8482,133:162,134:163,135:9834,136:224,137:32,138:232,139:226,140:234,141:238,142:244,143:251,144:193,145:201,146:211,147:218,148:220,149:252,150:8216,151:161,152:42,153:8217,154:9473,155:169,156:8480,157:8226,158:8220,159:8221,160:192,161:194,162:199,163:200,164:202,165:203,166:235,167:206,168:207,169:239,170:212,171:217,172:249,173:219,174:171,175:187,176:195,177:227,178:205,179:204,180:236,181:210,182:242,183:213,184:245,185:123,186:125,187:92,188:94,189:95,190:124,191:8764,192:196,193:228,194:214,195:246,196:223,197:165,198:164,199:9475,200:197,201:229,202:216,203:248,204:9487,205:9491,206:9495,207:9499},o=function(e){var t=e;return i.hasOwnProperty(e)&&(t=i[e]),String.fromCharCode(t)},n={17:1,18:3,21:5,22:7,23:9,16:11,19:12,20:14},s={17:2,18:4,21:6,22:8,23:10,19:13,20:15},l={25:1,26:3,29:5,30:7,31:9,24:11,27:12,28:14},u={25:2,26:4,29:6,30:8,31:10,27:13,28:15},d=["white","green","blue","cyan","red","yellow","magenta","black","transparent"],c={verboseFilter:{DATA:3,DEBUG:3,INFO:2,WARNING:2,TEXT:1,ERROR:0},time:null,verboseLevel:0,setTime:function(e){this.time=e},log:function(e,t){this.verboseFilter[e];this.verboseLevel}},f=function(e){for(var t=[],r=0;r<e.length;r++)t.push(e[r].toString(16));return t},h=function(){function e(e,t,r,i,a){this.foreground=e||"white",this.underline=t||!1,this.italics=r||!1,this.background=i||"black",this.flash=a||!1}return e.prototype.reset=function(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1},e.prototype.setStyles=function(e){for(var t=["foreground","underline","italics","background","flash"],r=0;r<t.length;r++){var i=t[r];e.hasOwnProperty(i)&&(this[i]=e[i])}},e.prototype.isDefault=function(){return"white"===this.foreground&&!this.underline&&!this.italics&&"black"===this.background&&!this.flash},e.prototype.equals=function(e){return this.foreground===e.foreground&&this.underline===e.underline&&this.italics===e.italics&&this.background===e.background&&this.flash===e.flash},e.prototype.copy=function(e){this.foreground=e.foreground,this.underline=e.underline,this.italics=e.italics,this.background=e.background,this.flash=e.flash},e.prototype.toString=function(){return"color="+this.foreground+", underline="+this.underline+", italics="+this.italics+", background="+this.background+", flash="+this.flash},e}(),a=function(){function e(e,t,r,i,a,n){this.uchar=e||" ",this.penState=new h(t,r,i,a,n)}return e.prototype.reset=function(){this.uchar=" ",this.penState.reset()},e.prototype.setChar=function(e,t){this.uchar=e,this.penState.copy(t)},e.prototype.setPenState=function(e){this.penState.copy(e)},e.prototype.equals=function(e){return this.uchar===e.uchar&&this.penState.equals(e.penState)},e.prototype.copy=function(e){this.uchar=e.uchar,this.penState.copy(e.penState)},e.prototype.isEmpty=function(){return" "===this.uchar&&this.penState.isDefault()},e}(),p=function(){function e(){this.chars=[];for(var e=0;e<100;e++)this.chars.push(new a);this.pos=0,this.currPenState=new h}return e.prototype.equals=function(e){for(var t=!0,r=0;r<100;r++)if(!this.chars[r].equals(e.chars[r])){t=!1;break}return t},e.prototype.copy=function(e){for(var t=0;t<100;t++)this.chars[t].copy(e.chars[t])},e.prototype.isEmpty=function(){for(var e=!0,t=0;t<100;t++)if(!this.chars[t].isEmpty()){e=!1;break}return e},e.prototype.setCursor=function(e){this.pos!==e&&(this.pos=e),this.pos<0?(c.log("ERROR","Negative cursor position "+this.pos),this.pos=0):100<this.pos&&(c.log("ERROR","Too large cursor position "+this.pos),this.pos=100)},e.prototype.moveCursor=function(e){var t=this.pos+e;if(1<e)for(var r=this.pos+1;r<t+1;r++)this.chars[r].setPenState(this.currPenState);this.setCursor(t)},e.prototype.backSpace=function(){this.moveCursor(-1),this.chars[this.pos].setChar(" ",this.currPenState)},e.prototype.insertChar=function(e){144<=e&&this.backSpace();var t=o(e);100<=this.pos?c.log("ERROR","Cannot insert "+e.toString(16)+" ("+t+") at position "+this.pos+". Skipping it!"):(this.chars[this.pos].setChar(t,this.currPenState),this.moveCursor(1))},e.prototype.clearFromPos=function(e){var t;for(t=e;t<100;t++)this.chars[t].reset()},e.prototype.clear=function(){this.clearFromPos(0),this.pos=0,this.currPenState.reset()},e.prototype.clearToEndOfRow=function(){this.clearFromPos(this.pos)},e.prototype.getTextString=function(){for(var e=[],t=!0,r=0;r<100;r++){var i=this.chars[r].uchar;" "!==i&&(t=!1),e.push(i)}return t?"":e.join("")},e.prototype.setPenStyles=function(e){this.currPenState.setStyles(e),this.chars[this.pos].setPenState(this.currPenState)},e}(),g=function(){function e(){this.rows=[];for(var e=0;e<15;e++)this.rows.push(new p);this.currRow=14,this.nrRollUpRows=null,this.reset()}return e.prototype.reset=function(){for(var e=0;e<15;e++)this.rows[e].clear();this.currRow=14},e.prototype.equals=function(e){for(var t=!0,r=0;r<15;r++)if(!this.rows[r].equals(e.rows[r])){t=!1;break}return t},e.prototype.copy=function(e){for(var t=0;t<15;t++)this.rows[t].copy(e.rows[t])},e.prototype.isEmpty=function(){for(var e=!0,t=0;t<15;t++)if(!this.rows[t].isEmpty()){e=!1;break}return e},e.prototype.backSpace=function(){this.rows[this.currRow].backSpace()},e.prototype.clearToEndOfRow=function(){this.rows[this.currRow].clearToEndOfRow()},e.prototype.insertChar=function(e){this.rows[this.currRow].insertChar(e)},e.prototype.setPen=function(e){this.rows[this.currRow].setPenStyles(e)},e.prototype.moveCursor=function(e){this.rows[this.currRow].moveCursor(e)},e.prototype.setCursor=function(e){c.log("INFO","setCursor: "+e),this.rows[this.currRow].setCursor(e)},e.prototype.setPAC=function(e){c.log("INFO","pacData = "+JSON.stringify(e));var t=e.row-1;if(this.nrRollUpRows&&t<this.nrRollUpRows-1&&(t=this.nrRollUpRows-1),this.nrRollUpRows&&this.currRow!==t){for(var r=0;r<15;r++)this.rows[r].clear();var i=this.currRow+1-this.nrRollUpRows,a=this.lastOutputScreen;if(a){var n=a.rows[i].cueStartTime;if(n&&n<c.time)for(r=0;r<this.nrRollUpRows;r++)this.rows[t-this.nrRollUpRows+r+1].copy(a.rows[i+r])}}this.currRow=t;var s=this.rows[this.currRow];if(null!==e.indent){var o=e.indent,l=Math.max(o-1,0);s.setCursor(e.indent),e.color=s.chars[l].penState.foreground}var u={foreground:e.color,underline:e.underline,italics:e.italics,background:"black",flash:!1};this.setPen(u)},e.prototype.setBkgData=function(e){c.log("INFO","bkgData = "+JSON.stringify(e)),this.backSpace(),this.setPen(e),this.insertChar(32)},e.prototype.setRollUpRows=function(e){this.nrRollUpRows=e},e.prototype.rollUp=function(){if(null!==this.nrRollUpRows){c.log("TEXT",this.getDisplayText());var e=this.currRow+1-this.nrRollUpRows,t=this.rows.splice(e,1)[0];t.clear(),this.rows.splice(this.currRow,0,t),c.log("INFO","Rolling up")}else c.log("DEBUG","roll_up but nrRollUpRows not set yet")},e.prototype.getDisplayText=function(e){e=e||!1;for(var t=[],r="",i=-1,a=0;a<15;a++){var n=this.rows[a].getTextString();n&&(i=a+1,e?t.push("Row "+i+": '"+n+"'"):t.push(n.trim()))}return 0<t.length&&(r=e?"["+t.join(" | ")+"]":t.join("\n")),r},e.prototype.getTextAndFormat=function(){return this.rows},e}(),v=function(){function e(e,t){this.chNr=e,this.outputFilter=t,this.mode=null,this.verbose=0,this.displayedMemory=new g,this.nonDisplayedMemory=new g,this.lastOutputScreen=new g,this.currRollUpRow=this.displayedMemory.rows[14],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null}return e.prototype.reset=function(){this.mode=null,this.displayedMemory.reset(),this.nonDisplayedMemory.reset(),this.lastOutputScreen.reset(),this.currRollUpRow=this.displayedMemory.rows[14],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null,this.lastCueEndTime=null},e.prototype.getHandler=function(){return this.outputFilter},e.prototype.setHandler=function(e){this.outputFilter=e},e.prototype.setPAC=function(e){this.writeScreen.setPAC(e)},e.prototype.setBkgData=function(e){this.writeScreen.setBkgData(e)},e.prototype.setMode=function(e){e!==this.mode&&(this.mode=e,c.log("INFO","MODE="+e),"MODE_POP-ON"===this.mode?this.writeScreen=this.nonDisplayedMemory:(this.writeScreen=this.displayedMemory,this.writeScreen.reset()),"MODE_ROLL-UP"!==this.mode&&(this.displayedMemory.nrRollUpRows=null,this.nonDisplayedMemory.nrRollUpRows=null),this.mode=e)},e.prototype.insertChars=function(e){for(var t=0;t<e.length;t++)this.writeScreen.insertChar(e[t]);var r=this.writeScreen===this.displayedMemory?"DISP":"NON_DISP";c.log("INFO",r+": "+this.writeScreen.getDisplayText(!0)),"MODE_PAINT-ON"!==this.mode&&"MODE_ROLL-UP"!==this.mode||(c.log("TEXT","DISPLAYED: "+this.displayedMemory.getDisplayText(!0)),this.outputDataUpdate())},e.prototype.ccRCL=function(){c.log("INFO","RCL - Resume Caption Loading"),this.setMode("MODE_POP-ON")},e.prototype.ccBS=function(){c.log("INFO","BS - BackSpace"),"MODE_TEXT"!==this.mode&&(this.writeScreen.backSpace(),this.writeScreen===this.displayedMemory&&this.outputDataUpdate())},e.prototype.ccAOF=function(){},e.prototype.ccAON=function(){},e.prototype.ccDER=function(){c.log("INFO","DER- Delete to End of Row"),this.writeScreen.clearToEndOfRow(),this.outputDataUpdate()},e.prototype.ccRU=function(e){c.log("INFO","RU("+e+") - Roll Up"),this.writeScreen=this.displayedMemory,this.setMode("MODE_ROLL-UP"),this.writeScreen.setRollUpRows(e)},e.prototype.ccFON=function(){c.log("INFO","FON - Flash On"),this.writeScreen.setPen({flash:!0})},e.prototype.ccRDC=function(){c.log("INFO","RDC - Resume Direct Captioning"),this.setMode("MODE_PAINT-ON")},e.prototype.ccTR=function(){c.log("INFO","TR"),this.setMode("MODE_TEXT")},e.prototype.ccRTD=function(){c.log("INFO","RTD"),this.setMode("MODE_TEXT")},e.prototype.ccEDM=function(){c.log("INFO","EDM - Erase Displayed Memory"),this.displayedMemory.reset(),this.outputDataUpdate(!0)},e.prototype.ccCR=function(){c.log("CR - Carriage Return"),this.writeScreen.rollUp(),this.outputDataUpdate(!0)},e.prototype.ccENM=function(){c.log("INFO","ENM - Erase Non-displayed Memory"),this.nonDisplayedMemory.reset()},e.prototype.ccEOC=function(){if(c.log("INFO","EOC - End Of Caption"),"MODE_POP-ON"===this.mode){var e=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory,this.nonDisplayedMemory=e,this.writeScreen=this.nonDisplayedMemory,c.log("TEXT","DISP: "+this.displayedMemory.getDisplayText())}this.outputDataUpdate(!0)},e.prototype.ccTO=function(e){c.log("INFO","TO("+e+") - Tab Offset"),this.writeScreen.moveCursor(e)},e.prototype.ccMIDROW=function(e){var t={flash:!1};if(t.underline=e%2==1,t.italics=46<=e,t.italics)t.foreground="white";else{var r=Math.floor(e/2)-16;t.foreground=["white","green","blue","cyan","red","yellow","magenta"][r]}c.log("INFO","MIDROW: "+JSON.stringify(t)),this.writeScreen.setPen(t)},e.prototype.outputDataUpdate=function(e){void 0===e&&(e=!1);var t=c.time;null!==t&&this.outputFilter&&(null!==this.cueStartTime||this.displayedMemory.isEmpty()?this.displayedMemory.equals(this.lastOutputScreen)||(this.outputFilter.newCue&&(this.outputFilter.newCue(this.cueStartTime,t,this.lastOutputScreen),!0===e&&this.outputFilter.dispatchCue&&this.outputFilter.dispatchCue()),this.cueStartTime=this.displayedMemory.isEmpty()?null:t):this.cueStartTime=t,this.lastOutputScreen.copy(this.displayedMemory))},e.prototype.cueSplitAtTime=function(e){this.outputFilter&&(this.displayedMemory.isEmpty()||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,e,this.displayedMemory),this.cueStartTime=e))},e}(),m=function(){function e(e,t,r){this.field=e||1,this.outputs=[t,r],this.channels=[new v(1,t),new v(2,r)],this.currChNr=-1,this.lastCmdA=null,this.lastCmdB=null,this.bufferedData=[],this.startTime=null,this.lastTime=null,this.dataCounters={padding:0,char:0,cmd:0,other:0}}return e.prototype.getHandler=function(e){return this.channels[e].getHandler()},e.prototype.setHandler=function(e,t){this.channels[e].setHandler(t)},e.prototype.addData=function(e,t){var r,i,a,n=!1;this.lastTime=e,c.setTime(e);for(var s=0;s<t.length;s+=2)if(i=127&t[s],a=127&t[s+1],0!==i||0!==a){if(c.log("DATA","["+f([t[s],t[s+1]])+"] -> ("+f([i,a])+")"),(r=this.parseCmd(i,a))||(r=this.parseMidrow(i,a)),r||(r=this.parsePAC(i,a)),r||(r=this.parseBackgroundAttributes(i,a)),!r)if(n=this.parseChars(i,a))if(this.currChNr&&0<=this.currChNr)this.channels[this.currChNr-1].insertChars(n);else c.log("WARNING","No channel found yet. TEXT-MODE?");r?this.dataCounters.cmd+=2:n?this.dataCounters.char+=2:(this.dataCounters.other+=2,c.log("WARNING","Couldn't parse cleaned data "+f([i,a])+" orig: "+f([t[s],t[s+1]])))}else this.dataCounters.padding+=2},e.prototype.parseCmd=function(e,t){var r=null;if(!((20===e||28===e)&&32<=t&&t<=47)&&!((23===e||31===e)&&33<=t&&t<=35))return!1;if(e===this.lastCmdA&&t===this.lastCmdB)return this.lastCmdA=null,this.lastCmdB=null,c.log("DEBUG","Repeated command ("+f([e,t])+") is dropped"),!0;r=20===e||23===e?1:2;var i=this.channels[r-1];return 20===e||28===e?32===t?i.ccRCL():33===t?i.ccBS():34===t?i.ccAOF():35===t?i.ccAON():36===t?i.ccDER():37===t?i.ccRU(2):38===t?i.ccRU(3):39===t?i.ccRU(4):40===t?i.ccFON():41===t?i.ccRDC():42===t?i.ccTR():43===t?i.ccRTD():44===t?i.ccEDM():45===t?i.ccCR():46===t?i.ccENM():47===t&&i.ccEOC():i.ccTO(t-32),this.lastCmdA=e,this.lastCmdB=t,this.currChNr=r,!0},e.prototype.parseMidrow=function(e,t){var r=null;return(17===e||25===e)&&32<=t&&t<=47&&((r=17===e?1:2)!==this.currChNr?(c.log("ERROR","Mismatch channel in midrow parsing"),!1):(this.channels[r-1].ccMIDROW(t),c.log("DEBUG","MIDROW ("+f([e,t])+")"),!0))},e.prototype.parsePAC=function(e,t){var r,i=null;if(!((17<=e&&e<=23||25<=e&&e<=31)&&64<=t&&t<=127)&&!((16===e||24===e)&&64<=t&&t<=95))return!1;if(e===this.lastCmdA&&t===this.lastCmdB)return this.lastCmdA=null,!(this.lastCmdB=null);r=e<=23?1:2,i=64<=t&&t<=95?1===r?n[e]:l[e]:1===r?s[e]:u[e];var a=this.interpretPAC(i,t);return this.channels[r-1].setPAC(a),this.lastCmdA=e,this.lastCmdB=t,this.currChNr=r,!0},e.prototype.interpretPAC=function(e,t){var r=t,i={color:null,italics:!1,indent:null,underline:!1,row:e};return r=95<t?t-96:t-64,i.underline=1==(1&r),r<=13?i.color=["white","green","blue","cyan","red","yellow","magenta","white"][Math.floor(r/2)]:r<=15?(i.italics=!0,i.color="white"):i.indent=4*Math.floor((r-16)/2),i},e.prototype.parseChars=function(e,t){var r=null,i=null,a=null;if(17<=(a=25<=e?(r=2,e-8):(r=1,e))&&a<=19){var n=t;n=17===a?t+80:18===a?t+112:t+144,c.log("INFO","Special char '"+o(n)+"' in channel "+r),i=[n]}else 32<=e&&e<=127&&(i=0===t?[e]:[e,t]);if(i){var s=f(i);c.log("DEBUG","Char codes =  "+s.join(",")),this.lastCmdA=null,this.lastCmdB=null}return i},e.prototype.parseBackgroundAttributes=function(e,t){var r,i,a;return((16===e||24===e)&&32<=t&&t<=47||(23===e||31===e)&&45<=t&&t<=47)&&(r={},16===e||24===e?(i=Math.floor((t-32)/2),r.background=d[i],t%2==1&&(r.background=r.background+"_semi")):45===t?r.background="transparent":(r.foreground="black",47===t&&(r.underline=!0)),a=e<24?1:2,this.channels[a-1].setBkgData(r),this.lastCmdA=null,!(this.lastCmdB=null))},e.prototype.reset=function(){for(var e=0;e<this.channels.length;e++)this.channels[e]&&this.channels[e].reset();this.lastCmdA=null,this.lastCmdB=null},e.prototype.cueSplitAtTime=function(e){for(var t=0;t<this.channels.length;t++)this.channels[t]&&this.channels[t].cueSplitAtTime(e)},e}();t.default=m},"./src/utils/codecs.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i={audio:{a3ds:!0,"ac-3":!0,"ac-4":!0,alac:!0,alaw:!0,dra1:!0,"dts+":!0,"dts-":!0,dtsc:!0,dtse:!0,dtsh:!0,"ec-3":!0,enca:!0,g719:!0,g726:!0,m4ae:!0,mha1:!0,mha2:!0,mhm1:!0,mhm2:!0,mlpa:!0,mp4a:!0,"raw ":!0,Opus:!0,samr:!0,sawb:!0,sawp:!0,sevc:!0,sqcp:!0,ssmv:!0,twos:!0,ulaw:!0},video:{avc1:!0,avc2:!0,avc3:!0,avc4:!0,avcp:!0,drac:!0,dvav:!0,dvhe:!0,encv:!0,hev1:!0,hvc1:!0,mjp2:!0,mp4v:!0,mvc1:!0,mvc2:!0,mvc3:!0,mvc4:!0,resv:!0,rv60:!0,s263:!0,svc1:!0,svc2:!0,"vc-1":!0,vp08:!0,vp09:!0}};t.isCodecType=function(e,t){var r=i[t];return!!r&&!0===r[e.slice(0,4)]},t.isCodecSupportedInMp4=function(e,t){return window.MediaSource.isTypeSupported((t||"video")+'/mp4;codecs="'+e+'"')}},"./src/utils/cues.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var f=r("./src/utils/vttparser.js");t.newCue=function(e,t,r,i){for(var a,n,s,o,l,u=window.VTTCue||window.TextTrackCue,d=0;d<i.rows.length;d++)if(s=!0,o=0,l="",!(a=i.rows[d]).isEmpty()){for(var c=0;c<a.chars.length;c++)a.chars[c].uchar.match(/\s/)&&s?o++:(l+=a.chars[c].uchar,s=!1);(a.cueStartTime=t)===r&&(r+=1e-4),n=new u(t,r,f.fixLineBreaks(l.trim())),16<=o?o--:o++,navigator.userAgent.match(/Firefox\//)?n.line=d+1:n.line=7<d?d-2:d+1,n.align="left",n.position=Math.max(0,Math.min(100,o/32*100+(navigator.userAgent.match(/Firefox\//)?50:0))),e.addCue(n)}}},"./src/utils/discontinuities.js":function(e,t,c){"use strict";(function(a){Object.defineProperty(t,"__esModule",{value:!0});var r=c("./src/utils/binary-search.js"),n=c("./src/utils/logger.js");function s(e,t){for(var r=null,i=0;i<e.length;i+=1){var a=e[i];if(a&&a.cc===t){r=a;break}}return r}function o(e,t,r){var i=!1;return t&&t.details&&r&&(r.endCC>r.startCC||e&&e.cc<r.startCC)&&(i=!0),i}function l(e,t){var r=e.fragments,i=t.fragments;if(i.length&&r.length){var a=s(r,i[0].cc);if(a&&(!a||a.startPTS))return a;n.logger.log("No frag in previous level to align on")}else n.logger.log("No fragments to align")}function u(r,e){e.fragments.forEach(function(e){if(e){var t=e.start+r;e.start=e.startPTS=t,e.endPTS=t+e.duration}}),e.PTSKnown=!0}function i(e,t,r){if(o(e,r,t)){var i=l(r.details,t);i&&(n.logger.log("Adjusting PTS using last level due to CC increase within current level"),u(i.start,t))}}function d(e,t){if(t&&t.fragments.length){if(!e.hasProgramDateTime||!t.hasProgramDateTime)return;var r=t.fragments[0].programDateTime,i=(e.fragments[0].programDateTime-r)/1e3+t.fragments[0].start;a.isFinite(i)&&(n.logger.log("adjusting PTS using programDateTime delta, sliding:"+i.toFixed(3)),u(i,e))}}t.findFirstFragWithCC=s,t.findFragWithCC=function(e,t){return r.default.search(e,function(e){return e.cc<t?1:e.cc>t?-1:0})},t.shouldAlignOnDiscontinuities=o,t.findDiscontinuousReferenceFrag=l,t.adjustPts=u,t.alignStream=function(e,t,r){i(e,r,t),!r.PTSKnown&&t&&d(r,t.details)},t.alignDiscontinuities=i,t.alignPDT=d}).call(this,c("./src/polyfills/number.js").Number)},"./src/utils/ewma-bandwidth-estimator.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=r("./src/utils/ewma.js"),i=function(){function e(e,t,r,i){this.hls=e,this.defaultEstimate_=i,this.minWeight_=.001,this.minDelayMs_=50,this.slow_=new a.default(t),this.fast_=new a.default(r)}return e.prototype.sample=function(e,t){var r=8e3*t/(e=Math.max(e,this.minDelayMs_)),i=e/1e3;this.fast_.sample(i,r),this.slow_.sample(i,r)},e.prototype.canEstimate=function(){var e=this.fast_;return e&&e.getTotalWeight()>=this.minWeight_},e.prototype.getEstimate=function(){return this.canEstimate()?Math.min(this.fast_.getEstimate(),this.slow_.getEstimate()):this.defaultEstimate_},e.prototype.destroy=function(){},e}();t.default=i},"./src/utils/ewma.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.alpha_=e?Math.exp(Math.log(.5)/e):0,this.estimate_=0,this.totalWeight_=0}return e.prototype.sample=function(e,t){var r=Math.pow(this.alpha_,e);this.estimate_=t*(1-r)+r*this.estimate_,this.totalWeight_+=e},e.prototype.getTotalWeight=function(){return this.totalWeight_},e.prototype.getEstimate=function(){if(this.alpha_){var e=1-Math.pow(this.alpha_,this.totalWeight_);return this.estimate_/e}return this.estimate_},e}();t.default=i},"./src/utils/get-self-scope.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSelfScope=function(){return"undefined"==typeof window?self:window}},"./src/utils/logger.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("./src/utils/get-self-scope.js");function s(){}var a={trace:s,debug:s,log:s,warn:s,info:s,error:s},o=a;var l=i.getSelfScope();function n(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];e.forEach(function(e){var a,n;o[e]=t[e]?t[e].bind(t):(a=e,(n=l.console[a])?function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];r[0]&&(r[0]=(e=a,t=r[0],t="["+e+"] > "+t)),n.apply(l.console,r)}:s)})}t.enableLogs=function(e){if(!0===e||"object"==typeof e){n(e,"debug","log","info","warn","error");try{o.log()}catch(e){o=a}}else o=a},t.logger=o},"./src/utils/mediakeys-helper.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="undefined"!=typeof window&&window.navigator&&window.navigator.requestMediaKeySystemAccess?window.navigator.requestMediaKeySystemAccess.bind(window.navigator):null;t.requestMediaKeySystemAccess=i},"./src/utils/mediasource-helper.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMediaSource=function(){if("undefined"!=typeof window)return window.MediaSource||window.WebKitMediaSource}},"./src/utils/output-filter.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.timelineController=e,this.trackName=t,this.startTime=null,this.endTime=null,this.screen=null}return e.prototype.dispatchCue=function(){null!==this.startTime&&(this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen),this.startTime=null)},e.prototype.newCue=function(e,t,r){(null===this.startTime||this.startTime>e)&&(this.startTime=e),this.endTime=t,this.screen=r,this.timelineController.createCaptionsTrack(this.trackName)},e}();t.default=i},"./src/utils/texttrack-utils.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sendAddTrackEvent=function(e,t){var r=null;try{r=new window.Event("addtrack")}catch(e){(r=document.createEvent("Event")).initEvent("addtrack",!1,!1)}r.track=e,t.dispatchEvent(r)},t.clearCurrentCues=function(e){if(e&&e.cues)for(;0<e.cues.length;)e.removeCue(e.cues[0])}},"./src/utils/time-ranges.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={toString:function(e){for(var t="",r=e.length,i=0;i<r;i++)t+="["+e.start(i).toFixed(3)+","+e.end(i).toFixed(3)+"]";return t}}},"./src/utils/vttcue.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if("undefined"!=typeof window&&window.VTTCue)return window.VTTCue;var _={"":!0,lr:!0,rl:!0},t={start:!0,middle:!0,end:!0,left:!0,right:!0};function T(e){return"string"==typeof e&&(!!t[e.toLowerCase()]&&e.toLowerCase())}function b(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)e[i]=r[i]}return e}function e(e,t,r){var i=this,a=function(){if("undefined"!=typeof navigator)return/MSIE\s8\.0/.test(navigator.userAgent)}(),n={};a?i=document.createElement("custom"):n.enumerable=!0,i.hasBeenReset=!1;var s="",o=!1,l=e,u=t,d=r,c=null,f="",h=!0,p="auto",g="start",v=50,m="middle",y=50,E="middle";if(Object.defineProperty(i,"id",b({},n,{get:function(){return s},set:function(e){s=""+e}})),Object.defineProperty(i,"pauseOnExit",b({},n,{get:function(){return o},set:function(e){o=!!e}})),Object.defineProperty(i,"startTime",b({},n,{get:function(){return l},set:function(e){if("number"!=typeof e)throw new TypeError("Start time must be set to a number.");l=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"endTime",b({},n,{get:function(){return u},set:function(e){if("number"!=typeof e)throw new TypeError("End time must be set to a number.");u=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"text",b({},n,{get:function(){return d},set:function(e){d=""+e,this.hasBeenReset=!0}})),Object.defineProperty(i,"region",b({},n,{get:function(){return c},set:function(e){c=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"vertical",b({},n,{get:function(){return f},set:function(e){var t,r="string"==typeof(t=e)&&!!_[t.toLowerCase()]&&t.toLowerCase();if(!1===r)throw new SyntaxError("An invalid or illegal string was specified.");f=r,this.hasBeenReset=!0}})),Object.defineProperty(i,"snapToLines",b({},n,{get:function(){return h},set:function(e){h=!!e,this.hasBeenReset=!0}})),Object.defineProperty(i,"line",b({},n,{get:function(){return p},set:function(e){if("number"!=typeof e&&"auto"!==e)throw new SyntaxError("An invalid number or illegal string was specified.");p=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"lineAlign",b({},n,{get:function(){return g},set:function(e){var t=T(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");g=t,this.hasBeenReset=!0}})),Object.defineProperty(i,"position",b({},n,{get:function(){return v},set:function(e){if(e<0||100<e)throw new Error("Position must be between 0 and 100.");v=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"positionAlign",b({},n,{get:function(){return m},set:function(e){var t=T(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");m=t,this.hasBeenReset=!0}})),Object.defineProperty(i,"size",b({},n,{get:function(){return y},set:function(e){if(e<0||100<e)throw new Error("Size must be between 0 and 100.");y=e,this.hasBeenReset=!0}})),Object.defineProperty(i,"align",b({},n,{get:function(){return E},set:function(e){var t=T(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");E=t,this.hasBeenReset=!0}})),i.displayState=void 0,a)return i}return e.prototype.getCueAsHTML=function(){return window.WebVTT.convertCueToDOMTree(window,this.text)},e}()},"./src/utils/vttparser.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r("./src/utils/vttcue.js"),i=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}};function a(){this.window=window,this.state="INITIAL",this.buffer="",this.decoder=new i,this.regionList=[]}function l(){this.values=Object.create(null)}function u(e,t,r,i){var a=i?e.split(i):[e];for(var n in a)if("string"==typeof a[n]){var s=a[n].split(r);if(2===s.length)t(s[0],s[1])}}l.prototype={set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},get:function(e,t,r){return r?this.has(e)?this.values[e]:t[r]:this.has(e)?this.values[e]:t},has:function(e){return e in this.values},alt:function(e,t,r){for(var i=0;i<r.length;++i)if(t===r[i]){this.set(e,t);break}},integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},percent:function(e,t){return!!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&0<=(t=parseFloat(t))&&t<=100)&&(this.set(e,t),!0)}};var d=new o.default(0,0,0),c="middle"===d.align?"middle":"center";function f(t,e,s){var r=t;function i(){var e=function(e){function t(e,t,r,i){return 3600*(0|e)+60*(0|t)+(0|r)+(0|i)/1e3}var r=e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return r?r[3]?t(r[1],r[2],r[3].replace(":",""),r[4]):59<r[1]?t(r[1],r[2],0,r[4]):t(0,r[1],r[2],r[4]):null}(t);if(null===e)throw new Error("Malformed timestamp: "+r);return t=t.replace(/^[^\sa-zA-Z-]+/,""),e}function a(){t=t.replace(/^\s+/,"")}if(a(),e.startTime=i(),a(),"--\x3e"!==t.substr(0,3))throw new Error("Malformed time stamp (time stamps must be separated by '--\x3e'): "+r);t=t.substr(3),a(),e.endTime=i(),a(),function(e,t){var n=new l;u(e,function(e,t){switch(e){case"region":for(var r=s.length-1;0<=r;r--)if(s[r].id===t){n.set(e,s[r].region);break}break;case"vertical":n.alt(e,t,["rl","lr"]);break;case"line":var i=t.split(","),a=i[0];n.integer(e,a),n.percent(e,a)&&n.set("snapToLines",!1),n.alt(e,a,["auto"]),2===i.length&&n.alt("lineAlign",i[1],["start",c,"end"]);break;case"position":i=t.split(","),n.percent(e,i[0]),2===i.length&&n.alt("positionAlign",i[1],["start",c,"end","line-left","line-right","auto"]);break;case"size":n.percent(e,t);break;case"align":n.alt(e,t,["start",c,"end","left","right"])}},/:/,/\s/),t.region=n.get("region",null),t.vertical=n.get("vertical","");var r=n.get("line","auto");"auto"===r&&-1===d.line&&(r=-1),t.line=r,t.lineAlign=n.get("lineAlign","start"),t.snapToLines=n.get("snapToLines",!0),t.size=n.get("size",100),t.align=n.get("align",c);var i=n.get("position","auto");"auto"===i&&50===d.position&&(i="start"===t.align||"left"===t.align?0:"end"===t.align||"right"===t.align?100:50),t.position=i}(t,e)}function h(e){return e.replace(/<br(?: \/)?>/gi,"\n")}t.fixLineBreaks=h,a.prototype={parse:function(e){var i=this;function t(){var e=i.buffer,t=0;for(e=h(e);t<e.length&&"\r"!==e[t]&&"\n"!==e[t];)++t;var r=e.substr(0,t);return"\r"===e[t]&&++t,"\n"===e[t]&&++t,i.buffer=e.substr(t),r}e&&(i.buffer+=i.decoder.decode(e,{stream:!0}));try{var r=void 0;if("INITIAL"===i.state){if(!/\r\n|\n/.test(i.buffer))return this;var a=(r=t()).match(/^(茂禄驴)?WEBVTT([ \t].*)?$/);if(!a||!a[0])throw new Error("Malformed WebVTT signature.");i.state="HEADER"}for(var n=!1;i.buffer;){if(!/\r\n|\n/.test(i.buffer))return this;switch(n?n=!1:r=t(),i.state){case"HEADER":/:/.test(r)?u(r,function(e,t){},/:/):r||(i.state="ID");continue;case"NOTE":r||(i.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(r)){i.state="NOTE";break}if(!r)continue;if(i.cue=new o.default(0,0,""),i.state="CUE",-1===r.indexOf("--\x3e")){i.cue.id=r;continue}case"CUE":try{f(r,i.cue,i.regionList)}catch(e){i.cue=null,i.state="BADCUE";continue}i.state="CUETEXT";continue;case"CUETEXT":var s=-1!==r.indexOf("--\x3e");if(!r||s&&(n=!0)){i.oncue&&i.oncue(i.cue),i.cue=null,i.state="ID";continue}i.cue.text&&(i.cue.text+="\n"),i.cue.text+=r;continue;case"BADCUE":r||(i.state="ID");continue}}}catch(e){"CUETEXT"===i.state&&i.cue&&i.oncue&&i.oncue(i.cue),i.cue=null,i.state="INITIAL"===i.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new Error("Malformed WebVTT signature.")}catch(e){throw e}return this.onflush&&this.onflush(),this}},t.default=a},"./src/utils/webvtt-parser.js":function(e,t,r){"use strict";(function(v){Object.defineProperty(t,"__esModule",{value:!0});var n=r("./src/utils/vttparser.js"),m=r("./src/demux/id3.js"),y=function(e,t,r){return e.substr(r||0,t.length)===t},E=function(e){for(var t=5381,r=e.length;r;)t=33*t^e.charCodeAt(--r);return(t>>>0).toString()},e={parse:function(e,s,o,l,t,r){var u,i=m.utf8ArrayToStr(new Uint8Array(e)).trim().replace(/\r\n|\n\r|\n|\r/g,"\n").split("\n"),d="00:00.000",c=0,f=0,h=0,a=[],p=!0,g=new n.default;g.oncue=function(e){var t=o[l],r=o.ccOffset;t&&t.new&&(void 0!==f?r=o.ccOffset=t.start:function(e,t,r){var i=e[t],a=e[i.prevCC];if(!a||!a.new&&i.new)return e.ccOffset=e.presentationOffset=i.start,i.new=!1;for(;a&&a.new;)e.ccOffset+=i.start-a.start,i.new=!1,a=e[(i=a).prevCC];e.presentationOffset=r}(o,l,h)),h&&(r=h-o.presentationOffset),e.startTime+=r-f,e.endTime+=r-f,e.id=E(e.startTime.toString())+E(e.endTime.toString())+E(e.text),e.text=decodeURIComponent(encodeURIComponent(e.text)),0<e.endTime&&a.push(e)},g.onparsingerror=function(e){u=e},g.onflush=function(){u&&r?r(u):t(a)},i.forEach(function(t){if(p){if(y(t,"X-TIMESTAMP-MAP=")){p=!1,t.substr(16).split(",").forEach(function(e){y(e,"LOCAL:")?d=e.substr(6):y(e,"MPEGTS:")&&(c=parseInt(e.substr(7)))});try{s+(9e4*o[l].start||0)<0&&(s+=8589934592),c-=s,e=d,r=parseInt(e.substr(-3)),i=parseInt(e.substr(-6,2)),a=parseInt(e.substr(-9,2)),n=9<e.length?parseInt(e.substr(0,e.indexOf(":"))):0,f=(v.isFinite(r)&&v.isFinite(i)&&v.isFinite(a)&&v.isFinite(n)?(r+=1e3*i,r+=6e4*a,r+=36e5*n):-1)/1e3,h=c/9e4,-1===f&&(u=new Error("Malformed X-TIMESTAMP-MAP: "+t))}catch(e){u=new Error("Malformed X-TIMESTAMP-MAP: "+t)}return}""===t&&(p=!1)}var e,r,i,a,n;g.parse(t+"\n")}),g.flush()}};t.default=e}).call(this,r("./src/polyfills/number.js").Number)},"./src/utils/xhr-loader.js":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var d=r("./src/utils/logger.js"),c=window.performance,a=window.XMLHttpRequest,i=function(){function e(e){e&&e.xhrSetup&&(this.xhrSetup=e.xhrSetup)}return e.prototype.destroy=function(){this.abort(),this.loader=null},e.prototype.abort=function(){var e=this.loader;e&&4!==e.readyState&&(this.stats.aborted=!0,e.abort()),window.clearTimeout(this.requestTimeout),this.requestTimeout=null,window.clearTimeout(this.retryTimeout),this.retryTimeout=null},e.prototype.load=function(e,t,r){this.context=e,this.config=t,this.callbacks=r,this.stats={trequest:c.now(),retry:0},this.retryDelay=t.retryDelay,this.loadInternal()},e.prototype.loadInternal=function(){var t,r=this.context;t=this.loader=new a;var e=this.stats;e.tfirst=0,e.loaded=0;var i=this.xhrSetup;try{if(i)try{i(t,r.url)}catch(e){t.open("GET",r.url,!0),i(t,r.url)}t.readyState||t.open("GET",r.url,!0)}catch(e){return void this.callbacks.onError({code:t.status,text:e.message},r,t)}r.rangeEnd&&t.setRequestHeader("Range","bytes="+r.rangeStart+"-"+(r.rangeEnd-1)),t.onreadystatechange=this.readystatechange.bind(this),t.onprogress=this.loadprogress.bind(this),t.responseType=r.responseType,this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),this.config.timeout),t.send()},e.prototype.readystatechange=function(e){var t=e.currentTarget,r=t.readyState,i=this.stats,a=this.context,n=this.config;if(!i.aborted&&2<=r)if(window.clearTimeout(this.requestTimeout),0===i.tfirst&&(i.tfirst=Math.max(c.now(),i.trequest)),4===r){var s=t.status;if(200<=s&&s<300){i.tload=Math.max(i.tfirst,c.now());var o=void 0,l=void 0;l="arraybuffer"===a.responseType?(o=t.response).byteLength:(o=t.responseText).length,i.loaded=i.total=l;var u={url:t.responseURL,data:o};this.callbacks.onSuccess(u,i,a,t)}else i.retry>=n.maxRetry||400<=s&&s<499?(d.logger.error(s+" while loading "+a.url),this.callbacks.onError({code:s,text:t.statusText},a,t)):(d.logger.warn(s+" while loading "+a.url+", retrying in "+this.retryDelay+"..."),this.destroy(),this.retryTimeout=window.setTimeout(this.loadInternal.bind(this),this.retryDelay),this.retryDelay=Math.min(2*this.retryDelay,n.maxRetryDelay),i.retry++)}else this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),n.timeout)},e.prototype.loadtimeout=function(){d.logger.warn("timeout while loading "+this.context.url),this.callbacks.onTimeout(this.stats,this.context,null)},e.prototype.loadprogress=function(e){var t=e.currentTarget,r=this.stats;r.loaded=e.loaded,e.lengthComputable&&(r.total=e.total);var i=this.callbacks.onProgress;i&&i(r,this.context,null,t)},e}();t.default=i}}).default},e.exports=i())}]);;
